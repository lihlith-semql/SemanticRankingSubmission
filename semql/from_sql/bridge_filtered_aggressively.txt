{"index": 87, "beams": [{"orig_question": "How many continents are there?", "inferred_code": "SELECT COUNT(*) FROM continents", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM continents", "logos": "Find the number of continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -7.291956901550293, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM continents", "score": -7.516194820404053, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM continents", "logos": "Find the number of continents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -7.832127571105957, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -7.871365070343018, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT COUNT(*) FROM continents ORDER BY continents.Continent", "score": -8.079309463500977, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM continents ORDER BY continents.Continent", "logos": "Find the number of continents.\nSort results first by the continent of continents in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.430919647216797, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.676907539367676, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.787812232971191, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.976128578186035, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT SUM(continents.Continent) FROM continents", "score": -9.404534339904785, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(continents.Continent) FROM continents", "logos": "Find the sum of continents of continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -9.529059410095215, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -9.590599060058594, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of continents.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CONTINENTS"}
{"index": 88, "beams": [{"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM continents", "logos": "Find the number of continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -7.7616448402404785, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM continents", "score": -7.846981048583984, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM continents", "logos": "Find the number of continents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents ORDER BY continents.Continent", "score": -7.892343044281006, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM continents ORDER BY continents.Continent", "logos": "Find the number of continents.\nSort results first by the continent of continents in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -8.388310432434082, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -8.909480094909668, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT SUM(continents.Continent) FROM continents", "score": -9.36870288848877, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(continents.Continent) FROM continents", "logos": "Find the sum of continents of continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -9.601141929626465, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -9.704046249389648, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of continents.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CONTINENTS"}
{"index": 91, "beams": [{"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) FROM countries", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countries", "logos": "Find the number of countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -7.3115105628967285, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM countries", "score": -7.4732842445373535, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM countries", "logos": "Find the number of countries.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -7.53261137008667, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -7.555185317993164, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.530613899230957, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.621058464050293, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.724148750305176, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.748512268066406, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) FROM countries AS 0", "score": -8.80543041229248, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": true, "parse_error": true, "implicit_inferred_code": "SELECT COUNT(*) FROM countries AS 0", "logos": "Find the number of countries.", "logos_error": false, "implicit_parse_error": true}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -9.460039138793945, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -9.525529861450195, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of countries.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM COUNTRIES"}
{"index": 92, "beams": [{"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) FROM countries", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countries", "logos": "Find the number of countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -7.1315598487854, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -7.620875358581543, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -7.668680667877197, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM countries", "score": -7.98726749420166, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM countries", "logos": "Find the number of countries.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) FROM countries ORDER BY countries.CountryName", "score": -8.12243366241455, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countries ORDER BY countries.CountryName", "logos": "Find the number of countries.\nSort results first by the countryname of countries in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.523938179016113, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.658432960510254, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.712503433227539, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.739093780517578, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.860655784606934, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of countries.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM COUNTRIES"}
{"index": 95, "beams": [{"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -0.00018191523849964142, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -2.961756944656372, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY MIN(cars_data.Horsepower) LIMIT 1", "score": -4.692885875701904, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY MIN(cars_data.Horsepower) LIMIT 1", "logos": "Find the horsepowers of cars data grouped by their horsepowers.\nSort results first by the minimum horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -4.744735240936279, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -4.86749267578125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "logos": "Find the mpgs of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.633941650390625, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower < cars_data.MPG LIMIT 1", "score": -5.689480304718018, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower < cars_data.MPG LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.726852893829346, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower < cars_data.Cylinders LIMIT 1", "score": -5.80606746673584, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower < cars_data.Cylinders LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.970090389251709, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.990005016326904, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -6.003685474395752, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "logos": "Find the cylinders of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -6.108670711517334, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Cylinders LIMIT 1", "score": -6.150160789489746, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Cylinders LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the cylinders of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of car names associated with cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}
{"index": 96, "beams": [{"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -0.1361255794763565, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -2.199432611465454, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "logos": "Find the mpgs of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -3.4050774574279785, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "logos": "Find the cylinders of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -4.6509294509887695, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT * FROM continents", "score": -4.910742282867432, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Id FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -5.3747663497924805, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Id FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "logos": "Find the ids of cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1", "score": -5.63499116897583, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of car names associated with cars data.\nSort results first by the horsepower of cars data in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}
{"index": 99, "beams": [{"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -2.3046834468841553, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -2.824237823486328, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.13959002494812, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.2070531845092773, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.2611136436462402, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.3501129150390625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.4874539375305176, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.5333924293518066, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.5493664741516113, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the makers of car makers associated with model list, and for model list associated with car names, and for car names associated with cars data whose year is 1970.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}
{"index": 100, "beams": [{"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -2.419294834136963, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.1044023036956787, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.355962038040161, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.3611981868743896, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.386733055114746, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.405379295349121, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.4876837730407715, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.565185785293579, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.576805591583252, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.6405534744262695, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the makers of car makers associated with model list, and for model list associated with car names, and for car names associated with cars data whose year is 1970.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}
{"index": 103, "beams": [{"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -3.7133846282958984, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list, car_names WHERE model_list.Model = car_names.Model AND car_names.Make > 1980", "logos": "Find the models of model list associated with car names whose make is greater than 1980.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -3.7863659858703613, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list, car_names WHERE model_list.Model = car_names.Model AND car_names.Make > 1980", "logos": "Find the models of model list associated with car names whose make is greater than 1980.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > \"after 1980\"", "score": -4.1062750816345215, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list, car_names WHERE model_list.Model = car_names.Model AND car_names.Make > \"after 1980\"", "logos": "Find the models of model list associated with car names whose make is greater than after 1980.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.106478214263916, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.243335723876953, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.356201648712158, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make LIKE \"1980 %\"", "score": -4.420217514038086, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list, car_names WHERE model_list.Model = car_names.Model AND car_names.Make LIKE \"1980 %\"", "logos": "Find the models of model list associated with car names whose make is like 1980 %.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -4.532747268676758, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT car_names.Model FROM model_list, car_names WHERE model_list.Model = car_names.Model AND car_names.Make > 1980", "logos": "Find the models of car names whose make is greater than 1980 for car names associated with model list.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.554187774658203, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -4.640380382537842, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT car_names.Model FROM model_list, car_names WHERE model_list.Model = car_names.Model AND car_names.Make > 1980", "logos": "Find the models of car names whose make is greater than 1980 for car names associated with model list.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.727887153625488, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.757996082305908, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON car_names.Model = model_list.Model WHERE car_names.Make > 1980", "score": -4.790756702423096, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list, car_names WHERE car_names.Model = model_list.Model AND car_names.Make > 1980", "logos": "Find the models of model list associated with car names whose make is greater than 1980.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.83681058883667, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.859866619110107, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of model list associated with car names, and for car names associated with cars data whose year is greater than 1980.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}
{"index": 104, "beams": [{"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -2.6708343029022217, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker LIKE \"% 1980 %\"", "score": -3.1687393188476562, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker LIKE \"% 1980 %\"", "logos": "Find the models of model list whose maker is like % 1980 %.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.347339630126953, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.3666625022888184, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.5540173053741455, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.7920780181884766, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker LIKE \"1980 %\"", "score": -3.857045888900757, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker LIKE \"1980 %\"", "logos": "Find the models of model list whose maker is like 1980 %.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.141607284545898, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker > 1980", "score": -4.422467231750488, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker > 1980", "logos": "Find the models of model list whose maker is greater than 1980.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.795156955718994, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker = 1980", "score": -4.898097038269043, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker = 1980", "logos": "Find the models of model list whose maker is 1980.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.920012950897217, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.086368083953857, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of model list associated with car names, and for car names associated with cars data whose year is greater than 1980.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}
{"index": 105, "beams": [{"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -1.9226796627044678, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT countries.Continent, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent", "score": -3.2635462284088135, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  countries.Continent,  COUNT(*) FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.Continent", "logos": "Find the continents and number of countries and the number of car makers associated with these countries grouped by the continents of countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -3.6282269954681396, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -3.7325103282928467, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -4.446287631988525, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -4.499276161193848, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -4.5023674964904785, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -4.50469970703125, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -4.531161785125732, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -4.8836588859558105, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -5.043025016784668, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "inferred_code": "SELECT * FROM continents", "score": -5.3164873123168945, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of countries and the continents and number of continents associated with these countries, also the number of car makers associated with these countries grouped by the continents of continents.", "gold_logos_error": false, "gold_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent"}
{"index": 106, "beams": [{"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT countries.Continent, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent", "score": -2.3813281059265137, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  countries.Continent,  COUNT(*) FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.Continent", "logos": "Find the continents and number of countries and the number of car makers associated with these countries grouped by the continents of countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -2.5814156532287598, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT countries.Continent, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent", "score": -3.697878360748291, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  countries.Continent,  COUNT(*) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId GROUP BY countries.Continent", "logos": "Find the continents and number of countries and the number of car makers associated with these countries grouped by the continents of countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -3.965135097503662, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.359488487243652, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.451633930206299, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT countries.Continent, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 1", "score": -4.533614635467529, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  countries.Continent,  COUNT(*) FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 1", "logos": "Find the number, continents and number of countries and the number and number of car makers associated with these countries grouped by the continents of countries.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.6027703285217285, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.754232406616211, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.758638858795166, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.767541408538818, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.7710347175598145, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.780776500701904, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of each continent and how many car makers are there in each one?", "inferred_code": "SELECT * FROM continents", "score": -4.898922443389893, "correct_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of countries and the continents and number of continents associated with these countries, also the number of car makers associated with these countries grouped by the continents of continents.", "gold_logos_error": false, "gold_code": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent"}
{"index": 111, "beams": [{"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = \"amc hornet sportabout (sw\"", "score": -2.6327614784240723, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Accelerate FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Make = \"amc hornet sportabout (sw\"", "logos": "Find the accelerates of cars data associated with car names whose make is amc hornet sportabout (sw.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = \"amc hornet sportabout (sw sw\"", "score": -2.829586982727051, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Accelerate FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Make = \"amc hornet sportabout (sw sw\"", "logos": "Find the accelerates of cars data associated with car names whose make is amc hornet sportabout (sw sw.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = \"amc hornet sportabout (sw)\"", "score": -3.1487009525299072, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Accelerate FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Make = \"amc hornet sportabout (sw)\"", "logos": "Find the accelerates of cars data associated with car names whose make is amc hornet sportabout (sw).", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -3.4838085174560547, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -4.354617118835449, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -4.380729675292969, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the accelerates of cars data associated with car names whose make is amc hornet sportabout (sw).", "gold_logos_error": false, "gold_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}
{"index": 112, "beams": [{"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -3.889164447784424, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "score": -3.979125499725342, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "logos": "Find everything about car names whose make is amc hornet sportabout (sw sw).", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -4.022599220275879, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw)\"", "score": -4.251463890075684, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw)\"", "logos": "Find everything about car names whose make is amc hornet sportabout (sw) and model is amc hornet sportabout (sw).", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw)\"", "score": -4.360431671142578, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw)\"", "logos": "Find everything about car names whose make is amc hornet sportabout (sw) and model is amc hornet sportabout (sw sw).", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw sw)\"", "score": -5.025534629821777, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw sw)\"", "logos": "Find everything about car names whose make is amc hornet sportabout (sw) and model is amc hornet sportabout (sw sw sw).", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the accelerates of cars data associated with car names whose make is amc hornet sportabout (sw).", "gold_logos_error": false, "gold_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}
{"index": 113, "beams": [{"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\"", "score": -0.00023803385556675494, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = \"france\"", "logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE countries.CountryName = \"france\"", "score": -3.2128937244415283, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries, continents WHERE  countries.Continent = continents.ContId  AND car_makers.Country = countries.CountryId  AND countries.CountryName = \"france\"", "logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries, also the number of continents associated with these countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\" AND countries.Continent = \"france\"", "score": -3.605031728744507, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries WHERE  car_makers.Country = countries.CountryId  AND countries.CountryName = \"france\"  AND countries.Continent = \"france\"", "logos": "Find the number of car makers and the number of countries whose countryname is france and continent is france for countries associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\" AND car_makers.Country = \"france\"", "score": -3.7398054599761963, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries WHERE  car_makers.Country = countries.CountryId  AND countries.CountryName = \"france\"  AND car_makers.Country = \"france\"", "logos": "Find the number of countries whose countryname is france and the number of car makers whose country is france for car makers associated with these countries.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\"", "score": -3.91021990776062, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = \"france\"", "logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries.\nReturn only unique records.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.092915058135986, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.26344633102417, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.2880120277404785, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.330225944519043, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.452691555023193, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.481133460998535, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.490850925445557, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.569299221038818, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.610018253326416, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.638680934906006, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}
{"index": 114, "beams": [{"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\"", "score": -7.752325473120436e-06, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = \"France\"", "logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = \"France\"", "score": -2.938812494277954, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countries, car_makers WHERE countries.CountryId = car_makers.Country AND countries.CountryName = \"France\"", "logos": "Find the number of car makers and the number of countries whose countryname is france for countries associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE countries.CountryName = \"France\"", "score": -3.1611924171447754, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries, continents WHERE  countries.Continent = continents.ContId  AND car_makers.Country = countries.CountryId  AND countries.CountryName = \"France\"", "logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries, also the number of continents associated with these countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\" AND car_makers.Maker = \"France\"", "score": -3.4953107833862305, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries WHERE  car_makers.Country = countries.CountryId  AND countries.CountryName = \"France\"  AND car_makers.Maker = \"France\"", "logos": "Find the number of countries whose countryname is france and the number of car makers whose maker is france for car makers associated with these countries.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\" AND car_makers.Country = \"France\"", "score": -3.6247525215148926, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries WHERE  car_makers.Country = countries.CountryId  AND countries.CountryName = \"France\"  AND car_makers.Country = \"France\"", "logos": "Find the number of countries whose countryname is france and the number of car makers whose country is france for car makers associated with these countries.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -3.746640682220459, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\"", "score": -3.9278767108917236, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName = \"France\"", "logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries.\nReturn only unique records.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.140201568603516, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.2176337242126465, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.3494768142700195, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.4438347816467285, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.500499725341797, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.5097455978393555, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName LIKE \"France\"", "score": -4.642597675323486, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, countries WHERE car_makers.Country = countries.CountryId AND countries.CountryName LIKE \"France\"", "logos": "Find the number of countries whose countryname is like france and the number of car makers associated with these countries.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.679065704345703, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of countries whose countryname is france and the number of car makers associated with these countries.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}
{"index": 115, "beams": [{"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\"", "score": -8.195891859941185e-05, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\"", "logos": "Find the number of countries whose countryname is usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -2.2953028678894043, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -3.197758436203003, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -3.5252344608306885, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -4.06455135345459, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -4.454626083374023, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\"", "score": -5.088419437408447, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\"", "logos": "Find the number of countries whose countryname is usa.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.2264723777771, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.240957260131836, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.265318393707275, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.325707912445068, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.496725559234619, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of car makers and the number of model list associated with these car makers, also the number of countries whose countryname is usa for countries associated with these car makers.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}
{"index": 116, "beams": [{"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"VALUE VALUE\"", "score": -2.214221239089966, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"VALUE VALUE\"", "logos": "Find the number of countries whose countryname is value value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT * FROM continents", "score": -2.2585930824279785, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT * FROM continents", "score": -2.3356473445892334, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT * FROM continents", "score": -2.552602767944336, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"United VALUE\"", "score": -2.834479570388794, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"United VALUE\"", "logos": "Find the number of countries whose countryname is united value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM continents WHERE continents.Continent = \"VALUE VALUE\"", "score": -3.0265579223632812, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM continents WHERE continents.Continent = \"VALUE VALUE\"", "logos": "Find the number of continents whose continent is value value.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of car makers and the number of model list associated with these car makers, also the number of countries whose countryname is usa for countries associated with these car makers.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}
{"index": 117, "beams": [{"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -0.09767207503318787, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4", "logos": "Find the average of horsepower of cars data whose cylinders is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -0.460622638463974, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4", "logos": "Find the average of mpg of cars data whose cylinders is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "score": -4.270905017852783, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "logos": "Find the average of horsepower of cars data whose cylinders is like 4 : %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders <= 4", "score": -4.489478588104248, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders <= 4", "logos": "Find the average of horsepower of cars data whose cylinders is less than or equal to 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders >= 4", "score": -4.639925479888916, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders >= 4", "logos": "Find the average of horsepower of cars data whose cylinders is greater than or equal to 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 %\"", "score": -4.657232284545898, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 %\"", "logos": "Find the average of horsepower of cars data whose cylinders is like 4 %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.934581756591797, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "score": -4.976866722106934, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "logos": "Find the average of mpg of cars data whose cylinders is like 4 : %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "score": -5.004710674285889, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "logos": "Find the average of horsepower of cars data whose mpg is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders >= 4", "score": -5.005251407623291, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders >= 4", "logos": "Find the average of mpg of cars data whose cylinders is greater than or equal to 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders <= 4", "score": -5.0196123123168945, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders <= 4", "logos": "Find the average of mpg of cars data whose cylinders is less than or equal to 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.MPG = 4", "score": -5.084888458251953, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.MPG = 4", "logos": "Find the average of mpg of cars data whose mpg is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -5.251007556915283, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 4", "logos": "Find the average of cylinder of cars data whose cylinders is 4.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of mpg of cars data whose cylinders is 4.", "gold_logos_error": false, "gold_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}
{"index": 118, "beams": [{"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -0.0052492753602564335, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4", "logos": "Find the average of horsepower of cars data whose cylinders is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "score": -1.2611223459243774, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "logos": "Find the average of horsepower of cars data whose mpg is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "score": -2.314445734024048, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "logos": "Find the average of horsepower of cars data whose mpg is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4 AND cars_data.Cylinders = 4", "score": -4.579904079437256, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4 AND cars_data.Cylinders = 4", "logos": "Find the average of horsepower of cars data whose mpg is 4 and cylinders is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.586221694946289, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.593893051147461, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "score": -5.007563591003418, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "logos": "Find the average of horsepower of cars data whose cylinders is like 4 : %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = \"with 4\"", "score": -5.130006790161133, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = \"with 4\"", "logos": "Find the average of horsepower of cars data whose mpg is with 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders <= 4", "score": -5.178349018096924, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders <= 4", "logos": "Find the average of horsepower of cars data whose cylinders is less than or equal to 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.246155261993408, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.64150857925415, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Id = 4", "score": -6.059383392333984, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Id = 4", "logos": "Find the average of horsepower of cars data whose id is 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders >= 4", "score": -6.114271640777588, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders >= 4", "logos": "Find the average of horsepower of cars data whose cylinders is greater than or equal to 4.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of mpg of cars data whose cylinders is 4.", "gold_logos_error": false, "gold_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}
{"index": 119, "beams": [{"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders LIMIT 1", "score": -0.15799041092395782, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders LIMIT 1", "logos": "Find the weights of cars data whose cylinders is 8.\nSort results first by the cylinders of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "score": -0.5265297889709473, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "logos": "Find the minimum of weight of cars data whose cylinders is 8 and year is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight LIMIT 1", "score": -0.5512807965278625, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight LIMIT 1", "logos": "Find the weights of cars data whose cylinders is 8.\nSort results first by the weight of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders DESC LIMIT 1", "score": -0.7897455096244812, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders DESC LIMIT 1", "logos": "Find the weights of cars data whose cylinders is 8.\nSort results first by the cylinders of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders LIMIT 1974", "score": -1.967226266860962, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders LIMIT 1974", "logos": "Find the weights of cars data whose cylinders is 8.\nSort results first by the cylinders of cars data in ascending order.\nLimit the results to top 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight ASC LIMIT 1", "score": -2.022749900817871, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight ASC LIMIT 1", "logos": "Find the weights of cars data whose cylinders is 8.\nSort results first by the weight of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8", "score": -2.0280590057373047, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "score": -2.1591572761535645, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "logos": "Find the weights of cars data whose cylinders is 8 and year is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight DESC LIMIT 1", "score": -2.2450382709503174, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight DESC LIMIT 1", "logos": "Find the weights of cars data whose cylinders is 8.\nSort results first by the weight of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 8", "score": -2.3525915145874023, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 8 and year is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 1974", "score": -2.446901798248291, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 1974", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and year is 1974.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the minimum of weight of cars data whose cylinders is 8 and year is 1974.", "gold_logos_error": false, "gold_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"index": 120, "beams": [{"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "score": -0.12527801096439362, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "logos": "Find the minimum of weight of cars data whose cylinders is 8 and year is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 8", "score": -0.5204443335533142, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 8 and year is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 8", "score": -0.5629496574401855, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and year is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 1974", "score": -0.9445576071739197, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 1974", "logos": "Find the minimum of weight of cars data whose cylinders is 8 and cylinders is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.MPG = 8", "score": -1.0580251216888428, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.MPG = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and mpg is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 8", "score": -1.1367437839508057, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and cylinders is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8", "score": -1.302892804145813, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT * FROM continents", "score": -1.3067653179168701, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 1974", "score": -1.3553903102874756, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 1974", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and year is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 1974", "score": -1.4826912879943848, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 1974", "logos": "Find the minimum of weight of cars data whose year is 8 and year is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 8", "score": -1.5496478080749512, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 8 and cylinders is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 1974", "score": -1.5750043392181396, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 1974", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and cylinders is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Horsepower = 8", "score": -1.6296266317367554, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Horsepower = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and horsepower is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Cylinders = 1974", "score": -1.6526281833648682, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Cylinders = 1974", "logos": "Find the minimum of weight of cars data whose year is 8 and cylinders is 1974.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 8", "score": -1.733515739440918, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 8", "logos": "Find the minimum of weight of cars data whose year is 8 and year is 8.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Id = 8", "score": -1.8343510627746582, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Id = 8", "logos": "Find the minimum of weight of cars data whose cylinders is 1974 and id is 8.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the minimum of weight of cars data whose cylinders is 8 and year is 1974.", "gold_logos_error": false, "gold_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"index": 121, "beams": [{"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.530071258544922, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "score": -8.29935073852539, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "logos": "Find the makers and models of model list.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.248181343078613, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.353439331054688, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -11.118500709533691, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -11.98186206817627, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the makers and models of model list.", "gold_logos_error": false, "gold_code": "SELECT Maker ,  Model FROM MODEL_LIST"}
{"index": 122, "beams": [{"orig_question": "What are the makers and models?", "inferred_code": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker", "score": -5.4410881996154785, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  car_makers.Maker,  model_list.Model FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker", "logos": "Find the models of model list and the makers of car makers associated with these model list.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT car_makers.Maker, model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id", "score": -5.523560047149658, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  car_makers.Maker,  model_list.Model FROM model_list, car_makers WHERE model_list.Maker = car_makers.Id", "logos": "Find the makers of car makers and the models of model list associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -6.462263584136963, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -6.654947280883789, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -6.971635341644287, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id", "score": -7.236696720123291, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  car_makers.Maker,  model_list.Model FROM car_makers, model_list WHERE model_list.Maker = car_makers.Id", "logos": "Find the models of model list and the makers of car makers associated with these model list.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.740418910980225, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.783396244049072, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.80366325378418, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "score": -7.945985317230225, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "logos": "Find the makers and models of model list.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.977357387542725, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -8.688998222351074, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -8.855775833129883, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.045021057128906, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.423761367797852, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -11.370327949523926, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the makers and models of model list.", "gold_logos_error": false, "gold_code": "SELECT Maker ,  Model FROM MODEL_LIST"}
{"index": 125, "beams": [{"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150", "score": -1.9969519371443312e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150", "logos": "Find the number of cars data whose horsepower is greater than 150.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -4.8779616355896, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders > 150", "score": -5.013363361358643, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders > 150", "logos": "Find the number of cars data whose horsepower is greater than 150 and cylinders is greater than 150.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.6899333000183105, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 ORDER BY cars_data.Horsepower", "score": -6.010568618774414, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 ORDER BY cars_data.Horsepower", "logos": "Find the number of cars data whose horsepower is greater than 150.\nSort results first by the horsepower of cars data in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.022346019744873, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 1500", "score": -6.059757709503174, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 1500", "logos": "Find the number of cars data whose horsepower is greater than 1500.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.132729530334473, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.164302349090576, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.168044567108154, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose horsepower is greater than 150.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}
{"index": 126, "beams": [{"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150", "score": -3.794210101659701e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150", "logos": "Find the number of cars data whose horsepower is greater than 150.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders > 150", "score": -4.600048542022705, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders > 150", "logos": "Find the number of cars data whose horsepower is greater than 150 and cylinders is greater than 150.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -4.900256156921387, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders < 150", "score": -4.992789268493652, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders < 150", "logos": "Find the number of cars data whose horsepower is greater than 150 and cylinders is less than 150.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.561070442199707, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.855607032775879, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.870899677276611, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 1500", "score": -6.114899635314941, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 1500", "logos": "Find the number of cars data whose horsepower is greater than 1500.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.116250038146973, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.127025127410889, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower = 150", "score": -6.37589168548584, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower = 150", "logos": "Find the number of cars data whose horsepower is 150.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose horsepower is greater than 150.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}
{"index": 127, "beams": [{"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -5.092259016237222e-06, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data WHERE cars_data.Year = \"VALUE\" GROUP BY cars_data.Year", "score": -3.745140790939331, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data WHERE cars_data.Year = \"VALUE\" GROUP BY cars_data.Year", "logos": "Find the average of weight and years of cars data whose year is value grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT cars_data.Year, AVG(cars_data.Weight) FROM cars_data WHERE cars_data.Year = \"VALUE\" GROUP BY cars_data.Year", "score": -3.9585659503936768, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Year, AVG(cars_data.Weight) FROM cars_data WHERE cars_data.Year = \"VALUE\" GROUP BY cars_data.Year", "logos": "Find the years and average of weight of cars data whose year is value grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year HAVING AVG(cars_data.Weight) >= 1", "score": -4.168872356414795, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year HAVING AVG(cars_data.Weight) >= 1", "logos": "Find the average of weight and years of cars data grouped by their years.\nConsider only groups whose averagecars datum  of weight is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year HAVING COUNT(*) >= 1", "score": -4.297584533691406, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year HAVING COUNT(*) >= 1", "logos": "Find the number, average of weight and years of cars data grouped by their years.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT AVG(cars_data.Weight) FROM cars_data GROUP BY cars_data.Year", "score": -4.340458393096924, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight) FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT * FROM continents", "score": -4.604691505432129, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT cars_data.Year, AVG(cars_data.Weight) FROM cars_data GROUP BY cars_data.Year", "score": -4.685663223266602, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Year, AVG(cars_data.Weight) FROM cars_data GROUP BY cars_data.Year", "logos": "Find the years and average of weight of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT * FROM continents", "score": -4.806922435760498, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT * FROM continents", "score": -4.83064603805542, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT * FROM continents", "score": -5.031261920928955, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT * FROM continents", "score": -5.3142266273498535, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight of cars each year?", "inferred_code": "SELECT * FROM continents", "score": -5.575753688812256, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of weight and years of cars data grouped by their years.", "gold_logos_error": false, "gold_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR"}
{"index": 128, "beams": [{"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -0.19179940223693848, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -0.212421715259552, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Year) FROM cars_data GROUP BY cars_data.Year", "score": -2.288193464279175, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Year) FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight and average of year of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Accelerate), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -2.7822461128234863, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Accelerate), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, average of accelerate and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Year), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -3.2820277214050293, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Year), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, average of year and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Cylinders), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -3.36000394821167, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Cylinders), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, average of cylinder and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Edispl), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -3.387617349624634, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Edispl), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, average of edispl and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), MAX(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -3.6051318645477295, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), MAX(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, maximum of weight and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.MPG), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -3.8079121112823486, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.MPG), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, average of mpg and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Horsepower), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -3.8475122451782227, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Horsepower), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, average of horsepower and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Id), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -4.063319206237793, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), AVG(cars_data.Id), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, average and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), MIN(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -4.084596633911133, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), MIN(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight, minimum of weight and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data WHERE cars_data.Year = \"VALUE\" GROUP BY cars_data.Year", "score": -4.249194145202637, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data WHERE cars_data.Year = \"VALUE\" GROUP BY cars_data.Year", "logos": "Find the average of weight and years of cars data whose year is value grouped by their years.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average weight and year for each year?", "inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -4.9523420333862305, "correct_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "logos": "Find the average of weight and years of cars data grouped by their years.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of weight and years of cars data grouped by their years.", "gold_logos_error": false, "gold_code": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR"}
{"index": 129, "beams": [{"orig_question": "Which countries in europe have at least 3 car manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.4306280612945557, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which countries in europe have at least 3 car manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.7253167629241943, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which countries in europe have at least 3 car manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.892932176589966, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which countries in europe have at least 3 car manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.8963911533355713, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which countries in europe have at least 3 car manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -3.1163461208343506, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which countries in europe have at least 3 car manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -3.1284878253936768, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which countries in europe have at least 3 car manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -3.192568063735962, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number and countrynames of countries and the number of continents whose continent is europe for continents associated with these countries, also the number of car makers associated with these countries grouped by the countrynames of countries.\nConsider only groups whose group size is not less than 3.\n", "gold_logos_error": false, "gold_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3"}
{"index": 130, "beams": [{"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(*) >= 3", "score": -0.8178163170814514, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countries.CountryName FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(*) >= 3", "logos": "Find the number and countrynames of countries and the number of car makers associated with these countries grouped by the countrynames of countries.\nConsider only groups whose group size is not less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.3874127864837646, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.590365409851074, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.722825050354004, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.762894868850708, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.822877883911133, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(*) >= \"European\"", "score": -2.8477938175201416, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countries.CountryName FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(*) >= \"European\"", "logos": "Find the number and countrynames of countries and the number of car makers associated with these countries grouped by the countrynames of countries.\nConsider only groups whose group size is not less than european.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "inferred_code": "SELECT * FROM continents", "score": -2.855731725692749, "correct_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number and countrynames of countries and the number of continents whose continent is europe for continents associated with these countries, also the number of car makers associated with these countries grouped by the countrynames of countries.\nConsider only groups whose group size is not less than 3.\n", "gold_logos_error": false, "gold_code": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3"}
{"index": 131, "beams": [{"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -0.007672721520066261, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -0.935111403465271, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -0.9555193185806274, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.2344446182250977, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.396161437034607, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.881677269935608, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.9421378374099731, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.9533963203430176, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.0659050941467285, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.107313871383667, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.123568296432495, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.3056998252868652, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.4373674392700195, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.462261915206909, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.751944065093994, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.9324581623077393, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the makes of car names and the horsepowers of cars data whose cylinders is 3 for cars data associated with these car names.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 1.\n", "gold_logos_error": false, "gold_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}
{"index": 132, "beams": [{"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -0.2896858751773834, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -0.7035402059555054, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.0678576231002808, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.4641211032867432, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.6600061655044556, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.7003365755081177, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.7461260557174683, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.8296951055526733, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -2.288769245147705, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the horsepowers of cars data whose cylinders is 3 and the makes of car names associated with these cars data.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 1.\n", "gold_logos_error": false, "gold_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}
{"index": 133, "beams": [{"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY SUM(cars_data.Horsepower) DESC LIMIT 1", "score": -1.9010581970214844, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY SUM(cars_data.Horsepower) DESC LIMIT 1", "logos": "Find the horsepowers of cars data grouped by their horsepowers.\nSort results first by the sum horsepowers of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1", "score": -2.352836847305298, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1", "logos": "Find the horsepowers of cars data grouped by their horsepowers.\nSort results first by the maximum horsepower of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT * FROM continents", "score": -3.2503514289855957, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT * FROM continents", "score": -3.3430182933807373, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT MAX(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1", "score": -4.224949836730957, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1", "logos": "Find the maximum of horsepower of cars data.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT * FROM continents", "score": -4.382745742797852, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of car names associated with cars data.\nSort results first by the mpg of cars data in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}
{"index": 134, "beams": [{"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1", "score": -0.00011682649346766993, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1", "logos": "Find the mpgs of cars data.\nSort results first by the mpg of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT * FROM continents", "score": -3.8159265518188477, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY SUM(cars_data.MPG) DESC LIMIT 1", "score": -4.740118503570557, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY SUM(cars_data.MPG) DESC LIMIT 1", "logos": "Find the mpgs of cars data grouped by their mpgs.\nSort results first by the sum mpgs of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY MAX(cars_data.MPG) DESC LIMIT 1", "score": -5.019182205200195, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY MAX(cars_data.MPG) DESC LIMIT 1", "logos": "Find the mpgs of cars data grouped by their mpgs.\nSort results first by the maximum mpg of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.Id FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1", "score": -5.333491325378418, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Id FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1", "logos": "Find the ids of cars data.\nSort results first by the mpg of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY cars_data.MPG DESC LIMIT 1", "score": -6.03068733215332, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY cars_data.MPG DESC LIMIT 1", "logos": "Find the mpgs of cars data grouped by their mpgs.\nSort results first by the mpg of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT * FROM continents", "score": -6.062188148498535, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of car names associated with cars data.\nSort results first by the mpg of cars data in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}
{"index": 135, "beams": [{"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -1.1981711622865987e-07, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year < 1980", "score": -3.724273920059204, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980 for cars data associated with car names.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.527399063110352, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.780360698699951, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.873350143432617, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 AND cars_data.Year < 1980", "score": -5.027876853942871, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 AND cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980 and year is less than 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) AS avg FROM cars_data WHERE cars_data.Year < 1980 LIMIT 1", "score": -5.4790544509887695, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) AS avg FROM cars_data WHERE cars_data.Year < 1980 LIMIT 1", "logos": "Find the average of horsepower of cars data whose year is less than 1980.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.557376384735107, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -6.3695526123046875, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of horsepower of cars data whose year is less than 1980.", "gold_logos_error": false, "gold_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}
{"index": 136, "beams": [{"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -3.9939038742886623e-08, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year < 1980", "score": -3.8825461864471436, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980 for cars data associated with car names.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -4.629858016967773, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -4.897749900817871, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.962843894958496, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 AND cars_data.Year < 1980", "score": -5.196766376495361, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 AND cars_data.Year < 1980", "logos": "Find the average of horsepower of cars data whose year is less than 1980 and year is less than 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year LIKE \"1980 %\"", "score": -5.490911960601807, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year LIKE \"1980 %\"", "logos": "Find the average of horsepower of cars data whose year is like 1980 %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -5.569945812225342, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -6.252115249633789, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -6.294867038726807, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of horsepower of cars data whose year is less than 1980.", "gold_logos_error": false, "gold_code": "select avg(horsepower) from cars_data where year  <  1980"}
{"index": 137, "beams": [{"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\"", "score": -0.001414021011441946, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = \"volvo\"", "logos": "Find the average of edispl of cars data associated with car names whose model is volvo.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -1.5901645421981812, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -2.884117364883423, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -2.9180831909179688, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -3.213289976119995, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -3.7501299381256104, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -3.7518887519836426, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -4.089545726776123, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -5.110544204711914, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -5.47190523147583, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -5.663363456726074, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of edispl of cars data associated with car names whose model is volvo.", "gold_logos_error": false, "gold_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}
{"index": 138, "beams": [{"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data", "score": -7.384247965092072e-06, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data", "logos": "Find the average of edispl of cars data.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -3.6510016918182373, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -5.032522678375244, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -5.2019758224487305, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -5.3350677490234375, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -6.136113166809082, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -6.6486101150512695, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the average of edispl of cars data associated with car names whose model is volvo.", "gold_logos_error": false, "gold_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}
{"index": 139, "beams": [{"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Accelerate FROM cars_data GROUP BY cars_data.Accelerate", "score": -0.30601072311401367, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Accelerate FROM cars_data GROUP BY cars_data.Accelerate", "logos": "Find the maximum of accelerate and accelerates of cars data grouped by their accelerates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "score": -0.9799700975418091, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "logos": "Find the maximum of accelerate and cylinders of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.1000564098358154, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.4245072603225708, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate), accelerate FROM cars_data GROUP BY cars_data.Accelerate", "score": -1.770016074180603, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate), accelerate FROM cars_data GROUP BY cars_data.Accelerate", "logos": "Find the maximum of accelerate and accelerates of cars data grouped by their accelerates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.8376879692077637, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Accelerate", "score": -2.027233600616455, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Accelerate", "logos": "Find the maximum of accelerate of cars data grouped by their accelerates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for different number of cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.15509033203125, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the maximum of accelerate and cylinders of cars data grouped by their cylinders.", "gold_logos_error": false, "gold_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders"}
{"index": 140, "beams": [{"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "score": -0.020909171551465988, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "logos": "Find the maximum of accelerate and cylinders of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT cars_data.Cylinders, MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Cylinders", "score": -0.9401984214782715, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders, MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Cylinders", "logos": "Find the cylinders and maximum of accelerate of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.901878595352173, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Cylinders", "score": -3.135434150695801, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Cylinders", "logos": "Find the maximum of accelerate of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -3.3803038597106934, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -3.9786829948425293, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Cylinders", "score": -4.063206195831299, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Cylinders", "logos": "Find the maximum of accelerate of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.1882734298706055, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.266940116882324, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.355004787445068, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.55085563659668, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "score": -4.6822662353515625, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "logos": "Find the maximum of accelerate and cylinders of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "score": -4.6894755363464355, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "logos": "Find the maximum of accelerate and cylinders of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the maximum accelerate for all the different cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.801583766937256, "correct_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the maximum of accelerate and cylinders of cars data grouped by their cylinders.", "gold_logos_error": false, "gold_code": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders"}
{"index": 143, "beams": [{"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4", "score": -5.19207560500945e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4", "logos": "Find the number of cars data whose cylinders is greater than 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.344629287719727, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Cylinders > 4", "score": -4.610682010650635, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Cylinders > 4", "logos": "Find the number of cars data whose cylinders is greater than 4 and cylinders is greater than 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.732686996459961, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.732029914855957, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.8969011306762695, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 ORDER BY cars_data.Cylinders", "score": -6.000972747802734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 ORDER BY cars_data.Cylinders", "logos": "Find the number of cars data whose cylinders is greater than 4.\nSort results first by the cylinders of cars data in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.026483058929443, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 40", "score": -6.0645527839660645, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 40", "logos": "Find the number of cars data whose cylinders is greater than 40.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM cars_data WHERE cars_data.Cylinders > 4", "score": -6.1585774421691895, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM cars_data WHERE cars_data.Cylinders > 4", "logos": "Find everything about cars data whose cylinders is greater than 4.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose cylinders is greater than 4.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}
{"index": 144, "beams": [{"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4", "score": -1.9969519371443312e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4", "logos": "Find the number of cars data whose cylinders is greater than 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower > \"VALUE\"", "score": -4.5961151123046875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower > \"VALUE\"", "logos": "Find the number of cars data whose cylinders is greater than 4 and horsepower is greater than value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.752493381500244, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.760835647583008, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.785176753997803, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower > \"cars\"", "score": -4.802501201629639, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower > \"cars\"", "logos": "Find the number of cars data whose cylinders is greater than 4 and horsepower is greater than cars.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower < \"cars\"", "score": -4.803396224975586, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower < \"cars\"", "logos": "Find the number of cars data whose cylinders is greater than 4 and horsepower is less than cars.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.175678730010986, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.20155143737793, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 GROUP BY cars_data.Horsepower", "score": -5.56852388381958, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 GROUP BY cars_data.Horsepower", "logos": "Find the number of cars data whose cylinders is greater than 4 grouped by their horsepowers.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.060754776000977, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 40", "score": -6.154446125030518, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 40", "logos": "Find the number of cars data whose cylinders is greater than 40.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose cylinders is greater than 4.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}
{"index": 145, "beams": [{"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980", "score": -0.005916190799325705, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980", "logos": "Find the number of cars data whose year is 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = 1980", "score": -4.770602703094482, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND cars_data.Year = 1980", "logos": "Find the number of cars data whose year is 1980 and the number of car names associated with these cars data.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -5.080465793609619, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "logos": "Find the number of car names whose make is 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -5.459898948669434, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "logos": "Find the number of car names whose make is 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.635180950164795, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.753092288970947, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.876776218414307, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.94625997543335, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -6.0040693283081055, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980", "score": -6.084928035736084, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980", "logos": "Find the number of cars data whose year is 1980.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate = 1980", "score": -6.473299026489258, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate = 1980", "logos": "Find the number of cars data whose accelerate is 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -6.748212814331055, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose year is 1980.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}
{"index": 146, "beams": [{"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -0.00015109905507415533, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "logos": "Find the number of car names whose make is 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -2.3180899620056152, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "logos": "Find the number of car names whose make is 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"made\"", "score": -2.8640923500061035, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"made\"", "logos": "Find the number of car names whose make is 1980 and make is made.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"cars\"", "score": -2.9426441192626953, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"cars\"", "logos": "Find the number of car names whose make is 1980 and make is cars.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -2.9609100818634033, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = 1980", "score": -2.969128131866455, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = 1980", "logos": "Find the number of car names whose make is 1980 and make is 1980.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"were\"", "score": -3.0418667793273926, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"were\"", "logos": "Find the number of car names whose make is 1980 and make is were.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"many\"", "score": -3.1634392738342285, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"many\"", "logos": "Find the number of car names whose make is 1980 and make is many.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.3111867904663086, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.466942071914673, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"?\"", "score": -3.5199155807495117, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"?\"", "logos": "Find the number of car names whose make is 1980 and make is ?.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.526643753051758, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 GROUP BY car_names.Make", "score": -3.888476848602295, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 GROUP BY car_names.Make", "logos": "Find the number of car names whose make is 1980 grouped by their makes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.965538263320923, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"how\"", "score": -4.19045352935791, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"how\"", "logos": "Find the number of car names whose make is 1980 and make is how.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*), car_names.Make FROM car_names WHERE car_names.Make = 1980 GROUP BY car_names.Make", "score": -4.575756072998047, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*), car_names.Make FROM car_names WHERE car_names.Make = 1980 GROUP BY car_names.Make", "logos": "Find the number and makes of car names whose make is 1980 grouped by their makes.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose year is 1980.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}
{"index": 147, "beams": [{"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"American Motor Company\"", "score": -0.13791455328464508, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker AND car_makers.FullName = \"American Motor Company\"", "logos": "Find the number of model list and the number of car makers whose fullname is american motor company for car makers associated with these model list.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\"", "score": -1.8268818855285645, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM model_list, car_makers WHERE model_list.Maker = car_makers.Id AND car_makers.FullName = \"American Motor Company\"", "logos": "Find the number of car makers whose fullname is american motor company and the number of model list associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.1009111404418945, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.5394866466522217, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"name Motor Company\"", "score": -2.6253364086151123, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker AND car_makers.FullName = \"name Motor Company\"", "logos": "Find the number of model list and the number of car makers whose fullname is name motor company for car makers associated with these model list.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"name American Motor Company\"", "score": -2.855275869369507, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, model_list WHERE  car_makers.Id = model_list.Maker  AND car_makers.FullName = \"name American Motor Company\"", "logos": "Find the number of model list and the number of car makers whose fullname is name american motor company for car makers associated with these model list.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.9748196601867676, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"American American Motor Company\"", "score": -3.001105546951294, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, model_list WHERE  car_makers.Id = model_list.Maker  AND car_makers.FullName = \"American American Motor Company\"", "logos": "Find the number of model list and the number of car makers whose fullname is american american motor company for car makers associated with these model list.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers WHERE car_makers.FullName = \"American Motor Company\"", "score": -3.3806071281433105, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers WHERE car_makers.FullName = \"American Motor Company\"", "logos": "Find the number of car makers whose fullname is american motor company.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -3.7548587322235107, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers WHERE car_makers.Maker = \"American Motor Company\"", "score": -4.177405834197998, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers WHERE car_makers.Maker = \"American Motor Company\"", "logos": "Find the number of car makers whose maker is american motor company.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of model list and the number of car makers whose fullname is american motor company for car makers associated with these model list.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}
{"index": 148, "beams": [{"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\"", "score": -0.0004480645584408194, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM model_list, car_makers WHERE model_list.Maker = car_makers.Id AND car_makers.FullName = \"American Motor Company\"", "logos": "Find the number of car makers whose fullname is american motor company and the number of model list associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"American Motor Company\"", "score": -1.434835433959961, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker AND car_makers.FullName = \"American Motor Company\"", "logos": "Find the number of model list and the number of car makers whose fullname is american motor company for car makers associated with these model list.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"American Motor Company\"", "score": -2.2255349159240723, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM model_list, car_makers WHERE model_list.Maker = car_makers.Id AND car_makers.Maker = \"American Motor Company\"", "logos": "Find the number of car makers whose maker is american motor company and the number of model list associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.4401211738586426, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.6226816177368164, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.656128168106079, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.8888087272644043, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -3.0809028148651123, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American American Motor Company\"", "score": -3.268996000289917, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM model_list, car_makers WHERE  model_list.Maker = car_makers.Id  AND car_makers.FullName = \"American American Motor Company\"", "logos": "Find the number of car makers whose fullname is american american motor company and the number of model list associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Motor Company\"", "score": -3.594447135925293, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM model_list, car_makers WHERE  model_list.Maker = car_makers.Id  AND car_makers.FullName = \"American Motor Motor Company\"", "logos": "Find the number of car makers whose fullname is american motor motor company and the number of model list associated with these car makers.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -3.8523905277252197, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of model list and the number of car makers whose fullname is american motor company for car makers associated with these model list.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}
{"index": 155, "beams": [{"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": 0.0, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -5.765807628631592, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.243270397186279, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.693021297454834, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -6.999965667724609, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -7.119807720184326, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -7.52866792678833, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}
{"index": 156, "beams": [{"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -4.5548411264917377e-08, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -5.754569053649902, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.223166465759277, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.5420966148376465, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.841711521148682, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -6.948338031768799, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC", "score": -7.354388236999512, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC", "logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -7.382383346557617, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -7.507164001464844, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the horsepowers of cars data.\nSort results first by the accelerate of cars data in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}
{"index": 157, "beams": [{"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -0.4570893347263336, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "logos": "Find the cylinders of cars data associated with car names whose model is volvo.\nSort results first by the accelerate of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.6288705468177795, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.7437626123428345, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.7801700234413147, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.8410961627960205, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.8670201301574707, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.8883029222488403, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.9396228194236755, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Cylinders ASC LIMIT 1", "score": -0.9547371864318848, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = \"volvo\" ORDER BY cars_data.Cylinders ASC LIMIT 1", "logos": "Find the cylinders of cars data associated with car names whose model is volvo.\nSort results first by the cylinders of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.9992488622665405, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -1.000414252281189, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "logos": "Find the cylinders of cars data associated with car names whose model is volvo.\nSort results first by the accelerate of cars data in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.0305577516555786, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.0314688682556152, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the cylinders of cars data associated with car names whose model is volvo.\nSort results first by the accelerate of cars data in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}
{"index": 158, "beams": [{"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.018774151802063, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.3722591400146484, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4026113748550415, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4554768800735474, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4643347263336182, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4784400463104248, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.7438961267471313, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -2.0404341220855713, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "logos": "Find the number of car names whose model is volvo and the number of cars data associated with these car names.\nSort results first by the accelerate of cars data in ascending order.\nLimit the results to top 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -2.1229398250579834, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data, car_names WHERE cars_data.Id = car_names.MakeId AND car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "logos": "Find the number of car names whose model is volvo and the number of cars data associated with these car names.\nSort results first by the accelerate of cars data in ascending order.\nLimit the results to top 1.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the cylinders of cars data associated with car names whose model is volvo.\nSort results first by the accelerate of cars data in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}
{"index": 161, "beams": [{"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -1.400505542755127, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -1.7465710639953613, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -1.8428130149841309, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.0559160709381104, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.3261239528656006, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.423954486846924, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.4387776851654053, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.472663402557373, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.4799959659576416, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.536184549331665, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.653290271759033, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries has more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.7037672996520996, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number and number of car makers and the number and number of countries associated with these car makers grouped by the countryids of countries.\nConsider only groups whose group size is greater than 2.\n ", "gold_logos_error": false, "gold_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"}
{"index": 162, "beams": [{"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -1.868712306022644, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.0081634521484375, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.141144037246704, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.1526172161102295, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.208789348602295, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.3152568340301514, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.343637466430664, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.6226632595062256, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.653475522994995, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.6940062046051025, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of countries with more than 2 car makers ?", "inferred_code": "SELECT * FROM continents", "score": -2.7082977294921875, "correct_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number and number of car makers and the number and number of countries associated with these car makers grouped by the countryids of countries.\nConsider only groups whose group size is greater than 2.\n ", "gold_logos_error": false, "gold_code": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"}
{"index": 163, "beams": [{"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6", "score": -1.3978663560010318e-07, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6", "logos": "Find the number of cars data whose cylinders is greater than 6.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 AND cars_data.Cylinders > 6", "score": -4.801814079284668, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 AND cars_data.Cylinders > 6", "logos": "Find the number of cars data whose cylinders is greater than 6 and cylinders is greater than 6.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.84943151473999, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.275798320770264, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.301884651184082, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.326570510864258, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.82020902633667, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY cars_data.Cylinders", "score": -5.859222412109375, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY cars_data.Cylinders", "logos": "Find the number of cars data whose cylinders is greater than 6.\nSort results first by the cylinders of cars data in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.097009181976318, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders < 6", "score": -6.29135274887085, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders < 6", "logos": "Find the number of cars data whose cylinders is less than 6.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data GROUP BY cars_data.Cylinders > 6", "score": -6.294322490692139, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data GROUP BY cars_data.Cylinders > 6", "logos": "Find the number of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose cylinders is greater than 6.", "gold_logos_error": false, "gold_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}
{"index": 164, "beams": [{"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6", "score": -1.597561549715465e-07, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6", "logos": "Find the number of cars data whose cylinders is greater than 6.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.651314735412598, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.752523422241211, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 AND cars_data.Cylinders > 6", "score": -4.843636989593506, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 AND cars_data.Cylinders > 6", "logos": "Find the number of cars data whose cylinders is greater than 6 and cylinders is greater than 6.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY cars_data.Cylinders", "score": -5.527300834655762, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY cars_data.Cylinders", "logos": "Find the number of cars data whose cylinders is greater than 6.\nSort results first by the cylinders of cars data in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data GROUP BY cars_data.Cylinders > 6", "score": -5.726434230804443, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data GROUP BY cars_data.Cylinders > 6", "logos": "Find the number of cars data grouped by their cylinders.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.765541076660156, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.004866123199463, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.018706798553467, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders < 6", "score": -6.321897983551025, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders < 6", "logos": "Find the number of cars data whose cylinders is less than 6.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.MPG > 6", "score": -6.438681602478027, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.MPG > 6", "logos": "Find the number of cars data whose mpg is greater than 6.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.488813877105713, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.489576816558838, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the number of cars data whose cylinders is greater than 6.", "gold_logos_error": false, "gold_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}
{"index": 165, "beams": [{"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -0.0011672991095110774, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose cylinders is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -1.789736270904541, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose cylinders is 4.\nSort results first by the cylinders of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.8121243715286255, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.9922280311584473, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 3", "score": -2.282999038696289, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 3", "logos": "Find the horsepowers of cars data whose cylinders is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.4435760974884033, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose mpg is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.5058603286743164, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.6289122104644775, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the cylinders of cars data whose cylinders is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.816019296646118, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -2.838643789291382, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose mpg is 4.\nSort results first by the cylinders of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.9847335815429688, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.998171806335449, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders <= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -3.051023006439209, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders <= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose cylinders is less than or equal to 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -3.117065668106079, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of car names associated with cars data whose cylinders is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}
{"index": 166, "beams": [{"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -0.02579222433269024, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose cylinders is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -1.0519295930862427, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -1.4818800687789917, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose mpg is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.48287832736969, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -1.7841918468475342, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Cylinders DESC LIMIT 4", "logos": "Find the horsepowers of cars data.\nSort results first by the cylinders of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.810464859008789, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders <= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -1.983041763305664, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders <= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose cylinders is less than or equal to 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.5563290119171143, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose horsepower is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY SUM(cars_data.Horsepower) DESC LIMIT 4", "score": -2.7722015380859375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY SUM(cars_data.Horsepower) DESC LIMIT 4", "logos": "Find the horsepowers of cars data grouped by their horsepowers.\nSort results first by the sum horsepowers of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders >= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.937474012374878, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders >= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose cylinders is greater than or equal to 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -3.068101406097412, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "logos": "Find the horsepowers of cars data whose cylinders is 4.\nSort results first by the cylinders of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -3.208996295928955, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "logos": "Find the cylinders of cars data whose cylinders is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 4.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT * FROM continents", "score": -3.417833089828491, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of car names associated with cars data whose cylinders is 4.\nSort results first by the horsepower of cars data in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}
{"index": 171, "beams": [{"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT * FROM continents", "score": -0.42398005723953247, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT * FROM continents", "score": -0.5951356887817383, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT * FROM continents", "score": -0.6873964071273804, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of model list associated with car names, and for car names associated with cars data whose weight is less than 3500, and for model list associated with car makers whose fullname is not ford motor company.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}
{"index": 172, "beams": [{"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -0.38853007555007935, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -0.39461323618888855, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -0.5055397748947144, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM continents", "logos": "Find everything about continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "car_1", "gold_parse_error": false, "gold_logos": "Find the models of model list associated with car names, and for car names associated with cars data whose weight is less than 3500, and for model list associated with car makers whose fullname is not ford motor company.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}
{"index": 179, "beams": [{"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\"", "score": -7.107350086243969e-08, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\"", "logos": "Find the countries of airlines whose airline is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Airline = \"JetBlue Airways\"", "score": -3.7398247718811035, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Airline = \"JetBlue Airways\"", "logos": "Find the countries of airlines whose airline is jetblue airways and airline is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Abbreviation = \"JetBlue Airways\"", "score": -3.829998731613159, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Abbreviation = \"JetBlue Airways\"", "logos": "Find the countries of airlines whose airline is jetblue airways and abbreviation is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlueue Airways\"", "score": -5.027170658111572, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlueue Airways\"", "logos": "Find the countries of airlines whose airline is jetblueue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -5.488305568695068, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -5.549091339111328, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" ORDER BY airlines.Country", "score": -5.559958457946777, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" ORDER BY airlines.Country", "logos": "Find the countries of airlines whose airline is jetblue airways.\nSort results first by the country of airlines in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways Airways\"", "score": -5.654284477233887, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways Airways\"", "logos": "Find the countries of airlines whose airline is jetblue airways airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlBlue Airways\"", "score": -5.760393142700195, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlBlue Airways\"", "logos": "Find the countries of airlines whose airline is jetblblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -5.9618611335754395, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -6.1285223960876465, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the countries of airlines whose airline is jetblue airways.", "gold_logos_error": false, "gold_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"index": 180, "beams": [{"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\"", "score": -2.8429408871488704e-07, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\"", "logos": "Find the countries of airlines whose airline is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" AND airlines.Abbreviation = \"Jetblue Airways\"", "score": -3.5209665298461914, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" AND airlines.Abbreviation = \"Jetblue Airways\"", "logos": "Find the countries of airlines whose airline is jetblue airways and abbreviation is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"Jetblue Airways\"", "score": -4.230990409851074, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"Jetblue Airways\"", "logos": "Find the countries of airlines whose abbreviation is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblueue Airways\"", "score": -4.858499050140381, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblueue Airways\"", "logos": "Find the countries of airlines whose airline is jetblueue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblblue Airways\"", "score": -5.109387397766113, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblblue Airways\"", "logos": "Find the countries of airlines whose airline is jetblblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -5.27521276473999, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -5.57223653793335, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" ORDER BY airlines.Country", "score": -5.60804557800293, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" ORDER BY airlines.Country", "logos": "Find the countries of airlines whose airline is jetblue airways.\nSort results first by the country of airlines in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways Airways\"", "score": -5.662479400634766, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways Airways\"", "logos": "Find the countries of airlines whose airline is jetblue airways airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -6.052522659301758, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -6.131583213806152, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the countries of airlines whose airline is jetblue airways.", "gold_logos_error": false, "gold_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"index": 181, "beams": [{"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlue Airways\"", "score": -7.107350086243969e-08, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Airline = \"JetBlue Airways\"", "score": -3.566352605819702, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Airline = \"JetBlue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblue airways and airline is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlueue Airways\"", "score": -4.516797065734863, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlueue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblueue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.610762119293213, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.647361755371094, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlBlue Airways\"", "score": -5.229634761810303, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlBlue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.282508850097656, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.491376876831055, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.8047895431518555, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jet JetBlue Airways\"", "score": -5.804904460906982, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jet JetBlue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jet jetblue airways.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the abbreviations of airlines whose airline is jetblue airways.", "gold_logos_error": false, "gold_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"index": 182, "beams": [{"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\"", "score": -7.107350086243969e-08, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" AND airlines.Airline = \"Jetblue Airways\"", "score": -3.4482550621032715, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" AND airlines.Airline = \"Jetblue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblue airways and airline is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblblue Airways\"", "score": -4.811966896057129, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblblue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblueue Airways\"", "score": -4.918034553527832, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblueue Airways\"", "logos": "Find the abbreviations of airlines whose airline is jetblueue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT * FROM airlines", "score": -5.441532611846924, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"Jetblue Airways\"", "score": -5.481477737426758, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"Jetblue Airways\"", "logos": "Find the abbreviations of airlines whose abbreviation is jetblue airways.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" GROUP BY airlines.Abbreviation", "score": -5.598526954650879, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" GROUP BY airlines.Abbreviation", "logos": "Find the abbreviations of airlines whose airline is jetblue airways grouped by their abbreviations.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT * FROM airlines", "score": -5.741070747375488, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" ORDER BY airlines.Abbreviation", "score": -5.763967514038086, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" ORDER BY airlines.Abbreviation", "logos": "Find the abbreviations of airlines whose airline is jetblue airways.\nSort results first by the abbreviation of airlines in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT * FROM airlines", "score": -5.877294540405273, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the abbreviations of airlines whose airline is jetblue airways.", "gold_logos_error": false, "gold_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"index": 183, "beams": [{"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\"", "score": -3.761256550660619e-08, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\"", "logos": "Find the airlines and abbreviations of airlines whose country is usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" AND airlines.Abbreviation = \"USA\"", "score": -4.355149745941162, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" AND airlines.Abbreviation = \"USA\"", "logos": "Find the airlines and abbreviations of airlines whose country is usa and abbreviation is usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -4.802872657775879, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -4.954703330993652, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.101895809173584, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.243779182434082, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.773098945617676, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" ORDER BY airlines.Airline", "score": -5.778575897216797, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" ORDER BY airlines.Airline", "logos": "Find the airlines and abbreviations of airlines whose country is usa.\nSort results first by the airline of airlines in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country != \"USA\"", "score": -5.899850845336914, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country != \"USA\"", "logos": "Find the airlines and abbreviations of airlines whose country is not usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.908492565155029, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.948218822479248, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -6.352853775024414, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country LIKE \"USA\"", "score": -6.410703182220459, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country LIKE \"USA\"", "logos": "Find the airlines and abbreviations of airlines whose country is like usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -6.485710620880127, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airlines and abbreviations of airlines whose country is usa.", "gold_logos_error": false, "gold_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}
{"index": 184, "beams": [{"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\"", "score": -3.761256550660619e-08, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\"", "logos": "Find the airlines and abbreviations of airlines whose country is usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.490057468414307, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.518424987792969, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" AND airlines.Abbreviation = \"USA\"", "score": -4.57762336730957, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" AND airlines.Abbreviation = \"USA\"", "logos": "Find the airlines and abbreviations of airlines whose country is usa and abbreviation is usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.612013339996338, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.797461032867432, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.86134672164917, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.523301601409912, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.818968772888184, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" ORDER BY airlines.Airline", "score": -5.967303276062012, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" ORDER BY airlines.Airline", "logos": "Find the airlines and abbreviations of airlines whose country is usa.\nSort results first by the airline of airlines in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country != \"USA\"", "score": -6.2296576499938965, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country != \"USA\"", "logos": "Find the airlines and abbreviations of airlines whose country is not usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.231725215911865, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.283820152282715, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.388658046722412, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airlines and abbreviations of airlines whose country is usa.", "gold_logos_error": false, "gold_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}
{"index": 185, "beams": [{"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\"", "score": -5.6418844707195603e-08, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\"", "logos": "Find the airportcodes and airportnames of airports whose city is anthony.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" AND airports.AirportName = \"Anthony\"", "score": -3.866150379180908, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" AND airports.AirportName = \"Anthony\"", "logos": "Find the airportcodes and airportnames of airports whose city is anthony and airportname is anthony.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"Anthony\"", "score": -4.8148393630981445, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  airports.AirportCode,  airports.AirportName FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.City = \"Anthony\"", "logos": "Find the airportcodes and airportnames of airports whose city is anthony for airports associated with flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.141557216644287, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" ORDER BY airports.AirportCode", "score": -5.705026149749756, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" ORDER BY airports.AirportCode", "logos": "Find the airportcodes and airportnames of airports whose city is anthony.\nSort results first by the airportcode of airports in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.733761310577393, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.774832725524902, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.799069881439209, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.8332929611206055, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.Country FROM airports WHERE airports.City = \"Anthony\"", "score": -6.036545753479004, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.Country FROM airports WHERE airports.City = \"Anthony\"", "logos": "Find the airportcodes and countries of airports whose city is anthony.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City != \"Anthony\"", "score": -6.425869464874268, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City != \"Anthony\"", "logos": "Find the airportcodes and airportnames of airports whose city is not anthony.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airportcodes and airportnames of airports whose city is anthony.", "gold_logos_error": false, "gold_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}
{"index": 186, "beams": [{"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\"", "score": -3.761256550660619e-08, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\"", "logos": "Find the airportcodes and airportnames of airports whose city is anthony.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" AND airports.AirportName = \"Anthony\"", "score": -3.8394124507904053, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" AND airports.AirportName = \"Anthony\"", "logos": "Find the airportcodes and airportnames of airports whose city is anthony and airportname is anthony.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"Anthony\"", "score": -4.469442844390869, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  airports.AirportCode,  airports.AirportName FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.City = \"Anthony\"", "logos": "Find the airportcodes and airportnames of airports whose city is anthony for airports associated with flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -4.756727695465088, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -4.794468402862549, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.3060407638549805, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.City FROM airports WHERE airports.City = \"Anthony\"", "score": -5.323810577392578, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.City FROM airports WHERE airports.City = \"Anthony\"", "logos": "Find the airportcodes and cities of airports whose city is anthony.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" ORDER BY airports.AirportCode", "score": -5.5532917976379395, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" ORDER BY airports.AirportCode", "logos": "Find the airportcodes and airportnames of airports whose city is anthony.\nSort results first by the airportcode of airports in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.Country FROM airports WHERE airports.City = \"Anthony\"", "score": -5.576722145080566, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.Country FROM airports WHERE airports.City = \"Anthony\"", "logos": "Find the airportcodes and countries of airports whose city is anthony.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.7667670249938965, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.998163223266602, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.CountryAbbrev FROM airports WHERE airports.City = \"Anthony\"", "score": -6.076553821563721, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportCode, airports.CountryAbbrev FROM airports WHERE airports.City = \"Anthony\"", "logos": "Find the airportcodes and countryabbrevs of airports whose city is anthony.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airportcodes and airportnames of airports whose city is anthony.", "gold_logos_error": false, "gold_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}
{"index": 187, "beams": [{"orig_question": "How many airlines do we have?", "inferred_code": "SELECT COUNT(*) FROM airlines", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines", "logos": "Find the number of airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.609917163848877, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.980129241943359, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.103776931762695, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.186854362487793, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.559047222137451, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.571653842926025, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.375746726989746, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines", "score": -8.424336433410645, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines", "logos": "Find the number of airlines.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.537690162658691, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT COUNT(*) FROM airlines ORDER BY airlines.uid", "score": -8.546615600585938, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines ORDER BY airlines.uid", "logos": "Find the number of airlines.\nSort results first by the uid of airlines in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.734166145324707, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.879465103149414, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of airlines.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM AIRLINES"}
{"index": 188, "beams": [{"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT COUNT(*) FROM airlines", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines", "logos": "Find the number of airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.156261920928955, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.496209621429443, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.59024715423584, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.610933303833008, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.692974090576172, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.702687740325928, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -8.103033065795898, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -8.207052230834961, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -8.666377067565918, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines", "score": -8.754829406738281, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines", "logos": "Find the number of airlines.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -9.327065467834473, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -9.332447052001953, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of airlines.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM AIRLINES"}
{"index": 189, "beams": [{"orig_question": "How many airports do we have?", "inferred_code": "SELECT COUNT(*) FROM airports", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports", "logos": "Find the number of airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.983628273010254, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.2493510246276855, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.4735212326049805, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.699441909790039, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports", "score": -8.17699146270752, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM airports", "logos": "Find the number of airports.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT COUNT(*) FROM airports ORDER BY airports.AirportName", "score": -8.396836280822754, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports ORDER BY airports.AirportName", "logos": "Find the number of airports.\nSort results first by the airportname of airports in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.578642845153809, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.628341674804688, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.748631477355957, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT COUNT(*) FROM airports AS 0", "score": -8.810380935668945, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": true, "parse_error": true, "implicit_inferred_code": "SELECT COUNT(*) FROM airports AS 0", "logos": "Find the number of airports.", "logos_error": false, "implicit_parse_error": true}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.828990936279297, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.86860179901123, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -9.421735763549805, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of airports.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM AIRPORTS"}
{"index": 190, "beams": [{"orig_question": "Return the number of  airports.", "inferred_code": "SELECT COUNT(*) FROM airports", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports", "logos": "Find the number of airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.203625202178955, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.233107566833496, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.364910125732422, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.370512962341309, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.668999195098877, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.674875259399414, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports", "score": -7.758955478668213, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM airports", "logos": "Find the number of airports.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT COUNT(*) FROM airports GROUP BY airports.AirportCode", "score": -7.986560821533203, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports GROUP BY airports.AirportCode", "logos": "Find the number of airports grouped by their airportcodes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.419659614562988, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.660313606262207, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.681207656860352, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.832653999328613, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.843290328979492, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of airports.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM AIRPORTS"}
{"index": 191, "beams": [{"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights", "logos": "Find the number of flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"VALUE\"", "score": -5.681738376617432, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"VALUE\"", "logos": "Find the number of flights whose sourceairport is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.917156219482422, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.108794689178467, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.143751621246338, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights GROUP BY flights.SourceAirport", "score": -7.541974067687988, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights GROUP BY flights.SourceAirport", "logos": "Find the number of flights grouped by their sourceairports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights ORDER BY flights.FlightNo", "score": -7.919802665710449, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights ORDER BY flights.FlightNo", "logos": "Find the number of flights.\nSort results first by the flightno of flights in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights", "score": -8.05838394165039, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM flights", "logos": "Find the number of flights.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights", "score": -8.205730438232422, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(flights.FlightNo) FROM flights", "logos": "Find the sum of flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.639145851135254, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.97812557220459, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS"}
{"index": 192, "beams": [{"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights", "logos": "Find the number of flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -6.357100009918213, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -7.486105442047119, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -7.534646987915039, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights ORDER BY flights.FlightNo", "score": -7.862836837768555, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights ORDER BY flights.FlightNo", "logos": "Find the number of flights.\nSort results first by the flightno of flights in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights", "score": -8.211039543151855, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM flights", "logos": "Find the number of flights.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights", "score": -9.204195976257324, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(flights.FlightNo) FROM flights", "logos": "Find the sum of flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -9.26907730102539, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -9.311796188354492, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -9.332138061523438, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS"}
{"index": 193, "beams": [{"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -2.9954405817989027e-06, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the airlines of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.915194511413574, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the countries of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\" AND airlines.Airline = \"UAL\"", "score": -4.453431606292725, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\" AND airlines.Airline = \"UAL\"", "logos": "Find the airlines of airlines whose abbreviation is ual and airline is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.251527786254883, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.477901935577393, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.5465989112854, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.575651168823242, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.661981582641602, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find everything about airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.67323637008667, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the abbreviations of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.757076740264893, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.uid FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.885049343109131, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.uid FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the uids of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.886753082275391, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airlines of airlines whose abbreviation is ual.", "gold_logos_error": false, "gold_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}
{"index": 194, "beams": [{"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -0.0002414384944131598, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the airlines of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -2.4609243869781494, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the countries of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.0676190853118896, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.430941581726074, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.5191433429718018, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.649740695953369, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find everything about airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.739694356918335, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -4.1222734451293945, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.uid FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -4.233993053436279, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.uid FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the uids of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -4.252848148345947, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "logos": "Find the abbreviations of airlines whose abbreviation is ual.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -4.279488563537598, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airlines of airlines whose abbreviation is ual.", "gold_logos_error": false, "gold_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}
{"index": 195, "beams": [{"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "logos": "Find the number of airlines whose country is usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.448999881744385, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.537748336791992, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.547525405883789, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA : VALUE\"", "score": -5.6299543380737305, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA : VALUE\"", "logos": "Find the number of airlines whose country is usa : value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.822284698486328, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY airlines.Country = \"USA\"", "score": -5.990463733673096, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY airlines.Country = \"USA\"", "logos": "Find the number of airlines grouped by their countries.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.027101993560791, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of airlines whose country is usa.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}
{"index": 196, "beams": [{"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "logos": "Find the number of airlines whose country is usa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.163127899169922, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.3110833168029785, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.319042682647705, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.404734134674072, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.619462966918945, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "score": -5.644336223602295, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "logos": "Find the number of airlines whose country is usa.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.675309181213379, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.747353553771973, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY airlines.Country = \"USA\"", "score": -6.136466026306152, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY airlines.Country = \"USA\"", "logos": "Find the number of airlines grouped by their countries.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of airlines whose country is usa.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}
{"index": 197, "beams": [{"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "score": -1.2167885870439932e-05, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "logos": "Find the cities and countries of airports whose airportname is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.AirportName = \"Alton\"", "score": -3.214585304260254, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.AirportName = \"Alton\"", "logos": "Find the cities and countryabbrevs of airports whose airportname is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.319850444793701, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.484727144241333, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.813145399093628, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.970318555831909, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.996652126312256, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -4.266650199890137, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = \"Alton\"", "score": -4.458780765533447, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  airports.City,  airports.Country FROM airports, flights WHERE flights.DestAirport = airports.AirportCode AND airports.AirportName = \"Alton\"", "logos": "Find the cities and countries of airports whose airportname is alton for airports associated with flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" AND airports.Country = \"at\"", "score": -4.567540168762207, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" AND airports.Country = \"at\"", "logos": "Find the cities and countries of airports whose airportname is alton and country is at.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -4.610811710357666, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.City = \"Alton\"", "score": -4.665410041809082, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.City = \"Alton\"", "logos": "Find the cities and countries of airports whose city is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" ORDER BY airports.City", "score": -5.491119384765625, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" ORDER BY airports.City", "logos": "Find the cities and countries of airports whose airportname is alton.\nSort results first by the city of airports in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -5.62794303894043, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the cities and countries of airports whose airportname is alton.", "gold_logos_error": false, "gold_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}
{"index": 198, "beams": [{"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "score": -0.0030452574137598276, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "logos": "Find the cities and countries of airports whose airportname is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.City = \"Alton\"", "score": -1.466177225112915, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.City = \"Alton\"", "logos": "Find the cities and countries of airports whose city is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.AirportName = \"Alton\"", "score": -3.564030647277832, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.AirportName = \"Alton\"", "logos": "Find the cities and countryabbrevs of airports whose airportname is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -3.858590602874756, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.088191509246826, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.163206100463867, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.244280815124512, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.AirportName, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "score": -4.3302412033081055, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "logos": "Find the airportnames and countries of airports whose airportname is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.49002742767334, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.492966651916504, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" AND airports.Country = \"Alton\"", "score": -4.542511940002441, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" AND airports.Country = \"Alton\"", "logos": "Find the cities and countries of airports whose airportname is alton and country is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.City = \"Alton\"", "score": -4.956637859344482, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.City = \"Alton\"", "logos": "Find the cities and countryabbrevs of airports whose city is alton.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -5.570062160491943, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.AirportName, airports.Country FROM airports WHERE airports.City = \"Alton\"", "score": -5.846167087554932, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName, airports.Country FROM airports WHERE airports.City = \"Alton\"", "logos": "Find the airportnames and countries of airports whose city is alton.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the cities and countries of airports whose airportname is alton.", "gold_logos_error": false, "gold_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}
{"index": 199, "beams": [{"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -3.9939038742886623e-08, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.11247444152832, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako for airports associated with flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.164576053619385, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako for airports associated with flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" AND airports.AirportCode = \"AKO\"", "score": -4.4107208251953125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" AND airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako and airportcode is ako.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.069324016571045, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.262532711029053, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.7619805335998535, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.803455829620361, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -6.085621356964111, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -6.448936939239502, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airportnames of airports whose airportcode is ako.", "gold_logos_error": false, "gold_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}
{"index": 200, "beams": [{"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -1.9969515818729633e-08, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" AND airports.AirportCode = \"AKO\"", "score": -4.394196033477783, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" AND airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako and airportcode is ako.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.711717128753662, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako for airports associated with flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.71310567855835, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.AirportCode = \"AKO\"", "logos": "Find the airportnames of airports whose airportcode is ako for airports associated with flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -4.916624069213867, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -4.951379776000977, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -5.720180034637451, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -6.109788417816162, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -6.379305362701416, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -6.423752307891846, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airportnames of airports whose airportcode is ako.", "gold_logos_error": false, "gold_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}
{"index": 201, "beams": [{"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": 0.0, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "logos": "Find the airportnames of airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"Aberdeen\"", "score": -5.475996017456055, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"Aberdeen\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"?\"", "score": -5.513848304748535, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"?\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is ?.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"'\"", "score": -5.672214031219482, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"'\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is '.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -5.927522659301758, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -6.36513614654541, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -6.456426620483398, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airportnames of airports whose city is aberdeen.", "gold_logos_error": false, "gold_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}
{"index": 202, "beams": [{"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": 0.0, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "logos": "Find the airportnames of airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"names\"", "score": -5.013375759124756, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"names\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is names.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"of\"", "score": -5.053614139556885, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"of\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is of.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"the\"", "score": -5.211764812469482, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"the\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is the.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"What\"", "score": -5.220814228057861, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"What\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is what.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"are\"", "score": -5.269690990447998, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"are\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is are.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"airports\"", "score": -5.285182952880859, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"airports\"", "logos": "Find the airportnames of airports whose city is aberdeen and airportcode is airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -5.345796585083008, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen-VALUE\"", "score": -5.704530239105225, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen-VALUE\"", "logos": "Find the airportnames of airports whose city is aberdeen-value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen on ?\"", "score": -5.950242519378662, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen on ?\"", "logos": "Find the airportnames of airports whose city is aberdeen on ?.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -6.172102928161621, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the airportnames of airports whose city is aberdeen.", "gold_logos_error": false, "gold_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}
{"index": 203, "beams": [{"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -2.0271827452233993e-05, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\"", "logos": "Find the number of flights whose sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -2.259153127670288, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportCode = \"APG\"", "logos": "Find the number of flights and the number of airports whose airportcode is apg for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -2.300337314605713, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.SourceAirport = \"APG\"", "logos": "Find the number of airports and the number of flights whose sourceairport is apg for flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"APG\"", "score": -2.3125557899475098, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.AirportCode = \"APG\"", "logos": "Find the number of airports whose airportcode is apg and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -3.0657095909118652, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"APG\"", "score": -3.1392176151275635, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"APG\"", "logos": "Find the number of airports whose airportcode is apg and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"APG\"", "score": -3.2305233478546143, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"APG\"", "logos": "Find the number of flights and the number of airports whose city is apg for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -3.300900936126709, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = \"APG\"", "score": -3.34834361076355, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.DestAirport = \"APG\"", "logos": "Find the number of flights whose destairport is apg and the number of airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.5624966621398926, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the number of flights whose sourceairport is apg and the number of airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"APG\"", "score": -3.627624034881592, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"APG\"", "logos": "Find the number of flights and the number of airports whose airportname is apg for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -4.0985426902771, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "logos": "Find the number of flights whose sourceairport is 4 and destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -4.256662368774414, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -4.359095096588135, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -5.3971028327941895, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights whose sourceairport is apg.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"index": 204, "beams": [{"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -0.0008620570879429579, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\"", "logos": "Find the number of flights whose sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -1.244219183921814, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.SourceAirport = \"APG\"", "logos": "Find the number of flights whose sourceairport is apg and the number of airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"APG\"", "score": -2.3247921466827393, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"APG\"", "logos": "Find the number of flights and the number of airports whose city is apg for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"APG\"", "score": -2.863879919052124, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"APG\"", "logos": "Find the number of flights and the number of airports whose airportname is apg for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -2.8744399547576904, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportCode = \"APG\"", "logos": "Find the number of flights and the number of airports whose airportcode is apg for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = \"APG\"", "score": -3.0163002014160156, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.DestAirport = \"APG\"", "logos": "Find the number of flights whose destairport is apg and the number of airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.1170077323913574, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.173503875732422, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.2164835929870605, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the number of flights whose sourceairport is apg and the number of airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.7506930828094482, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.7999653816223145, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.254528045654297, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.377514362335205, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.505345344543457, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.794175624847412, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights whose sourceairport is apg.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"index": 205, "beams": [{"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"ATO\"", "score": -0.10022569447755814, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"ATO\"", "logos": "Find the number of airports whose airportcode is ato and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = \"ATO\"", "score": -0.21135935187339783, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.AirportCode = \"ATO\"", "logos": "Find the number of flights and the number of airports whose airportcode is ato for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -2.2460286617279053, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.0450856685638428, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.3978965282440186, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.4099020957946777, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.4349958896636963, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.560161828994751, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.5770411491394043, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.614089250564575, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"ATO\"", "score": -3.6950225830078125, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"ATO\"", "logos": "Find the number of flights and the number of airports whose city is ato for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.769374132156372, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"ATO\"", "score": -3.7766730785369873, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"ATO\"", "logos": "Find the number of airports whose airportcode is ato and the number of flights associated with these airports.\nReturn only unique records.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.AirportCode = \"ATO\"", "score": -4.185919284820557, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.AirportCode = \"ATO\"", "logos": "Find the number of airports whose airportcode is ato.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -4.2525811195373535, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -4.3675150871276855, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights whose destairport is ato.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}
{"index": 206, "beams": [{"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"ATO\"", "score": -0.03900667279958725, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportCode = \"ATO\"", "logos": "Find the number of flights and the number of airports whose airportcode is ato for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"ATO\"", "score": -0.3972468376159668, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.AirportCode = \"ATO\"", "logos": "Find the number of airports whose airportcode is ato and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"ATO\"", "score": -2.6028919219970703, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"ATO\"", "logos": "Find the number of airports whose airportcode is ato and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -2.6676459312438965, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -2.8723554611206055, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"ATO\"", "score": -2.974961280822754, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"ATO\"", "logos": "Find the number of flights and the number of airports whose city is ato for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = \"ATO\"", "score": -3.0015573501586914, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.AirportCode = \"ATO\"", "logos": "Find the number of flights and the number of airports whose airportcode is ato for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.AirportCode = \"ATO\"", "score": -3.0507490634918213, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.AirportCode = \"ATO\"", "logos": "Find the number of airports whose airportcode is ato.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -3.0522735118865967, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"ATO\"", "score": -3.0896196365356445, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"ATO\"", "logos": "Find the number of flights and the number of airports whose airportname is ato for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -3.1440863609313965, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -3.2511730194091797, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"ATO\"", "score": -3.2620882987976074, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.SourceAirport = \"ATO\"", "logos": "Find the number of airports and the number of flights whose sourceairport is ato for flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"ATO\"", "score": -3.8852360248565674, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"ATO\"", "logos": "Find the number of flights whose sourceairport is ato.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights whose destairport is ato.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}
{"index": 207, "beams": [{"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.0017030378803610802, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.090912103652954, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -2.7075610160827637, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" INTERSECT SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "score": -2.8004863262176514, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -2.8166189193725586, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -3.0081396102905273, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.986936092376709, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\nReturn only unique records.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -4.046643257141113, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.184226989746094, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose airportname is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -4.240452289581299, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.256073951721191, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -4.313627243041992, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 208, "beams": [{"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.0008247973746620119, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -1.3997634649276733, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose airportname is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.4157016277313232, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"of\"", "score": -3.5029869079589844, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"of\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen and airportname is of for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportName = \"Aberdeen\"", "score": -3.6422224044799805, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.AirportName = \"Aberdeen\"", "logos": "Find the number of airports whose airportname is aberdeen and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.769303798675537, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.83457088470459, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.028970241546631, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.151944637298584, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.282816410064697, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(flights.FlightNo) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the sum of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 209, "beams": [{"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.01226856466382742, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.6548422574996948, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -3.585303783416748, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen and the number of flights associated with these airports.\nReturn only unique records.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = \"Aberdeen\"", "score": -3.740766763687134, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = \"Aberdeen\"", "logos": "Find the number and number of airports and the number and number of flights associated with these airports grouped by the airportcodes of airports.\nConsider only groups whose group size is aberdeen.\n ", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = 1", "score": -3.7920374870300293, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = 1", "logos": "Find the number and number of airports and the number and number of flights associated with these airports grouped by the airportcodes of airports.\nConsider only groups whose group size is 1.\n ", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT * FROM airlines", "score": -3.829098701477051, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT * FROM airlines", "score": -4.09777307510376, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.259716987609863, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.260343074798584, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\nReturn only unique records.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.279757499694824, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.290277481079102, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT SUM(flights.FlightNo) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -4.328792572021484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(flights.FlightNo) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the sum of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 210, "beams": [{"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.11610481888055801, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.20191438496112823, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = 1", "score": -3.8253724575042725, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = 1", "logos": "Find the number and number of airports and the number and number of flights associated with these airports grouped by the airportcodes of airports.\nConsider only groups whose group size is 1.\n ", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.007680892944336, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.0128092765808105, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.195797920227051, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.25023889541626, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "logos": "Find the number of airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.327728271484375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose airportname is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.360575199127197, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights and the number of airports whose city is aberdeen for airports associated with these flights.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 211, "beams": [{"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Ashley\"", "score": -0.00022146679111756384, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen and airportname is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Ashley\"", "score": -1.2162773609161377, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE  airports.AirportCode = flights.SourceAirport  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"", "logos": "Find the number of airports whose city is aberdeen and airportname is ashley and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Ashley\"", "score": -1.631343960762024, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.DestAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen and airportname is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.DestAirport = \"Ashley\"", "score": -1.8102092742919922, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.DestAirport = \"Ashley\"", "logos": "Find the number of flights whose destairport is ashley and the number of airports whose city is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.DestAirport = \"Ashley\" AND airports.AirportName = \"Ashley\"", "score": -2.158501386642456, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.DestAirport = \"Ashley\"  AND airports.AirportName = \"Ashley\"", "logos": "Find the number of flights whose destairport is ashley and the number of airports whose city is aberdeen and airportname is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" INTERSECT SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Ashley\"", "score": -2.1765940189361572, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Ashley\" AND flights.DestAirport = \"Ashley\"", "score": -2.2501142024993896, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"  AND flights.DestAirport = \"Ashley\"", "logos": "Find the number of flights whose destairport is ashley and the number of airports whose city is aberdeen and airportname is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.DestAirport = \"Ashley\" AND airports.City = \"Ashley\"", "score": -2.33267879486084, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.DestAirport = \"Ashley\"  AND airports.City = \"Ashley\"", "logos": "Find the number of flights whose destairport is ashley and the number of airports whose city is aberdeen and city is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Ashley\" AND flights.DestAirport = \"destination\"", "score": -2.4059386253356934, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"  AND flights.DestAirport = \"destination\"", "logos": "Find the number of flights whose destairport is destination and the number of airports whose city is aberdeen and airportname is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.City = \"Ashley\"", "score": -2.495215892791748, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.City = \"Ashley\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen and city is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" INTERSECT SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Ashley\"", "score": -2.5668370723724365, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT * FROM airlines", "score": -2.650965690612793, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Ashley\" AND airports.AirportName = \"Aberdeen\"", "score": -2.828538179397583, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Ashley\"  AND airports.AirportName = \"Aberdeen\"", "logos": "Find the number of flights and the number of airports whose city is ashley and airportname is aberdeen for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\" AND airports.AirportName = \"Ashley\"", "score": -2.9891042709350586, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.AirportName = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"", "logos": "Find the number of flights and the number of airports whose airportname is aberdeen and airportname is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights and the number of airports whose city is ashley for airports associated with these flights, also the number of airports whose city is aberdeen for airports associated with these flights.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""}
{"index": 212, "beams": [{"orig_question": "How many flights fly from Aberdeen to Ashley?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Ashley\"", "score": -0.4877210855484009, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen and airportname is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights fly from Aberdeen to Ashley?", "inferred_code": "SELECT * FROM airlines", "score": -1.0091824531555176, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights fly from Aberdeen to Ashley?", "inferred_code": "SELECT * FROM airlines", "score": -1.0494260787963867, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights fly from Aberdeen to Ashley?", "inferred_code": "SELECT * FROM airlines", "score": -1.3010040521621704, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights fly from Aberdeen to Ashley?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Ashley\"", "score": -1.33436918258667, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM airports, flights WHERE  airports.AirportCode = flights.SourceAirport  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Ashley\"", "logos": "Find the number of airports whose city is aberdeen and airportname is ashley and the number of flights associated with these airports.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many flights fly from Aberdeen to Ashley?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.City = \"Ashley\"", "score": -1.3374810218811035, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.City = \"Ashley\"", "logos": "Find the number of flights and the number of airports whose city is aberdeen and city is ashley for airports associated with these flights.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the number of flights and the number of airports whose city is ashley for airports associated with these flights, also the number of airports whose city is aberdeen for airports associated with these flights.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""}
{"index": 247, "beams": [{"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -1.0024834409705363e-05, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -2.5780842304229736, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.24908447265625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.3996777534484863, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -3.681880235671997, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.DestAirport = \"APG\"", "score": -4.3174214363098145, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg and destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.DestAirport = \"APG\"", "score": -4.766480922698975, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose destairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.DestAirport = \"APG\"", "score": -4.963360786437988, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose destairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.9717888832092285, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -5.144085884094238, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is 4 and destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.427949905395508, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.772335052490234, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -6.084064483642578, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -6.267872333526611, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (\"APG\")", "score": -6.681323528289795, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (\"APG\")", "logos": "Find the flightnos of flights whose sourceairport is in {apg}.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -6.688110828399658, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights whose sourceairport is apg.", "gold_logos_error": false, "gold_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"index": 248, "beams": [{"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -5.990858653603937e-07, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.2901418209075928, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.SourceAirport = \"APG\"", "score": -4.344544410705566, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg and sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -4.429316997528076, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.DestAirport = \"APG\"", "score": -4.46959924697876, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg and destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.SourceAirport = \"APG\"", "score": -4.9127116203308105, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is 4 and sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -4.9466705322265625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -5.149674415588379, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -5.357779502868652, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is 4 and destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (\"APG\")", "score": -5.625688552856445, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (\"APG\")", "logos": "Find the flightnos of flights whose sourceairport is in {apg}.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -5.83114767074585, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -6.105584144592285, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights whose sourceairport is apg.", "gold_logos_error": false, "gold_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"index": 249, "beams": [{"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -0.04939192906022072, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -0.6085677742958069, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -0.7256730198860168, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"APG\"", "score": -1.5113757848739624, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.AirportCode = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose airportcode is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.DestAirport = \"APG\"", "score": -1.6995203495025635, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose destairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.DestAirport = \"APG\"", "score": -1.8838897943496704, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose destairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"APG\"", "score": -2.2531697750091553, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose airportcode is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"APG\"", "score": -3.3082361221313477, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.City = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose city is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.7805137634277344, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"APG\"", "score": -3.8751132488250732, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose city is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportName = \"APG\"", "score": -4.309913158416748, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportName = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose airportname is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.5417914390563965, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = \"APG\"", "score": -4.639199733734131, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -4.818167209625244, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is 4 and destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.333179473876953, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights whose destairport is apg.", "gold_logos_error": false, "gold_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}
{"index": 250, "beams": [{"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -0.0021806780714541674, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"APG\"", "score": -1.3370981216430664, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.AirportCode = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose airportcode is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -1.5569936037063599, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"APG\"", "score": -2.8628735542297363, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.AirportCode = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose airportcode is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.DestAirport = \"APG\"", "score": -2.9430360794067383, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose destairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"APG\"", "score": -3.07309889793396, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.City = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose city is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.2014822959899902, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.3824474811553955, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT * FROM airlines", "score": -3.5399248600006104, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.609606981277466, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND flights.SourceAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is apg for flights associated with airports.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = \"APG\"", "score": -3.632427215576172, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -4.094310283660889, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportCode = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose airportcode is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -4.184821128845215, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.AirportCode = \"APG\"", "logos": "Find the flightnos of flights associated with airports whose airportcode is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -4.6214447021484375, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "logos": "Find the flightnos of flights whose sourceairport is 4 and destairport is apg.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT * FROM airlines", "score": -5.614546298980713, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights whose destairport is apg.", "gold_logos_error": false, "gold_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}
{"index": 251, "beams": [{"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.0005593431415036321, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.7145856618881226, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.453659772872925, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.584068536758423, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.5872480869293213, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.5985844135284424, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.6310853958129883, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.6508748531341553, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.6723031997680664, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.740929365158081, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.744607925415039, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"?\"", "score": -3.9074928760528564, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.SourceAirport = \"?\"", "logos": "Find the flightnos of flights whose sourceairport is ? for flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.190697193145752, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose airportname is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"What\"", "score": -4.270438194274902, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.SourceAirport = \"What\"", "logos": "Find the flightnos of flights whose sourceairport is what for flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "gold_logos_error": false, "gold_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 252, "beams": [{"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.006288997363299131, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.6119390726089478, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -2.5670292377471924, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose airportname is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"Aberdeen\"", "score": -3.151153326034546, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"Aberdeen\"", "logos": "Find the flightnos of flights whose sourceairport is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.65832781791687, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(flights.FlightNo) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the sum of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"leaving\"", "score": -3.8143653869628906, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.SourceAirport = \"leaving\"", "logos": "Find the flightnos of flights whose sourceairport is leaving for flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"flights\"", "score": -3.8336341381073, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.SourceAirport = \"flights\"", "logos": "Find the flightnos of flights whose sourceairport is flights for flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"Give\"", "score": -3.84437894821167, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.SourceAirport = \"Give\"", "logos": "Find the flightnos of flights whose sourceairport is give for flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT MAX(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.058645248413086, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(flights.FlightNo) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the maximum of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.119905948638916, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.192620754241943, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.315340042114258, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT DISTINCT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.42806339263916, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.679787635803223, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "gold_logos_error": false, "gold_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 253, "beams": [{"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.10349629819393158, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.2892991900444031, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -1.4767441749572754, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"Aberdeen\"", "score": -3.0234310626983643, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.DestAirport AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.202507972717285, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE flights.DestAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.083700180053711, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"?\"", "score": -4.1128973960876465, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE  airports.AirportCode = flights.SourceAirport  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"?\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen and airportname is ?.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.166537284851074, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.175103664398193, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.4933366775512695, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.6621413230896, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "gold_logos_error": false, "gold_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 254, "beams": [{"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.009500756859779358, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.937972903251648, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM airports, flights WHERE airports.AirportCode = flights.SourceAirport AND airports.City = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.492035388946533, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.502389669418335, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Give\"", "score": -3.689915895462036, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"Give\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen and airportname is give.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.782299757003784, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.8118979930877686, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"Give\"", "score": -3.95953369140625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.SourceAirport = \"Give\"", "logos": "Find the flightnos of flights whose sourceairport is give for flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.060882568359375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"flights\"", "score": -4.127119064331055, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"flights\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen and airportname is flights.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"the\"", "score": -4.157584190368652, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND airports.AirportName = \"the\"", "logos": "Find the flightnos of flights associated with airports whose city is aberdeen and airportname is the.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"flights\"", "score": -4.160088539123535, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE  flights.SourceAirport = airports.AirportCode  AND airports.City = \"Aberdeen\"  AND flights.SourceAirport = \"flights\"", "logos": "Find the flightnos of flights whose sourceairport is flights for flights associated with airports whose city is aberdeen.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.233875751495361, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.2760090827941895, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM airlines", "logos": "Find everything about airlines.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.366827487945557, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT flights.FlightNo FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.AirportName = \"Aberdeen\"", "logos": "Find the flightnos of flights associated with airports whose airportname is aberdeen.", "logos_error": false, "implicit_parse_error": false}], "db_name": "flight_2", "gold_parse_error": false, "gold_logos": "Find the flightnos of flights associated with airports whose city is aberdeen.", "gold_logos_error": false, "gold_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"index": 297, "beams": [{"orig_question": "How many documents do we have?", "inferred_code": "SELECT COUNT(*) FROM Documents", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents", "logos": "Find the number of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.005124092102051, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.30284309387207, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.321869373321533, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT COUNT(*) FROM Documents ORDER BY Documents.Document_ID", "score": -7.920613765716553, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents ORDER BY Documents.Document_ID", "logos": "Find the number of documents.\nSort results first by the document id of documents in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Documents", "score": -7.941351413726807, "correct_code": "SELECT count(*) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM Documents", "logos": "Find the number of documents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.542174339294434, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.618041038513184, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.695989608764648, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.7063627243042, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.735620498657227, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.182684898376465, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.247198104858398, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of documents.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Documents"}
{"index": 298, "beams": [{"orig_question": "Count the number of documents.", "inferred_code": "SELECT COUNT(*) FROM Documents", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents", "logos": "Find the number of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.24639368057251, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.393346309661865, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.557864189147949, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.5749592781066895, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT COUNT(*) FROM Documents ORDER BY Documents.Document_ID", "score": -8.09228801727295, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents ORDER BY Documents.Document_ID", "logos": "Find the number of documents.\nSort results first by the document id of documents in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Documents", "score": -8.283616065979004, "correct_code": "SELECT count(*) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM Documents", "logos": "Find the number of documents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.39978313446045, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.6084623336792, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.631431579589844, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.66751480102539, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.77153491973877, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.388795852661133, "correct_code": "SELECT count(*) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of documents.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Documents"}
{"index": 299, "beams": [{"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": 0.0, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "logos": "Find the document ids, document names and document descriptions of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.28317928314209, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.3836541175842285, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Description = \"for\"", "score": -5.675683975219727, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Description = \"for\"", "logos": "Find the document ids, document names and document descriptions of documents whose document description is for.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Description = \"VALUE\"", "score": -5.828013896942139, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Description = \"VALUE\"", "logos": "Find the document ids, document names and document descriptions of documents whose document description is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.608645915985107, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.696889877319336, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents ORDER BY Documents.Document_Description", "score": -6.776599407196045, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents ORDER BY Documents.Document_Description", "logos": "Find the document ids, document names and document descriptions of documents.\nSort results first by the document description of documents in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.597419261932373, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.798354148864746, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.8210906982421875, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document ids, document names and document descriptions of documents.", "gold_logos_error": false, "gold_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"index": 300, "beams": [{"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -4.897050942531678e-08, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "logos": "Find the document ids, document names and document descriptions of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.54247522354126, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.900386333465576, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.903465747833252, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -5.963942050933838, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "logos": "Find the document ids, document names and document descriptions of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.154378414154053, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.390271186828613, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.639797687530518, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.696907997131348, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents ORDER BY Documents.Document_Description", "score": -6.850323677062988, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents ORDER BY Documents.Document_Description", "logos": "Find the document ids, document names and document descriptions of documents.\nSort results first by the document description of documents in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.879768371582031, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.697690010070801, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document ids, document names and document descriptions of documents.", "gold_logos_error": false, "gold_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"index": 301, "beams": [{"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -8.141724538290873e-05, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "logos": "Find the document names and template ids of documents whose document description is like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.1582489013671875, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.900860071182251, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.1877923011779785, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5818283557891846, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7292323112487793, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.906738758087158, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -3.954711675643921, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "logos": "Find the document names and template ids of documents whose document description is like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.968015670776367, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.033539772033691, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.180863380432129, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.2665863037109375, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.32150936126709, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.385244846343994, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document names and template ids of documents whose document description is like %w%.", "gold_logos_error": false, "gold_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}
{"index": 302, "beams": [{"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -4.5459154307536664e-07, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "logos": "Find the document names and template ids of documents whose document description is like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\" AND Documents.Template_ID LIKE \"% w %\"", "score": -3.743302822113037, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\" AND Documents.Template_ID LIKE \"% w %\"", "logos": "Find the document names and template ids of documents whose document description is like % w % and template id is like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Name LIKE \"% w %\"", "score": -3.924701690673828, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Name LIKE \"% w %\"", "logos": "Find the document names and template ids of documents whose document name is like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -4.29721212387085, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "logos": "Find the document ids and template ids of documents whose document description is like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.390155792236328, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -4.396082401275635, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "logos": "Find the document names and template ids of documents whose document description is like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.4112420082092285, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description NOT LIKE \"% w %\"", "score": -4.774215221405029, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description NOT LIKE \"% w %\"", "logos": "Find the document names and template ids of documents whose document description is not like % w %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.7959513664245605, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.821129322052002, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.823332786560059, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.825634002685547, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.849323749542236, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.001657962799072, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.102433204650879, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document names and template ids of documents whose document description is like %w%.", "gold_logos_error": false, "gold_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}
{"index": 303, "beams": [{"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -4.87467332277447e-07, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.826815128326416, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.9014227390289307, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -3.1056056022644043, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Robbin CV\"", "score": -3.5098822116851807, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Documents.Document_ID,  Documents.Template_ID,  Documents.Document_Description FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Documents.Document_Name = \"Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv for documents associated with templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" AND Documents.Document_Description = \"Robbin CV\"", "score": -3.5737736225128174, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" AND Documents.Document_Description = \"Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv and document description is robbin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6745364665985107, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.8558146953582764, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbinin CV\"", "score": -4.258456230163574, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbinin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbinin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.322727680206299, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.383638381958008, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"in CV\"", "score": -4.593992710113525, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"in CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is in cv.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv.", "gold_logos_error": false, "gold_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}
{"index": 304, "beams": [{"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -1.371004145767074e-06, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.6567375659942627, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -2.8667895793914795, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5007877349853516, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5038411617279053, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Robbin CV\"", "score": -3.5062403678894043, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Documents.Document_ID,  Documents.Template_ID,  Documents.Document_Description FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Documents.Document_Name = \"Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv for documents associated with templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6981849670410156, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7515087127685547, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbinin CV\"", "score": -4.057368278503418, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbinin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbinin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.195888996124268, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robb Robbin CV\"", "score": -4.294442176818848, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robb Robbin CV\"", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robb robbin cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.5000715255737305, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" ORDER BY Documents.Document_Description", "score": -4.666679859161377, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" ORDER BY Documents.Document_Description", "logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv.\nSort results first by the document description of documents in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document ids, template ids and document descriptions of documents whose document name is robbin cv.", "gold_logos_error": false, "gold_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}
{"index": 305, "beams": [{"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -0.004294655751436949, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "logos": "Find the number of different template ids of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.203868865966797, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.830608367919922, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.356925964355469, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.736972332000732, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.8778910636901855, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.027105331420898, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.057412624359131, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -7.334561347961426, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "logos": "Find the number of different template ids of documents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.821061611175537, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of different template ids of documents.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT template_id) FROM Documents"}
{"index": 306, "beams": [{"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": 0.0, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "logos": "Find the number of different template ids of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.324666976928711, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.445898532867432, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.481184005737305, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.457398891448975, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.071232318878174, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -7.22995138168335, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "logos": "Find the number of different template ids of documents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.253178596496582, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.281661510467529, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.667571067810059, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.953964710235596, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.082374572753906, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of different template ids of documents.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT template_id) FROM Documents"}
{"index": 307, "beams": [{"orig_question": "How many documents are using the template with type code 'PPT'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"PPT\"", "score": -2.8121581863160827e-07, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = \"PPT\"", "logos": "Find the number of documents and the number of templates whose template type code is ppt for templates associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents are using the template with type code 'PPT'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.313889265060425, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents are using the template with type code 'PPT'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.513063430786133, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents are using the template with type code 'PPT'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.514343023300171, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents are using the template with type code 'PPT'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.725773811340332, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents are using the template with type code 'PPT'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.040959358215332, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many documents are using the template with type code 'PPT'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"code PPT\"", "score": -3.162555694580078, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Templates.Template_Type_Code = \"code PPT\"", "logos": "Find the number of documents and the number of templates whose template type code is code ppt for templates associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of documents and the number of templates whose template type code is ppt for templates associated with these documents.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"index": 308, "beams": [{"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"PPT\"", "score": -2.209623336791992, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = \"PPT\"", "logos": "Find the number of documents and the number of templates whose template type code is ppt for templates associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"PPT\"", "score": -2.458559513092041, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"PPT\"", "logos": "Find the number of templates whose template type code is ppt.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.258742332458496, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.536299228668213, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.574951648712158, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.155971050262451, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.175635814666748, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.272851467132568, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.292324066162109, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.746349811553955, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.299968719482422, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of documents that use the PPT template type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.39094352722168, "correct_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of documents and the number of templates whose template type code is ppt for templates associated with these documents.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"index": 309, "beams": [{"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "score": 0.0, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "logos": "Find the template ids and number of documents grouped by their template ids.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID", "score": -4.531976699829102, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Documents.Template_ID,  COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID", "logos": "Find the template ids and number of documents and the number of templates associated with these documents grouped by the template ids of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.6181159019470215, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) >= 1", "score": -4.624680042266846, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) >= 1", "logos": "Find the number, template ids and number of documents grouped by their template ids.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.034648895263672, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.144473552703857, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "score": -5.308719635009766, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "logos": "Find the template ids and number of documents grouped by their template ids.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.219522476196289, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.4248223304748535, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.488442897796631, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.75446891784668, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.890944957733154, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template ids and number of documents using each template.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.021191596984863, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template ids and number of documents grouped by their template ids.", "gold_logos_error": false, "gold_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"index": 310, "beams": [{"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "score": -3.9939038742886623e-08, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "logos": "Find the template ids and number of documents grouped by their template ids.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) >= 1", "score": -4.2440056800842285, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) >= 1", "logos": "Find the number, template ids and number of documents grouped by their template ids.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.5115132331848145, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID", "score": -4.685910224914551, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Documents.Template_ID,  COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID", "logos": "Find the template ids and number of documents and the number of templates associated with these documents grouped by the template ids of documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.7598090171813965, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.806917667388916, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.088068008422852, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "score": -5.283470630645752, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID, COUNT(*) FROM Documents GROUP BY Documents.Template_ID", "logos": "Find the template ids and number of documents grouped by their template ids.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.7618842124938965, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.863526344299316, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.87435245513916, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.297308921813965, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.524535179138184, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.6447834968566895, "correct_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template ids and number of documents grouped by their template ids.", "gold_logos_error": false, "gold_code": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"index": 313, "beams": [{"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "score": -3.116733569186181e-05, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "score": -2.050787925720215, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "logos": "Find the number and template ids of documents and the number of templates associated with these documents grouped by the template ids of documents.\nConsider only groups whose group size is greater than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "score": -4.215487957000732, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "logos": "Find the number and template ids of documents and the number of templates associated with these documents grouped by the template ids of documents.\nConsider only groups whose group size is greater than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"one\"", "score": -4.420018672943115, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"one\"", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than one.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.535222053527832, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 4", "score": -4.622670650482178, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 4", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 4.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > \"one\"", "score": -4.922720432281494, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > \"one\"", "logos": "Find the number and template ids of documents and the number of templates associated with these documents grouped by the template ids of documents.\nConsider only groups whose group size is greater than one.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.121140003204346, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 2", "score": -5.206103324890137, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 2", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.255549430847168, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.306633472442627, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) < 1", "score": -5.331897735595703, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) < 1", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) = 1", "score": -5.472391128540039, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) = 1", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show ids for all templates that are used by more than one document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.512016296386719, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 1.\n", "gold_logos_error": false, "gold_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"index": 314, "beams": [{"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "score": -4.477646143641323e-06, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "score": -2.9013335704803467, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > 1", "logos": "Find the number and template ids of documents and the number of templates associated with these documents grouped by the template ids of documents.\nConsider only groups whose group size is greater than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"single\"", "score": -3.5805575847625732, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"single\"", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than single.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 4", "score": -4.045763969421387, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 4", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 4.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"a\"", "score": -4.258216381072998, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"a\"", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than a.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.366373538970947, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.458378791809082, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 2", "score": -4.875502109527588, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 2", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.9534735679626465, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"than\"", "score": -5.041333198547363, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"than\"", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than than.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"more\"", "score": -5.184100151062012, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > \"more\"", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than more.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.391182899475098, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 3", "score": -5.481954097747803, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > 3", "logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids of any templates used in more than a single document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.53801965713501, "correct_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number and template ids of documents grouped by their template ids.\nConsider only groups whose group size is greater than 1.\n", "gold_logos_error": false, "gold_code": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"index": 317, "beams": [{"orig_question": "How many templates do we have?", "inferred_code": "SELECT COUNT(*) FROM Templates", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates", "logos": "Find the number of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.405636310577393, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.421266078948975, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.783257484436035, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.877835273742676, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.181680679321289, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.384013652801514, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.476891040802002, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.540022373199463, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Templates", "score": -7.764017105102539, "correct_code": "SELECT count(*) FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM Templates", "logos": "Find the number of templates.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT COUNT(*) FROM Templates ORDER BY Templates.Date_Effective_To", "score": -7.966418743133545, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates ORDER BY Templates.Date_Effective_To", "logos": "Find the number of templates.\nSort results first by the date effective to of templates in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.273927688598633, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.444620132446289, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of templates.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Templates"}
{"index": 318, "beams": [{"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates", "logos": "Find the number of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Date_Effective_To < \"s\"", "score": -6.2686262130737305, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Date_Effective_To < \"s\"", "logos": "Find the number of templates whose date effective to is less than s.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.445314407348633, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.531590938568115, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.490650653839111, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.585206031799316, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates ORDER BY Templates.Date_Effective_To", "score": -8.087017059326172, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates ORDER BY Templates.Date_Effective_To", "logos": "Find the number of templates.\nSort results first by the date effective to of templates in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.284871101379395, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Templates", "score": -8.454119682312012, "correct_code": "SELECT count(*) FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM Templates", "logos": "Find the number of templates.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.69350814819336, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.903031349182129, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.967235565185547, "correct_code": "SELECT count(*) FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of templates.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Templates"}
{"index": 319, "beams": [{"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": 0.0, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "logos": "Find the template ids, version numbers and template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.763944149017334, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.136532783508301, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -5.307868003845215, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_ID,  Templates.Version_Number,  Templates.Template_Type_Code FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "logos": "Find the template ids, version numbers and template type codes of templates associated with ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.608962535858154, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.663186073303223, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -6.201821327209473, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "logos": "Find the template ids, version numbers and template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "score": -6.231468200683594, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "logos": "Find the template ids, version numbers and template type codes of templates.\nSort results first by the template type code of templates in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.416516304016113, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.789773941040039, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.051171779632568, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template ids, version numbers and template type codes of templates.", "gold_logos_error": false, "gold_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}
{"index": 320, "beams": [{"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -4.897050942531678e-08, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "logos": "Find the template ids, version numbers and template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -5.219362258911133, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_ID,  Templates.Version_Number,  Templates.Template_Type_Code FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "logos": "Find the template ids, version numbers and template type codes of templates associated with ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.5939106941223145, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.694376468658447, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -5.8632354736328125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "logos": "Find the template ids, version numbers and template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "score": -6.059154033660889, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "logos": "Find the template ids, version numbers and template type codes of templates.\nSort results first by the template type code of templates in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.3231587409973145, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.326277732849121, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.3383331298828125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.389883518218994, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template ids, version numbers and template type codes of templates.", "gold_logos_error": false, "gold_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}
{"index": 321, "beams": [{"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "score": -6.308217592732035e-08, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "logos": "Find the template type codes of templates.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"VALUE\"", "score": -6.265624046325684, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"VALUE\"", "logos": "Find the template type codes of templates whose template details is value.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"template\"", "score": -7.230869293212891, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"template\"", "logos": "Find the template type codes of templates whose template details is template.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT MIN(Templates.Template_Type_Code) FROM Templates", "score": -7.923338890075684, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(Templates.Template_Type_Code) FROM Templates", "logos": "Find the minimum of template type code of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "score": -8.024232864379883, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes of templates grouped by their template type codes.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.124120712280273, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "score": -8.293800354003906, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "logos": "Find the template type codes of templates.\nSort results first by the template type code of templates in ascending order.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "score": -8.479891777038574, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.485270500183105, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code, Templates.Date_Effective_To FROM Templates", "score": -8.943611145019531, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Templates.Template_Type_Code, Templates.Date_Effective_To FROM Templates", "logos": "Find the template type codes and date effective tos of templates.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes of templates.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT template_type_code FROM Templates"}
{"index": 322, "beams": [{"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "score": -2.173216489609331e-05, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "logos": "Find the template type codes of templates.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.8733930587768555, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates", "score": -5.99237585067749, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates", "logos": "Find the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "score": -6.026367664337158, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"VALUE\"", "score": -6.475985527038574, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"VALUE\"", "logos": "Find the template type codes of templates whose template details is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT MIN(Templates.Template_Type_Code) FROM Templates", "score": -6.570182800292969, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MIN(Templates.Template_Type_Code) FROM Templates", "logos": "Find the minimum of template type code of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"different\"", "score": -6.596663951873779, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"different\"", "logos": "Find the template type codes of templates whose template details is different.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"template\"", "score": -6.75872802734375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"template\"", "logos": "Find the template type codes of templates whose template details is template.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT MAX(Templates.Template_Type_Code) FROM Templates", "score": -7.668509006500244, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(Templates.Template_Type_Code) FROM Templates", "logos": "Find the maximum of template type code of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.028428077697754, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.633000373840332, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes of templates.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT template_type_code FROM Templates"}
{"index": 325, "beams": [{"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"CV\"", "score": -7.107350086243969e-08, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"CV\"", "logos": "Find the number of templates whose template type code is cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_Type_Code = \"CV\"", "score": -3.8740224838256836, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Templates.Template_Type_Code = \"CV\"", "logos": "Find the number of templates whose template type code is cv and the number of ref template types associated with these templates.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.9956159591674805, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.005922794342041, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.0599164962768555, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.084056377410889, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.44904899597168, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.655082702636719, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many templates have template type code CV?", "inferred_code": "SELECT COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code = \"CV\"", "score": -5.9010443687438965, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code = \"CV\"", "logos": "Find the number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of templates whose template type code is cv.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""}
{"index": 326, "beams": [{"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"CV\"", "score": -1.776837734723813e-07, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"CV\"", "logos": "Find the number of templates whose template type code is cv.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_Type_Code = \"CV\"", "score": -3.623147487640381, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Templates.Template_Type_Code = \"CV\"", "logos": "Find the number of templates whose template type code is cv and the number of ref template types associated with these templates.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.966191291809082, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.0379462242126465, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.1207194328308105, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.164853096008301, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.188730716705322, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.365015029907227, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"CV -\"", "score": -5.464659214019775, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = \"CV -\"", "logos": "Find the number of templates whose template type code is cv -.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code = \"CV\"", "score": -5.634603977203369, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code = \"CV\"", "logos": "Find the number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of templates of the type CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.91220760345459, "correct_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of templates whose template type code is cv.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""}
{"index": 327, "beams": [{"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5", "score": -0.16984257102012634, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -0.32855984568595886, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later VALUE\"", "score": -1.9400852918624878, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later VALUE\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than later value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"than 5\"", "score": -2.2980294227600098, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"than 5\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number VALUE\"", "score": -2.313416004180908, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number VALUE\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than number value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"version VALUE\"", "score": -2.485940456390381, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"version VALUE\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than version value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number 5\"", "score": -2.5534884929656982, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number 5\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than number 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later 5\"", "score": -2.6908152103424072, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later 5\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than later 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number\" AND Templates.Template_Type_Code > 5", "score": -2.7732701301574707, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number\" AND Templates.Template_Type_Code > 5", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than number and template type code is greater than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"5 %\"", "score": -2.778717517852783, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"5 %\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than 5 %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"with VALUE\"", "score": -2.7818074226379395, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"with VALUE\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than with value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later\" AND Templates.Template_Type_Code > 5", "score": -2.8205161094665527, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later\" AND Templates.Template_Type_Code > 5", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than later and template type code is greater than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"version 5\"", "score": -2.9706454277038574, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"version 5\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than version 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later VALUE.VALUE\"", "score": -2.9713218212127686, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later VALUE.VALUE\"", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than later value.value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.216878890991211, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.4461357593536377, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the version numbers and template type codes of templates whose version number is greater than 5.", "gold_logos_error": false, "gold_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"index": 328, "beams": [{"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5", "score": -0.004409371875226498, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5", "logos": "Find the version numbers and template type codes of templates whose version number is greater than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -1.683529019355774, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.3865087032318115, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.421567678451538, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.433044195175171, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.477663516998291, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.4823131561279297, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.6218345165252686, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.8200175762176514, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details > 5", "score": -2.8761985301971436, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details > 5", "logos": "Find the version numbers and template type codes of templates whose template details is greater than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Type_Code > 5", "score": -2.976545810699463, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Type_Code > 5", "logos": "Find the version numbers and template type codes of templates whose template type code is greater than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.060202121734619, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.072554349899292, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5", "score": -3.0837574005126953, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5", "logos": "Find the version numbers and template type codes of templates whose date effective from is greater than 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.086591958999634, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.3163435459136963, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the version numbers and template type codes of templates whose version number is greater than 5.", "gold_logos_error": false, "gold_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"index": 329, "beams": [{"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": 0.0, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "score": -4.239522933959961, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "logos": "Find the number, template type codes and number of templates grouped by their template type codes.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code", "score": -4.343745231628418, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates and the number of ref template types associated with these templates grouped by the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.773826599121094, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.921121120452881, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": -5.2516679763793945, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.302059650421143, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.491859436035156, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.1671600341796875, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.355504989624023, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.358802318572998, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.476073265075684, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and number of templates for each.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.616175651550293, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes and number of templates grouped by their template type codes.", "gold_logos_error": false, "gold_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}
{"index": 330, "beams": [{"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": 0.0, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "score": -3.9907357692718506, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "logos": "Find the number, template type codes and number of templates grouped by their template type codes.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code", "score": -4.385033130645752, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates and the number of ref template types associated with these templates grouped by the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.193363666534424, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.197155475616455, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": -5.2312331199646, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.489413738250732, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.720312595367432, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.286622047424316, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.336259365081787, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.464498043060303, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many templates correspond to each?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.602489948272705, "correct_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes and number of templates grouped by their template type codes.", "gold_logos_error": false, "gold_code": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}
{"index": 333, "beams": [{"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "score": -0.0004751313244923949, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"three\"", "score": -1.9206581115722656, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"three\"", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than three.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.3800344467163086, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "score": -3.844844341278076, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "logos": "Find the number and template type codes of templates and the number of ref template types associated with these templates grouped by the template type codes of templates.\nConsider only groups whose group size is less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.9234235286712646, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.382254600524902, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"min\"", "score": -5.029374599456787, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"min\"", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than min.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 4", "score": -5.030831336975098, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 4", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than 4.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 3", "score": -5.152160167694092, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 3", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is greater than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.241676330566406, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes with less than three templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"null\"", "score": -5.259984493255615, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"null\"", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than null.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than 3.\n", "gold_logos_error": false, "gold_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}
{"index": 334, "beams": [{"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "score": -8.884188673619065e-08, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "score": -3.9759128093719482, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3", "logos": "Find the number and template type codes of templates and the number of ref template types associated with these templates grouped by the template type codes of templates.\nConsider only groups whose group size is less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.545313835144043, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.5611653327941895, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 3", "score": -4.908498287200928, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 3", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is greater than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.9865875244140625, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.03107213973999, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.071573734283447, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.12322998046875, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.190706729888916, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.271264553070068, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"fewer\"", "score": -5.386279582977295, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"fewer\"", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than fewer.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.4003753662109375, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) <= 3", "score": -5.483962535858154, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) <= 3", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is not greater than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of template types that have fewer than 3 templates?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"than\"", "score": -5.68565559387207, "correct_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < \"than\"", "logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than than.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number and template type codes of templates grouped by their template type codes.\nConsider only groups whose group size is less than 3.\n", "gold_logos_error": false, "gold_code": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}
{"index": 337, "beams": [{"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -4.070831209901371e-07, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Documents.Document_Name = \"Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.3190083503723145, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data Data base\"", "score": -3.668583631515503, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Documents.Document_Name = \"Data Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is data data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"name Data base\"", "score": -3.724334478378296, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Documents.Document_Name = \"name Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is name data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -3.8104043006896973, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID AND Documents.Document_Name = \"Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.111187934875488, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"the Data base\"", "score": -4.2951507568359375, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Documents.Document_Name = \"the Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is the data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.443716526031494, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.521152973175049, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.527090072631836, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base base\"", "score": -4.615897178649902, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Documents.Document_Name = \"Data base base\"", "logos": "Find the template type codes of templates associated with documents whose document name is data base base.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes of templates associated with documents whose document name is data base.", "gold_logos_error": false, "gold_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}
{"index": 338, "beams": [{"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -0.0010478738695383072, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID AND Documents.Document_Name = \"Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -1.3369404077529907, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Documents.Document_Name = \"Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.2610924243927, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"named base\"", "score": -3.0148138999938965, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"named base\"", "logos": "Find the template type codes of templates associated with documents whose document name is named base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"named Data base\"", "score": -3.079427719116211, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"named Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is named data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.160324811935425, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"document Data base\"", "score": -3.2606201171875, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"document Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is document data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"used Data base\"", "score": -3.4923272132873535, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"used Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is used data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data Data base\"", "score": -3.4997291564941406, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"Data Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is data data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"a Data base\"", "score": -3.6272761821746826, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"a Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is a data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"by Data base\"", "score": -3.7941439151763916, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"by Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is by data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"template Data base\"", "score": -3.8827478885650635, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Documents.Document_Name = \"template Data base\"", "logos": "Find the template type codes of templates associated with documents whose document name is template data base.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data .\"", "score": -4.085748672485352, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID AND Documents.Document_Name = \"Data .\"", "logos": "Find the template type codes of templates associated with documents whose document name is data ..", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"used base\"", "score": -4.08815860748291, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID AND Documents.Document_Name = \"used base\"", "logos": "Find the template type codes of templates associated with documents whose document name is used base.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes of templates associated with documents whose document name is data base.", "gold_logos_error": false, "gold_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}
{"index": 339, "beams": [{"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"BK\"", "score": -1.2186673359337874e-07, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = \"BK\"", "logos": "Find the document names of documents associated with templates whose template type code is bk.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.11425518989563, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.1230382919311523, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.1821513175964355, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.2641007900238037, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.287306785583496, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.298433303833008, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.357606887817383, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.375014305114746, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5517117977142334, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"type\" AND Templates.Template_Type_Code = \"BK\"", "score": -3.608691930770874, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Templates.Template_Type_Code = \"type\"  AND Templates.Template_Type_Code = \"BK\"", "logos": "Find the document names of documents associated with templates whose template type code is type and template type code is bk.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.828778028488159, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document names using templates with template type code BK.", "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"code BK\"", "score": -3.834918975830078, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Templates.Template_Type_Code = \"code BK\"", "logos": "Find the document names of documents associated with templates whose template type code is code bk.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document names of documents associated with templates whose template type code is bk.", "gold_logos_error": false, "gold_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""}
{"index": 340, "beams": [{"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"BK\"", "score": -9.140005374774773e-08, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = \"BK\"", "logos": "Find the document names of documents associated with templates whose template type code is bk.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"BK\" AND Templates.Template_Type_Code = \"BK\"", "score": -4.0469865798950195, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Templates.Template_Type_Code = \"BK\"  AND Templates.Template_Type_Code = \"BK\"", "logos": "Find the document names of documents associated with templates whose template type code is bk and template type code is bk.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.0644755363464355, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.09668493270874, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.238986968994141, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.269254684448242, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"code BK\"", "score": -4.533764839172363, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Templates.Template_Type_Code = \"code BK\"", "logos": "Find the document names of documents associated with templates whose template type code is code bk.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.601879596710205, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.068495273590088, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"the BK\"", "score": -5.228390693664551, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Documents.Document_Name FROM Documents, Templates WHERE  Documents.Template_ID = Templates.Template_ID  AND Templates.Template_Type_Code = \"the BK\"", "logos": "Find the document names of documents associated with templates whose template type code is the bk.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of documents that use templates with the code BK?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.244590759277344, "correct_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document names of documents associated with templates whose template type code is bk.", "gold_logos_error": false, "gold_code": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""}
{"index": 341, "beams": [{"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code", "score": -0.11031554639339447, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates and the number of documents associated with these templates grouped by the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": -1.6803408861160278, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.2624614238739014, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code", "score": -3.050837755203247, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates and the number of documents associated with these templates grouped by the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "score": -3.151399612426758, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "logos": "Find the number, template type codes and number of templates and the number and number of documents associated with these templates grouped by the template type codes of templates.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.184539318084717, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.3353469371795654, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.3785314559936523, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code HAVING COUNT(*) = 1", "score": -3.4310412406921387, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code HAVING COUNT(*) = 1", "logos": "Find the number, template type codes and number of templates and the number and number of documents associated with these templates grouped by the template type codes of templates.\nConsider only groups whose group size is 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.4414169788360596, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5051345825195312, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.9288902282714844, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.966181993484497, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code", "score": -4.1066741943359375, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates and the number of documents associated with these templates grouped by the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and the number of documents using each type.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.358706474304199, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes and number of templates and the number of documents associated with these templates grouped by the template type codes of templates.", "gold_logos_error": false, "gold_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}
{"index": 342, "beams": [{"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": -0.0006382940919138491, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code", "score": -3.857126235961914, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Templates, Documents WHERE Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates and the number of documents associated with these templates grouped by the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "score": -3.89652943611145, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) >= 1", "logos": "Find the number, template type codes and number of templates grouped by their template type codes.\nConsider only groups whose group size is not less than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code", "score": -3.9807004928588867, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Templates.Template_Type_Code,  COUNT(*) FROM Templates, Documents WHERE Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates and the number of documents associated with these templates grouped by the template type codes of templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.088725566864014, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.37548828125, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.715337753295898, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.875109672546387, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.043409824371338, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": -5.424386978149414, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code", "logos": "Find the template type codes and number of templates grouped by their template type codes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.230613708496094, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different template type codes, and how many documents use each type?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.2409987449646, "correct_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes and number of templates and the number of documents associated with these templates grouped by the template type codes of templates.", "gold_logos_error": false, "gold_code": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}
{"index": 347, "beams": [{"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -2.878715577026014e-07, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "logos": "Find the template type codes and template type descriptions of ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -4.628565311431885, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Ref_Template_Types.Template_Type_Code,  Ref_Template_Types.Template_Type_Description FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "logos": "Find the template type codes and template type descriptions of ref template types associated with templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.8064069747924805, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.812357425689697, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.025806903839111, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.088214874267578, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.106901168823242, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.176900386810303, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.239989280700684, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.42929220199585, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.478611469268799, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.624606609344482, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types ORDER BY Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description", "score": -7.97340202331543, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types ORDER BY Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description", "logos": "Find the template type codes and template type descriptions of ref template types.\nSort results first by the template type code of ref template types and finally by their template type description in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes and template type descriptions of ref template types.", "gold_logos_error": false, "gold_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"index": 348, "beams": [{"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": 0.0, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "logos": "Find the template type codes and template type descriptions of ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.195826530456543, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.208924770355225, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.212180137634277, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.231346130371094, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.320881366729736, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.330066204071045, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.369227886199951, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.5169501304626465, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types ORDER BY Ref_Template_Types.Template_Type_Description", "score": -7.923111438751221, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types ORDER BY Ref_Template_Types.Template_Type_Description", "logos": "Find the template type codes and template type descriptions of ref template types.\nSort results first by the template type description of ref template types in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.923130989074707, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.483549118041992, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes and template type descriptions of ref template types.", "gold_logos_error": false, "gold_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"index": 349, "beams": [{"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\"", "score": 0.0, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\" AND Ref_Template_Types.Template_Type_Code = \"AD\"", "score": -4.842771530151367, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\" AND Ref_Template_Types.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is ad and template type code is ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = \"AD\"", "score": -5.0439934730529785, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types, Templates WHERE  Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  AND Ref_Template_Types.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is ad for ref template types associated with templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.902237415313721, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code LIKE \"% AD %\"", "score": -6.369626045227051, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code LIKE \"% AD %\"", "logos": "Find the template type descriptions of ref template types whose template type code is like % ad %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.417557716369629, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"template AD\"", "score": -6.601220607757568, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"template AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is template ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.739472389221191, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.858141899108887, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"type AD\"", "score": -6.897109508514404, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"type AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is type ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.205265045166016, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"code\"", "score": -7.256341457366943, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"code\"", "logos": "Find the template type descriptions of ref template types whose template type code is code.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type descriptions for template type code \"AD\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.457002639770508, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type descriptions of ref template types whose template type code is ad.", "gold_logos_error": false, "gold_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""}
{"index": 350, "beams": [{"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\"", "score": 0.0, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = \"AD\"", "score": -4.374212741851807, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types, Templates WHERE  Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  AND Ref_Template_Types.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is ad for ref template types associated with templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_Type_Code = \"AD\"", "score": -4.6749796867370605, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types, Templates WHERE  Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  AND Templates.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types associated with templates whose template type code is ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\" AND Ref_Template_Types.Template_Type_Code = \"AD\"", "score": -4.81727409362793, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"AD\" AND Ref_Template_Types.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is ad and template type code is ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"the\" AND Ref_Template_Types.Template_Type_Code = \"AD\"", "score": -4.863128185272217, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"the\" AND Ref_Template_Types.Template_Type_Code = \"AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is the and template type code is ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.727962970733643, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"code AD\"", "score": -5.794597148895264, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"code AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is code ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"with AD\"", "score": -6.135113716125488, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"with AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is with ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.371435165405273, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"the AD\"", "score": -6.7128190994262695, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"the AD\"", "logos": "Find the template type descriptions of ref template types whose template type code is the ad.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.937117099761963, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"code\"", "score": -6.976294994354248, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"code\"", "logos": "Find the template type descriptions of ref template types whose template type code is code.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.069681644439697, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the template type description of the template type with the code AD.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"the\"", "score": -7.071966648101807, "correct_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = \"the\"", "logos": "Find the template type descriptions of ref template types whose template type code is the.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type descriptions of ref template types whose template type code is ad.", "gold_logos_error": false, "gold_code": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""}
{"index": 351, "beams": [{"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": 0.0, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Code = \"Book\"", "score": -4.766327857971191, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Code = \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is book and template type code is book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -4.9870924949646, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Description = \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is book and template type description is book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.737079620361328, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description\"", "score": -6.223260402679443, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description\"", "logos": "Find the template type codes of ref template types whose template type description is description.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.484301567077637, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.510527610778809, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.5680413246154785, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"type Book\"", "score": -6.869050979614258, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"type Book\"", "logos": "Find the template type codes of ref template types whose template type description is type book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.038372993469238, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description != \"Book\"", "score": -7.210831165313721, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description != \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is not book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.220238208770752, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes of ref template types whose template type description is book.", "gold_logos_error": false, "gold_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}
{"index": 352, "beams": [{"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": 0.0, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Code = \"Book\"", "score": -4.773569583892822, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Code = \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is book and template type code is book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -5.066678047180176, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Description = \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is book and template type description is book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -5.390791893005371, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is book for ref template types associated with templates.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.1937689781188965, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.601734638214111, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description Book\"", "score": -6.6932196617126465, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description Book\"", "logos": "Find the template type codes of ref template types whose template type description is description book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.791985988616943, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.063952445983887, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.145565032958984, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description != \"Book\"", "score": -7.228740692138672, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description != \"Book\"", "logos": "Find the template type codes of ref template types whose template type description is not book.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.440946102142334, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.475183963775635, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type codes of ref template types whose template type description is book.", "gold_logos_error": false, "gold_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}
{"index": 353, "beams": [{"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -0.7039713859558105, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "logos": "Find the template type descriptions of ref template types associated with templates.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID", "score": -2.3982279300689697, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates, Ref_Template_Types, Documents WHERE  Templates.Template_ID = Documents.Template_ID  AND Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "logos": "Find the template type descriptions of ref template types associated with templates, and for templates associated with documents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.4704771041870117, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.797375440597534, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.024164199829102, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.829780101776123, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.94693660736084, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.020657062530518, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.064242362976074, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.070407390594482, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.220920085906982, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.285715103149414, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.148961067199707, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type descriptions of ref template types associated with templates, and for templates associated with documents.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"index": 354, "beams": [{"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -1.7219046354293823, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates, Ref_Template_Types WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "logos": "Find the template type descriptions of ref template types associated with templates.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -4.589396953582764, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates, Documents, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Templates.Template_ID = Documents.Template_ID", "logos": "Find the template type descriptions of ref template types associated with templates, and for templates associated with documents.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.811328411102295, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.873345851898193, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.917053699493408, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.945636749267578, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.0162034034729, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.070993900299072, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.123366832733154, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.4469404220581055, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.506993293762207, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.78813362121582, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.34677267074585, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.434600830078125, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template type descriptions of ref template types associated with templates, and for templates associated with documents.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"index": 355, "beams": [{"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -1.828001501280596e-07, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"", "logos": "Find the template ids of templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" INTERSECT SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -2.494387626647949, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"", "logos": "Find the template ids of templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.673161029815674, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" AND Templates.Template_Type_Code = \"Presentation\"", "score": -3.841820478439331, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"  AND Templates.Template_Type_Code = \"Presentation\"", "logos": "Find the template ids of templates whose template type code is presentation for templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" INTERSECT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -4.137044429779053, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"", "logos": "Find the template ids of templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.254396915435791, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.617279529571533, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.6307501792907715, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.63720178604126, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.766564846038818, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.827301025390625, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.873006343841553, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template ids of templates associated with ref template types whose template type description is presentation.", "gold_logos_error": false, "gold_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}
{"index": 356, "beams": [{"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -5.78867570766306e-07, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"", "logos": "Find the template ids of templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" INTERSECT SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -2.873142719268799, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"", "logos": "Find the template ids of templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" AND Templates.Template_Type_Code = \"Presentation\"", "score": -4.046019077301025, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"  AND Templates.Template_Type_Code = \"Presentation\"", "logos": "Find the template ids of templates whose template type code is presentation for templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" AND Templates.Date_Effective_To = \"Presentation\"", "score": -4.101696491241455, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Templates.Template_ID FROM Templates, Ref_Template_Types WHERE  Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  AND Ref_Template_Types.Template_Type_Description = \"Presentation\"  AND Templates.Date_Effective_To = \"Presentation\"", "logos": "Find the template ids of templates whose date effective to is presentation for templates associated with ref template types whose template type description is presentation.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.2045087814331055, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.30146598815918, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.7403740882873535, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.883193016052246, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.920659065246582, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.955752849578857, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.0413899421691895, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.091429710388184, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the template ids of templates associated with ref template types whose template type description is presentation.", "gold_logos_error": false, "gold_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}
{"index": 357, "beams": [{"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Paragraphs", "logos": "Find the number of paragraphs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.339728832244873, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.398983955383301, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.405689239501953, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Paragraphs", "score": -7.609496593475342, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM Paragraphs", "logos": "Find the number of paragraphs.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs ORDER BY Paragraphs.Paragraph_ID", "score": -7.641952991485596, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Paragraphs ORDER BY Paragraphs.Paragraph_ID", "logos": "Find the number of paragraphs.\nSort results first by the paragraph id of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.208415985107422, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.624150276184082, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs AS 0", "score": -8.628588676452637, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": true, "parse_error": true, "implicit_inferred_code": "SELECT COUNT(*) FROM Paragraphs AS 0", "logos": "Find the number of paragraphs.", "logos_error": false, "implicit_parse_error": true}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.652116775512695, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.289979934692383, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of paragraphs.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Paragraphs"}
{"index": 358, "beams": [{"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Paragraphs", "logos": "Find the number of paragraphs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.837428569793701, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.316461563110352, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.363677978515625, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.55129861831665, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs ORDER BY Paragraphs.Paragraph_ID", "score": -7.627152919769287, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Paragraphs ORDER BY Paragraphs.Paragraph_ID", "logos": "Find the number of paragraphs.\nSort results first by the paragraph id of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.020085334777832, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.274956703186035, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.383222579956055, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Paragraphs", "score": -8.505241394042969, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM Paragraphs", "logos": "Find the number of paragraphs.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.57742691040039, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.664767265319824, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of paragraphs.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Paragraphs"}
{"index": 359, "beams": [{"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -7.669522261721795e-08, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\"", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" AND Paragraphs.Paragraph_Text = \"Summer Show\"", "score": -3.3004603385925293, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\"  AND Paragraphs.Paragraph_Text = \"Summer Show\"", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs whose paragraph text is summer show for paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6701464653015137, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.752272367477417, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.9706342220306396, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.030746936798096, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"name Summer Show\"", "score": -4.053555965423584, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"name Summer Show\"", "logos": "Find the number of paragraphs and the number of documents whose document name is name summer show for documents associated with these paragraphs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" GROUP BY Paragraphs.Paragraph_Text", "score": -4.140703201293945, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\" GROUP BY Paragraphs.Paragraph_Text", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents grouped by the paragraph texts of paragraphs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.238967418670654, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" ORDER BY Paragraphs.Paragraph_Text", "score": -4.247531890869141, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\" ORDER BY Paragraphs.Paragraph_Text", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents.\nSort results first by the paragraph text of paragraphs in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.462086200714111, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is summer show.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT SUM(Paragraphs.Paragraph_Text) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.522037506103516, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(Paragraphs.Paragraph_Text) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\"", "logos": "Find the sum of paragraph texts of paragraphs associated with documents whose document name is summer show.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.564474582672119, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents WHERE Documents.Document_Name = \"Summer Show\"", "logos": "Find the number of documents whose document name is summer show.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}
{"index": 360, "beams": [{"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -2.3008570337879064e-07, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\"", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" AND Paragraphs.Paragraph_Text = \"Summer Show\"", "score": -3.3231594562530518, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\"  AND Paragraphs.Paragraph_Text = \"Summer Show\"", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs whose paragraph text is summer show for paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -3.586996555328369, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Summer Show\"", "logos": "Find the number of paragraphs and the number of documents whose document name is summer show for documents associated with these paragraphs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7540271282196045, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7655062675476074, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.794840097427368, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" GROUP BY Paragraphs.Paragraph_Text", "score": -4.050047397613525, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\" GROUP BY Paragraphs.Paragraph_Text", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents grouped by the paragraph texts of paragraphs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" ORDER BY Paragraphs.Paragraph_Text", "score": -4.2458953857421875, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show\" ORDER BY Paragraphs.Paragraph_Text", "logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents.\nSort results first by the paragraph text of paragraphs in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show Show\"", "score": -4.247913360595703, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Show Show\"", "logos": "Find the number of paragraphs and the number of documents whose document name is summer show show for documents associated with these paragraphs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.261407375335693, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Summer Show\"", "score": -4.371190071105957, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Summer Summer Show\"", "logos": "Find the number of documents whose document name is summer summer show and the number of paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.432773590087891, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.583730220794678, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Documents WHERE Documents.Document_Name = \"Summer Show\"", "logos": "Find the number of documents whose document name is summer show.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number of documents whose document name is summer show and the number of paragraphs associated with these documents.\n", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}
{"index": 361, "beams": [{"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\"", "score": -7.235896646307083e-07, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\"", "logos": "Find the other details of paragraphs whose paragraph text is korea.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text = \"Korea\"", "score": -3.3494272232055664, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs, Documents WHERE Paragraphs.Document_ID = Documents.Document_ID AND Paragraphs.Paragraph_Text = \"Korea\"", "logos": "Find the other details of paragraphs whose paragraph text is korea for paragraphs associated with documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Other_Details = \"Korea\"", "score": -5.314347267150879, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Other_Details = \"Korea\"", "logos": "Find the other details of paragraphs whose paragraph text is korea and other details is korea.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Paragraph_ID = \"Korea\"", "score": -5.474178314208984, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Paragraph_ID = \"Korea\"", "logos": "Find the other details of paragraphs whose paragraph text is korea and paragraph id is korea.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Other_Details = \".\"", "score": -5.881747722625732, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Other_Details = \".\"", "logos": "Find the other details of paragraphs whose paragraph text is korea and other details is ..", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.35603666305542, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.574761390686035, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.667330265045166, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.71903657913208, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" ORDER BY Paragraphs.Other_Details", "score": -6.851373672485352, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" ORDER BY Paragraphs.Other_Details", "logos": "Find the other details of paragraphs whose paragraph text is korea.\nSort results first by the other details of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\"", "score": -6.904334545135498, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\"", "logos": "Find the other details of paragraphs whose paragraph text is korea.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.173171043395996, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"Korea\"", "score": -7.255502700805664, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"Korea\"", "logos": "Find the other details of paragraphs whose paragraph text is like korea.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the other details of paragraphs whose paragraph text is like korea.", "gold_logos_error": false, "gold_code": "select other_details from paragraphs where paragraph_text like 'korea'"}
{"index": 362, "beams": [{"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -9.271564522350673e-06, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "logos": "Find the other details of paragraphs whose paragraph text is like % korea %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -2.7856664657592773, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "logos": "Find the other details of paragraphs whose paragraph text is like % korea % for paragraphs associated with documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -3.561990261077881, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "logos": "Find the paragraph texts of paragraphs whose paragraph text is like % korea %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6598994731903076, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.677633285522461, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.186127185821533, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -5.285362720489502, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "logos": "Find the paragraph texts of paragraphs whose paragraph text is like % korea % for paragraphs associated with documents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.297455787658691, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.53195333480835, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea like\"", "score": -5.675230503082275, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea like\"", "logos": "Find the other details of paragraphs whose paragraph text is like % korea like.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\" ORDER BY Paragraphs.Other_Details", "score": -5.685729026794434, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\" ORDER BY Paragraphs.Other_Details", "logos": "Find the other details of paragraphs whose paragraph text is like % korea %.\nSort results first by the other details of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.819235324859619, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the other details of paragraphs whose paragraph text is like korea.", "gold_logos_error": false, "gold_code": "select other_details from paragraphs where paragraph_text like 'korea'"}
{"index": 363, "beams": [{"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -0.007396950852125883, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -0.7258918881416321, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\" AND Paragraphs.Paragraph_Text = \"Welcome to NY\"", "score": -3.241177797317505, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"  AND Paragraphs.Paragraph_Text = \"Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs whose paragraph text is welcome to ny for paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.5024948120117188, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Documents.Document_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.579899549484253, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Documents.Document_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the document ids of documents whose document name is welcome to ny and the paragraph texts of paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.741760015487671, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_Text, Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.923251152038574, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_Text,  Documents.Document_ID FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the document ids of documents whose document name is welcome to ny and the paragraph texts of paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome Welcome to NY\"", "score": -3.954286575317383, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.098846912384033, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.122706413269043, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to to NY\"", "score": -4.172540664672852, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Documents.Document_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.193263053894043, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Documents.Document_ID,  Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph texts of paragraphs and the document ids of documents whose document name is welcome to ny for documents associated with these paragraphs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.2688422203063965, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.287222385406494, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"to NY\"", "score": -4.445248603820801, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE Documents.Document_ID = Paragraphs.Document_ID AND Documents.Document_Name = \"to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is to ny.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "gold_logos_error": false, "gold_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}
{"index": 364, "beams": [{"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -2.1219075279077515e-06, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -2.5294129848480225, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\" AND Paragraphs.Paragraph_Text = \"Welcome to NY\"", "score": -3.311805248260498, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"  AND Paragraphs.Paragraph_Text = \"Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs whose paragraph text is welcome to ny for paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text, Paragraphs.Paragraph_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.4876739978790283, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_Text,  Paragraphs.Paragraph_ID FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph texts and paragraph ids of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6123335361480713, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.7905125617980957, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\" ORDER BY Paragraphs.Paragraph_ID", "score": -3.9398882389068604, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\" ORDER BY Paragraphs.Paragraph_ID", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to ny.\nSort results first by the paragraph id of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome Welcome to NY\"", "score": -3.995190143585205, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to to NY\"", "score": -4.0555877685546875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text, Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.242315769195557, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_Text,  Documents.Document_ID FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the paragraph texts of paragraphs and the document ids of documents whose document name is welcome to ny for documents associated with these paragraphs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Documents.Document_Description, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.312748432159424, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Documents.Document_Description,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Welcome to NY\"", "logos": "Find the document descriptions of documents whose document name is welcome to ny and the paragraph texts of paragraphs associated with these documents.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name != \"Welcome to NY\"", "score": -4.326796531677246, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Paragraphs.Paragraph_ID,  Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name != \"Welcome to NY\"", "logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is not welcome to ny.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.3837666511535645, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the paragraph ids and paragraph texts of paragraphs associated with documents whose document name is welcome to ny.", "gold_logos_error": false, "gold_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}
{"index": 365, "beams": [{"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -0.1420397013425827, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Customer reviews\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -0.19955527782440186, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Customer reviews\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.2538485527038574, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.26084041595459, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "score": -3.494847059249878, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Customer reviews\"  AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "logos": "Find the paragraph texts of paragraphs whose paragraph id is customer reviews for paragraphs associated with documents whose document name is customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "score": -3.544027805328369, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Customer reviews\"  AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "logos": "Find the paragraph texts of paragraphs whose paragraph id is customer reviews for paragraphs associated with documents whose document name is customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6388325691223145, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.8425815105438232, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.8461122512817383, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.02782678604126, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.3876447677612305, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews.", "gold_logos_error": false, "gold_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}
{"index": 366, "beams": [{"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -1.8900335589933093e-06, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Customer reviews\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -3.3585622310638428, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs, Documents WHERE  Paragraphs.Document_ID = Documents.Document_ID  AND Documents.Document_Name = \"Customer reviews\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "score": -3.710554838180542, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Customer reviews\"  AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "logos": "Find the paragraph texts of paragraphs whose paragraph id is customer reviews for paragraphs associated with documents whose document name is customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer Customer reviews\"", "score": -4.273680210113525, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Customer Customer reviews\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer customer reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.580156326293945, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews reviews\"", "score": -4.848294734954834, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Customer reviews reviews\"", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews reviews.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" ORDER BY Paragraphs.Paragraph_Text", "score": -4.912668228149414, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents, Paragraphs WHERE  Documents.Document_ID = Paragraphs.Document_ID  AND Documents.Document_Name = \"Customer reviews\" ORDER BY Paragraphs.Paragraph_Text", "logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews.\nSort results first by the paragraph text of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.04852294921875, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.158475399017334, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.200568675994873, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.320945739746094, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the paragraph texts of paragraphs associated with documents whose document name is customer reviews.", "gold_logos_error": false, "gold_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}
{"index": 367, "beams": [{"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.8472061157226562, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(Paragraphs.Document_ID)", "score": -4.022265911102295, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(Paragraphs.Document_ID)", "logos": "Find the document ids and number of paragraphs grouped by their document ids.\nSort results first by the number document ids of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.166537284851074, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.443436145782471, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.675324440002441, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.720264911651611, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.7934746742248535, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT Paragraphs.Document_ID, COUNT(Paragraphs.Document_ID) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(Paragraphs.Document_ID)", "score": -4.835259437561035, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID, COUNT(Paragraphs.Document_ID) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(Paragraphs.Document_ID)", "logos": "Find the document ids and number of document ids of paragraphs grouped by their document ids.\nSort results first by the number document ids of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "inferred_code": "SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY SUM(Paragraphs.Document_ID)", "score": -4.86201810836792, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY SUM(Paragraphs.Document_ID)", "logos": "Find the document ids and number of paragraphs grouped by their document ids.\nSort results first by the sum document ids of paragraphs in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document ids and number of paragraphs grouped by their document ids.\nSort results first by the document id of paragraphs in ascending order.", "gold_logos_error": false, "gold_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"index": 368, "beams": [{"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.9189462661743164, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.9566457271575928, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.117241859436035, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.194825649261475, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.338994026184082, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.347604274749756, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.3951544761657715, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.47916841506958, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.5478057861328125, "correct_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the document ids and number of paragraphs grouped by their document ids.\nSort results first by the document id of paragraphs in ascending order.", "gold_logos_error": false, "gold_code": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"index": 371, "beams": [{"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "score": -3.1983077519726066e-07, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2 AND COUNT(*) >= 2", "score": -3.990777015686035, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2 AND COUNT(*) >= 2", "logos": "Find the number, number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 2 and is not less than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.291892051696777, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.323864459991455, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT Paragraphs.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "score": -4.34788179397583, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Documents, Paragraphs WHERE Documents.Document_ID = Paragraphs.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "logos": "Find the number and document ids of paragraphs and the number of documents associated with these paragraphs grouped by the document ids of paragraphs.\nConsider only groups whose group size is not less than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2 AND Paragraphs.Document_ID = 2", "score": -4.872556209564209, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2 AND Paragraphs.Document_ID = 2", "logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 2 and paragraph  of document id is 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.481751441955566, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.535787582397461, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.708911895751953, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.786439418792725, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.839703559875488, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List all document ids with at least two paragraphs.", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 5", "score": -5.948238372802734, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 5", "logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 5.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 2.\n", "gold_logos_error": false, "gold_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}
{"index": 372, "beams": [{"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "score": -1.7395745089743286e-05, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= \"more\"", "score": -2.9092864990234375, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= \"more\"", "logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than more.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "score": -4.351963043212891, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs, Documents WHERE Paragraphs.Document_ID = Documents.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 2", "logos": "Find the number and document ids of paragraphs and the number of documents associated with these paragraphs grouped by the document ids of paragraphs.\nConsider only groups whose group size is not less than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 4", "score": -4.639938831329346, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 4", "logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 4.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 3", "score": -4.691886901855469, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 3", "logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.751659393310547, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.779019832611084, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.830589771270752, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.894937992095947, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.922094345092773, "correct_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Ref_Template_Types", "logos": "Find everything about ref template types.", "logos_error": false, "implicit_parse_error": false}], "db_name": "cre_Doc_Template_Mgt", "gold_parse_error": false, "gold_logos": "Find the number and document ids of paragraphs grouped by their document ids.\nConsider only groups whose group size is not less than 2.\n", "gold_logos_error": false, "gold_code": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}
{"index": 702, "beams": [{"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950", "score": -4.897050942531678e-08, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950", "logos": "Find the names of country whose indepyear is greater than 1950.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear > 1950", "score": -5.751888751983643, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.IndepYear > 1950", "logos": "Find the names of country whose indepyear is greater than 1950 for country associated with countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -5.90435266494751, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear > 1950", "score": -5.966447830200195, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear > 1950", "logos": "Find the names of country whose indepyear is greater than 1950 and indepyear is greater than 1950.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -7.2395243644714355, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name, country.GovernmentForm FROM country WHERE country.IndepYear > 1950", "score": -7.724081516265869, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.GovernmentForm FROM country WHERE country.IndepYear > 1950", "logos": "Find the names and governmentforms of country whose indepyear is greater than 1950.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -7.958596229553223, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -8.106241226196289, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -8.195401191711426, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear = 1950", "score": -8.31886100769043, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear = 1950", "logos": "Find the names of country whose indepyear is 1950.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country whose indepyear is greater than 1950.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}
{"index": 703, "beams": [{"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950", "score": -4.897050942531678e-08, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950", "logos": "Find the names of country whose indepyear is greater than 1950.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.252562999725342, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.518309593200684, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.520246982574463, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.520969867706299, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode WHERE country.IndepYear > 1950", "score": -5.5522050857543945, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country, city WHERE country.Code = city.CountryCode AND country.IndepYear > 1950", "logos": "Find the names of country whose indepyear is greater than 1950 for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.5575079917907715, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.624643802642822, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear > 1950", "score": -5.825123310089111, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear > 1950", "logos": "Find the names of country whose indepyear is greater than 1950 and indepyear is greater than 1950.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -6.752976894378662, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.LifeExpectancy > 1950", "score": -6.999423027038574, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.LifeExpectancy > 1950", "logos": "Find the names of country whose lifeexpectancy is greater than 1950.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -7.10101842880249, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -7.58807897567749, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country whose indepyear is greater than 1950.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}
{"index": 704, "beams": [{"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"republic\"", "score": -5.3305129199543444e-08, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"republic\"", "logos": "Find the number of country whose governmentform is republic.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"republic\" AND country.GovernmentForm = \"republic\"", "score": -4.45581579208374, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"republic\" AND country.GovernmentForm = \"republic\"", "logos": "Find the number of country whose governmentform is republic and governmentform is republic.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT * FROM city", "score": -4.615828037261963, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT * FROM city", "score": -4.965999603271484, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT * FROM city", "score": -5.026548862457275, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT * FROM city", "score": -5.106891632080078, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT * FROM city", "score": -5.26275110244751, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT * FROM city", "score": -5.821441650390625, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.GovernmentForm = \"republic\"", "score": -5.878424167633057, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.GovernmentForm = \"republic\"", "logos": "Find the number of country grouped by their governmentforms.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have a republic as their form of government?", "inferred_code": "SELECT * FROM city", "score": -6.06117582321167, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of country whose governmentform is republic.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""}
{"index": 705, "beams": [{"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"VALUE\"", "score": -2.842940318714682e-07, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"VALUE\"", "logos": "Find the number of country whose governmentform is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = \"VALUE\"", "score": -3.979153633117676, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.GovernmentForm = \"VALUE\"", "logos": "Find the number of country whose governmentform is value and the number of countrylanguage associated with these country.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"republics\"", "score": -4.185742378234863, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"republics\"", "logos": "Find the number of country whose governmentform is republics.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"VALUE\" AND country.GovernmentForm = \"VALUE\"", "score": -4.25660514831543, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"VALUE\" AND country.GovernmentForm = \"VALUE\"", "logos": "Find the number of country whose governmentform is value and governmentform is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"VALUE republics\"", "score": -4.942445278167725, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = \"VALUE republics\"", "logos": "Find the number of country whose governmentform is value republics.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT * FROM city", "score": -5.036311149597168, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT * FROM city", "score": -5.125194072723389, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = 1", "score": -5.1551642417907715, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm = 1", "logos": "Find the number of country whose governmentform is 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm IN (\"VALUE\")", "score": -5.517791748046875, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm IN (\"VALUE\")", "logos": "Find the number of country whose governmentform is in {value}.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT * FROM city", "score": -5.576253414154053, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT * FROM city", "score": -5.601590156555176, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm != \"VALUE\"", "score": -5.694842338562012, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.GovernmentForm != \"VALUE\"", "logos": "Find the number of country whose governmentform is not value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many countries have governments that are republics?", "inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.GovernmentForm = \"VALUE\"", "score": -5.853573799133301, "correct_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.GovernmentForm = \"VALUE\"", "logos": "Find the number of country grouped by their governmentforms.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of country whose governmentform is republic.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""}
{"index": 706, "beams": [{"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = \"Caribbean\"", "score": -1.5991537338777562e-07, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = \"Caribbean\"", "logos": "Find the sum of surfaceareas of country whose region is caribbean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Continent = \"Caribbean\"", "score": -4.403871536254883, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Continent = \"Caribbean\"", "logos": "Find the sum of surfaceareas of country whose continent is caribbean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT * FROM city", "score": -4.54301118850708, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT * FROM city", "score": -4.910167217254639, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT * FROM city", "score": -5.304734706878662, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT MAX(country.SurfaceArea) FROM country WHERE country.Region = \"Caribbean\"", "score": -5.661919593811035, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(country.SurfaceArea) FROM country WHERE country.Region = \"Caribbean\"", "logos": "Find the maximum of surfacearea of country whose region is caribbean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT * FROM city", "score": -5.728522777557373, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total surface area of the countries in the Caribbean region?", "inferred_code": "SELECT * FROM city", "score": -5.7625041007995605, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of surfaceareas of country whose region is caribbean.", "gold_logos_error": false, "gold_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""}
{"index": 707, "beams": [{"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribean\"", "score": -0.0014259950257837772, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribean\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carribean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe VALUE VALUE\"", "score": -1.372041940689087, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe VALUE VALUE\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carribe value value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe VALUE\"", "score": -2.3034796714782715, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe VALUE\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carribe value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.LocalName = \"Carribean\"", "score": -2.482177734375, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.LocalName = \"Carribean\"", "logos": "Find the sum of surfaceareas of country whose localname is carribean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Name = \"Carribean\"", "score": -2.4824533462524414, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Name = \"Carribean\"", "logos": "Find the sum of surfaceareas of country whose name is carribean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe\"", "score": -2.6652350425720215, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carribe.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"VALUE\"", "score": -2.8081650733947754, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"VALUE\"", "logos": "Find the sum of surfaceareas of country whose governmentform is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"yes\"", "score": -2.866159677505493, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"yes\"", "logos": "Find the sum of surfaceareas of country whose governmentform is yes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Code = \"Carribean\"", "score": -3.175708055496216, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Code = \"Carribean\"", "logos": "Find the sum of surfaceareas of country whose code is carribean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Code2 = \"Carribean\"", "score": -3.213111639022827, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.Code2 = \"Carribean\"", "logos": "Find the sum of surfaceareas of country whose code 2 is carribean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carr Carribean\"", "score": -3.2370643615722656, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carr Carribean\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carr carribean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe VALUE : VALUE\"", "score": -3.326479911804199, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribe VALUE : VALUE\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carribe value : value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribean VALUE\"", "score": -3.418851852416992, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribean VALUE\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carribean value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribeibean\"", "score": -3.426565408706665, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = \"Carribeibean\"", "logos": "Find the sum of surfaceareas of country whose governmentform is carribeibean.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much surface area do the countires in the Carribean cover together?", "inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = 4", "score": -4.089483737945557, "correct_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.SurfaceArea) FROM country WHERE country.GovernmentForm = 4", "logos": "Find the sum of surfaceareas of country whose governmentform is 4.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of surfaceareas of country whose region is caribbean.", "gold_logos_error": false, "gold_code": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""}
{"index": 708, "beams": [{"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\"", "score": -3.761256550660619e-08, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\"", "logos": "Find the continents of country whose name is anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\" AND country.LocalName = \"Anguilla\"", "score": -3.900210380554199, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\" AND country.LocalName = \"Anguilla\"", "logos": "Find the continents of country whose name is anguilla and localname is anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT country.Continent FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Name = \"Anguilla\"", "score": -4.501974105834961, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country, city WHERE country.Code = city.CountryCode AND country.Name = \"Anguilla\"", "logos": "Find the continents of country whose name is anguilla for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Ang Anguilla\"", "score": -4.904027462005615, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Ang Anguilla\"", "logos": "Find the continents of country whose name is ang anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT * FROM city", "score": -5.806845188140869, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguiluilla\"", "score": -5.8497724533081055, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguiluilla\"", "logos": "Find the continents of country whose name is anguiluilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT * FROM city", "score": -5.868714809417725, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT country.Continent FROM country WHERE country.LocalName = \"Anguilla\"", "score": -6.022030830383301, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.LocalName = \"Anguilla\"", "logos": "Find the continents of country whose localname is anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguillala\"", "score": -6.234781742095947, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguillala\"", "logos": "Find the continents of country whose name is anguillala.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which continent is Anguilla in?", "inferred_code": "SELECT * FROM city", "score": -6.29219913482666, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the continents of country whose name is anguilla.", "gold_logos_error": false, "gold_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""}
{"index": 709, "beams": [{"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\"", "score": -4.024568625027314e-06, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\"", "logos": "Find the continents of country whose name is anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.LocalName = \"Anguilla\"", "score": -3.5598466396331787, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.LocalName = \"Anguilla\"", "logos": "Find the continents of country whose localname is anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = \"Anguilla\"", "score": -3.7893223762512207, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.Name = \"Anguilla\"", "logos": "Find the continents of country whose name is anguilla for country associated with countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\" AND country.LocalName = \"Anguilla\"", "score": -3.8779890537261963, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\" AND country.LocalName = \"Anguilla\"", "logos": "Find the continents of country whose name is anguilla and localname is anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Name = \"Anguilla\"", "score": -4.9023237228393555, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country, city WHERE country.Code = city.CountryCode AND country.Name = \"Anguilla\"", "logos": "Find the continents of country whose name is anguilla for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Ang Anguilla\"", "score": -5.4048051834106445, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Ang Anguilla\"", "logos": "Find the continents of country whose name is ang anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT * FROM city", "score": -5.409524440765381, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguiluilla\"", "score": -5.879164695739746, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguiluilla\"", "logos": "Find the continents of country whose name is anguiluilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT * FROM city", "score": -5.910593509674072, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\" ORDER BY country.Continent", "score": -6.043486595153809, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguilla\" ORDER BY country.Continent", "logos": "Find the continents of country whose name is anguilla.\nSort results first by the continent of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguillala\"", "score": -6.059338092803955, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name = \"Anguillala\"", "logos": "Find the continents of country whose name is anguillala.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent, country.Region FROM country WHERE country.Name = \"Anguilla\"", "score": -6.494071006774902, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent, country.Region FROM country WHERE country.Name = \"Anguilla\"", "logos": "Find the continents and regions of country whose name is anguilla.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the continent name which Anguilla belongs to?", "inferred_code": "SELECT country.Continent FROM country WHERE country.Name != \"Anguilla\"", "score": -6.603578090667725, "correct_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent FROM country WHERE country.Name != \"Anguilla\"", "logos": "Find the continents of country whose name is not anguilla.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the continents of country whose name is anguilla.", "gold_logos_error": false, "gold_code": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""}
{"index": 710, "beams": [{"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -4.062921524047852, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -4.121185302734375, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -4.141956806182861, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT country.Region FROM city JOIN country ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\"", "score": -4.296743869781494, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM city, country WHERE country.Code = city.CountryCode AND city.Name = \"Kabul\"", "logos": "Find the regions of country associated with city whose name is kabul.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -4.332437515258789, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -4.346920967102051, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -4.5742411613464355, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -4.801213264465332, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -5.04948091506958, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -5.185145854949951, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -5.1852946281433105, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -5.202916145324707, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which region is the city Kabul located in?", "inferred_code": "SELECT * FROM city", "score": -7.681082248687744, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the regions of country associated with city whose name is kabul.", "gold_logos_error": false, "gold_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""}
{"index": 711, "beams": [{"orig_question": "What region is Kabul in?", "inferred_code": "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\"", "score": -0.0015797524247318506, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = \"Kabul\"", "logos": "Find the regions of country associated with city whose name is kabul.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT * FROM city", "score": -2.8474011421203613, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT * FROM city", "score": -3.601529121398926, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT * FROM city", "score": -3.6017510890960693, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\" INTERSECT SELECT country.Region FROM country WHERE country.LocalName = \"Kabul\"", "score": -3.6914267539978027, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = \"Kabul\"", "logos": "Find the regions of country associated with city whose name is kabul.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT * FROM city", "score": -3.775770664215088, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT * FROM city", "score": -3.993849277496338, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\" AND city.CountryCode = \"Kabul\"", "score": -4.00490140914917, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = \"Kabul\" AND city.CountryCode = \"Kabul\"", "logos": "Find the regions of country associated with city whose name is kabul and countrycode is kabul.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\" AND city.CountryCode = \"What\"", "score": -4.018665790557861, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = \"Kabul\" AND city.CountryCode = \"What\"", "logos": "Find the regions of country associated with city whose name is kabul and countrycode is what.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\" AND city.CountryCode = \"is Kabul\"", "score": -4.0684123039245605, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM country, city WHERE  country.Code = city.CountryCode  AND city.Name = \"Kabul\"  AND city.CountryCode = \"is Kabul\"", "logos": "Find the regions of country associated with city whose name is kabul and countrycode is is kabul.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\" AND city.CountryCode = \"?\"", "score": -4.133089542388916, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = \"Kabul\" AND city.CountryCode = \"?\"", "logos": "Find the regions of country associated with city whose name is kabul and countrycode is ?.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = \"Kabul\" AND city.Population = \"Kabul\"", "score": -4.1719136238098145, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region FROM country, city WHERE country.Code = city.CountryCode AND city.Name = \"Kabul\" AND city.Population = \"Kabul\"", "logos": "Find the regions of country associated with city whose name is kabul and population is kabul.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region is Kabul in?", "inferred_code": "SELECT * FROM city", "score": -4.297644138336182, "correct_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the regions of country associated with city whose name is kabul.", "gold_logos_error": false, "gold_code": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""}
{"index": 712, "beams": [{"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.135891914367676, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.5830016136169434, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.638273000717163, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.6958365440368652, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.784541130065918, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.8117685317993164, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.003170967102051, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.0455193519592285, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which language is the most popular in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.5188379287719727, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the languages of countrylanguage associated with country whose name is aruba.\nSort results first by the percentage of countrylanguage in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"}
{"index": 713, "beams": [{"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.1179799810051918, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.6383952498435974, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.6877070665359497, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.7024011611938477, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.7563465237617493, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.7806071639060974, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.8339326977729797, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.9142939448356628, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.9234210252761841, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.926032304763794, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.935365617275238, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -0.977841854095459, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -1.0165613889694214, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -1.0619512796401978, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.818636894226074, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What language is predominantly spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -2.9310173988342285, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the languages of countrylanguage associated with country whose name is aruba.\nSort results first by the percentage of countrylanguage in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"}
{"index": 714, "beams": [{"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\"", "score": 0.0, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is brazil.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\" AND country.LifeExpectancy = \"Brazil\"", "score": -4.661021709442139, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\" AND country.LifeExpectancy = \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is brazil and lifeexpectancy is brazil.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Name = \"Brazil\"", "score": -4.89533805847168, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Population,  country.LifeExpectancy FROM country, city WHERE country.Code = city.CountryCode AND country.Name = \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is brazil for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT * FROM city", "score": -5.805087566375732, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT * FROM city", "score": -5.814767360687256, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT * FROM city", "score": -5.822877883911133, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\" ORDER BY country.LifeExpectancy", "score": -5.945268154144287, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\" ORDER BY country.LifeExpectancy", "logos": "Find the populations and lifeexpectancies of country whose name is brazil.\nSort results first by the lifeexpectancy of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT * FROM city", "score": -6.041334629058838, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT * FROM city", "score": -6.175666809082031, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name != \"Brazil\"", "score": -6.380326271057129, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name != \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is not brazil.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT * FROM city", "score": -6.640476226806641, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population and life expectancies in Brazil?", "inferred_code": "SELECT * FROM city", "score": -7.0349650382995605, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the populations and lifeexpectancies of country whose name is brazil.", "gold_logos_error": false, "gold_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""}
{"index": 715, "beams": [{"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\"", "score": 0.0, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is brazil.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Name = \"Brazil\"", "score": -4.7526702880859375, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Population,  country.LifeExpectancy FROM country, city WHERE country.Code = city.CountryCode AND country.Name = \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is brazil for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -5.0493645668029785, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -5.294465065002441, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -5.690576553344727, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\" ORDER BY country.LifeExpectancy", "score": -5.902080535888672, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = \"Brazil\" ORDER BY country.LifeExpectancy", "logos": "Find the populations and lifeexpectancies of country whose name is brazil.\nSort results first by the lifeexpectancy of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -5.996257781982422, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name != \"Brazil\"", "score": -6.117678165435791, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name != \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is not brazil.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -6.414400100708008, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -6.604843616485596, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -6.677241325378418, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT * FROM city", "score": -6.736344814300537, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give me Brazil's population and life expectancies.", "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name LIKE \"Brazil\"", "score": -6.75873327255249, "correct_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name LIKE \"Brazil\"", "logos": "Find the populations and lifeexpectancies of country whose name is like brazil.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the populations and lifeexpectancies of country whose name is brazil.", "gold_logos_error": false, "gold_code": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""}
{"index": 716, "beams": [{"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\"", "score": 0.0, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\"", "logos": "Find the regions and populations of country whose name is angola.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" AND country.Population = \"Angola\"", "score": -4.602677822113037, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" AND country.Population = \"Angola\"", "logos": "Find the regions and populations of country whose name is angola and population is angola.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT country.Region, country.Population FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Name = \"Angola\"", "score": -4.793424129486084, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Region,  country.Population FROM country, city WHERE country.Code = city.CountryCode AND country.Name = \"Angola\"", "logos": "Find the regions and populations of country whose name is angola for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" AND country.Population = \"Angola\"", "score": -4.865672588348389, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" AND country.Population = \"Angola\"", "logos": "Find the regions and populations of country whose name is angola and population is angola.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT * FROM city", "score": -5.79390287399292, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT * FROM city", "score": -6.053445339202881, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name != \"Angola\"", "score": -6.142579078674316, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name != \"Angola\"", "logos": "Find the regions and populations of country whose name is not angola.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT * FROM city", "score": -6.27230167388916, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT * FROM city", "score": -6.284912586212158, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT * FROM city", "score": -6.318369388580322, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT * FROM city", "score": -6.396580219268799, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the region and population of Angola?", "inferred_code": "SELECT * FROM city", "score": -6.702475070953369, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the populations and regions of country whose name is angola.", "gold_logos_error": false, "gold_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""}
{"index": 717, "beams": [{"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\"", "score": -3.178276074322639e-06, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\"", "logos": "Find the regions and populations of country whose name is angola.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.LocalName = \"Angola\"", "score": -3.637389659881592, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.LocalName = \"Angola\"", "logos": "Find the regions and populations of country whose localname is angola.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT country.Region, country.Population FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Name = \"Angola\"", "score": -4.173915863037109, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Region,  country.Population FROM country, city WHERE country.Code = city.CountryCode AND country.Name = \"Angola\"", "logos": "Find the regions and populations of country whose name is angola for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" AND country.Population = \"Angola\"", "score": -4.1827898025512695, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" AND country.Population = \"Angola\"", "logos": "Find the regions and populations of country whose name is angola and population is angola.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT * FROM city", "score": -4.75091028213501, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT * FROM city", "score": -4.812841892242432, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" ORDER BY country.Population", "score": -5.539396286010742, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = \"Angola\" ORDER BY country.Population", "logos": "Find the regions and populations of country whose name is angola.\nSort results first by the population of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT * FROM city", "score": -5.8679704666137695, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT * FROM city", "score": -5.9456915855407715, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT * FROM city", "score": -6.087255954742432, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT * FROM city", "score": -6.225634574890137, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT * FROM city", "score": -6.245424747467041, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What region does Angola belong to and what is its population?", "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name != \"Angola\"", "score": -6.4059672355651855, "correct_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name != \"Angola\"", "logos": "Find the regions and populations of country whose name is not angola.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the populations and regions of country whose name is angola.", "gold_logos_error": false, "gold_code": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""}
{"index": 718, "beams": [{"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Region = \"Central Africa\"", "score": -0.009172667749226093, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Region = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose region is central africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Central Africa\"", "score": -0.9727147221565247, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose continent is central africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Region = \"Central Africa\" AND country.LifeExpectancy = \"Central Africa\"", "score": -3.828584671020508, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Region = \"Central Africa\" AND country.LifeExpectancy = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose region is central africa and lifeexpectancy is central africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.140866756439209, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.19978141784668, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.225325584411621, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Region = \"Central Africa\"", "score": -4.238211631774902, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country, city WHERE country.Code = city.CountryCode AND country.Region = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose region is central africa for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.244104862213135, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.293964862823486, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the average of lifeexpectancy of country whose region is central africa.", "gold_logos_error": false, "gold_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""}
{"index": 719, "beams": [{"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Region = \"Central Africa\"", "score": -0.050805240869522095, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Region = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose region is central africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Central Africa\"", "score": -0.5096514225006104, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose continent is central africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -3.2996158599853516, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -3.6427018642425537, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -3.6922502517700195, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -3.6988770961761475, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -3.7384660243988037, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.042354583740234, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.049516201019287, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"Central Africa\"", "score": -4.511922359466553, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose name is central africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT * FROM city", "score": -4.725687026977539, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How long is the people's average life expectancy in Central Africa?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"Central Africa\"", "score": -4.748331546783447, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"Central Africa\"", "logos": "Find the average of lifeexpectancy of country whose code is central africa.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the average of lifeexpectancy of country whose region is central africa.", "gold_logos_error": false, "gold_code": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""}
{"index": 720, "beams": [{"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -8.266903932963032e-06, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.632002115249634, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" GROUP BY country.Name ORDER BY MIN(country.LifeExpectancy) LIMIT 1", "score": -3.662843704223633, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" GROUP BY country.Name ORDER BY MIN(country.LifeExpectancy) LIMIT 1", "logos": "Find the names of country whose continent is asia grouped by their names.\nSort results first by the minimum lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.6935033798217773, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy", "score": -3.8068113327026367, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.8927767276763916, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy ASC LIMIT 1", "score": -3.9242660999298096, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy ASC LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -4.005034923553467, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -4.350276947021484, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}
{"index": 721, "beams": [{"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -1.5826532262508408e-06, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT * FROM city", "score": -3.0705349445343018, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT * FROM city", "score": -3.6459712982177734, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.LifeExpectancy LIMIT 1", "score": -3.860090732574463, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.LifeExpectancy LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.Region LIMIT 1", "score": -4.108663558959961, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.Region LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.GNP LIMIT 1", "score": -4.165550708770752, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.GNP LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -4.223631858825684, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country whose continent is asia.\nSort results first by the lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}
{"index": 722, "beams": [{"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -9.788096576812677e-06, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the sum of populations and maximum of gnp of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNPOld) FROM country WHERE country.Continent = \"Asia\"", "score": -2.360672950744629, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), MAX(country.GNPOld) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the sum of populations and maximum of gnpold of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT * FROM city", "score": -2.9365718364715576, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.2609996795654297, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), SUM(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.3778181076049805, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), SUM(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the sum of populations and sum of gnps of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.4431257247924805, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the sum of gnps and maximum of gnp of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT MAX(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.473676919937134, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the maximum of population and maximum of gnp of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.Population) FROM country WHERE country.Continent = \"Asia\"", "score": -3.933246374130249, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), MAX(country.Population) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the sum of populations and maximum of population of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations and maximum of gnp of country whose continent is asia.", "gold_logos_error": false, "gold_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}
{"index": 723, "beams": [{"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" ORDER BY country.GNP DESC LIMIT 1", "score": -0.004057419486343861, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" ORDER BY country.GNP DESC LIMIT 1", "logos": "Find the populations and gnps of country whose continent is asia.\nSort results first by the gnp of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -1.0661628246307373, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the sum of populations and maximum of gnp of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" ORDER BY country.Population DESC LIMIT 1", "score": -1.3279774188995361, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" ORDER BY country.Population DESC LIMIT 1", "logos": "Find the populations and gnps of country whose continent is asia.\nSort results first by the population of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -1.9370675086975098, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -1.949998378753662, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -1.962593674659729, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\"", "score": -2.038461685180664, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the populations and gnps of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -2.241391181945801, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -2.348036289215088, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT SUM(country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -2.4928643703460693, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the sum of gnps and maximum of gnp of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations and maximum of gnp of country whose continent is asia.", "gold_logos_error": false, "gold_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}
{"index": 724, "beams": [{"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"African\"", "score": -0.025127211585640907, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"African\"", "logos": "Find the average of lifeexpectancy of country whose continent is african.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"African\"", "score": -0.8535541892051697, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"African\"", "logos": "Find the average of lifeexpectancy of country whose code is african.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = \"African\"", "score": -1.3321665525436401, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = \"African\"", "logos": "Find the average of lifeexpectancy of country whose governmentform is african.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"republics\"", "score": -1.6669886112213135, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"republics\"", "logos": "Find the average of lifeexpectancy of country whose continent is republics.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"republics\"", "score": -1.803401231765747, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"republics\"", "logos": "Find the average of lifeexpectancy of country whose code is republics.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \"African\"", "score": -1.9809554815292358, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.Continent = \"African\"", "logos": "Find the average of lifeexpectancy of country whose continent is african for country associated with countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT * FROM city", "score": -2.1654841899871826, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average life expectancy in African countries that are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"African\"", "score": -2.336498737335205, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"African\"", "logos": "Find the average of lifeexpectancy of country whose name is african.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the average of lifeexpectancy of country whose continent is africa and governmentform is republic.", "gold_logos_error": false, "gold_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""}
{"index": 725, "beams": [{"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\"", "score": -0.06934414803981781, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\"", "logos": "Find the average of lifeexpectancy of country whose continent is africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "score": -0.35316532850265503, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "logos": "Find the average of lifeexpectancy of country whose continent is africa and governmentform is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = \"Africa\"", "score": -2.0062217712402344, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = \"Africa\"", "logos": "Find the average of lifeexpectancy of country whose governmentform is africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "score": -2.2114028930664062, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country, countrylanguage WHERE  country.Code = countrylanguage.CountryCode  AND country.Continent = \"Africa\"  AND country.GovernmentForm = \"VALUE\"", "logos": "Find the average of lifeexpectancy of country whose continent is africa and governmentform is value for country associated with countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "score": -2.346193313598633, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "logos": "Find the average of lifeexpectancy of country whose governmentform is africa and governmentform is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"Africa\"", "score": -2.3842525482177734, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"Africa\"", "logos": "Find the average of lifeexpectancy of country whose code is africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\" AND country.Continent = \"VALUE\"", "score": -2.4334280490875244, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\" AND country.Continent = \"VALUE\"", "logos": "Find the average of lifeexpectancy of country whose continent is africa and continent is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "score": -2.5040009021759033, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "logos": "Find the average of lifeexpectancy of country whose name is africa and governmentform is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "score": -2.7445225715637207, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code = \"Africa\" AND country.GovernmentForm = \"VALUE\"", "logos": "Find the average of lifeexpectancy of country whose code is africa and governmentform is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\" AND country.GovernmentForm = \"republics\"", "score": -2.9891116619110107, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"Africa\" AND country.GovernmentForm = \"republics\"", "logos": "Find the average of lifeexpectancy of country whose continent is africa and governmentform is republics.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT * FROM city", "score": -3.1487948894500732, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"Africa\"", "score": -3.5269930362701416, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = \"Africa\"", "logos": "Find the average of lifeexpectancy of country whose name is africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "inferred_code": "SELECT * FROM city", "score": -3.7119197845458984, "correct_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the average of lifeexpectancy of country whose continent is africa and governmentform is republic.", "gold_logos_error": false, "gold_code": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""}
{"index": 728, "beams": [{"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\"", "score": -1.1283769651981856e-07, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\"", "logos": "Find the populations of city whose district is gelderland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\" AND city.Population = \"Gelderland\"", "score": -3.745582103729248, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\" AND city.Population = \"Gelderland\"", "logos": "Find the populations of city whose district is gelderland and population is gelderland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT SUM(city.Population) FROM city WHERE city.District = \"Gelderland\"", "score": -3.988856315612793, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT SUM(city.Population) FROM city WHERE city.District = \"Gelderland\"", "logos": "Find the sum of populations of city whose district is gelderland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT city.Population FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = \"Gelderland\"", "score": -4.622188568115234, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT city.Population FROM city, country WHERE city.CountryCode = country.Code AND city.District = \"Gelderland\"", "logos": "Find the populations of city whose district is gelderland for city associated with country.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -5.139321327209473, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -5.285150051116943, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\" ORDER BY city.Population", "score": -5.541375637054443, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\" ORDER BY city.Population", "logos": "Find the populations of city whose district is gelderland.\nSort results first by the population of city in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -5.655369281768799, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -5.743332386016846, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderlandland\"", "score": -5.829654216766357, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderlandland\"", "logos": "Find the populations of city whose district is gelderlandland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -5.877856731414795, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gel Gelderland\"", "score": -5.8994855880737305, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gel Gelderland\"", "logos": "Find the populations of city whose district is gel gelderland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many people live in Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -6.113156795501709, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations of city whose district is gelderland.", "gold_logos_error": false, "gold_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""}
{"index": 729, "beams": [{"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT SUM(city.Population) FROM city WHERE city.District = \"Gelderland\"", "score": -4.3188950371586543e-07, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT SUM(city.Population) FROM city WHERE city.District = \"Gelderland\"", "logos": "Find the sum of populations of city whose district is gelderland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -3.6757781505584717, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -4.248285293579102, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -4.346189975738525, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -4.406824588775635, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT MAX(city.Population) FROM city WHERE city.District = \"Gelderland\"", "score": -4.49228048324585, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(city.Population) FROM city WHERE city.District = \"Gelderland\"", "logos": "Find the maximum of population of city whose district is gelderland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -4.5533013343811035, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -4.7505998611450195, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -4.965425491333008, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\"", "score": -5.103359699249268, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT city.Population FROM city WHERE city.District = \"Gelderland\"", "logos": "Find the populations of city whose district is gelderland.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population of Gelderland district?", "inferred_code": "SELECT * FROM city", "score": -5.318098068237305, "correct_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations of city whose district is gelderland.", "gold_logos_error": false, "gold_code": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""}
{"index": 730, "beams": [{"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"US territory\"", "score": -0.0023713726550340652, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"US territory\"", "logos": "Find the average of gnp and average of population of country whose governmentform is us territory.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = \"US territory\"", "score": -1.0255825519561768, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = \"US territory\"", "logos": "Find the average of gnp and sum of populations of country whose governmentform is us territory.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Code = \"US territory\"", "score": -1.7609034776687622, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Code = \"US territory\"", "logos": "Find the average of gnp and average of population of country whose code is us territory.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Code = \"US territory\"", "score": -2.670668601989746, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Code = \"US territory\"", "logos": "Find the average of gnp and sum of populations of country whose code is us territory.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP) FROM country WHERE country.GovernmentForm = \"US territory\"", "score": -2.67703914642334, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP) FROM country WHERE country.GovernmentForm = \"US territory\"", "logos": "Find the average of gnp of country whose governmentform is us territory.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Name = \"US territory\"", "score": -2.8692550659179688, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Name = \"US territory\"", "logos": "Find the average of gnp and average of population of country whose name is us territory.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP), MAX(country.Population) FROM country WHERE country.GovernmentForm = \"US territory\"", "score": -3.2147510051727295, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), MAX(country.Population) FROM country WHERE country.GovernmentForm = \"US territory\"", "logos": "Find the average of gnp and maximum of population of country whose governmentform is us territory.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT * FROM city", "score": -3.48993182182312, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT * FROM city", "score": -3.538942575454712, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT * FROM city", "score": -3.670762062072754, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT * FROM city", "score": -3.6734118461608887, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT * FROM city", "score": -3.775662422180176, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT * FROM city", "score": -3.7901980876922607, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "inferred_code": "SELECT AVG(country.GNP), SUM(country.GNP) FROM country WHERE country.GovernmentForm = \"US territory\"", "score": -3.8106749057769775, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), SUM(country.GNP) FROM country WHERE country.GovernmentForm = \"US territory\"", "logos": "Find the average of gnp and sum of gnps of country whose governmentform is us territory.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the average of gnp and sum of populations of country whose governmentform is us territory.", "gold_logos_error": false, "gold_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""}
{"index": 731, "beams": [{"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"US\"", "score": -0.0019384416518732905, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"US\"", "logos": "Find the average of gnp and average of population of country whose governmentform is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = \"US\"", "score": -1.17351496219635, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = \"US\"", "logos": "Find the average of gnp and sum of populations of country whose governmentform is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Code = \"US\"", "score": -1.5455682277679443, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Code = \"US\"", "logos": "Find the average of gnp and average of population of country whose code is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT * FROM city", "score": -2.306385040283203, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = \"US\"", "score": -2.3728580474853516, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = \"US\"", "logos": "Find the average of gnp and average of population of country whose continent is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Code2 = \"US\"", "score": -2.400028705596924, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Code2 = \"US\"", "logos": "Find the average of gnp and average of population of country whose code 2 is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"yes\"", "score": -2.4020652770996094, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"yes\"", "logos": "Find the average of gnp and average of population of country whose governmentform is yes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Name = \"US\"", "score": -2.4137380123138428, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Name = \"US\"", "logos": "Find the average of gnp and average of population of country whose name is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.LocalName = \"US\"", "score": -2.4261889457702637, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.LocalName = \"US\"", "logos": "Find the average of gnp and average of population of country whose localname is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"considered US\"", "score": -2.4842820167541504, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = \"considered US\"", "logos": "Find the average of gnp and average of population of country whose governmentform is considered us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Code = \"US\"", "score": -2.52436900138855, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Code = \"US\"", "logos": "Find the average of gnp and sum of populations of country whose code is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Region = \"US\"", "score": -2.606065034866333, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Region = \"US\"", "logos": "Find the average of gnp and average of population of country whose region is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.SurfaceArea = \"US\"", "score": -2.907007932662964, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.SurfaceArea = \"US\"", "logos": "Find the average of gnp and average of population of country whose surfacearea is us.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "inferred_code": "SELECT country.GNP, country.Population FROM country WHERE country.GovernmentForm = \"yes\"", "score": -3.069408655166626, "correct_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GNP, country.Population FROM country WHERE country.GovernmentForm = \"yes\"", "logos": "Find the gnps and populations of country whose governmentform is yes.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the average of gnp and sum of populations of country whose governmentform is us territory.", "gold_logos_error": false, "gold_code": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""}
{"index": 732, "beams": [{"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -2.938231205007469e-07, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "logos": "Find the number of different languages of countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"VALUE\"", "score": -5.190420627593994, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"VALUE\"", "logos": "Find the number of different languages of countrylanguage whose language is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"the\"", "score": -5.855574131011963, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"the\"", "logos": "Find the number of different languages of countrylanguage whose language is the.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"world\"", "score": -5.876959800720215, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"world\"", "logos": "Find the number of different languages of countrylanguage whose language is world.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"spoken\"", "score": -5.923296928405762, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"spoken\"", "logos": "Find the number of different languages of countrylanguage whose language is spoken.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"are\"", "score": -6.067095756530762, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"are\"", "logos": "Find the number of different languages of countrylanguage whose language is are.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -7.243450164794922, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -7.424041748046875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -7.586032867431641, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "logos": "Find the number of different languages of countrylanguage.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -8.043636322021484, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT SUM(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -8.172531127929688, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(DISTINCT countrylanguage.Language) FROM countrylanguage", "logos": "Find the sum of different languages of countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -8.662195205688477, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -8.706598281860352, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different languages of countrylanguage.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}
{"index": 733, "beams": [{"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -5.876464683751692e-07, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "logos": "Find the number of different languages of countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"VALUE\"", "score": -5.459442615509033, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"VALUE\"", "logos": "Find the number of different languages of countrylanguage whose language is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"used around\"", "score": -5.70443058013916, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"used around\"", "logos": "Find the number of different languages of countrylanguage whose language is used around.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"around around\"", "score": -5.71453857421875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"around around\"", "logos": "Find the number of different languages of countrylanguage whose language is around around.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"around\"", "score": -5.757821559906006, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"around\"", "logos": "Find the number of different languages of countrylanguage whose language is around.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.310642242431641, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.529928684234619, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.739284515380859, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.939546585083008, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -8.314314842224121, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT SUM(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -8.478657722473145, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(DISTINCT countrylanguage.Language) FROM countrylanguage", "logos": "Find the sum of different languages of countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -8.626880645751953, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different languages of countrylanguage.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}
{"index": 734, "beams": [{"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": -1.6836720462265475e-08, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "logos": "Find the number of different governmentforms of country whose continent is africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.841836452484131, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.142816543579102, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.283079624176025, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.638052940368652, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT SUM(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": -5.66916561126709, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "logos": "Find the sum of different governmentforms of country whose continent is africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.709259510040283, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent != \"Africa\"", "score": -5.729555130004883, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent != \"Africa\"", "logos": "Find the number of different governmentforms of country whose continent is not africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country GROUP BY country.Continent = \"Africa\"", "score": -5.781431198120117, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country GROUP BY country.Continent = \"Africa\"", "logos": "Find the number of different governmentforms of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different governmentforms of country whose continent is africa.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}
{"index": 735, "beams": [{"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": 0.0, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "logos": "Find the number of different governmentforms of country whose continent is africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.0303120613098145, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.946931838989258, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.983178615570068, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.086001396179199, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"in Africa\"", "score": -5.303239345550537, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"in Africa\"", "logos": "Find the number of different governmentforms of country whose continent is in africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent != \"Africa\"", "score": -5.433053016662598, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent != \"Africa\"", "logos": "Find the number of different governmentforms of country whose continent is not africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.667054176330566, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.67752742767334, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.693120956420898, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent LIKE \"Africa\"", "score": -5.730478286743164, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent LIKE \"Africa\"", "logos": "Find the number of different governmentforms of country whose continent is like africa.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.924130439758301, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different governmentforms of country whose continent is africa.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}
{"index": 736, "beams": [{"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.1351842880249023, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = \"Aruba\"", "score": -3.2121338844299316, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.Name = \"Aruba\"", "logos": "Find the number of different languages of countrylanguage associated with country whose name is aruba.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.3459231853485107, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.5511903762817383, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.692920446395874, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.7265496253967285, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.7432756423950195, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.7747721672058105, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.9067416191101074, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.912644147872925, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.093976974487305, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.1342949867248535, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.148045063018799, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.282100677490234, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.294419288635254, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of languages used in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.351640224456787, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of countrylanguage associated with country whose name is aruba.", "gold_logos_error": false, "gold_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""}
{"index": 737, "beams": [{"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = \"Aruba\"", "score": -2.376286506652832, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.Name = \"Aruba\"", "logos": "Find the number of different languages of countrylanguage associated with country whose name is aruba.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.0232760906219482, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.090313196182251, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.1327977180480957, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.3109793663024902, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.313065767288208, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.4659924507141113, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.615143060684204, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.684506893157959, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.756701707839966, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -3.7999374866485596, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.1432881355285645, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.167883396148682, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.170428276062012, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.209004878997803, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many languages are spoken in Aruba?", "inferred_code": "SELECT * FROM city", "score": -4.254638671875, "correct_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of countrylanguage associated with country whose name is aruba.", "gold_logos_error": false, "gold_code": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""}
{"index": 738, "beams": [{"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -3.4803993701934814, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = \"Afghanistan\"", "score": -3.6120424270629883, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.Name = \"Afghanistan\"", "logos": "Find the number of different languages of countrylanguage associated with country whose name is afghanistan.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -3.668008327484131, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -3.960772752761841, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -3.973906993865967, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -4.079425811767578, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -4.144681930541992, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -4.328755855560303, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -4.9664154052734375, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -5.286600589752197, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -5.430933952331543, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -5.526845932006836, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -6.173046588897705, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -6.503887176513672, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages does Afghanistan have?", "inferred_code": "SELECT * FROM city", "score": -6.6776909828186035, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of countrylanguage whose isofficial is t and the number of country whose name is afghanistan for country associated with these countrylanguage.\n", "gold_logos_error": false, "gold_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""}
{"index": 739, "beams": [{"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = \"Afghanistan\"", "score": -3.4852218627929688, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.Name = \"Afghanistan\"", "logos": "Find the number of different languages of countrylanguage associated with country whose name is afghanistan.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -3.6788687705993652, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -3.7560505867004395, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -3.9322853088378906, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.0397539138793945, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.124213218688965, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.310355186462402, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.391122341156006, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Name = \"Afghanistan\"", "score": -4.449221611022949, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND country.Name = \"Afghanistan\"", "logos": "Find the number of different languages of countrylanguage associated with country whose name is afghanistan.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.4863200187683105, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.598587989807129, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.619335651397705, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.668962478637695, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -4.760127544403076, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -5.228725910186768, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many official languages are spoken in Afghanistan?", "inferred_code": "SELECT * FROM city", "score": -6.001184940338135, "correct_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of countrylanguage whose isofficial is t and the number of country whose name is afghanistan for country associated with these countrylanguage.\n", "gold_logos_error": false, "gold_code": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""}
{"index": 750, "beams": [{"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \"Chinese\"", "score": -2.664003610610962, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = \"Chinese\"", "logos": "Find the number of different continents of country associated with countrylanguage whose language is chinese.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \"Chinese\"", "score": -3.7780466079711914, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = \"Chinese\"", "logos": "Find the number of different continents of country associated with countrylanguage whose language is chinese.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -4.463635444641113, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -5.258052349090576, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -5.501931190490723, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -5.767733573913574, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -5.822706699371338, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -5.9782233238220215, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -5.992556571960449, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT * FROM city", "score": -6.206676483154297, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the number of distinct continents where Chinese is spoken?", "inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country", "score": -6.48628044128418, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country", "logos": "Find the number of different continents of country.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different continents of country associated with countrylanguage whose language is chinese.", "gold_logos_error": false, "gold_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""}
{"index": 751, "beams": [{"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \"Chinese\"", "score": -3.6011571884155273, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = \"Chinese\"", "logos": "Find the number of different continents of country associated with countrylanguage whose language is chinese.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -5.009979248046875, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -5.246579170227051, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -5.393184185028076, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -5.466148853302002, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country GROUP BY country.Continent HAVING COUNT(*) >= \"Chinese\"", "score": -5.68740177154541, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country GROUP BY country.Continent HAVING COUNT(*) >= \"Chinese\"", "logos": "Find the number and number of different continents of country grouped by their continents.\nConsider only groups whose group size is not less than chinese.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -5.983786106109619, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -6.250938892364502, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -6.327637672424316, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -6.352348804473877, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -6.392264366149902, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country GROUP BY country.Continent HAVING COUNT(*) = \"Chinese\"", "score": -6.423406600952148, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Continent) FROM country GROUP BY country.Continent HAVING COUNT(*) = \"Chinese\"", "logos": "Find the number and number of different continents of country grouped by their continents.\nConsider only groups whose group size is chinese.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many continents speak Chinese?", "inferred_code": "SELECT * FROM city", "score": -6.680686950683594, "correct_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different continents of country associated with countrylanguage whose language is chinese.", "gold_logos_error": false, "gold_code": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""}
{"index": 758, "beams": [{"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1", "score": -0.15732033550739288, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1", "logos": "Find the number and languages of countrylanguage grouped by their languages.\nConsider only groups whose group size is 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -0.47115665674209595, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -0.47930216789245605, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING COUNT(*) = 1", "score": -0.5203562378883362, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING COUNT(*) = 1", "logos": "Find the number and languages of countrylanguage and the number of country associated with these countrylanguage grouped by the languages of countrylanguage.\nConsider only groups whose group size is 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -1.6774576902389526, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -1.7722558975219727, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -1.7983360290527344, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -1.8150612115859985, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -1.9424173831939697, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -1.988728404045105, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which languages are spoken by only one country in republic governments?", "inferred_code": "SELECT * FROM city", "score": -2.0062687397003174, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number and languages of countrylanguage and the number of country whose governmentform is republic for country associated with these countrylanguage grouped by the languages of countrylanguage.\nConsider only groups whose group size is 1.\n", "gold_logos_error": false, "gold_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"}
{"index": 759, "beams": [{"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = \"republic\"", "score": -3.474137306213379, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND country.GovernmentForm = \"republic\"", "logos": "Find the languages of countrylanguage associated with country whose governmentform is republic.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT * FROM city", "score": -3.788222074508667, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT * FROM city", "score": -3.959162712097168, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT * FROM city", "score": -4.5516862869262695, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = \"republic\"", "score": -5.02301549911499, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = \"republic\"", "logos": "Find the number and languages of countrylanguage grouped by their languages.\nConsider only groups whose group size is republic.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT * FROM city", "score": -5.559426784515381, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT * FROM city", "score": -5.572310447692871, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT * FROM city", "score": -5.903097152709961, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 2", "score": -6.196417808532715, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 2", "logos": "Find the number and languages of countrylanguage grouped by their languages.\nConsider only groups whose group size is 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 3", "score": -6.253347396850586, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 3", "logos": "Find the number and languages of countrylanguage grouped by their languages.\nConsider only groups whose group size is 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What languages are only used by a single country with a republic government?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1", "score": -6.279806613922119, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1", "logos": "Find the number and languages of countrylanguage grouped by their languages.\nConsider only groups whose group size is 1.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number and languages of countrylanguage and the number of country whose governmentform is republic for country associated with these countrylanguage grouped by the languages of countrylanguage.\nConsider only groups whose group size is 1.\n", "gold_logos_error": false, "gold_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"}
{"index": 762, "beams": [{"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -0.003456567879766226, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the lifeexpectancy of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population,country.LifeExpectancy DESC LIMIT 1", "score": -1.0919694900512695, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population,country.LifeExpectancy DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the population of country in ascending order and finally by the lifeexpectancy of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.4498047828674316, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.096020221710205, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population DESC LIMIT 1", "score": -2.1948328018188477, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the population of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -2.1961710453033447, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the population of country and finally by their lifeexpectancy in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.2399091720581055, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Region DESC LIMIT 1", "score": -2.287032127380371, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Region DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the region of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Continent DESC LIMIT 1", "score": -2.3739304542541504, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Continent DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the continent of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -2.3789920806884766, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.SurfaceArea DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names, populations and lifeexpectancies of country whose continent is asia.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}
{"index": 763, "beams": [{"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -0.07762492448091507, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the lifeexpectancy of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -0.3522413969039917, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the population of country and finally by their lifeexpectancy in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\"", "score": -0.733331024646759, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\"", "logos": "Find the names, populations and lifeexpectancies of country whose continent is the and continent is asian.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy", "score": -0.7759265303611755, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the population of country and finally by their lifeexpectancy in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -1.1446014642715454, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.LifeExpectancy LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is the and continent is asian.\nSort results first by the lifeexpectancy of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -1.1613657474517822, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is the.\nSort results first by the lifeexpectancy of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -1.2667592763900757, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is the.\nSort results first by the population of country and finally by their lifeexpectancy in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"largest Asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -1.4222710132598877, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"largest Asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is largest asian.\nSort results first by the lifeexpectancy of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.Region", "score": -1.4839364290237427, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.Region", "logos": "Find the names, populations and lifeexpectancies of country whose continent is asian.\nSort results first by the population of country and finally by their region in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -1.4919639825820923, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is the and continent is asian.\nSort results first by the population of country and finally by their lifeexpectancy in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"largest Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -1.5595380067825317, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"largest Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is largest asian.\nSort results first by the population of country and finally by their lifeexpectancy in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"of\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -1.6667298078536987, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"of\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "logos": "Find the names, populations and lifeexpectancies of country whose continent is of.\nSort results first by the lifeexpectancy of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy", "score": -1.693317174911499, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy", "logos": "Find the names, populations and lifeexpectancies of country whose continent is the and continent is asian.\nSort results first by the population of country and finally by their lifeexpectancy in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names, populations and lifeexpectancies of country whose continent is asia.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}
{"index": 768, "beams": [{"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -1.955384612083435, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beatrix\"", "score": -2.9810495376586914, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beatrix\"", "score": -3.0651392936706543, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -3.283071756362915, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -3.2960848808288574, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -3.4494986534118652, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -3.487820625305176, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -3.6353442668914795, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -3.6662237644195557, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -3.7943010330200195, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -4.021149635314941, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -4.030699729919434, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -4.0998454093933105, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "inferred_code": "SELECT * FROM city", "score": -5.753998279571533, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the languages of countrylanguage whose isofficial is t for countrylanguage associated with country whose headofstate is beatrix.", "gold_logos_error": false, "gold_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""}
{"index": 769, "beams": [{"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beatrix\"", "score": -0.05371411517262459, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT * FROM city", "score": -2.2199184894561768, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beatrix\"", "score": -3.16770076751709, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"Beatrix\"", "logos": "Find the names of country whose headofstate is beatrix for country associated with countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beatrix\" AND country.Name = \"Beatrix\"", "score": -3.2409117221832275, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM country, countrylanguage WHERE  country.Code = countrylanguage.CountryCode  AND country.HeadOfState = \"Beatrix\"  AND country.Name = \"Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is beatrix and name is beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beatrix\"", "score": -3.378175735473633, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beatrix\" AND country.Capital = \"Beatrix\"", "score": -3.443185567855835, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM country, countrylanguage WHERE  country.Code = countrylanguage.CountryCode  AND country.HeadOfState = \"Beatrix\"  AND country.Capital = \"Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is beatrix and capital is beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT * FROM city", "score": -4.22866153717041, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT * FROM city", "score": -4.254643440246582, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT * FROM city", "score": -4.274117469787598, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"Beat Beatrix\"", "score": -4.331331253051758, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"Beat Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is beat beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"is Beatrix\"", "score": -4.360995769500732, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"is Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is is beatrix.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \"name Beatrix\"", "score": -4.421523571014404, "correct_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.Language FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.HeadOfState = \"name Beatrix\"", "logos": "Find the languages of countrylanguage associated with country whose headofstate is name beatrix.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the languages of countrylanguage whose isofficial is t for countrylanguage associated with country whose headofstate is beatrix.", "gold_logos_error": false, "gold_code": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""}
{"index": 770, "beams": [{"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 1930", "score": -2.4332432746887207, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 1930", "logos": "Find the number of different languages of countrylanguage whose isofficial is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -2.894355535507202, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -3.0501060485839844, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage, country WHERE country.Code = countrylanguage.CountryCode AND country.IndepYear < 1930", "logos": "Find the number of different languages of countrylanguage associated with country whose indepyear is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -3.616312265396118, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -3.8911237716674805, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.IndepYear < 1930", "logos": "Find the number of different languages of countrylanguage associated with country whose indepyear is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(DISTINCT countrylanguage.IsOfficial) < 1930", "score": -4.318896293640137, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(DISTINCT countrylanguage.IsOfficial) < 1930", "logos": "Find the number of different languages of countrylanguage grouped by their languages.\nConsider only groups whose number of different countrylanguage isofficials is less than 1930.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -4.877172946929932, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.148089408874512, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language < 1930", "score": -5.4239935874938965, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language < 1930", "logos": "Find the number of different languages of countrylanguage whose language is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.590715408325195, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.6190056800842285, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.8088178634643555, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.866062164306641, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -6.4577717781066895, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "logos": "Find the number of different languages of countrylanguage.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different languages of countrylanguage whose isofficial is t for countrylanguage associated with country whose indepyear is less than 1930.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}
{"index": 771, "beams": [{"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -3.251563310623169, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.IndepYear < 1930", "logos": "Find the number of different languages of countrylanguage associated with country whose indepyear is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT country.Name) FROM country WHERE country.IndepYear < 1930", "score": -3.519744873046875, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Name) FROM country WHERE country.IndepYear < 1930", "logos": "Find the number of different names of country whose indepyear is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -3.7057392597198486, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 1930", "score": -4.482772350311279, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 1930", "logos": "Find the number of different languages of countrylanguage whose isofficial is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -4.627022743225098, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -4.731587886810303, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.171734809875488, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT country.Name) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -5.30159854888916, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT country.Name) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.IndepYear < 1930", "logos": "Find the number of different names of country whose indepyear is less than 1930 for country associated with countrylanguage.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language), COUNT(DISTINCT countrylanguage.CountryCode) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -5.612412452697754, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  COUNT(DISTINCT countrylanguage.Language),  COUNT(DISTINCT countrylanguage.CountryCode) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.IndepYear < 1930", "logos": "Find the number of different languages and number of different countrycodes of countrylanguage associated with country whose indepyear is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -5.625551700592041, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND country.IndepYear < 1930", "logos": "Find the number of different languages of countrylanguage associated with country whose indepyear is less than 1930.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.741053581237793, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.781151294708252, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.833208084106445, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.8653459548950195, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -6.10210657119751, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of different languages of countrylanguage whose isofficial is t for countrylanguage associated with country whose indepyear is less than 1930.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}
{"index": 780, "beams": [{"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\"", "score": -8.512812144090276e-08, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\"", "logos": "Find the countrycodes of countrylanguage whose language is not english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"other English\"", "score": -5.976346015930176, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"other English\"", "logos": "Find the countrycodes of countrylanguage whose language is not other english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"English\"", "score": -6.004696369171143, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"English\"", "logos": "Find the countrycodes of countrylanguage whose language is english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT * FROM city", "score": -6.566343307495117, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT * FROM city", "score": -6.663550853729248, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT * FROM city", "score": -6.71056604385376, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT * FROM city", "score": -6.789961338043213, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT * FROM city", "score": -6.882415771484375, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT * FROM city", "score": -7.170103073120117, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the country codes of countries where people use languages other than English?", "inferred_code": "SELECT * FROM city", "score": -7.170294284820557, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the countrycodes of countrylanguage whose language is not english.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""}
{"index": 781, "beams": [{"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\"", "score": -0.00016220584802795202, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\"", "logos": "Find the countrycodes of countrylanguage whose language is not english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"lang English\"", "score": -2.5814871788024902, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"lang English\"", "logos": "Find the countrycodes of countrylanguage whose language is not lang english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language = \"langau\"", "score": -4.834836006164551, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language = \"langau\"", "logos": "Find the countrycodes of countrylanguage whose language is not english and language is langau.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT * FROM city", "score": -4.880499362945557, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language = \"lang English\"", "score": -4.899008274078369, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language = \"lang English\"", "logos": "Find the countrycodes of countrylanguage whose language is not english and language is lang english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language != \"lang English\"", "score": -4.901066303253174, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language != \"lang English\"", "logos": "Find the countrycodes of countrylanguage whose language is not english and language is not lang english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language != \"langau\"", "score": -5.011003017425537, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language != \"langau\"", "logos": "Find the countrycodes of countrylanguage whose language is not english and language is not langau.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language != \"English\"", "score": -5.204837322235107, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"English\" AND countrylanguage.Language != \"English\"", "logos": "Find the countrycodes of countrylanguage whose language is not english and language is not english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"langau\"", "score": -5.472662925720215, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \"langau\"", "logos": "Find the countrycodes of countrylanguage whose language is not langau.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"English\"", "score": -5.669435024261475, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"English\"", "logos": "Find the countrycodes of countrylanguage whose language is english.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "inferred_code": "SELECT * FROM city", "score": -5.862043380737305, "correct_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the countrycodes of countrylanguage whose language is not english.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""}
{"index": 786, "beams": [{"orig_question": "Which unique cities are in Asian countries where Chinese is the official language ?", "inferred_code": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = \"Chinese\" AND city.CountryCode = \"Asian\"", "score": -1.885533094406128, "correct_code": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT city.Name FROM city, country WHERE  city.CountryCode = country.Code  AND country.Continent = \"Chinese\"  AND city.CountryCode = \"Asian\"", "logos": "Find the names of city whose countrycode is asian for city associated with country whose continent is chinese.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which unique cities are in Asian countries where Chinese is the official language ?", "inferred_code": "SELECT * FROM city", "score": -2.264270305633545, "correct_code": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which unique cities are in Asian countries where Chinese is the official language ?", "inferred_code": "SELECT * FROM city", "score": -2.4011590480804443, "correct_code": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of city associated with country whose continent is asia, and for country associated with countrylanguage whose isofficial is t and language is chinese.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""}
{"index": 787, "beams": [{"orig_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "inferred_code": "SELECT * FROM city", "score": -2.07125186920166, "correct_code": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "inferred_code": "SELECT * FROM city", "score": -2.433799982070923, "correct_code": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "inferred_code": "SELECT * FROM city", "score": -3.0519309043884277, "correct_code": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "inferred_code": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = \"Asia\" AND city.CountryCode = \"Chinese\"", "score": -3.075258493423462, "correct_code": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT city.Name FROM city, country WHERE  city.CountryCode = country.Code  AND country.Continent = \"Asia\"  AND city.CountryCode = \"Chinese\"", "logos": "Find the names of city whose countrycode is chinese for city associated with country whose continent is asia.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "inferred_code": "SELECT * FROM city", "score": -3.09818959236145, "correct_code": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of city associated with country whose continent is asia, and for country associated with countrylanguage whose isofficial is t and language is chinese.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""}
{"index": 788, "beams": [{"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -0.21057403087615967, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "logos": "Find the names, indepyears and surfaceareas of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.Population, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -0.6490392684936523, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "logos": "Find the names, populations and surfaceareas of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -1.3709162473678589, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "logos": "Find the names, regions and surfaceareas of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -1.432852864265442, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "logos": "Find the names and surfaceareas of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -1.8881731033325195, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "logos": "Find the names, continents and surfaceareas of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT * FROM city", "score": -2.1565680503845215, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY country.Population LIMIT 1", "score": -2.1942574977874756, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  country.IndepYear,  country.SurfaceArea FROM country, city WHERE country.Code = city.CountryCode ORDER BY country.Population LIMIT 1", "logos": "Find the names, indepyears and surfaceareas of country associated with city.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.LocalName, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -2.607262372970581, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.LocalName, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "logos": "Find the names, localnames and surfaceareas of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT * FROM city", "score": -2.7421019077301025, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names, surfaceareas and indepyears of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}
{"index": 789, "beams": [{"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -0.0025932651478797197, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "logos": "Find the names, indepyears and surfaceareas of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY country.Population LIMIT 1", "score": -1.1849931478500366, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  country.IndepYear,  country.SurfaceArea FROM country, city WHERE country.Code = city.CountryCode ORDER BY country.Population LIMIT 1", "logos": "Find the names, indepyears and surfaceareas of country associated with city.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY city.Population LIMIT 1", "score": -2.580852746963501, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  country.IndepYear,  country.SurfaceArea FROM country, city WHERE country.Code = city.CountryCode ORDER BY city.Population LIMIT 1", "logos": "Find the names, indepyears and surfaceareas of country associated with city.\nSort results first by the population of city in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -2.6646251678466797, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -2.7295517921447754, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -2.901089668273926, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -3.5418293476104736, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -3.85508394241333, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names, surfaceareas and indepyears of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}
{"index": 790, "beams": [{"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -0.08106760680675507, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "logos": "Find the populations, names and headofstates of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT country.Population, country.Name, country.Capital FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -0.4286510944366455, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Population, country.Name, country.Capital FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "logos": "Find the populations, names and capitals of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.6080598831176758, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.8275271654129028, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.9945380687713623, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.0891318321228027, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.1994576454162598, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.2203025817871094, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.257675886154175, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.3700153827667236, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.38057541847229, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.527247190475464, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.5318379402160645, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.589019536972046, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names, populations and headofstates of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"index": 791, "beams": [{"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -0.0006187214166857302, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "logos": "Find the names, populations and headofstates of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -1.7461780309677124, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -1.7870415449142456, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -1.9668920040130615, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.0377461910247803, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.067246437072754, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.0898563861846924, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.1066999435424805, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.236238479614258, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.31661319732666, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.3678019046783447, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.8157198429107666, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.9086110591888428, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names, populations and headofstates of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"index": 792, "beams": [{"orig_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "inferred_code": "SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) >= 3", "score": -1.1900073289871216, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) >= 3", "logos": "Find the number, names and number of country and the number and number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose group size is not less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "inferred_code": "SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "score": -1.2102142572402954, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "logos": "Find the number of countrylanguage and the number of country associated with these countrylanguage grouped by the countrycodes of countrylanguage.\nConsider only groups whose number of different countrylanguage languages is not less than 3.\n ", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "inferred_code": "SELECT COUNT(*), country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "score": -2.3557865619659424, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  COUNT(*),  country.Name FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "logos": "Find the number and names of country and the number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose number of different countrylanguage languages is not less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "inferred_code": "SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "score": -2.4247138500213623, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "logos": "Find the names and number of country and the number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose number of different countrylanguage languages is not less than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language), countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "score": -2.63114070892334, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  COUNT(DISTINCT countrylanguage.Language),  countrylanguage.CountryCode FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode HAVING COUNT(DISTINCT countrylanguage.Language) >= 3", "logos": "Find the number of different languages and countrycodes of countrylanguage associated with country grouped by the countrycodes of countrylanguage.\nConsider only groups whose number of different countrylanguage languages is not less than 3.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number and names of country and the number and number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose group size is greater than 2.\n ", "gold_logos_error": false, "gold_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}
{"index": 793, "beams": [{"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2", "score": -0.009854436852037907, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2", "logos": "Find the number, names and number of country and the number and number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose group size is greater than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 3", "score": -2.8900816440582275, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 3", "logos": "Find the number, names and number of country and the number and number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose group size is greater than 3.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT * FROM city", "score": -2.95741605758667, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT * FROM city", "score": -3.0024609565734863, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT * FROM city", "score": -3.063716411590576, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT * FROM city", "score": -3.1282520294189453, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING AVG(countrylanguage.Language) > 2", "score": -3.149792194366455, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING AVG(countrylanguage.Language) > 2", "logos": "Find the names and number of country and the number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose averagecountrylanguage  is greater than 2.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 1", "score": -3.2452504634857178, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  COUNT(*) FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 1", "logos": "Find the number, names and number of country and the number and number of countrylanguage associated with these country grouped by the names of country.\nConsider only groups whose group size is greater than 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "inferred_code": "SELECT country.Name, COUNT(*) FROM country GROUP BY country.Name HAVING COUNT(*) > 2", "score": -3.311607837677002, "correct_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, COUNT(*) FROM country GROUP BY country.Name HAVING COUNT(*) > 2", "logos": "Find the number, names and number of country grouped by their names.\nConsider only groups whose group size is greater than 2.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number and number of countrylanguage and the number and names of country associated with these countrylanguage grouped by the names of country.\nConsider only groups whose group size is greater than 2.\n ", "gold_logos_error": false, "gold_code": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}
{"index": 796, "beams": [{"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -0.13316059112548828, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and sum of lifeexpectancies of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -0.19470307230949402, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and average of lifeexpectancy of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, SUM(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -1.7841068506240845, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and sum of populations of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, COUNT(*) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -1.9368760585784912, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, COUNT(*) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and number of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, AVG(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -1.9603500366210938, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, AVG(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and average of population of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT * FROM city", "score": -2.818162202835083, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT * FROM city", "score": -2.9448368549346924, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) >= 72", "score": -3.006826162338257, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) >= 72", "logos": "Find the governmentforms and sum of lifeexpectancies of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is not less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT * FROM city", "score": -3.044602394104004, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) >= 72", "score": -3.1472551822662354, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) >= 72", "logos": "Find the governmentforms and average of lifeexpectancy of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is not less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT * FROM city", "score": -3.310473680496216, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT * FROM city", "score": -3.3638758659362793, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT * FROM city", "score": -3.401489496231079, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "inferred_code": "SELECT country.GovernmentForm, MAX(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -3.407151460647583, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, MAX(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and maximum of lifeexpectancy of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations and governmentforms of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "gold_logos_error": false, "gold_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}
{"index": 797, "beams": [{"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -0.00028639694210141897, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and sum of lifeexpectancies of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, SUM(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -1.567352294921875, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and sum of populations of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT * FROM city", "score": -2.503009080886841, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, COUNT(*) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -2.81960129737854, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, COUNT(*) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and number of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -2.980163335800171, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and average of lifeexpectancy of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT * FROM city", "score": -3.046755790710449, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT * FROM city", "score": -3.193657398223877, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING COUNT(*) > 72", "score": -3.4596710205078125, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING COUNT(*) > 72", "logos": "Find the number, governmentforms and sum of lifeexpectancies of country grouped by their governmentforms.\nConsider only groups whose group size is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) >= 72", "score": -3.5581536293029785, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) >= 72", "logos": "Find the governmentforms and sum of lifeexpectancies of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is not less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, MAX(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -3.5858020782470703, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, MAX(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and maximum of lifeexpectancy of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT * FROM city", "score": -3.6857099533081055, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING SUM(country.LifeExpectancy) > 72", "score": -3.7070295810699463, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING SUM(country.LifeExpectancy) > 72", "logos": "Find the governmentforms and sum of lifeexpectancies of country grouped by their governmentforms.\nConsider only groups whose sumcountry  of lifeexpectancies is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT SUM(country.LifeExpectancy), country.GovernmentForm FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "score": -3.727498769760132, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.LifeExpectancy), country.GovernmentForm FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the sum of lifeexpectancies and governmentforms of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.Population) > 72", "score": -3.797569990158081, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.GovernmentForm, SUM(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.Population) > 72", "logos": "Find the governmentforms and sum of lifeexpectancies of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of population is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "inferred_code": "SELECT * FROM city", "score": -4.076009750366211, "correct_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations and governmentforms of country grouped by their governmentforms.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "gold_logos_error": false, "gold_code": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}
{"index": 798, "beams": [{"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -0.010414930991828442, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the average of lifeexpectancy, average of population and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT * FROM city", "score": -0.619263768196106, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "score": -0.6883581876754761, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "logos": "Find the average of lifeexpectancy, average of population and continents of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT * FROM city", "score": -0.7551195621490479, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < \"avg\"", "score": -0.9014009237289429, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < \"avg\"", "logos": "Find the average of lifeexpectancy, average of population and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than avg.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), SUM(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -0.992855966091156, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), SUM(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the average of lifeexpectancy, sum of populations and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT * FROM city", "score": -1.05927312374115, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT * FROM city", "score": -1.173789381980896, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -1.2590253353118896, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the average of lifeexpectancy and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.LifeExpectancy) < 72", "score": -1.2879056930541992, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.LifeExpectancy) < 72", "logos": "Find the average of lifeexpectancy, average of population and continents of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 12", "score": -1.3024822473526, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 12", "logos": "Find the average of lifeexpectancy, average of population and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 12.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT * FROM city", "score": -1.3729145526885986, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), SUM(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "score": -1.3818808794021606, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), SUM(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "logos": "Find the average of lifeexpectancy, sum of populations and continents of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), SUM(country.Population) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "score": -1.417961835861206, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), SUM(country.Population) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "logos": "Find the average of lifeexpectancy and sum of populations of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "score": -1.4218865633010864, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < AVG(country.Population) < 72", "logos": "Find the average of lifeexpectancy and continents of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 3", "score": -1.4816110134124756, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 3", "logos": "Find the average of lifeexpectancy, average of population and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 3.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations, average of lifeexpectancy and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "gold_logos_error": false, "gold_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}
{"index": 799, "beams": [{"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -0.002932291943579912, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the continents and average of lifeexpectancy of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT SUM(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -1.0267332792282104, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the sum of lifeexpectancies and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT COUNT(*), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -2.179969549179077, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the number and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT AVG(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -2.5174968242645264, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the average of lifeexpectancy and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT * FROM city", "score": -2.6392171382904053, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT SUM(country.LifeExpectancy), AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -2.8662564754486084, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.LifeExpectancy), AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the sum of lifeexpectancies and average of lifeexpectancy of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT * FROM city", "score": -2.8745646476745605, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT SUM(country.Continent), AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "score": -2.9285545349121094, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Continent), AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72", "logos": "Find the sum of continents and average of lifeexpectancy of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT * FROM city", "score": -2.9758450984954834, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent", "score": -3.4126532077789307, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent", "logos": "Find the continents and average of lifeexpectancy of country whose lifeexpectancy is less than 72 grouped by their continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < \"average\"", "score": -3.7821731567382812, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < \"average\"", "logos": "Find the continents and average of lifeexpectancy of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than average.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) > 72", "score": -3.856289863586426, "correct_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) > 72", "logos": "Find the continents and average of lifeexpectancy of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is greater than 72.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations, average of lifeexpectancy and continents of country grouped by their continents.\nConsider only groups whose averagecountry  of lifeexpectancy is less than 72.\n", "gold_logos_error": false, "gold_code": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}
{"index": 800, "beams": [{"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5", "score": -0.003216107841581106, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 5", "score": -1.5672950744628906, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the region of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.Region FROM country ORDER BY country.SurfaceArea DESC LIMIT 5", "score": -2.777482032775879, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Region FROM country ORDER BY country.SurfaceArea DESC LIMIT 5", "logos": "Find the names and regions of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Continent DESC LIMIT 5", "score": -4.402716636657715, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Continent DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the continent of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5", "score": -4.47827672958374, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5", "logos": "Find the names and regions of country.\nSort results first by the region of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country WHERE country.Region = 5 ORDER BY country.SurfaceArea DESC LIMIT 5", "score": -4.548739910125732, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country WHERE country.Region = 5 ORDER BY country.SurfaceArea DESC LIMIT 5", "logos": "Find the names and surfaceareas of country whose region is 5.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT * FROM city", "score": -4.555451393127441, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 3", "score": -4.6924967765808105, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 3", "logos": "Find the names and surfaceareas of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT * FROM city", "score": -4.807933807373047, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT * FROM city", "score": -5.228210926055908, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names and areas of countries with the top 5 largest area?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 3", "score": -5.758021354675293, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 3", "logos": "Find the names and surfaceareas of country.\nSort results first by the region of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names and surfaceareas of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "gold_logos_error": false, "gold_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"index": 801, "beams": [{"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5", "score": -0.0009428191115148365, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Continent DESC LIMIT 5", "score": -1.9712287187576294, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Continent DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the continent of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 5", "score": -3.7085533142089844, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the region of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY country.SurfaceArea DESC LIMIT 5", "score": -4.197718620300293, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  country.Name,  country.SurfaceArea FROM country, city WHERE country.Code = city.CountryCode ORDER BY country.SurfaceArea DESC LIMIT 5", "logos": "Find the names and surfaceareas of country associated with city.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country WHERE country.Continent = 5 ORDER BY country.SurfaceArea DESC LIMIT 5", "score": -4.217150688171387, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country WHERE country.Continent = 5 ORDER BY country.SurfaceArea DESC LIMIT 5", "logos": "Find the names and surfaceareas of country whose continent is 5.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT * FROM city", "score": -4.560239791870117, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 3", "score": -4.877715110778809, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 3", "logos": "Find the names and surfaceareas of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.GNP DESC LIMIT 5", "score": -5.180111885070801, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.GNP DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the gnp of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT * FROM city", "score": -5.426864147186279, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.IndepYear DESC LIMIT 5", "score": -5.472136497497559, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.IndepYear DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the indepyear of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Continent DESC LIMIT 3", "score": -5.82009744644165, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Continent DESC LIMIT 3", "logos": "Find the names and surfaceareas of country.\nSort results first by the continent of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.GNPOld DESC LIMIT 5", "score": -5.8443779945373535, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.GNPOld DESC LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the gnpold of country in descending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names and surface areas of the 5 largest countries.", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea LIMIT 5", "score": -6.167050838470459, "correct_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea LIMIT 5", "logos": "Find the names and surfaceareas of country.\nSort results first by the surfacearea of country in ascending order.\nLimit the results to top 5.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names and surfaceareas of country.\nSort results first by the surfacearea of country in descending order.\nLimit the results to top 5.", "gold_logos_error": false, "gold_code": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"index": 802, "beams": [{"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "score": -8.42646443288686e-07, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "score": -5.643969535827637, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT country.Name FROM country WHERE country.Population = 3 ORDER BY country.Population DESC LIMIT 3", "score": -5.677065849304199, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Population = 3 ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country whose population is 3.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT * FROM city", "score": -6.7553791999816895, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "score": -6.797909259796143, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT * FROM city", "score": -6.975484371185303, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT * FROM city", "score": -7.397948741912842, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT * FROM city", "score": -7.72173547744751, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "score": -7.762108325958252, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT * FROM city", "score": -7.764283180236816, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are names of countries with the top 3 largest population?", "inferred_code": "SELECT * FROM city", "score": -7.789422035217285, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"index": 803, "beams": [{"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "score": -0.5680803656578064, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode ORDER BY city.Population DESC LIMIT 3", "score": -2.1539082527160645, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country, city WHERE country.Code = city.CountryCode ORDER BY city.Population DESC LIMIT 3", "logos": "Find the names of country associated with city.\nSort results first by the population of city in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode ORDER BY country.Population DESC LIMIT 3", "score": -2.54699444770813, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country, city WHERE country.Code = city.CountryCode ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country associated with city.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code ORDER BY city.Population DESC LIMIT 3", "score": -3.5534839630126953, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM city, country WHERE city.CountryCode = country.Code ORDER BY city.Population DESC LIMIT 3", "logos": "Find the names of country associated with city.\nSort results first by the population of city in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM city JOIN country ON city.CountryCode = country.Code ORDER BY country.Population DESC LIMIT 3", "score": -3.9490697383880615, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM city, country WHERE city.CountryCode = country.Code ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country associated with city.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT * FROM city", "score": -4.765087127685547, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT * FROM city", "score": -5.2181782722473145, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM country WHERE country.Population = 3 ORDER BY country.Population DESC LIMIT 3", "score": -5.3138041496276855, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Population = 3 ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country whose population is 3.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM country GROUP BY country.Name ORDER BY MAX(country.Population) DESC LIMIT 3", "score": -5.313969612121582, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country GROUP BY country.Name ORDER BY MAX(country.Population) DESC LIMIT 3", "logos": "Find the names of country grouped by their names.\nSort results first by the maximum population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT * FROM city", "score": -5.574403285980225, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 most populated countries.", "inferred_code": "SELECT country.Name FROM country GROUP BY country.Name ORDER BY SUM(country.Population) DESC LIMIT 3", "score": -5.74247407913208, "correct_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country GROUP BY country.Name ORDER BY SUM(country.Population) DESC LIMIT 3", "logos": "Find the names of country grouped by their names.\nSort results first by the sum populations of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"index": 804, "beams": [{"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "score": -0.00858000386506319, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population LIMIT 3", "score": -1.5649700164794922, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "score": -4.679321765899658, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT * FROM city", "score": -4.681760787963867, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT * FROM city", "score": -4.719183921813965, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT * FROM city", "score": -4.725269794464111, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT * FROM city", "score": -4.7489776611328125, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT * FROM city", "score": -5.259703159332275, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT * FROM city", "score": -5.383265972137451, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population <= 3 LIMIT 3", "score": -5.463620662689209, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population <= 3 LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the nations with the 3 lowest populations?", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population <= 3", "score": -5.75322961807251, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population <= 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}
{"index": 805, "beams": [{"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "score": -0.07137730717658997, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population LIMIT 3", "score": -0.7271310091018677, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "score": -3.740813970565796, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT * FROM city", "score": -4.208994388580322, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT * FROM city", "score": -4.554540157318115, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population LIMIT 3", "score": -4.760865211486816, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT * FROM city", "score": -4.99758768081665, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the names of the 3 countries with the fewest people.", "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "score": -5.240415573120117, "correct_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3", "logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country.\nSort results first by the population of country in ascending order.\nLimit the results to top 3.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}
{"index": 806, "beams": [{"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "score": 0.0, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the number of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.2759318351745605, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.3559041023254395, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.46547269821167, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "score": -5.664139270782471, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the number of country whose continent is asia.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.8527092933654785, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.9229536056518555, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent != \"Asia\"", "score": -5.929462432861328, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent != \"Asia\"", "logos": "Find the number of country whose continent is not asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.Continent = \"Asia\"", "score": -5.988345623016357, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.Continent = \"Asia\"", "logos": "Find the number of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -6.084934711456299, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of country whose continent is asia.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}
{"index": 807, "beams": [{"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "score": 0.0, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "logos": "Find the number of country whose continent is asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -4.643566131591797, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -4.937333106994629, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.112163543701172, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.417790412902832, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.602809429168701, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.622451305389404, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent != \"Asia\"", "score": -5.8063883781433105, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent != \"Asia\"", "logos": "Find the number of country whose continent is not asia.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.Continent = \"Asia\"", "score": -5.941066265106201, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.Continent = \"Asia\"", "logos": "Find the number of country grouped by their continents.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number of country whose continent is asia.", "gold_logos_error": false, "gold_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}
{"index": 808, "beams": [{"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000", "score": -3.151210648866254e-06, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000", "logos": "Find the names of country whose continent is europe and population is 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.048856735229492, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = \"Europe\" AND country.Population = 80000", "score": -4.058209419250488, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country, city WHERE  country.Code = city.CountryCode  AND country.Continent = \"Europe\"  AND country.Population = 80000", "logos": "Find the names of country whose continent is europe and population is 80000 for country associated with city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000 AND country.Population = 80000", "score": -4.2380146980285645, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000 AND country.Population = 80000", "logos": "Find the names of country whose continent is europe, population is 80000 and population is 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population > 80000", "score": -4.239626407623291, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population > 80000", "logos": "Find the names of country whose continent is europe and population is greater than 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.369830131530762, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.552235126495361, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.630279541015625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.803373336791992, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.952279090881348, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe.country.Population\" = 80000", "score": -5.143446922302246, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe.country.Population\" = 80000", "logos": "Find the names of country whose continent is europe.country.population.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population < 80000", "score": -5.194624900817871, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population < 80000", "logos": "Find the names of country whose continent is europe and population is less than 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -5.277181625366211, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country whose continent is europe and population is 80000.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}
{"index": 809, "beams": [{"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000", "score": -0.09398302435874939, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000", "logos": "Find the names of country whose continent is europe and population is 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population > 80000", "score": -0.3273041248321533, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population > 80000", "logos": "Find the names of country whose continent is europe and population is greater than 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population <= 80000", "score": -2.607647180557251, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population <= 80000", "logos": "Find the names of country whose continent is europe and population is less than or equal to 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population < 80000", "score": -2.8871638774871826, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population < 80000", "logos": "Find the names of country whose continent is europe and population is less than 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population >= 80000", "score": -3.1105358600616455, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population >= 80000", "logos": "Find the names of country whose continent is europe and population is greater than or equal to 80000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.47067928314209, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.579455852508545, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.675727605819702, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.984708547592163, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -4.063652038574219, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the names of country whose continent is europe and population is 80000.", "gold_logos_error": false, "gold_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}
{"index": 810, "beams": [{"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -0.006359731778502464, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of population of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -0.8942851424217224, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of surfacearea of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT * FROM city", "score": -1.4106909036636353, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\"", "score": -1.4265905618667603, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\"", "logos": "Find the sum of populations and average of population of country whose continent is north america.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT * FROM city", "score": -1.472016453742981, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" GROUP BY country.SurfaceArea HAVING SUM(country.Population) > 3000", "score": -1.7025556564331055, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" GROUP BY country.SurfaceArea HAVING SUM(country.Population) > 3000", "logos": "Find the sum of populations and average of surfacearea of country whose continent is north america grouped by their surfaceareas.\nConsider only groups whose sumcountry  of populations is greater than 3000.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT SUM(country.Population), AVG(country.IndepYear) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -1.763014554977417, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.IndepYear) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of indepyear of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT * FROM city", "score": -1.7970831394195557, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT * FROM city", "score": -1.8589361906051636, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\" GROUP BY country.SurfaceArea > 3000", "score": -1.9039756059646606, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\" GROUP BY country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of population of country whose continent is north america grouped by their surfaceareas.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations and average of surfacearea of country whose continent is north america and surfacearea is greater than 3000.", "gold_logos_error": false, "gold_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"}
{"index": 811, "beams": [{"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -0.0010887837270274758, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of surfacearea of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -0.9958922266960144, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of population of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Region = \"North America\" AND country.SurfaceArea > 3000", "score": -1.7753856182098389, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Region = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of surfacearea of country whose region is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -2.017055034637451, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the average of population and average of surfacearea of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\"", "score": -2.2670772075653076, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = \"North America\"", "logos": "Find the sum of populations and average of surfacearea of country whose continent is north america.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT * FROM city", "score": -2.304090738296509, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT * FROM city", "score": -2.4789438247680664, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.IndepYear) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -2.4928691387176514, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.IndepYear) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of indepyear of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.GNP) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -2.5938875675201416, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.GNP) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of gnp of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -2.663029193878174, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Region = \"North America\" AND country.SurfaceArea > 3000", "score": -2.747501850128174, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Region = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of population of country whose region is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\"", "score": -2.839242458343506, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = \"North America\"", "logos": "Find the sum of populations and average of population of country whose continent is north america.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.GNPOld) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -2.8602991104125977, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.GNPOld) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of gnpold of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "inferred_code": "SELECT SUM(country.Population), AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "score": -2.9284250736236572, "correct_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(country.Population), AVG(country.LifeExpectancy) FROM country WHERE country.Continent = \"North America\" AND country.SurfaceArea > 3000", "logos": "Find the sum of populations and average of lifeexpectancy of country whose continent is north america and surfacearea is greater than 3000.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the sum of populations and average of surfacearea of country whose continent is north america and surfacearea is greater than 3000.", "gold_logos_error": false, "gold_code": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"}
{"index": 818, "beams": [{"orig_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT * FROM city", "score": -1.924303412437439, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT * FROM city", "score": -2.071962833404541, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT * FROM city", "score": -2.119525909423828, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT * FROM city", "score": -2.1284797191619873, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\"", "score": -2.2180655002593994, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\"", "logos": "Find the number of countrylanguage whose language is spanish.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT * FROM city", "score": -2.657984733581543, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number and maximum of percentage of countrylanguage whose language is spanish grouped by their countrycodes.", "gold_logos_error": false, "gold_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"index": 819, "beams": [{"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\"", "score": -0.024070795625448227, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\"", "logos": "Find the number of countrylanguage whose language is spanish.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT * FROM city", "score": -1.1009502410888672, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" AND countrylanguage.CountryCode = \"predominantly\"", "score": -1.1743913888931274, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" AND countrylanguage.CountryCode = \"predominantly\"", "logos": "Find the number of countrylanguage whose language is spanish and countrycode is predominantly.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT * FROM city", "score": -1.334999680519104, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT * FROM city", "score": -1.4345396757125854, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" AND countrylanguage.CountryCode = \"Spanish\"", "score": -1.489606261253357, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" AND countrylanguage.CountryCode = \"Spanish\"", "logos": "Find the number of countrylanguage whose language is spanish and countrycode is spanish.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" GROUP BY countrylanguage.CountryCode HAVING COUNT(*) = 1", "score": -1.5952630043029785, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" GROUP BY countrylanguage.CountryCode HAVING COUNT(*) = 1", "logos": "Find the number and number of countrylanguage whose language is spanish grouped by their countrycodes.\nConsider only groups whose group size is 1.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" AND countrylanguage.IsOfficial = \"VALUE\"", "score": -1.696534514427185, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" AND countrylanguage.IsOfficial = \"VALUE\"", "logos": "Find the number of countrylanguage whose language is spanish and isofficial is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT * FROM city", "score": -1.750990390777588, "correct_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the number and maximum of percentage of countrylanguage whose language is spanish grouped by their countrycodes.", "gold_logos_error": false, "gold_code": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"index": 820, "beams": [{"orig_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.Percentage DESC LIMIT 1", "score": -0.7990535497665405, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.Percentage DESC LIMIT 1", "logos": "Find the countrycodes of countrylanguage whose language is spanish.\nSort results first by the percentage of countrylanguage in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT * FROM city", "score": -1.560595154762268, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "inferred_code": "SELECT * FROM city", "score": -2.0410053730010986, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the countrycodes and maximum of percentage of countrylanguage whose language is spanish grouped by their countrycodes.", "gold_logos_error": false, "gold_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"index": 821, "beams": [{"orig_question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.CountryCode DESC LIMIT 1", "score": -0.0987427830696106, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.CountryCode DESC LIMIT 1", "logos": "Find the countrycodes of countrylanguage whose language is spanish.\nSort results first by the countrycode of countrylanguage in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.CountryCode LIMIT 1", "score": -0.7449573278427124, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.CountryCode LIMIT 1", "logos": "Find the countrycodes of countrylanguage whose language is spanish.\nSort results first by the countrycode of countrylanguage in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT * FROM city", "score": -0.7497050762176514, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT * FROM city", "score": -0.8462002277374268, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.CountryCode", "score": -1.0452353954315186, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \"Spanish\" ORDER BY countrylanguage.CountryCode", "logos": "Find the countrycodes of countrylanguage whose language is spanish.\nSort results first by the countrycode of countrylanguage in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "inferred_code": "SELECT * FROM city", "score": -1.1349948644638062, "correct_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM city", "logos": "Find everything about city.", "logos_error": false, "implicit_parse_error": false}], "db_name": "world_1", "gold_parse_error": false, "gold_logos": "Find the countrycodes and maximum of percentage of countrylanguage whose language is spanish grouped by their countrycodes.", "gold_logos_error": false, "gold_code": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"index": 944, "beams": [{"orig_question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "inferred_code": "SELECT * FROM Breeds", "score": -2.8432273864746094, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "inferred_code": "SELECT * FROM Breeds", "score": -2.8990559577941895, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "inferred_code": "SELECT * FROM Breeds", "score": -2.9008326530456543, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "inferred_code": "SELECT * FROM Breeds", "score": -2.9873039722442627, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "inferred_code": "SELECT * FROM Breeds", "score": -3.0019078254699707, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "inferred_code": "SELECT * FROM Breeds", "score": -3.081146240234375, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names and last names of professionals.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"}
{"index": 945, "beams": [{"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -2.6001951694488525, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -2.6934614181518555, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -3.118312120437622, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1306071281433105, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -3.2965807914733887, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -3.298017978668213, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -3.3409206867218018, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -3.413442373275757, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "inferred_code": "SELECT * FROM Breeds", "score": -3.422743797302246, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names and last names of professionals.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"}
{"index": 946, "beams": [{"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -7.522513101321238e-08, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id", "logos": "Find the date of treatments of treatments and the first names of professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"the\"", "score": -4.546019554138184, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"the\"", "logos": "Find the first names of professionals whose first name is the and the date of treatments of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"of\"", "score": -4.6746907234191895, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"of\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose first name is of for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"it\"", "score": -4.6794281005859375, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"it\"", "logos": "Find the first names of professionals whose first name is it and the date of treatments of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"who\"", "score": -4.680477142333984, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"who\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose first name is who for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"professional\"", "score": -4.6938066482543945, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"professional\"", "logos": "Find the first names of professionals whose first name is professional and the date of treatments of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"operated\"", "score": -4.708467960357666, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"operated\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose first name is operated for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -4.775791168212891, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \". the\"", "score": -4.803552627563477, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \". the\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose first name is .\nthe for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -4.854059219360352, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY Treatments.date_of_treatment", "score": -5.573285102844238, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id ORDER BY Treatments.date_of_treatment", "logos": "Find the date of treatments of treatments and the first names of professionals associated with these treatments.\nSort results first by the date of treatment of treatments in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -5.81168794631958, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -6.364470958709717, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the date of treatments of treatments and the first names of professionals associated with these treatments.\n", "gold_logos_error": false, "gold_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"index": 947, "beams": [{"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -3.761256550660619e-08, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id", "logos": "Find the date of treatments of treatments and the first names of professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.574334144592285, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"?\"", "score": -4.637453556060791, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.role_code = \"?\"", "logos": "Find the first names of professionals whose role code is ? and the date of treatments of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"?\"", "score": -4.729859828948975, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"?\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose first name is ? for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"operating\"", "score": -4.813050746917725, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"operating\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose first name is operating for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"operating\"", "score": -4.851864814758301, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.role_code = \"operating\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose role code is operating for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"of\"", "score": -4.868652820587158, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.role_code = \"of\"", "logos": "Find the first names of professionals whose role code is of and the date of treatments of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"of\"", "score": -4.897152423858643, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.first_name = \"of\"", "logos": "Find the date of treatments of treatments and the first names of professionals whose first name is of for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY Treatments.date_of_treatment", "score": -5.9514665603637695, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id ORDER BY Treatments.date_of_treatment", "logos": "Find the first names of professionals and the date of treatments of treatments associated with these professionals.\nSort results first by the date of treatment of treatments in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY Professionals.first_name", "score": -5.996168613433838, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.date_of_treatment,  Professionals.first_name FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id ORDER BY Professionals.first_name", "logos": "Find the date of treatments of treatments and the first names of professionals associated with these treatments.\nSort results first by the first name of professionals in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.253170967102051, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.3650383949279785, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.474490642547607, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names of professionals and the date of treatments of treatments associated with these professionals.\n", "gold_logos_error": false, "gold_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"index": 948, "beams": [{"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "score": -7.522513101321238e-08, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.cost_of_treatment,  Treatment_Types.treatment_type_description FROM Treatments, Treatment_Types WHERE Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "logos": "Find the cost of treatments of treatments and the treatment type descriptions of treatment types associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -4.553839683532715, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -4.702772617340088, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -4.970399379730225, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -5.183414936065674, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -5.247243881225586, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -5.3258442878723145, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -5.403039932250977, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT * FROM Breeds", "score": -5.551620960235596, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "inferred_code": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "score": -5.6563944816589355, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.cost_of_treatment,  Treatment_Types.treatment_type_description FROM Treatments, Treatment_Types WHERE Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "logos": "Find the cost of treatments of treatments and the treatment type descriptions of treatment types associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the cost of treatments of treatments and the treatment type descriptions of treatment types associated with these treatments.\n", "gold_logos_error": false, "gold_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"index": 949, "beams": [{"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "score": -1.1283769651981856e-07, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.cost_of_treatment,  Treatment_Types.treatment_type_description FROM Treatments, Treatment_Types WHERE Treatments.treatment_type_code = Treatment_Types.treatment_type_code", "logos": "Find the treatment type descriptions of treatment types and the cost of treatments of treatments associated with these treatment types.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.670215129852295, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code WHERE Treatment_Types.treatment_type_description = \"?\"", "score": -4.850811958312988, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.cost_of_treatment,  Treatment_Types.treatment_type_description FROM Treatments, Treatment_Types WHERE  Treatments.treatment_type_code = Treatment_Types.treatment_type_code  AND Treatment_Types.treatment_type_description = \"?\"", "logos": "Find the cost of treatments of treatments and the treatment type descriptions of treatment types whose treatment type description is ? for treatment types associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -5.24149751663208, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code ORDER BY Treatments.cost_of_treatment,Treatment_Types.treatment_type_description", "score": -5.301283836364746, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Treatments.cost_of_treatment,  Treatment_Types.treatment_type_description FROM Treatments, Treatment_Types WHERE Treatments.treatment_type_code = Treatment_Types.treatment_type_code ORDER BY  Treatments.cost_of_treatment,  Treatment_Types.treatment_type_description", "logos": "Find the cost of treatments of treatments and the treatment type descriptions of treatment types associated with these treatments.\nSort results first by the cost of treatment of treatments and finally by the treatment type description of treatment types in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -5.410798072814941, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -5.421021461486816, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -5.969178199768066, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.007473945617676, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the cost and treatment type description of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.292980194091797, "correct_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the cost of treatments of treatments and the treatment type descriptions of treatment types associated with these treatments.\n", "gold_logos_error": false, "gold_code": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"index": 950, "beams": [{"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -7.273505616467446e-06, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id", "logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -2.430180788040161, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs, Sizes WHERE Dogs.size_code = Sizes.size_code AND Owners.owner_id = Dogs.owner_id", "logos": "Find the size codes of dogs and the first names and last names of owners associated with these dogs, for dogs associated with sizes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -3.5390536785125732, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.size_code", "score": -3.6685807704925537, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id ORDER BY Dogs.size_code", "logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.\nSort results first by the size code of dogs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -3.8245151042938232, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id", "logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.owner_id, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -3.9805448055267334, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Owners.owner_id,  Dogs.size_code FROM Owners, Dogs, Sizes WHERE Dogs.size_code = Sizes.size_code AND Owners.owner_id = Dogs.owner_id", "logos": "Find the size codes of dogs and the first names, last names and owner ids of owners associated with these dogs, and for dogs associated with sizes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.284114837646484, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.300103187561035, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "score": -4.569015979766846, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.\nSort results first by the name of dogs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.664876461029053, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.725339889526367, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.", "gold_logos_error": false, "gold_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"index": 951, "beams": [{"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -0.002006884664297104, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id", "logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -1.0622590780258179, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs, Sizes WHERE Dogs.size_code = Sizes.size_code AND Owners.owner_id = Dogs.owner_id", "logos": "Find the size codes of dogs and the first names and last names of owners associated with these dogs, for dogs associated with sizes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.owner_id, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -2.4368953704833984, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Owners.owner_id,  Dogs.size_code FROM Owners, Dogs, Sizes WHERE Dogs.size_code = Sizes.size_code AND Owners.owner_id = Dogs.owner_id", "logos": "Find the size codes of dogs and the first names, last names and owner ids of owners associated with these dogs, and for dogs associated with sizes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -2.453120708465576, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.name,  Dogs.size_code FROM Owners, Dogs, Sizes WHERE Dogs.size_code = Sizes.size_code AND Owners.owner_id = Dogs.owner_id", "logos": "Find the names and size codes of dogs and the first names and last names of owners associated with these dogs, for dogs associated with sizes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.2207374572753906, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.228212356567383, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -3.252788543701172, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Owners.last_name,  Dogs.size_code FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id", "logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.396803379058838, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.481107711791992, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names and last names of owners and the size codes of dogs associated with these owners.", "gold_logos_error": false, "gold_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"index": 952, "beams": [{"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -1.5045026202642475e-07, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id", "logos": "Find the first names of owners and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"VALUE\"", "score": -4.1100263595581055, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"VALUE\"", "logos": "Find the first names of owners whose first name is value and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"'\"", "score": -4.340097904205322, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"'\"", "logos": "Find the first names of owners whose first name is ' and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"pairs\"", "score": -4.346783638000488, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"pairs\"", "logos": "Find the names of dogs and the first names of owners whose first name is pairs for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"s\"", "score": -4.396008491516113, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"s\"", "logos": "Find the first names of owners whose first name is s and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"dogs\"", "score": -4.410750389099121, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"dogs\"", "logos": "Find the first names of owners whose first name is dogs and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"the\"", "score": -4.439134120941162, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"the\"", "logos": "Find the first names of owners whose first name is the and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"owner\"", "score": -4.482907772064209, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"owner\"", "logos": "Find the first names of owners whose first name is owner and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -4.968660354614258, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id", "logos": "Find the names of dogs and the first names of owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "score": -5.25788688659668, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "logos": "Find the names of dogs and the first names of owners associated with these dogs.\nSort results first by the name of dogs in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Owners.first_name", "score": -5.439502716064453, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id ORDER BY Owners.first_name", "logos": "Find the first names of owners and the names of dogs associated with these owners.\nSort results first by the first name of owners in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT * FROM Breeds", "score": -5.53792142868042, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the names of dogs and the first names of owners associated with these dogs.\n", "gold_logos_error": false, "gold_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"index": 953, "beams": [{"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -1.1283768941439121e-07, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id", "logos": "Find the first names of owners and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -3.8636388778686523, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.055410385131836, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"VALUE\"", "score": -4.229221343994141, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"VALUE\"", "logos": "Find the names of dogs and the first names of owners whose first name is value for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.494629383087158, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.530430316925049, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.671724319458008, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.776933670043945, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name != \"VALUE\"", "score": -4.854208469390869, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name != \"VALUE\"", "logos": "Find the first names of owners whose first name is not value and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.867785453796387, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"?\"", "score": -4.96377420425415, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.first_name = \"?\"", "logos": "Find the first names of owners whose first name is ? and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -5.075021266937256, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "score": -5.118597507476807, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "logos": "Find the first names of owners and the names of dogs associated with these owners.\nSort results first by the name of dogs in ascending order.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names of owners and the names of dogs associated with these owners.\n", "gold_logos_error": false, "gold_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"index": 956, "beams": [{"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\"", "score": -5.088632860861253e-06, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -2.580552101135254, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -2.9648666381835938, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -3.074542760848999, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = \"Virginia\"", "score": -3.6148314476013184, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Dogs.owner_id = Owners.owner_id AND Owners.state = \"Virginia\"", "logos": "Find the names of dogs and the first names of owners whose state is virginia for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"dogs\"", "score": -3.7757208347320557, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"dogs\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs whose name is dogs for dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"the\"", "score": -3.8456737995147705, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"the\"", "logos": "Find the names of dogs whose name is the and the first names of owners whose state is virginia for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"someone\"", "score": -3.858428955078125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"someone\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs whose name is someone for dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"owner\"", "score": -3.8598430156707764, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"owner\"", "logos": "Find the names of dogs whose name is owner and the first names of owners whose state is virginia for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"Which\"", "score": -3.9002232551574707, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"Which\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs whose name is which for dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"who\"", "score": -3.9308252334594727, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"who\"", "logos": "Find the names of dogs whose name is who and the first names of owners whose state is virginia for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -4.200909614562988, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -4.22820520401001, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" ORDER BY Dogs.name", "score": -4.290887355804443, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" ORDER BY Dogs.name", "logos": "Find the first names of owners whose state is virginia and the names of dogs associated with these owners.\nSort results first by the name of dogs in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" ORDER BY Owners.first_name", "score": -4.52349853515625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" ORDER BY Owners.first_name", "logos": "Find the names of dogs and the first names of owners whose state is virginia for owners associated with these dogs.\nSort results first by the first name of owners in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -4.582353591918945, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names of owners whose state is virginia and the names of dogs associated with these owners.\n", "gold_logos_error": false, "gold_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"index": 957, "beams": [{"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\"", "score": -8.341967827618646e-08, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"own\"", "score": -3.3558156490325928, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"own\"", "logos": "Find the names of dogs whose name is own and the first names of owners whose state is virginia for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"they\"", "score": -3.3883018493652344, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"they\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs whose name is they for dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"Virginia\"", "score": -3.5563974380493164, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE  Owners.owner_id = Dogs.owner_id  AND Owners.state = \"Virginia\"  AND Dogs.name = \"Virginia\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs whose name is virginia for dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"dogs\"", "score": -3.558828830718994, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"dogs\"", "logos": "Find the names of dogs whose name is dogs and the first names of owners whose state is virginia for owners associated with these dogs.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \".\"", "score": -3.6275177001953125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \".\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs whose name is .\nfor dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"of\"", "score": -3.7882020473480225, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" AND Dogs.name = \"of\"", "logos": "Find the first names of owners whose state is virginia and the names of dogs whose name is of for dogs associated with these owners.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.249566078186035, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" ORDER BY Dogs.name", "score": -4.48910665512085, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Owners.first_name,  Dogs.name FROM Owners, Dogs WHERE Owners.owner_id = Dogs.owner_id AND Owners.state = \"Virginia\" ORDER BY Dogs.name", "logos": "Find the names of dogs and the first names of owners whose state is virginia for owners associated with these dogs.\nSort results first by the name of dogs in ascending order.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.501842498779297, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.647955894470215, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.812715530395508, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.823880195617676, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.844923496246338, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names of owners whose state is virginia and the names of dogs associated with these owners.\n", "gold_logos_error": false, "gold_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"index": 958, "beams": [{"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -0.08516436815261841, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -0.45484161376953125, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment = \"VALUE\"", "score": -3.9082388877868652, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id AND Treatments.cost_of_treatment = \"VALUE\"", "logos": "Find the date arriveds and date departeds of dogs associated with treatments whose cost of treatment is value.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.00322961807251, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT DISTINCT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -4.122458457946777, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT  Dogs.date_arrived,  Dogs.date_departed FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.231893539428711, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment = 0", "score": -4.294192790985107, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id AND Treatments.cost_of_treatment = 0", "logos": "Find the date arriveds and date departeds of dogs associated with treatments whose cost of treatment is 0.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.462122440338135, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT DISTINCT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -4.505504608154297, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT  Dogs.date_arrived,  Dogs.date_departed FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment = 1", "score": -4.644304275512695, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id AND Treatments.cost_of_treatment = 1", "logos": "Find the date arriveds and date departeds of dogs associated with treatments whose cost of treatment is 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.91511869430542, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id ORDER BY Treatments.date_of_treatment", "score": -5.361025810241699, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id ORDER BY Treatments.date_of_treatment", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.\nSort results first by the date of treatment of treatments in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the date arriveds and date departeds of dogs associated with treatments.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"index": 959, "beams": [{"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -0.003628162434324622, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -1.4107649326324463, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -3.90097975730896, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.56937313079834, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.8811798095703125, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.270988464355469, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.319553852081299, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.344733715057373, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.35499906539917, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.416370391845703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id ORDER BY Treatments.date_of_treatment", "score": -5.432349681854248, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Dogs.date_arrived,  Dogs.date_departed FROM Dogs, Treatments WHERE Dogs.dog_id = Treatments.dog_id ORDER BY Treatments.date_of_treatment", "logos": "Find the date arriveds and date departeds of dogs associated with treatments.\nSort results first by the date of treatment of treatments in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the date arriveds and date departeds of dogs associated with treatments.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"index": 964, "beams": [{"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "logos": "Find the date arriveds and date departeds of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -6.989933490753174, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.284716606140137, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.517141819000244, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.521103858947754, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.57051420211792, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.609341144561768, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.847163677215576, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_departed", "score": -8.104175567626953, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_departed", "logos": "Find the date arriveds and date departeds of dogs.\nSort results first by the date departed of dogs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.442852973937988, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.62647819519043, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.98484992980957, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the date arriveds and date departeds of dogs.", "gold_logos_error": false, "gold_code": "SELECT date_arrived ,  date_departed FROM Dogs"}
{"index": 965, "beams": [{"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "logos": "Find the date arriveds and date departeds of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.076929092407227, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.1834397315979, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.346281051635742, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.383238792419434, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_departed", "score": -8.13547420501709, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_departed", "logos": "Find the date arriveds and date departeds of dogs.\nSort results first by the date departed of dogs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.222320556640625, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.282132148742676, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.377513885498047, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.619887351989746, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_arrived", "score": -8.62783432006836, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_arrived", "logos": "Find the date arriveds and date departeds of dogs.\nSort results first by the date arrived of dogs in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the date arriveds and date departeds of dogs.", "gold_logos_error": false, "gold_code": "SELECT date_arrived ,  date_departed FROM Dogs"}
{"index": 966, "beams": [{"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "score": -7.345579433604144e-07, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "logos": "Find the number of different dog ids of treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.106276035308838, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(*) FROM Treatments", "score": -6.179775714874268, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments", "logos": "Find the number of treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.185295104980469, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.259042739868164, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.67329740524292, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.738164901733398, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT DISTINCT Treatments.dog_id FROM Treatments", "score": -7.644096374511719, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Treatments.dog_id FROM Treatments", "logos": "Find the dog ids of treatments.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -7.857954502105713, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the number of different dog ids of treatments.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"index": 967, "beams": [{"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "score": 0.0, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "logos": "Find the number of different dog ids of treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.327815055847168, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.539456367492676, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.784274578094482, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.834507465362549, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.018126964569092, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.256542205810547, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.338175296783447, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.412400722503662, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.714104652404785, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT Treatments.dog_id, COUNT(*) FROM Treatments GROUP BY Treatments.dog_id", "score": -6.756136894226074, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.dog_id, COUNT(*) FROM Treatments GROUP BY Treatments.dog_id", "logos": "Find the dog ids and number of treatments grouped by their dog ids.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -7.07806921005249, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "score": -7.132758617401123, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "logos": "Find the number of different dog ids of treatments.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the number of different dog ids of treatments.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"index": 968, "beams": [{"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(DISTINCT Treatments.professional_id) FROM Treatments", "score": -0.01166624017059803, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(DISTINCT Treatments.professional_id) FROM Treatments", "logos": "Find the number of different professional ids of treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -1.3837690353393555, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id", "logos": "Find the number of professionals and the number of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -2.009423017501831, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id", "logos": "Find the number of treatments and the number of dogs associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"VALUE\"", "score": -2.757582426071167, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.role_code = \"VALUE\"", "logos": "Find the number of professionals whose role code is value and the number of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = 0", "score": -2.9310078620910645, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = 0", "logos": "Find the number of treatments whose dog id is 0.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.0593807697296143, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.1808295249938965, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.3830857276916504, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.6024763584136963, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = 1", "score": -3.7360243797302246, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = 1", "logos": "Find the number of treatments whose dog id is 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.7388737201690674, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.970315456390381, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the number of different professional ids of treatments.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"index": 969, "beams": [{"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -0.3579515516757965, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id", "logos": "Find the number of treatments and the number of professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Professionals.professional_id = Treatments.professional_id", "score": -0.44614332914352417, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Dogs, Professionals WHERE  Professionals.professional_id = Treatments.professional_id  AND Treatments.dog_id = Dogs.dog_id", "logos": "Find the number of treatments and the number of dogs associated with these treatments, also the number of professionals associated with these treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -0.5218529105186462, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Dogs, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Treatments.dog_id = Dogs.dog_id", "logos": "Find the number of treatments and the number of dogs associated with these treatments, also the number of professionals associated with these treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.dog_id = 1", "score": -0.6053094863891602, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Professionals WHERE Treatments.professional_id = Professionals.professional_id AND Treatments.dog_id = 1", "logos": "Find the number of treatments whose dog id is 1 and the number of professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -0.6855764389038086, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"VALUE\"", "score": -0.8209885358810425, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Professionals.role_code = \"VALUE\"", "logos": "Find the number of treatments and the number of professionals whose role code is value for professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.dog_id = \"VALUE\"", "score": -0.8326215147972107, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Professionals WHERE  Treatments.professional_id = Professionals.professional_id  AND Treatments.dog_id = \"VALUE\"", "logos": "Find the number of treatments whose dog id is value and the number of professionals associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -1.1729724407196045, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -1.2499101161956787, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -1.3476966619491577, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Treatments, Dogs WHERE Treatments.dog_id = Dogs.dog_id", "logos": "Find the number of treatments and the number of dogs associated with these treatments.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the number of different professional ids of treatments.", "gold_logos_error": false, "gold_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"index": 970, "beams": [{"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -0.014507846906781197, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose first name is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -0.7594831585884094, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose city is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -1.0513451099395752, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose role code is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.street LIKE \"% West %\"", "score": -1.1077343225479126, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.street LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose street is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -1.6656386852264404, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose first name is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -2.03381085395813, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose city is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -2.246001720428467, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose first name is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.street LIKE \"% West %\"", "score": -2.3239026069641113, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.street LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose street is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.state LIKE \"% West %\"", "score": -2.4672091007232666, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.state LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose state is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -2.7963051795959473, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose role code is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.email_address LIKE \"% West %\"", "score": -2.8526060581207275, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.email_address LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose email address is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city NOT LIKE \"% West %\"", "score": -3.071098566055298, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city NOT LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose city is not like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -3.179574966430664, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose city is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -3.251309394836426, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose role code is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.zip_code LIKE \"% West %\"", "score": -3.2869179248809814, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.zip_code LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose zip code is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT * FROM Breeds", "score": -3.424156904220581, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the role codes, streets, cities and states of professionals whose city is like %west%.", "gold_logos_error": false, "gold_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}
{"index": 971, "beams": [{"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -0.0010688287438824773, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose first name is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -1.3366527557373047, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose role code is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -1.6434894800186157, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose first name is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -1.9986317157745361, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose city is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name NOT LIKE \"% West %\"", "score": -2.0906529426574707, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name NOT LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose first name is not like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -2.2519829273223877, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose first name is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -2.6869897842407227, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose first name is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city NOT LIKE \"% West %\"", "score": -2.6981754302978516, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city NOT LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose city is not like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -2.7906928062438965, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -2.8380813598632812, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -2.8865621089935303, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -2.909816265106201, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "logos": "Find the role codes, streets and states of professionals whose role code is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.zip_code LIKE \"% West %\"", "score": -3.0089337825775146, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.zip_code LIKE \"% West %\"", "logos": "Find the role codes, streets, cities and states of professionals whose zip code is like % west %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -3.0574796199798584, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West\"", "score": -3.209993600845337, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West\"", "logos": "Find the role codes, streets, cities and states of professionals whose first name is like % west.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the role codes, streets, cities and states of professionals whose city is like %west%.", "gold_logos_error": false, "gold_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}
{"index": 972, "beams": [{"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -3.2142470445251092e-06, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose state is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -2.9447884559631348, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "score": -2.9591667652130127, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose first name is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\" AND Owners.state LIKE \"% North %\"", "score": -3.1283085346221924, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\" AND Owners.state LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose state is like % north % and state is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1424386501312256, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1427860260009766, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1652884483337402, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -3.2147865295410156, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose state is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.6426215171813965, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state NOT LIKE \"% North %\"", "score": -4.08009672164917, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state NOT LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose state is not like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -4.105656147003174, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.zip_code LIKE \"% North %\"", "score": -4.157749176025391, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.zip_code LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose zip code is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"%st %\"", "score": -4.193653106689453, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"%st %\"", "logos": "Find the first names, last names and email addresses of owners whose state is like %st %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -4.366340160369873, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names, last names and email addresses of owners whose state is like %north%.", "gold_logos_error": false, "gold_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}
{"index": 973, "beams": [{"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -0.0029214106034487486, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose state is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "score": -1.1869922876358032, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose first name is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state NOT LIKE \"% North %\"", "score": -1.8677406311035156, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state NOT LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose state is not like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name NOT LIKE \"% North %\"", "score": -2.9125466346740723, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name NOT LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose first name is not like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state != \"% North\"", "score": -3.103177309036255, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state != \"% North\"", "logos": "Find the first names, last names and email addresses of owners whose state is not % north.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -3.424407720565796, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose state is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "score": -3.739112138748169, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "logos": "Find the first names, last names and email addresses of owners whose first name is like % north %.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state != \"VALUE\"", "score": -3.8926310539245605, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state != \"VALUE\"", "logos": "Find the first names, last names and email addresses of owners whose state is not value.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names, last names and email addresses of owners whose state is like %north%.", "gold_logos_error": false, "gold_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}
{"index": 976, "beams": [{"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -0.031395211815834045, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -1.0570148229599, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment LIMIT 1", "score": -2.0067555904388428, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the cost of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "score": -2.222362995147705, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the cost of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment ASC LIMIT 1", "score": -3.960561752319336, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment ASC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.0744853019714355, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.281288146972656, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -4.299408435821533, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment LIMIT 1", "score": -4.335098743438721, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment LIMIT 1", "logos": "Find the date of treatments of treatments.\nSort results first by the cost of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -4.402598857879639, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "logos": "Find the date of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "score": -4.481595993041992, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "logos": "Find the date of treatments of treatments.\nSort results first by the cost of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.520873546600342, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.611410617828369, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.617795467376709, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment", "score": -5.634914875030518, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"index": 977, "beams": [{"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -0.0857698991894722, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -0.6591694951057434, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment ASC LIMIT 1", "score": -3.8230841159820557, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment ASC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.36602783203125, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.478099346160889, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.530869960784912, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.606906890869141, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -4.6345953941345215, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -4.738621234893799, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "logos": "Find the date of treatments of treatments.\nSort results first by the date of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.862084865570068, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.0394392013549805, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "score": -5.515195846557617, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "logos": "Find the cost of treatments of treatments.\nSort results first by the cost of treatment of treatments in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.605044841766357, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -5.829851150512695, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "logos": "Find the date of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment", "score": -5.956782341003418, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment", "logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in ascending order.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the cost of treatments of treatments.\nSort results first by the date of treatment of treatments in descending order.\nLimit the results to top 1.", "gold_logos_error": false, "gold_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"index": 984, "beams": [{"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 0", "score": -0.03924805670976639, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 0", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and weight is 0.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 1", "score": -0.44109290838241577, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 1", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and weight is 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -1.5378175973892212, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.abandoned_yn = \"no\"", "score": -1.5567713975906372, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.abandoned_yn = \"no\"", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and abandoned yn is no.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -1.5686053037643433, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = \"no\"", "score": -1.5924228429794312, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = \"no\"", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and weight is no.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.126859426498413, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"no\"", "score": -2.2252447605133057, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"no\"", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and age is no.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.2942187786102295, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.3199663162231445, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.3996334075927734, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.abandoned_yn = 0", "score": -2.685415029525757, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.abandoned_yn = 0", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and abandoned yn is 0.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"yes\"", "score": -2.7176573276519775, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"yes\"", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and age is yes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = \"yes\"", "score": -2.8695435523986816, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = \"yes\"", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and weight is yes.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the names, ages and weights of dogs whose abandoned yn is 1.", "gold_logos_error": false, "gold_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}
{"index": 985, "beams": [{"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 0", "score": -0.11464347690343857, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 0", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and weight is 0.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -0.26899296045303345, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 1", "score": -0.7249127626419067, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 1", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and weight is 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.0124825239181519, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.4324158430099487, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.4616174697875977, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"yes\"", "score": -1.5175265073776245, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"yes\"", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and age is yes.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.596110463142395, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 1", "score": -1.6103678941726685, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 1", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and age is 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 0", "score": -1.6320329904556274, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 0", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and age is 0.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.6325818300247192, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.9560341835021973, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -2.0260977745056152, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 0", "score": -2.0843279361724854, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 0", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes and age is 0.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\"", "score": -2.485745906829834, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\"", "logos": "Find the names, ages and weights of dogs whose abandoned yn is yes.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the names, ages and weights of dogs whose abandoned yn is 1.", "gold_logos_error": false, "gold_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}
{"index": 986, "beams": [{"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(Dogs.age) FROM Dogs", "logos": "Find the average of age of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -4.893072605133057, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -6.844099998474121, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.0742058753967285, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.747556209564209, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs ORDER BY Dogs.age", "score": -8.182677268981934, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(Dogs.age) FROM Dogs ORDER BY Dogs.age", "logos": "Find the average of age of dogs.\nSort results first by the age of dogs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.233857154846191, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.774474143981934, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.911568641662598, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the average of age of dogs.", "gold_logos_error": false, "gold_code": "SELECT avg(age) FROM Dogs"}
{"index": 987, "beams": [{"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT AVG(Dogs.age) FROM Dogs", "logos": "Find the average of age of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs ORDER BY Dogs.age", "score": -8.186829566955566, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT AVG(Dogs.age) FROM Dogs ORDER BY Dogs.age", "logos": "Find the average of age of dogs.\nSort results first by the age of dogs in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.243409156799316, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.960505485534668, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -9.724835395812988, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -9.821484565734863, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "logos": "Find the maximum of age of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -9.823015213012695, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the average of age of dogs.", "gold_logos_error": false, "gold_code": "SELECT avg(age) FROM Dogs"}
{"index": 988, "beams": [{"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -0.0001872893190011382, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the ages of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -3.4371843338012695, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "logos": "Find the maximum of age of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -3.668485403060913, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the maximum of age of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 1", "score": -3.9251341819763184, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 1", "logos": "Find the ages of dogs.\nSort results first by the date of birth of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT * FROM Breeds", "score": -4.121812343597412, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT COUNT(*) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -4.207950115203857, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the number of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT SUM(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -5.17024564743042, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the sum of ages of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT DISTINCT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -5.908410549163818, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the ages of dogs.\nSort results first by the age of dogs in descending order.\nReturn only unique records.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT * FROM Breeds", "score": -6.868322849273682, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT * FROM Breeds", "score": -6.89438009262085, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC", "score": -7.2092509269714355, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC", "logos": "Find the ages of dogs.\nSort results first by the age of dogs in descending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age LIMIT 1", "score": -7.615482807159424, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age LIMIT 1", "logos": "Find the ages of dogs.\nSort results first by the age of dogs in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the maximum of age of dogs.", "gold_logos_error": false, "gold_code": "SELECT max(age) FROM Dogs"}
{"index": 989, "beams": [{"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -0.03928891941905022, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "logos": "Find the maximum of age of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -0.9687455892562866, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the ages of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -2.8463141918182373, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT MAX(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the maximum of age of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs", "score": -3.062757730484009, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.age FROM Dogs", "logos": "Find the ages of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT COUNT(*) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -4.251772403717041, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the number of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.467640399932861, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -4.6920270919799805, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "logos": "Find the maximum of age of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -4.698691368103027, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "logos": "Find the ages of dogs.\nSort results first by the age of dogs in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -5.14885950088501, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -5.527596950531006, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -5.803388595581055, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT COUNT(*) FROM Dogs", "score": -6.239777088165283, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT COUNT(*) FROM Dogs", "logos": "Find the number of dogs.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT SUM(Dogs.age) FROM Dogs", "score": -6.582103252410889, "correct_code": "SELECT max(age) FROM Dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT SUM(Dogs.age) FROM Dogs", "logos": "Find the sum of ages of dogs.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the maximum of age of dogs.", "gold_logos_error": false, "gold_code": "SELECT max(age) FROM Dogs"}
{"index": 990, "beams": [{"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -0.00034692336339503527, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "logos": "Find the charge types and charge amounts of charges.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1339666843414307, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -3.378746509552002, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -3.7265491485595703, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "score": -3.8639755249023438, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "logos": "Find the charge types and sum of charge amounts of charges grouped by their charge types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -4.746750354766846, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the charge types and charge amounts of charges.", "gold_logos_error": false, "gold_code": "SELECT charge_type ,  charge_amount FROM Charges"}
{"index": 991, "beams": [{"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -2.245403038614313e-06, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "logos": "Find the charge types and charge amounts of charges.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.326548099517822, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.341336727142334, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.498866558074951, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.855027675628662, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount", "score": -7.061983108520508, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount", "logos": "Find the charge types and charge amounts of charges.\nSort results first by the charge amount of charges in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "score": -7.099074363708496, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "logos": "Find the charge types and sum of charge amounts of charges grouped by their charge types.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -7.5592360496521, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -8.157703399658203, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -8.400769233703613, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the charge types and charge amounts of charges.", "gold_logos_error": false, "gold_code": "SELECT charge_type ,  charge_amount FROM Charges"}
{"index": 992, "beams": [{"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -0.046297382563352585, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "logos": "Find the charge amounts of charges.\nSort results first by the charge type of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -0.8295762538909912, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "logos": "Find the charge amounts of charges.\nSort results first by the charge amount of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -3.775954008102417, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "logos": "Find the charge types of charges.\nSort results first by the charge amount of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = \"VALUE\" ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -3.8235714435577393, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = \"VALUE\" ORDER BY Charges.charge_amount DESC LIMIT 1", "logos": "Find the charge amounts of charges whose charge type is value.\nSort results first by the charge amount of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1", "score": -4.09605598449707, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1", "logos": "Find the charge types of charges grouped by their charge types.\nSort results first by the sum charge amounts of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -4.245023250579834, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "logos": "Find the charge types of charges.\nSort results first by the charge type of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT * FROM Breeds", "score": -4.488218784332275, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the maximum of charge amount of charges.", "gold_logos_error": false, "gold_code": "SELECT max(charge_amount) FROM Charges"}
{"index": 993, "beams": [{"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -4.805364824278513e-06, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "logos": "Find the charge amounts of charges.\nSort results first by the charge type of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT * FROM Breeds", "score": -4.109230041503906, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = \"VALUE\" ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -4.466253757476807, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = \"VALUE\" ORDER BY Charges.charge_amount DESC LIMIT 1", "logos": "Find the charge amounts of charges whose charge type is value.\nSort results first by the charge amount of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -4.6245856285095215, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "logos": "Find the charge amounts of charges.\nSort results first by the charge amount of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -4.909026622772217, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "logos": "Find the charge amounts of charges.\nSort results first by the charge type of charges in descending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT * FROM Breeds", "score": -5.036893367767334, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT * FROM Breeds", "score": -5.180571556091309, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type ASC LIMIT 1", "score": -5.189836502075195, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type ASC LIMIT 1", "logos": "Find the charge amounts of charges.\nSort results first by the charge type of charges in ascending order.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 3", "score": -5.406473159790039, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 3", "logos": "Find the charge amounts of charges.\nSort results first by the charge type of charges in descending order.\nLimit the results to top 3.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the maximum of charge amount of charges.", "gold_logos_error": false, "gold_code": "SELECT max(charge_amount) FROM Charges"}
{"index": 994, "beams": [{"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "logos": "Find the email addresses, home phones and cell numbers of professionals.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -5.301295280456543, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -5.678017616271973, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.home_phone,Professionals.cell_number", "score": -5.979465484619141, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.home_phone,Professionals.cell_number", "logos": "Find the email addresses, home phones and cell numbers of professionals.\nSort results first by the email address of professionals, then by their home phone and finally by their cell number in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -6.627026081085205, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.cell_number", "score": -6.906098365783691, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.cell_number", "logos": "Find the email addresses, home phones and cell numbers of professionals.\nSort results first by the cell number of professionals in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.365818500518799, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals LIMIT 1", "score": -7.701617240905762, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals LIMIT 1", "logos": "Find the email addresses, home phones and cell numbers of professionals.\nLimit the results to top 1.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.761909008026123, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.865624904632568, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.917187213897705, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.937696933746338, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the email addresses, cell numbers and home phones of professionals.", "gold_logos_error": false, "gold_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}
{"index": 995, "beams": [{"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "logos": "Find the email addresses, home phones and cell numbers of professionals.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -5.380258560180664, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.home_phone,Professionals.cell_number", "score": -6.013831615447998, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.home_phone,Professionals.cell_number", "logos": "Find the email addresses, home phones and cell numbers of professionals.\nSort results first by the email address of professionals, then by their home phone and finally by their cell number in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -6.611596584320068, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.cell_number", "score": -6.828467845916748, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.cell_number", "logos": "Find the email addresses, home phones and cell numbers of professionals.\nSort results first by the cell number of professionals in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.060408115386963, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.234859943389893, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.67303991317749, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.cell_number", "score": -7.772560119628906, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.cell_number", "logos": "Find the email addresses, home phones and cell numbers of professionals.\nSort results first by the email address of professionals and finally by their cell number in ascending order.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.925555229187012, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the email addresses, cell numbers and home phones of professionals.", "gold_logos_error": false, "gold_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}
{"index": 996, "beams": [{"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_code, Breeds.breed_name FROM Breeds", "score": -6.235916953301057e-05, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Breeds.breed_code, Breeds.breed_name FROM Breeds", "logos": "Find the breed codes and breed names of breeds.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT Breeds.breed_code, Breeds.breed_name FROM Breeds", "score": -4.318337440490723, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Breeds.breed_code, Breeds.breed_name FROM Breeds", "logos": "Find the breed codes and breed names of breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -5.8653669357299805, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_name, Breeds.breed_name FROM Breeds", "score": -6.703893661499023, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Breeds.breed_name, Breeds.breed_name FROM Breeds", "logos": "Find the breed names and breed names of breeds.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -7.318114280700684, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -7.318943023681641, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -7.653946399688721, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the breed codes and size codes of dogs.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"index": 997, "beams": [{"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs", "score": -4.2346610484855773e-07, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": true, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs", "logos": "Find the breed codes and size codes of dogs.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -4.642165184020996, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "logos": "Find the breed codes and size codes of dogs grouped by their breed codes and size codes.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code", "score": -4.705094337463379, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT  Dogs.breed_code,  Dogs.size_code FROM Dogs, Breeds WHERE Dogs.breed_code = Breeds.breed_code", "logos": "Find the breed codes and size codes of dogs associated with breeds.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code, COUNT(*) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -5.484376430511475, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code, COUNT(*) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "logos": "Find the breed codes, size codes and number of dogs grouped by their breed codes and size codes.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs WHERE Dogs.size_code = \"VALUE\"", "score": -5.555634021759033, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs WHERE Dogs.size_code = \"VALUE\"", "logos": "Find the breed codes and size codes of dogs whose size code is value.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, COUNT(*) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -5.81801176071167, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.breed_code, COUNT(*) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "logos": "Find the breed codes and number of dogs grouped by their breed codes and size codes.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, MAX(Dogs.size_code) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -5.890604019165039, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.breed_code, MAX(Dogs.size_code) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "logos": "Find the breed codes and maximum of size code of dogs grouped by their breed codes and size codes.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -5.965571403503418, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.043672561645508, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.185889720916748, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -6.200808048248291, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "logos": "Find the breed codes and size codes of dogs grouped by their breed codes and size codes.\nReturn only unique records.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.214093208312988, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.737004280090332, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the breed codes and size codes of dogs.\nReturn only unique records.", "gold_logos_error": false, "gold_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"index": 998, "beams": [{"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT Professionals.first_name, Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -0.02731422334909439, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.professional_id FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names and professional ids of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -0.8686440587043762, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names and role codes of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT Professionals.first_name, Treatments.cost_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -1.6997954845428467, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Treatments.cost_of_treatment FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names of professionals and the cost of treatments of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -2.0000553131103516, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.first_name FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT Professionals.first_name, Professionals.street FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -2.387504816055298, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.street FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names and streets of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -2.438474655151367, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.last_name FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names and last names of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT * FROM Breeds", "score": -2.4693710803985596, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT * FROM Breeds", "logos": "Find everything about breeds.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "inferred_code": "SELECT Professionals.first_name, Treatments.date_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -2.630284070968628, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Treatments.date_of_treatment FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names of professionals and the date of treatments of treatments associated with these professionals.\n", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names of professionals and the treatment type descriptions of treatment types associated with treatments, and for treatments associated with these professionals.\nReturn only unique records.\n", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
{"index": 999, "beams": [{"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -5.559624332818203e-05, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names and role codes of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -2.728196859359741, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.professional_id FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names and professional ids of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"VALUE\"", "score": -3.9628636837005615, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"VALUE\"", "logos": "Find the first names and role codes of professionals whose role code is value for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"?\"", "score": -4.1496734619140625, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"?\"", "logos": "Find the first names and role codes of professionals whose role code is ? for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"'\"", "score": -4.198610305786133, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"'\"", "logos": "Find the first names and role codes of professionals whose role code is ' for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"they\"", "score": -4.199400901794434, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"they\"", "logos": "Find the first names and role codes of professionals whose role code is they for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"professional\"", "score": -4.229697227478027, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"professional\"", "logos": "Find the first names and role codes of professionals whose role code is professional for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"performed\"", "score": -4.260307788848877, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"performed\"", "logos": "Find the first names and role codes of professionals whose role code is performed for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"s\"", "score": -4.295279502868652, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.role_code FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"s\"", "logos": "Find the first names and role codes of professionals whose role code is s for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.role_code = \"VALUE\"", "score": -5.31537389755249, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.professional_id FROM Professionals, Treatments WHERE  Professionals.professional_id = Treatments.professional_id  AND Professionals.role_code = \"VALUE\"", "logos": "Find the first names and professional ids of professionals whose role code is value for professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -5.437763690948486, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT  Professionals.first_name,  Professionals.last_name FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names and last names of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}, {"orig_question": "What are each professional's first name and description of the treatment they have performed?", "inferred_code": "SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id", "score": -5.528602600097656, "correct_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "is_correct": false, "parse_error": false, "implicit_inferred_code": "SELECT Professionals.first_name FROM Professionals, Treatments WHERE Professionals.professional_id = Treatments.professional_id", "logos": "Find the first names of professionals associated with treatments.", "logos_error": false, "implicit_parse_error": false}], "db_name": "dog_kennels", "gold_parse_error": false, "gold_logos": "Find the first names of professionals and the treatment type descriptions of treatment types associated with treatments, and for treatments associated with these professionals.\nReturn only unique records.\n", "gold_logos_error": false, "gold_code": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
