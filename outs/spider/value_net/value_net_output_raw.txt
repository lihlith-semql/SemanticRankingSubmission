{"index": 0, "beams": [{"orig_question": "How many singers do we have?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT min( *) FROM singer AS T1        ", "score": -30.809890747070312, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( T1.Capacity) FROM stadium AS T1        ", "score": -32.07801055908203, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM singer AS T1        ", "score": -33.44770812988281, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "score": -33.59171676635742, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "score": -36.753089904785156, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT sum( *) FROM singer AS T1        ", "score": -40.45178985595703, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT sum( T1.Capacity) FROM stadium AS T1        ", "score": -41.070533752441406, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT T1.Capacity FROM stadium AS T1        ", "score": -42.30142593383789, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT min( T1.Capacity) FROM stadium AS T1        ", "score": -42.4748420715332, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( *) FROM singer AS T1        ", "score": -43.591888427734375, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "score": -44.668724060058594, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT max( T1.Capacity) FROM stadium AS T1        ", "score": -44.68417739868164, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "score": -45.708213806152344, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( T1.Average) FROM stadium AS T1        ", "score": -47.49559783935547, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1, "beams": [{"orig_question": "What is the total number of singers?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Capacity) FROM stadium AS T1        ", "score": -28.160459518432617, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT avg( T1.Capacity) FROM stadium AS T1        ", "score": -28.93086051940918, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT sum( T1.Capacity) FROM stadium AS T1        ", "score": -32.964088439941406, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "score": -33.086421966552734, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "score": -33.67873001098633, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "score": -35.52918243408203, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM singer AS T1        ", "score": -37.419166564941406, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Average) FROM stadium AS T1        ", "score": -38.93437576293945, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT T1.Capacity FROM stadium AS T1        ", "score": -38.976844787597656, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "score": -39.274940490722656, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT avg( T1.Average) FROM stadium AS T1        ", "score": -41.706451416015625, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT max( T1.Capacity) FROM stadium AS T1        ", "score": -42.335933685302734, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Singer_ID) FROM singer AS T1        ", "score": -42.98709487915039, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT sum( T1.Average) FROM stadium AS T1        ", "score": -43.58990478515625, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 4, "beams": [{"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 46.65163803100586, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T1.Average) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 46.36632537841797, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T1.Average), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 37.78122329711914, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Age), min( T1.Age), max( T1.Age) FROM singer AS T1 WHERE T1.Country = 'France'       ", "score": 27.57888412475586, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT max( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 15.015247344970703, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT min( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 14.751199722290039, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID   HAVING max( T2.Country) = 'France'     ", "score": 14.16061019897461, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), avg( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 12.095657348632812, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT sum( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 11.02548599243164, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID   HAVING count( T2.Country) = 'France'     ", "score": 10.759014129638672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), avg( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 10.50433349609375, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT count( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 9.225566864013672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), sum( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 7.693561553955078, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), count( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "score": 6.454570770263672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), T2.Age FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France' GROUP BY T2.Age      ", "score": 0.9130325317382812, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 5, "beams": [{"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": 15.359737396240234, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T1.Average) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": 5.807151794433594, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T1.Average), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -2.9864559173583984, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Is_male = French       ", "score": -4.541116714477539, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Age), min( T1.Age), max( T1.Age) FROM singer AS T1 WHERE T1.Country = 'French'       ", "score": -10.067874908447266, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT max( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -15.95585823059082, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT min( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -16.511943817138672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT sum( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -19.844520568847656, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), avg( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -20.72132110595703, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT count( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -20.916854858398438, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), avg( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -23.117700576782227, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), T2.Age FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French' GROUP BY T2.Age      ", "score": -24.998245239257812, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), count( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "score": -25.03154754638672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID   HAVING count( T2.Country) = 'French'     ", "score": -26.17513084411621, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Age = French       ", "score": -61.96039581298828, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 6, "beams": [{"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT max( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -37.995845794677734, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, max( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -39.62163543701172, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, avg( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -40.582584381103516, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT avg( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -42.41324234008789, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "score": -42.55162811279297, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY count( T1.Age) ASC LIMIT 1    ", "score": -43.123958587646484, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT min( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -44.162296295166016, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY min( T1.Age) ASC LIMIT 1    ", "score": -44.18937683105469, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, min( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -45.50093460083008, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT count( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -47.12169647216797, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT sum( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -47.449100494384766, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, count( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -47.6531982421875, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "score": -49.64201354980469, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY count( *) ASC LIMIT 1    ", "score": -49.86699295043945, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 7, "beams": [{"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT max( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -39.571414947509766, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT avg( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -42.42283630371094, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, avg( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -42.71337890625, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, max( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -43.1120719909668, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "score": -43.931610107421875, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY count( T1.Age) ASC LIMIT 1    ", "score": -44.082393646240234, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY min( T1.Age) ASC LIMIT 1    ", "score": -44.43215560913086, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT min( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -45.21595764160156, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT count( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -48.813026428222656, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "score": -49.518638610839844, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, min( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -49.5980110168457, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT sum( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "score": -49.748905181884766, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, count( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "score": -50.646209716796875, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY max( T1.Age) ASC LIMIT 1    ", "score": -53.57224655151367, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 8, "beams": [{"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1 WHERE T1.Age > 20       ", "score": 81.06266784667969, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING max( T1.Age) > 20     ", "score": 38.982242584228516, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 37.216861724853516, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 37.195518493652344, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING avg( T1.Age) > 20     ", "score": 36.54063034057617, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 36.29646682739258, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING sum( T1.Age) > 20     ", "score": 34.53741455078125, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 34.32891082763672, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 30.88300323486328, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING count( T1.Age) > 20     ", "score": 30.27202606201172, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING min( T1.Age) > 20     ", "score": 27.636634826660156, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "score": -3.382781982421875, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "score": -3.4810638427734375, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "score": -4.393135070800781, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING avg( T1.Age) > 20     ", "score": -6.760948181152344, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 9, "beams": [{"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1 WHERE T1.Age > 20       ", "score": 75.77813720703125, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING max( T1.Age) > 20     ", "score": 39.87813186645508, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING avg( T1.Age) > 20     ", "score": 34.71080780029297, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 33.92023849487305, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING sum( T1.Age) > 20     ", "score": 32.39799880981445, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 31.75607681274414, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 29.46857452392578, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING count( T1.Age) > 20     ", "score": 28.82123565673828, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 27.308055877685547, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING min( T1.Age) > 20     ", "score": 25.009933471679688, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "score": 24.813602447509766, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "score": 0.160369873046875, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "score": -1.8685760498046875, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "score": -4.361595153808594, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING avg( T1.Age) > 20     ", "score": -7.583168029785156, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 14, "beams": [{"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000       ", "score": 103.70722961425781, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT max( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 64.7999267578125, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT avg( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 61.114662170410156, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING avg( T1.Capacity) between 5000 AND 10000     ", "score": 60.42581558227539, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT min( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 59.1168327331543, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING count( T1.Capacity) between 5000 AND 10000     ", "score": 58.81702423095703, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING max( T1.Capacity) between 5000 AND 10000     ", "score": 57.495819091796875, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT sum( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 57.155216217041016, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING sum( T1.Capacity) between 5000 AND 10000     ", "score": 56.76561737060547, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, max( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 56.390567779541016, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT count( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 55.146610260009766, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING min( T1.Capacity) between 5000 AND 10000     ", "score": 53.00783920288086, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, count( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 52.991477966308594, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, avg( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 52.19324493408203, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, sum( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 50.07015609741211, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 15, "beams": [{"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000       ", "score": 103.48839569091797, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT max( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 70.82475280761719, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT avg( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 67.95548248291016, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT min( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 66.35138702392578, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT count( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 63.64404296875, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT sum( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "score": 62.91438293457031, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING count( T1.Capacity) between 5000 AND 10000     ", "score": 60.240447998046875, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING avg( T1.Capacity) between 5000 AND 10000     ", "score": 60.12702178955078, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, max( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 59.77667236328125, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING max( T1.Capacity) between 5000 AND 10000     ", "score": 58.596290588378906, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING sum( T1.Capacity) between 5000 AND 10000     ", "score": 56.78864669799805, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, count( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 56.48261642456055, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, min( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 55.21855926513672, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, sum( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 54.12392807006836, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, avg( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "score": 53.299373626708984, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 16, "beams": [{"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "score": -0.00534853944554925, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), avg( T1.Capacity) FROM stadium AS T1        ", "score": -5.233607769012451, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT sum( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "score": -33.7632942199707, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT min( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "score": -35.152469635009766, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "score": -37.48373794555664, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), min( T1.Average) FROM stadium AS T1        ", "score": -38.943756103515625, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT sum( T1.Capacity), avg( T1.Capacity) FROM stadium AS T1        ", "score": -39.089656829833984, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), min( T1.Capacity) FROM stadium AS T1        ", "score": -39.45318603515625, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), sum( T1.Average) FROM stadium AS T1        ", "score": -40.131038665771484, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT T1.Capacity, avg( T1.Average) FROM stadium AS T1  GROUP BY T1.Capacity      ", "score": -40.330135345458984, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT min( T1.Capacity), avg( T1.Capacity) FROM stadium AS T1        ", "score": -40.67008972167969, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT T1.Capacity, avg( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Capacity      ", "score": -42.88240051269531, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), max( T1.Average) FROM stadium AS T1        ", "score": -42.94306564331055, "correct_code": "select max(capacity), average from stadium"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 17, "beams": [{"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "score": -2.3841855067985307e-07, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "score": -15.39480209350586, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), min( T1.Capacity) FROM stadium AS T1        ", "score": -35.15990447998047, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT sum( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "score": -35.349395751953125, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT min( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "score": -35.39701843261719, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), sum( T1.Capacity) FROM stadium AS T1        ", "score": -37.23866271972656, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT count( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "score": -40.43450927734375, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT max( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "score": -40.44940185546875, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT T1.Average, max( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Average      ", "score": -41.6200065612793, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT count( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "score": -42.709510803222656, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity      ", "score": -48.707454681396484, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT sum( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "score": -49.05385208129883, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT min( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "score": -50.11540222167969, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 18, "beams": [{"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Average DESC LIMIT 1    ", "score": -25.616649627685547, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Highest) DESC LIMIT 1    ", "score": -29.18097496032715, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Capacity) DESC LIMIT 1    ", "score": -30.102733612060547, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY sum( T1.Average) DESC LIMIT 1    ", "score": -36.46023941040039, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT max( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -37.60159683227539, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT avg( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -38.27393341064453, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, avg( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -39.30060577392578, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, max( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -42.54106903076172, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY count( T1.Average) DESC LIMIT 1    ", "score": -43.03274917602539, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT min( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -46.81163787841797, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY max( T1.Average) DESC LIMIT 1    ", "score": -47.36713790893555, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT count( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -47.672183990478516, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT sum( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -48.105098724365234, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Highest DESC LIMIT 1    ", "score": -48.834495544433594, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 19, "beams": [{"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Average DESC LIMIT 1    ", "score": -23.313594818115234, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Highest) DESC LIMIT 1    ", "score": -27.551490783691406, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Capacity) DESC LIMIT 1    ", "score": -32.808738708496094, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY sum( T1.Average) DESC LIMIT 1    ", "score": -36.23128890991211, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT max( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -37.672271728515625, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT avg( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -38.775516510009766, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, avg( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -40.06404495239258, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY count( T1.Average) DESC LIMIT 1    ", "score": -42.756202697753906, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, max( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -42.756343841552734, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Highest DESC LIMIT 1    ", "score": -45.68209457397461, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY max( T1.Average) DESC LIMIT 1    ", "score": -45.68263244628906, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT min( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -47.51112365722656, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT count( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -48.28850173950195, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT sum( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "score": -48.691017150878906, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 37, "beams": [{"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 58.693359375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.concert_Name FROM concert AS T1 WHERE T1.Year = '2014'       ", "score": 37.06925964355469, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 17.68527603149414, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 16.9747314453125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING count( T2.Year) = '2014'     ", "score": 15.496612548828125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING max( T2.Year) = '2014'     ", "score": 12.365989685058594, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 11.899349212646484, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 10.453594207763672, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING avg( T2.Year) = '2014'     ", "score": 9.521320343017578, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 8.445106506347656, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING sum( T2.Year) = '2014'     ", "score": 7.2353057861328125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING min( T2.Year) = '2014'     ", "score": 2.0246124267578125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT max( T1.concert_Name) FROM concert AS T1 WHERE T1.Year = '2014'       ", "score": 1.5885848999023438, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": -1.0441741943359375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": -5.4438323974609375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 38, "beams": [{"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 49.779937744140625, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 16.16583251953125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 14.620433807373047, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Song_release_year = '2014'       ", "score": 12.541015625, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 9.167701721191406, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 7.974609375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": 6.229255676269531, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING count( T2.Year) = '2014'     ", "score": 4.604072570800781, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": -0.0215606689453125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING max( T2.Year) = '2014'     ", "score": -2.4745712280273438, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING avg( T2.Year) = '2014'     ", "score": -4.405292510986328, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING sum( T2.Year) = '2014'     ", "score": -6.285614013671875, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "score": -8.585704803466797, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING min( T2.Year) = '2014'     ", "score": -10.930362701416016, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.concert_Name FROM concert AS T1 WHERE T1.Year = '2014'       ", "score": -12.999542236328125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 39, "beams": [{"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "score": 66.75010681152344, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Song_Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "score": 35.65169906616211, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT max( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 33.16120910644531, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT avg( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 31.39804458618164, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT sum( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 26.78704833984375, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT min( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 26.77404022216797, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT count( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 26.663238525390625, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING count( T1.Song_Name) like '%Hey%'     ", "score": 25.37103271484375, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, max( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 22.828857421875, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, avg( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 22.417110443115234, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING avg( T1.Song_Name) like '%Hey%'     ", "score": 19.318889617919922, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, count( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 15.976768493652344, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, min( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 14.676292419433594, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING max( T1.Song_Name) like '%Hey%'     ", "score": 14.624832153320312, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, sum( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 13.82400894165039, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 40, "beams": [{"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "score": 64.33802032470703, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Song_Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "score": 28.55017852783203, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT max( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 26.185489654541016, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT avg( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 24.952117919921875, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Country, T1.Song_Name FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "score": 24.322315216064453, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING count( T1.Song_Name) like '%Hey%'     ", "score": 24.117107391357422, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT count( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 22.095203399658203, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT min( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 21.97018051147461, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT sum( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "score": 20.527584075927734, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, avg( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 19.975799560546875, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, max( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 19.48147964477539, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING avg( T1.Song_Name) like '%Hey%'     ", "score": 18.519290924072266, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING min( T1.Song_Name) like '%Hey%'     ", "score": 14.987468719482422, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING max( T1.Song_Name) like '%Hey%'     ", "score": 13.934673309326172, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, count( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "score": 13.647502899169922, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 45, "beams": [{"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 72.68619537353516, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 62.259864807128906, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING max( T1.weight) > 10     ", "score": 34.947776794433594, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT min( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 34.84956741333008, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING sum( T1.weight) > 10     ", "score": 34.74781799316406, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 32.37025451660156, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING count( T1.weight) > 10     ", "score": 31.985462188720703, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT avg( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 29.45343017578125, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING avg( T1.weight) > 10     ", "score": 27.649452209472656, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT sum( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 27.559566497802734, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 26.927204132080078, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.weight > 10       ", "score": 26.142608642578125, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 21.264305114746094, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT max( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 19.265674591064453, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 18.775836944580078, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 46, "beams": [{"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 67.61163330078125, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 61.23226547241211, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING sum( T1.weight) > 10     ", "score": 37.96295928955078, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING max( T1.weight) > 10     ", "score": 36.738365173339844, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING count( T1.weight) > 10     ", "score": 31.366233825683594, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING avg( T1.weight) > 10     ", "score": 27.18225860595703, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT min( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 25.200420379638672, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT avg( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 25.035728454589844, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING max( T1.weight) > 10     ", "score": 23.830020904541016, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT avg( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 22.588882446289062, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 22.489917755126953, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 22.067283630371094, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 20.955379486083984, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT max( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "score": 14.147884368896484, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.weight > 10       ", "score": 6.195316314697266, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 47, "beams": [{"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -0.003961217124015093, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -5.533193111419678, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.pet_age) FROM Pets AS T23        )       ", "score": -26.41901206970215, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT avg( T23.Age) FROM Student AS T23        )       ", "score": -26.5401611328125, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.Age) FROM Student AS T22        )       ", "score": -28.017425537109375, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT max( T23.Age) FROM Student AS T23        )       ", "score": -28.07037925720215, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT avg( T22.pet_age) FROM Pets AS T22        )       ", "score": -31.798254013061523, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT max( T22.pet_age) FROM Pets AS T22        )       ", "score": -33.06454849243164, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -37.02658462524414, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -37.984981536865234, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -38.02119064331055, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT T23.Age FROM Student AS T23        )       ", "score": -40.88910675048828, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -42.2261848449707, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -43.178565979003906, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -43.22585678100586, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 48, "beams": [{"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -0.06168834865093231, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -2.9844179153442383, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -4.809149265289307, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -6.99453592300415, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -8.703397750854492, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -10.964166641235352, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -16.13912010192871, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -18.349252700805664, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT sum( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -25.335464477539062, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT count( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "score": -26.59101104736328, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT sum( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -27.513874053955078, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT avg( T23.Age) FROM Student AS T23        )       ", "score": -27.682754516601562, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT max( T23.Age) FROM Student AS T23        )       ", "score": -27.854938507080078, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT count( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "score": -28.97573471069336, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.Age) FROM Student AS T22        )       ", "score": -29.16183853149414, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 51, "beams": [{"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 72.37691497802734, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 62.40003204345703, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "score": 48.55974578857422, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "score": 37.76355743408203, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 34.76204299926758, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 34.407630920410156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING max( T2.Age) > 20     ", "score": 30.11072540283203, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT avg( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 29.16335678100586, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 28.61467742919922, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 26.303668975830078, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 26.30355453491211, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT T1.PetType FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 25.648792266845703, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 25.608409881591797, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 24.824710845947266, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING avg( T2.Age) > 20     ", "score": 24.074867248535156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 52, "beams": [{"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 71.23858642578125, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 65.50825500488281, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "score": 45.02330780029297, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT T1.PetType FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 40.87913131713867, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "score": 40.16668701171875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 36.70722961425781, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 34.69438171386719, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 34.2388801574707, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 34.11262893676758, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 32.598365783691406, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 31.230361938476562, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 30.32223892211914, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING max( T2.Age) > 20     ", "score": 30.181346893310547, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT T1.pet_age FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 30.151134490966797, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "score": 28.708465576171875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 53, "beams": [{"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "score": 75.65985870361328, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "score": 68.36377716064453, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'F'       ", "score": 49.53013229370117, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T2.Sex = 'dog'       ", "score": 46.27357482910156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T1.PetType = 'dog' GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "score": 43.25190734863281, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'F'       ", "score": 41.712406158447266, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T2.Sex = 'dog'       ", "score": 38.895103454589844, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "score": 38.33283615112305, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "score": 36.47846603393555, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T1.PetType = 'dog' GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "score": 35.857627868652344, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' GROUP BY count( *) HAVING count( T1.PetType) = 'dog'     ", "score": 34.79355239868164, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "score": 34.313385009765625, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "score": 33.68558883666992, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT T1.PetID FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "score": 32.439430236816406, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T1.PetType = 'dog' GROUP BY count( *) HAVING avg( T2.Sex) = 'F'     ", "score": 31.410531997680664, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 54, "beams": [{"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 53.82992935180664, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 53.486976623535156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "score": 20.229341506958008, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "score": 19.959447860717773, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 18.546249389648438, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "score": 18.460498809814453, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "score": 17.57373046875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 16.2720947265625, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 16.139808654785156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 15.106403350830078, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 15.076316833496094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 15.051170349121094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 14.49609375, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "score": 14.300392150878906, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "score": 13.757095336914062, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 54, "beams": [{"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 53.82992935180664, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 53.486976623535156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "score": 20.229341506958008, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "score": 19.959447860717773, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 18.546249389648438, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "score": 18.460498809814453, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "score": 17.57373046875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 16.2720947265625, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 16.139808654785156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 15.106403350830078, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 15.076316833496094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 15.051170349121094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "score": 14.49609375, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "score": 14.300392150878906, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "score": 13.757095336914062, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 55, "beams": [{"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -37.538909912109375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT T1.PetType FROM Pets AS T1        ", "score": -37.66643142700195, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -44.356361389160156, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -48.97437286376953, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -56.59479522705078, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -99.50450134277344, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Has_Pet AS T1        ", "score": -134.2255096435547, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Pets AS T1        ", "score": -135.60914611816406, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -144.80824279785156, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT T1.PetID FROM Pets AS T1        ", "score": -152.73660278320312, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -157.12271118164062, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -157.20236206054688, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.pet_age) FROM Pets AS T1        ", "score": -159.88304138183594, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -169.8509521484375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 56, "beams": [{"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT T1.PetType FROM Pets AS T1        ", "score": -37.03673553466797, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -39.60020446777344, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -46.85870361328125, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -47.71588134765625, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetType) FROM Pets AS T1        ", "score": -55.93717575073242, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -105.63328552246094, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Has_Pet AS T1        ", "score": -133.29762268066406, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Pets AS T1        ", "score": -148.43743896484375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -153.46542358398438, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT T1.PetID FROM Pets AS T1        ", "score": -157.23638916015625, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -162.66558837890625, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -165.52194213867188, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.pet_age) FROM Pets AS T1        ", "score": -168.81997680664062, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetID) FROM Pets AS T1        ", "score": -175.0345458984375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 67, "beams": [{"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -2.13382354559144e-05, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID    ORDER BY T2.Age ASC LIMIT 1    ", "score": -10.752283096313477, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -38.008766174316406, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY min( T1.pet_age) ASC LIMIT 1    ", "score": -38.80661392211914, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY count( *) ASC LIMIT 1    ", "score": -40.871986389160156, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, max( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -41.32867431640625, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT max( T1.PetType), T1.weight FROM Pets AS T1  GROUP BY T1.weight  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -41.60727310180664, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY avg( T1.pet_age) ASC LIMIT 1    ", "score": -42.43004608154297, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT avg( T1.PetType), T1.weight FROM Pets AS T1  GROUP BY T1.weight  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -42.725486755371094, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY sum( T1.pet_age) ASC LIMIT 1    ", "score": -44.46009063720703, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -45.41593551635742, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT min( T1.PetType), T1.weight FROM Pets AS T1  GROUP BY T1.weight  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -45.43561935424805, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY count( *) ASC LIMIT 1    ", "score": -46.176513671875, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "score": -48.71607971191406, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, count( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -48.8830451965332, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 68, "beams": [{"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -1.1920922133867862e-06, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID    ORDER BY T2.Age ASC LIMIT 1    ", "score": -13.623063087463379, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1    ORDER BY T1.weight ASC LIMIT 1    ", "score": -19.47480583190918, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -19.96157455444336, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -21.45598793029785, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -21.748085021972656, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, max( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -22.68990707397461, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( *) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -25.988496780395508, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, sum( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -26.930898666381836, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( *) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "score": -28.56804847717285, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY min( T1.pet_age) ASC LIMIT 1    ", "score": -32.2183723449707, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "score": -34.240779876708984, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "score": -35.1226806640625, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "score": -35.21567153930664, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, max( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY min( T1.pet_age) ASC LIMIT 1    ", "score": -36.79674530029297, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 69, "beams": [{"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1       ", "score": 57.90821075439453, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1       ", "score": 57.63447570800781, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.pet_age > 1       ", "score": 46.63960266113281, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T3.Age > 1       ", "score": 46.05779266357422, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetID HAVING max( T2.Age) > 1     ", "score": 22.13721466064453, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 20.2681884765625, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1  GROUP BY T1.PetID, T1.weight HAVING max( T1.pet_age) > 1     ", "score": 19.956932067871094, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "score": 19.790557861328125, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT avg( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 19.47214126586914, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT avg( T1.PetID), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "score": 19.15001678466797, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.PetID      ", "score": 17.529033660888672, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT min( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 16.44955062866211, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 15.871707916259766, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "score": 13.907981872558594, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 12.563945770263672, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 70, "beams": [{"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1       ", "score": 53.82592010498047, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1       ", "score": 50.98945236206055, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.pet_age > 1       ", "score": 41.478981018066406, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T3.Age > 1       ", "score": 38.57642364501953, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1  GROUP BY T1.PetID, T1.weight HAVING max( T1.pet_age) > 1     ", "score": 18.725135803222656, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetID HAVING max( T2.Age) > 1     ", "score": 18.168346405029297, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 16.945205688476562, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT avg( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 14.08648681640625, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "score": 13.956600189208984, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, max( T1.weight) FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.PetID      ", "score": 13.133594512939453, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.PetID      ", "score": 12.620941162109375, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 11.346515655517578, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 11.16754150390625, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT min( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "score": 10.789691925048828, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1  GROUP BY T1.PetID, T1.weight HAVING count( *) > 1     ", "score": -14.736370086669922, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 75, "beams": [{"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": 0.0, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T3 ON T1.StuID = T3.StuID JOIN Pets AS T2 ON T3.PetID = T2.PetID        ", "score": -31.068220138549805, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -37.96851348876953, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -38.83026885986328, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT max( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "score": -40.22882843017578, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, avg( T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "score": -40.28693389892578, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -40.653228759765625, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT avg( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "score": -41.6453971862793, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -41.70741271972656, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -42.05812454223633, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, max( T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "score": -42.14291763305664, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -44.796634674072266, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT count( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "score": -44.85588455200195, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT min( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "score": -45.07683181762695, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1        ", "score": -45.29108428955078, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 76, "beams": [{"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": 0.0, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -27.32271957397461, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, avg(DISTINCT T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "score": -36.59117889404297, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -39.04872131347656, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -40.13794708251953, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -40.2025146484375, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID in (SELECT avg( T22.StuID) FROM Has_Pet AS T22        )       ", "score": -40.848472595214844, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T3 ON T1.StuID = T3.StuID JOIN Pets AS T2 ON T3.PetID = T2.PetID        ", "score": -41.71834182739258, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -42.001914978027344, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID in (SELECT count( T22.StuID) FROM Has_Pet AS T22        )       ", "score": -42.124629974365234, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID in (SELECT max( T22.StuID) FROM Has_Pet AS T22        )       ", "score": -43.07099151611328, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1        ", "score": -43.15090560913086, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "score": -43.17550277709961, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "score": -43.223182678222656, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, max(DISTINCT T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "score": -43.65502166748047, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 83, "beams": [{"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 85.36862182617188, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 WHERE T1.Age = 3       ", "score": 51.00324249267578, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT max( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 43.29353332519531, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT avg( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 41.34900665283203, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT min( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 40.99409484863281, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT count( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 40.61114501953125, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING count( T2.pet_age) = 3     ", "score": 39.69658279418945, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING avg( T2.pet_age) = 3     ", "score": 36.10275650024414, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT sum( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 35.111331939697266, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING max( T2.pet_age) = 3     ", "score": 33.470977783203125, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING min( T2.pet_age) = 3     ", "score": 32.21714782714844, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING sum( T2.pet_age) = 3     ", "score": 26.063251495361328, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = cat       ", "score": 17.563846588134766, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1  GROUP BY T1.LName HAVING count( T1.Age) = 3     ", "score": 16.366615295410156, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = '3'       ", "score": 15.71780776977539, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 84, "beams": [{"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 65.77394104003906, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = cat       ", "score": 25.863122940063477, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT max( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 24.443756103515625, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT count( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 23.690113067626953, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT avg( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 22.56212615966797, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = 'cat'       ", "score": 21.575668334960938, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT min( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 21.552486419677734, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING count( T2.pet_age) = 3     ", "score": 20.19092559814453, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT sum( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "score": 17.488685607910156, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING avg( T2.pet_age) = 3     ", "score": 16.922649383544922, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 WHERE T1.Age = 3       ", "score": 14.756397247314453, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING max( T2.pet_age) = 3     ", "score": 13.116199493408203, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING min( T2.pet_age) = 3     ", "score": 10.797740936279297, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING sum( T2.pet_age) = 3     ", "score": 6.775665283203125, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = '3'       ", "score": -3.4408340454101562, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 87, "beams": [{"orig_question": "How many continents are there?", "inferred_code": "SELECT count( *) FROM continents AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT min( T1.Continent) FROM continents AS T1        ", "score": -31.57335662841797, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT T1.Continent FROM continents AS T1        ", "score": -31.722362518310547, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT avg( T1.Continent) FROM continents AS T1        ", "score": -38.00902557373047, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT sum( T1.Continent) FROM continents AS T1        ", "score": -40.25084686279297, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Continent) FROM continents AS T1        ", "score": -47.33820724487305, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT max( T1.Continent) FROM continents AS T1        ", "score": -47.76572799682617, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Id) FROM cars_data AS T1        ", "score": -79.87017059326172, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.ContId) FROM continents AS T1        ", "score": -81.116943359375, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "score": -89.2165298461914, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents AS T1        ", "score": -93.36628723144531, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT T1.ContId FROM continents AS T1        ", "score": -94.76085662841797, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Id) FROM car_makers AS T1        ", "score": -96.5123291015625, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1        ", "score": -98.21611022949219, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT min( *) FROM continents AS T1        ", "score": -100.6136245727539, "correct_code": "SELECT count(*) FROM CONTINENTS"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 88, "beams": [{"orig_question": "What is the number of continents?", "inferred_code": "SELECT count( *) FROM continents AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT min( T1.Continent) FROM continents AS T1        ", "score": -31.760494232177734, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Continent FROM continents AS T1        ", "score": -32.32402801513672, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT avg( T1.Continent) FROM continents AS T1        ", "score": -37.162696838378906, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT sum( T1.Continent) FROM continents AS T1        ", "score": -42.72524642944336, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT max( T1.Continent) FROM continents AS T1        ", "score": -49.70304870605469, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT count( T1.Continent) FROM continents AS T1        ", "score": -65.26054382324219, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "score": -75.11693572998047, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT min( *) FROM continents AS T1        ", "score": -77.73834228515625, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents AS T1        ", "score": -79.77125549316406, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT count( T1.Id) FROM cars_data AS T1        ", "score": -82.78874206542969, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Country FROM car_makers AS T1        ", "score": -83.6345443725586, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.CountryId FROM countries AS T1        ", "score": -83.82778930664062, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Id FROM car_makers AS T1        ", "score": -87.07943725585938, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.ContId FROM continents AS T1        ", "score": -87.43278503417969, "correct_code": "SELECT count(*) FROM CONTINENTS"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 91, "beams": [{"orig_question": "How many countries are listed?", "inferred_code": "SELECT count( *) FROM countries AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT T1.Country FROM car_makers AS T1        ", "score": -27.141803741455078, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( T1.Country) FROM car_makers AS T1        ", "score": -33.271663665771484, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT avg( T1.Country) FROM car_makers AS T1        ", "score": -42.46010971069336, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT count( *) FROM countries AS T1        ", "score": -43.743865966796875, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT sum( T1.Country) FROM car_makers AS T1        ", "score": -43.91297149658203, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT max( T1.Country) FROM car_makers AS T1        ", "score": -52.6192626953125, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( *) FROM countries AS T1        ", "score": -53.34040451049805, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT T1.CountryName FROM countries AS T1        ", "score": -56.09869384765625, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( T1.CountryName) FROM countries AS T1        ", "score": -58.475677490234375, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT count( T1.Country) FROM car_makers AS T1        ", "score": -67.04842376708984, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT T1.CountryId FROM countries AS T1        ", "score": -69.22044372558594, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT avg( T1.CountryName) FROM countries AS T1        ", "score": -71.50563049316406, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT sum( T1.CountryName) FROM countries AS T1        ", "score": -72.21096801757812, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( T1.CountryId) FROM countries AS T1        ", "score": -73.33314514160156, "correct_code": "SELECT count(*) FROM COUNTRIES"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 92, "beams": [{"orig_question": "How many countries exist?", "inferred_code": "SELECT count( *) FROM countries AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.Country FROM car_makers AS T1        ", "score": -31.487014770507812, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.Country) FROM car_makers AS T1        ", "score": -32.733009338378906, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT avg( T1.Country) FROM car_makers AS T1        ", "score": -41.02171325683594, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT sum( T1.Country) FROM car_makers AS T1        ", "score": -43.26398849487305, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT max( T1.Country) FROM car_makers AS T1        ", "score": -48.317779541015625, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.CountryName FROM countries AS T1        ", "score": -55.379852294921875, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.CountryName) FROM countries AS T1        ", "score": -56.74988555908203, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( *) FROM countries AS T1        ", "score": -58.82567596435547, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "score": -60.57773208618164, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.CountryId FROM countries AS T1        ", "score": -67.38824462890625, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.Id) FROM cars_data AS T1        ", "score": -67.96688842773438, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.CountryId) FROM countries AS T1        ", "score": -68.59616088867188, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT avg( T1.CountryName) FROM countries AS T1        ", "score": -70.58847045898438, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT sum( T1.CountryName) FROM countries AS T1        ", "score": -71.62245178222656, "correct_code": "SELECT count(*) FROM COUNTRIES"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 95, "beams": [{"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -21.19661521911621, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -43.36310577392578, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) ASC LIMIT 1    ", "score": -43.95212936401367, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -44.099666595458984, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.Horsepower) ASC LIMIT 1    ", "score": -45.3836669921875, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -45.56010437011719, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) ASC LIMIT 1    ", "score": -46.930084228515625, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -48.3868522644043, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.Horsepower) ASC LIMIT 1    ", "score": -50.2425537109375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -50.974647521972656, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.Horsepower) ASC LIMIT 1    ", "score": -51.129493713378906, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG ASC LIMIT 1    ", "score": -55.13405227661133, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY count( T2.Horsepower) ASC LIMIT 1    ", "score": -64.52997589111328, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.Horsepower) ASC LIMIT 1    ", "score": -64.53658294677734, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 96, "beams": [{"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -20.44721794128418, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -41.354618072509766, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -42.90886306762695, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -42.95313262939453, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) ASC LIMIT 1    ", "score": -45.35665512084961, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) ASC LIMIT 1    ", "score": -46.14484405517578, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.Horsepower) ASC LIMIT 1    ", "score": -47.4295768737793, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -47.762393951416016, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -49.542232513427734, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.Horsepower) ASC LIMIT 1    ", "score": -52.43115997314453, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.Horsepower) ASC LIMIT 1    ", "score": -52.749488830566406, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG ASC LIMIT 1    ", "score": -60.907649993896484, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT max( T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -61.965213775634766, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT min( T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "score": -63.43118667602539, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 99, "beams": [{"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": 39.202911376953125, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": 2.6188125610351562, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT count( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": 2.1559829711914062, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT avg( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -1.6068840026855469, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT min( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -5.2556304931640625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING count( T2.Year) = 1970     ", "score": -5.9013824462890625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT sum( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -7.4865875244140625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING avg( T2.Year) = 1970     ", "score": -13.756767272949219, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING max( T2.Year) = 1970     ", "score": -14.47491455078125, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING sum( T2.Year) = 1970     ", "score": -19.425792694091797, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING min( T2.Year) = 1970     ", "score": -21.308860778808594, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -31.862545013427734, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1970       ", "score": -35.620445251464844, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -36.23823165893555, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY max( T1.Maker) HAVING count( T2.Year) = 1970     ", "score": -41.93011474609375, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 100, "beams": [{"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": 39.39824676513672, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -0.24546051025390625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -0.8426780700683594, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING count( T2.Year) = 1970     ", "score": -2.9869766235351562, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -5.138637542724609, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -8.87466049194336, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -11.780624389648438, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.FullName FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -12.239002227783203, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING max( T2.Year) = 1970     ", "score": -12.274116516113281, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING avg( T2.Year) = 1970     ", "score": -13.834991455078125, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING sum( T2.Year) = 1970     ", "score": -17.498844146728516, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING min( T2.Year) = 1970     ", "score": -17.842403411865234, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -18.452587127685547, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY count( T1.Maker) HAVING count( T2.Year) = 1970     ", "score": -42.009124755859375, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.FullName) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "score": -43.45449447631836, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 103, "beams": [{"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 72.25005340576172, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 39.39417266845703, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 39.30209732055664, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 34.96095657348633, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 33.3806266784668, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING max( T2.Year) > 1980     ", "score": 32.259647369384766, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 31.83504867553711, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 30.975936889648438, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING sum( T2.Year) > 1980     ", "score": 27.76435089111328, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING avg( T2.Year) > 1980     ", "score": 24.44544219970703, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Year) > 1980     ", "score": 23.701522827148438, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Year) > 1980     ", "score": 17.44094467163086, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 6.2247314453125, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.MPG > '1980'       ", "score": 4.463844299316406, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 4.157928466796875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 104, "beams": [{"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 67.35150909423828, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 40.71711349487305, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 37.227783203125, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 34.0609016418457, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 32.926326751708984, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "score": 32.04941177368164, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING max( T2.Year) > 1980     ", "score": 31.88677215576172, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING sum( T2.Year) > 1980     ", "score": 24.168312072753906, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING avg( T2.Year) > 1980     ", "score": 21.919696807861328, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Year) > 1980     ", "score": 19.653343200683594, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Year) > 1980     ", "score": 13.654460906982422, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY count( T1.Model) HAVING max( T2.Year) > 1980     ", "score": 5.078369140625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY max( T1.Model) HAVING max( T2.Year) > 1980     ", "score": 2.2458343505859375, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY avg( T1.Model) HAVING max( T2.Year) > 1980     ", "score": -0.8579025268554688, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY min( T1.Model) HAVING max( T2.Year) > 1980     ", "score": -2.095458984375, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 111, "beams": [{"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "score": 81.32427978515625, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.Maker = 'amc hornet'       ", "score": 49.05451202392578, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT max( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "score": 46.302879333496094, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT avg( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "score": 43.58118438720703, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT min( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "score": 41.01783752441406, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING count( T2.Make) = 'amc hornet'     ", "score": 39.718727111816406, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT sum( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "score": 37.21596908569336, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT count( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "score": 35.92731857299805, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING avg( T2.Make) = 'amc hornet'     ", "score": 35.11018371582031, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING max( T2.Make) = 'amc hornet'     ", "score": 32.39673614501953, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING min( T2.Make) = 'amc hornet'     ", "score": 31.099674224853516, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc'       ", "score": 28.553068161010742, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING sum( T2.Make) = 'amc hornet'     ", "score": 26.570533752441406, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT max( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.Maker = 'amc hornet'       ", "score": 14.007957458496094, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id  GROUP BY T1.Accelerate HAVING count( T2.Maker) = 'amc hornet'     ", "score": 4.884544372558594, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 113, "beams": [{"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 69.05945587158203, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT min( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 39.277259826660156, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT sum( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 34.48775863647461, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 32.00282287597656, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.Continent = france       ", "score": 29.2823486328125, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT avg( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 29.027118682861328, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T13 ON T1.Country = T13.CountryId JOIN continents AS T2 ON T13.Continent = T2.ContId WHERE T2.Continent = 'france'       ", "score": 26.825706481933594, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 22.752849578857422, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING count( T2.CountryName) = 'france'     ", "score": 21.079143524169922, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING avg( T2.CountryName) = 'france'     ", "score": 15.360702514648438, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'france'       ", "score": 15.243507385253906, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING min( T2.CountryName) = 'france'     ", "score": 13.901630401611328, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.Id FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 11.791946411132812, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.Make FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T14 ON T13.Maker = T14.Id JOIN countries AS T2 ON T14.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 9.656742095947266, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T15 ON T14.Maker = T15.Id JOIN countries AS T2 ON T15.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 6.158660888671875, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 114, "beams": [{"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 91.2183837890625, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 83.82635498046875, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 60.67017364501953, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT min( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 58.774009704589844, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT avg( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 57.052486419677734, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT sum( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 55.20737838745117, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 54.30256652832031, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "score": 52.44658660888672, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 46.78077697753906, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'France'       ", "score": 46.11331558227539, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING max( T2.CountryName) = 'France'     ", "score": 44.53691101074219, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "score": 44.50570297241211, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING count( T2.CountryName) = 'France'     ", "score": 43.607444763183594, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING avg( T2.CountryName) = 'France'     ", "score": 42.51860809326172, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'France'       ", "score": 39.59889221191406, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 115, "beams": [{"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1        ", "score": -24.583248138427734, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1        ", "score": -29.33302116394043, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.Model FROM model_list AS T1        ", "score": -32.458824157714844, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1        ", "score": -33.442378997802734, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "score": -33.852176666259766, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "score": -36.74690246582031, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "score": -36.86201858520508, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1        ", "score": -41.06489944458008, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.Id FROM car_makers AS T1        ", "score": -53.29906463623047, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT min( T1.Model) FROM car_names AS T1        ", "score": -55.55929946899414, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "score": -58.90664291381836, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "score": -59.37200927734375, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1        ", "score": -59.531124114990234, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT avg( T1.Model) FROM car_names AS T1        ", "score": -60.062355041503906, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 116, "beams": [{"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "score": 109.615966796875, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "score": 83.98545837402344, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'usa'       ", "score": 83.26151275634766, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "score": 75.51246643066406, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "score": 75.1119155883789, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "score": 71.752197265625, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "score": 71.47102355957031, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.Continent = United States       ", "score": 70.91780090332031, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'United States'       ", "score": 68.78578186035156, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "score": 68.75059509277344, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "score": 66.41651153564453, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "score": 62.647586822509766, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'usa'       ", "score": 57.95237350463867, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1   HAVING max( T1.CountryName) = 'United States'     ", "score": 57.68687057495117, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1   HAVING avg( T1.CountryName) = 'United States'     ", "score": 57.18946075439453, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 117, "beams": [{"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 35.76630401611328, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT sum( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 8.86549186706543, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT min( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 1.9820556640625, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT max( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 1.5941505432128906, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -4.072181701660156, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -7.184909820556641, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING avg( T1.Cylinders) = 4     ", "score": -7.827049255371094, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING count( T1.Cylinders) = 4     ", "score": -8.265235900878906, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -9.262187957763672, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING max( T1.Cylinders) = 4     ", "score": -12.705307006835938, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT count( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -13.466255187988281, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING min( T1.Cylinders) = 4     ", "score": -18.79553985595703, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING sum( T1.Cylinders) = 4     ", "score": -22.14672088623047, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -27.035308837890625, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -29.728351593017578, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 118, "beams": [{"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 37.23899459838867, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT sum( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 16.727779388427734, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT min( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 8.014209747314453, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT max( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 4.962089538574219, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT count( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": 1.0644874572753906, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -4.17279052734375, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING count( T1.Cylinders) = 4     ", "score": -7.082027435302734, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING avg( T1.Cylinders) = 4     ", "score": -9.245025634765625, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -12.554027557373047, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING max( T1.Cylinders) = 4     ", "score": -14.745403289794922, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -18.651458740234375, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING min( T1.Cylinders) = 4     ", "score": -19.766300201416016, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "score": -22.01177215576172, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING sum( T1.Cylinders) = 4     ", "score": -22.037837982177734, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT sum( T1.MPG) FROM cars_data AS T1   HAVING count( T1.Cylinders) = 4     ", "score": -27.068374633789062, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 119, "beams": [{"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "score": 12.656646728515625, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 1974       ", "score": 11.442337036132812, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 8       ", "score": 8.457557678222656, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 1974       ", "score": 6.487709045410156, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 8 and T1.Cylinders = 1974       ", "score": 2.4736976623535156, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 8 and T1.Cylinders = 8       ", "score": 0.4596214294433594, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 8 and T1.Year = 1974       ", "score": -4.9960479736328125, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 8 and T1.Year = 8       ", "score": -7.155757904052734, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "score": -8.401588439941406, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 1974       ", "score": -8.832660675048828, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 8       ", "score": -10.037364959716797, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "score": -10.54414176940918, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 1974       ", "score": -11.449588775634766, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 1974       ", "score": -11.713151931762695, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT sum( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "score": -14.321687698364258, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 120, "beams": [{"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "score": 42.0045280456543, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "score": 36.96153259277344, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 8       ", "score": 29.607553482055664, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 8       ", "score": 22.952253341674805, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT sum( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "score": 13.449481964111328, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "score": 12.06011962890625, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT avg( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "score": 10.762266159057617, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT count( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "score": 9.95201301574707, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT sum( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "score": 8.815292358398438, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Year = 1974       ", "score": 8.639263153076172, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "score": 7.444133758544922, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT avg( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "score": 6.006050109863281, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT count( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "score": 3.9788246154785156, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "score": 3.6087722778320312, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1   HAVING count( T1.Year) = 1974     ", "score": 2.6287155151367188, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 121, "beams": [{"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, T1.Model FROM model_list AS T1        ", "score": 0.0, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker        ", "score": -17.7279052734375, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT max( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -33.535274505615234, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -38.2709846496582, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT sum( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -40.15998077392578, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT min( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -40.47010803222656, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT count( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -41.4006462097168, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, max( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -42.43643569946289, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, avg( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -42.50550842285156, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, count( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -43.462501525878906, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, sum( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -46.56203079223633, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, min( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -47.563758850097656, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT max( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "score": -48.24848175048828, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model        ", "score": -52.737037658691406, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "score": -53.08294677734375, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 122, "beams": [{"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, T1.Model FROM model_list AS T1        ", "score": 0.0, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker        ", "score": -22.290815353393555, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT max( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -30.73416519165039, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -35.61479187011719, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT min( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -37.81752014160156, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT sum( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -38.60618209838867, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT count( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "score": -39.890499114990234, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, avg( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -39.99249267578125, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, max( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -42.50407791137695, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, count( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -43.227783203125, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, sum( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -47.443023681640625, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, min( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "score": -48.04511260986328, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model        ", "score": -49.95374298095703, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT max( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "score": -50.5648193359375, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "score": -55.53221893310547, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 125, "beams": [{"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 57.091670989990234, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 49.884029388427734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 42.935218811035156, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 38.260459899902344, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 24.130672454833984, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 23.905437469482422, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 23.868942260742188, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 20.06134033203125, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 17.278335571289062, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 15.676372528076172, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 15.000102996826172, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Horsepower) > '150'     ", "score": 12.194534301757812, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 11.033103942871094, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 9.56246566772461, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 9.20859146118164, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 126, "beams": [{"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 56.46510696411133, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 45.35995101928711, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 40.170326232910156, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 34.355560302734375, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 23.188232421875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 22.34799575805664, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 19.151691436767578, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 16.157215118408203, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 16.00281524658203, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Horsepower) > '150'     ", "score": 12.730392456054688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 11.54140853881836, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "score": 10.22708511352539, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Horsepower) > '150'     ", "score": 9.931705474853516, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING count( T1.Horsepower) > '150'     ", "score": 9.414188385009766, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Horsepower) > '150'     ", "score": 5.247844696044922, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 131, "beams": [{"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -6.438047409057617, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "score": -12.845894813537598, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "score": -20.289608001708984, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), sum( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -23.63547706604004, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), min( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "score": -24.52605438232422, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "score": -24.7867488861084, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT sum( T1.Horsepower), max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "score": -28.356098175048828, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), sum( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "score": -28.982929229736328, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), min( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -30.594966888427734, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), avg( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -31.67962074279785, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT min( T1.Horsepower), max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "score": -32.70051574707031, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT avg( T1.Horsepower), max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "score": -33.76445770263672, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT sum( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -35.798828125, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Maker) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T1.Cylinders = 3       ", "score": -38.35377883911133, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId   HAVING count( T1.Cylinders) = 3     ", "score": -46.012638092041016, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 132, "beams": [{"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "score": 19.38922882080078, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT T1.Horsepower, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -5.329111099243164, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT avg( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "score": -9.586496353149414, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -10.362552642822266, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT sum( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "score": -10.585752487182617, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), avg( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -11.95639419555664, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT min( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "score": -13.425117492675781, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), min( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -14.53936767578125, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), sum( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -17.728145599365234, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), count( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "score": -22.1502685546875, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING count( T1.Cylinders) = 3     ", "score": -24.542896270751953, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING avg( T1.Cylinders) = 3     ", "score": -25.933021545410156, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Maker FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T1.Cylinders = 3 GROUP BY T2.Maker      ", "score": -30.039264678955078, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING max( T1.Cylinders) = 3     ", "score": -31.024003982543945, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING min( T1.Cylinders) = 3     ", "score": -34.93262481689453, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 133, "beams": [{"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -5.960462772236497e-07, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.MPG) DESC LIMIT 1    ", "score": -14.422638893127441, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -20.983299255371094, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.MPG) DESC LIMIT 1    ", "score": -30.759008407592773, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.MPG) DESC LIMIT 1    ", "score": -36.38758087158203, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY max( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -40.001068115234375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.MPG) DESC LIMIT 1    ", "score": -40.54518508911133, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "score": -41.640201568603516, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY min( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -43.17976379394531, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY avg( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -44.970550537109375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY sum( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -46.78782653808594, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1  GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1    ", "score": -47.238487243652344, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY count( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -48.700714111328125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -51.58465576171875, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY max( T1.Model)  ORDER BY max( T2.MPG) DESC LIMIT 1    ", "score": -54.182533264160156, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 134, "beams": [{"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": 0.0, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -18.374835968017578, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -39.33871078491211, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -43.17716598510742, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -43.24897766113281, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.MPG) DESC LIMIT 1    ", "score": -43.665035247802734, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.MPG) DESC LIMIT 1    ", "score": -44.66145706176758, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -45.53437042236328, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1    ORDER BY T1.MPG DESC LIMIT 1    ", "score": -49.218563079833984, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -50.103729248046875, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -51.9261360168457, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.MPG) DESC LIMIT 1    ", "score": -52.630863189697266, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.MPG) DESC LIMIT 1    ", "score": -55.21162033081055, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT max( T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "score": -57.841453552246094, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "score": -61.596553802490234, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 135, "beams": [{"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": 31.330097198486328, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": 2.6257972717285156, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -0.6017417907714844, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -1.7038650512695312, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -5.454370498657227, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -10.917949676513672, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -11.292469024658203, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING count( T1.Year) < 1980     ", "score": -12.174030303955078, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING max( T1.Year) < 1980     ", "score": -15.043479919433594, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -18.27796745300293, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING avg( T1.Year) < 1980     ", "score": -20.08306121826172, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING sum( T1.Year) < 1980     ", "score": -21.70148277282715, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -34.54582214355469, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -37.86133575439453, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -38.48318862915039, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 136, "beams": [{"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": 31.679845809936523, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": 3.789386749267578, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": 0.22565841674804688, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -0.38385009765625, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -2.654508590698242, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -8.50131607055664, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING count( T1.Year) < 1980     ", "score": -9.522823333740234, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -11.265922546386719, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING max( T1.Year) < 1980     ", "score": -13.302873611450195, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING avg( T1.Year) < 1980     ", "score": -18.138309478759766, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING sum( T1.Year) < 1980     ", "score": -19.176246643066406, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "score": -22.020021438598633, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -30.709243774414062, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -34.482444763183594, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "score": -34.804840087890625, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 137, "beams": [{"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "score": 62.08576202392578, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "score": 58.24856185913086, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'Volvo'       ", "score": 48.82400894165039, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo'       ", "score": 44.39537048339844, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "score": 32.86402130126953, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "score": 30.61325454711914, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "score": 30.147281646728516, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "score": 29.207714080810547, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "score": 28.14132308959961, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "score": 27.03628158569336, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "score": 26.96218490600586, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model  GROUP BY avg( T1.Edispl) HAVING count( T2.Model) = 'volvo'     ", "score": 25.395416259765625, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "score": 24.461162567138672, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT T1.Edispl FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "score": 20.517330169677734, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING count( T2.Model) = 'volvo'     ", "score": 20.20376968383789, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 138, "beams": [{"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "score": 36.16032028198242, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "score": 36.03157424926758, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'Volvo'       ", "score": 23.468204498291016, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "score": 23.35486602783203, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Maker = volvo       ", "score": 22.037994384765625, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Maker = Volvo       ", "score": 21.878337860107422, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "score": 7.364326477050781, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "score": 7.272304534912109, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "score": 6.265491485595703, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "score": 6.174182891845703, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "score": 4.952732086181641, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "score": 4.932807922363281, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "score": 4.760478973388672, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "score": 4.658603668212891, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.Maker = 'volvo'       ", "score": -0.5364227294921875, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 143, "beams": [{"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 79.34235382080078, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 69.73582458496094, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 69.26265716552734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 51.19450378417969, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 4     ", "score": 42.087059020996094, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 41.324951171875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 41.11494064331055, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 38.20146942138672, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 37.81055450439453, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 37.72122573852539, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 4     ", "score": 35.32051086425781, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 32.865760803222656, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 4     ", "score": 32.737266540527344, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 31.893875122070312, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 4     ", "score": 30.650127410888672, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 144, "beams": [{"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 77.57906341552734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 67.07331085205078, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 66.74346160888672, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 63.20524597167969, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 44.088401794433594, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 40.51506805419922, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 40.10715866088867, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 4     ", "score": 37.60492706298828, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 35.30702590942383, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 34.148353576660156, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 4     ", "score": 31.630783081054688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT max( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 29.898853302001953, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 29.550201416015625, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "score": 28.972087860107422, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 4     ", "score": 28.325057983398438, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 145, "beams": [{"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 56.51078796386719, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 51.63136672973633, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 48.656131744384766, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 30.962257385253906, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 26.855398178100586, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 23.850360870361328, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 22.897411346435547, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 21.263294219970703, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 19.169292449951172, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT max( T1.MPG) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 18.779617309570312, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 18.34970474243164, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 16.528289794921875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 16.19353485107422, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 15.069263458251953, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 13.410400390625, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 146, "beams": [{"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 57.28072738647461, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 55.85538101196289, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 46.81634521484375, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 26.475038528442383, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 23.02981948852539, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 21.210140228271484, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 19.402999877929688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 17.506759643554688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 15.644329071044922, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 13.76531982421875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 13.145523071289062, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 12.535591125488281, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1980       ", "score": 11.670459747314453, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT avg( T1.Make) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1980       ", "score": 11.451595306396484, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "score": 10.147960662841797, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 147, "beams": [{"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 77.92426300048828, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 73.52628326416016, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 68.37458801269531, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 51.60240173339844, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 50.612083435058594, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 50.32605743408203, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 48.25736999511719, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 42.79951477050781, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT avg( T1.Model) FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 42.61594009399414, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 41.66889190673828, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT sum( T1.Model) FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 38.42613983154297, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 38.371089935302734, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'america'       ", "score": 36.52384567260742, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T1.Maker HAVING avg( T2.FullName) = 'American Motor Company'     ", "score": 32.845069885253906, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 32.73324203491211, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 148, "beams": [{"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 88.32575225830078, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "score": 75.86882781982422, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 63.64869689941406, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 57.79724884033203, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 53.80312728881836, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 53.18726348876953, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 51.303932189941406, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "score": 49.620643615722656, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "score": 47.940547943115234, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "score": 43.059471130371094, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'america'       ", "score": 42.93761444091797, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T1.Maker HAVING count( T2.FullName) = 'American Motor Company'     ", "score": 40.604671478271484, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "score": 40.323936462402344, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'america'       ", "score": 32.07465744018555, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T2.Make = 'American Motor Company'       ", "score": 31.087448120117188, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 153, "beams": [{"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "score": 54.6866455078125, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING min( T2.Weight) < 4000       ", "score": 45.87158966064453, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING sum( T2.Weight) < 4000       ", "score": 35.52653503417969, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( T2.Weight) < 4000       ", "score": 31.552978515625, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Year < 4000         ", "score": 30.856897354125977, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING count( T1.Weight) between 3000 AND 4000   INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "score": 30.75670623779297, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING max( T2.Weight) < 4000       ", "score": 30.738162994384766, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING min( T1.Weight) between 3000 AND 4000   INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "score": 30.42124366760254, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING avg( T2.Weight) < 4000       ", "score": 30.411588668823242, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT min( T1.Year) FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "score": 26.426698684692383, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) < 4000       ", "score": 25.06316375732422, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) < 4000       ", "score": 24.4455509185791, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING sum( T1.Weight) between 3000 AND 4000   INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "score": 24.14618682861328, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) < 4000       ", "score": 23.34161949157715, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING min( T2.Year) < 4000       ", "score": 16.60268783569336, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 154, "beams": [{"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "score": 79.1213150024414, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( T2.Weight) > 3000       ", "score": 61.56753921508789, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING max( T2.Weight) > 3000       ", "score": 61.52800369262695, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING sum( T2.Weight) > 3000       ", "score": 58.70164489746094, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING min( T2.Weight) > 3000       ", "score": 58.0203742980957, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING avg( T2.Weight) > 3000       ", "score": 57.884544372558594, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING min( T1.Weight) < 4000   INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "score": 51.09130096435547, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING count( T1.Weight) < 4000   INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "score": 47.87354278564453, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Year) FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "score": 45.769256591796875, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "score": 43.72455596923828, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT min(DISTINCT T2.Year) FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "score": 43.63410949707031, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Year > 3000         ", "score": 41.48822021484375, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "score": 39.38671875, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "score": 35.96462631225586, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "score": 31.8137264251709, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 155, "beams": [{"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -33.093196868896484, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -40.70050048828125, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "score": -45.292484283447266, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "score": -45.67070007324219, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -46.63490295410156, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -46.68291473388672, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY max( T1.Accelerate) DESC LIMIT 1    ", "score": -49.00946807861328, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY count( T1.Accelerate) DESC LIMIT 1    ", "score": -49.578060150146484, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY min( T1.Accelerate) DESC LIMIT 1    ", "score": -54.34463882446289, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -54.86540985107422, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -72.49080657958984, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "score": -78.43328094482422, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY count( *) DESC LIMIT 1    ", "score": -78.69034576416016, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "score": -78.72212219238281, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 156, "beams": [{"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -32.27008819580078, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -40.41920852661133, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "score": -44.094482421875, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -45.166839599609375, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -45.42710494995117, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "score": -45.43920135498047, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY max( T1.Accelerate) DESC LIMIT 1    ", "score": -47.66240310668945, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY count( T1.Accelerate) DESC LIMIT 1    ", "score": -49.356266021728516, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "score": -53.61985778808594, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY min( T1.Accelerate) DESC LIMIT 1    ", "score": -53.691795349121094, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -70.68677520751953, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "score": -76.33251953125, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "score": -77.76017761230469, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY max( T1.Accelerate) DESC LIMIT 1    ", "score": -79.88053894042969, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 157, "beams": [{"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "score": 32.11576843261719, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "score": 29.738115310668945, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "score": 28.30641746520996, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "score": 25.039403915405273, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "score": 22.94346046447754, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "score": 20.0256404876709, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "score": 18.562955856323242, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "score": 17.140377044677734, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "score": 16.479368209838867, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT count( *) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'   ORDER BY T2.Accelerate ASC LIMIT 1    ", "score": 16.196060180664062, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( T1.Accelerate) ASC LIMIT 1    ", "score": 16.170751571655273, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT count( *) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'   ORDER BY T2.Accelerate ASC LIMIT 1    ", "score": 15.208990097045898, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "score": 13.253774642944336, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT count( *) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'Volvo'   ORDER BY T2.Accelerate ASC LIMIT 1    ", "score": 10.007967948913574, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'Volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "score": 9.020679473876953, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 163, "beams": [{"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 76.32332611083984, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 70.32524871826172, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 64.84446716308594, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 45.7340087890625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 6     ", "score": 40.4046630859375, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 38.67925262451172, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 35.529754638671875, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 35.02271270751953, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 6     ", "score": 34.54217529296875, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 6     ", "score": 34.525054931640625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 34.488983154296875, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 33.954994201660156, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 33.513580322265625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 6     ", "score": 31.714019775390625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 30.506263732910156, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 164, "beams": [{"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 69.71038055419922, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 52.69850158691406, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 50.04883575439453, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT sum( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 38.26856994628906, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 35.58369445800781, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 34.83427429199219, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT min( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 32.726959228515625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 6     ", "score": 30.05728530883789, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 29.17624282836914, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 6     ", "score": 28.76551055908203, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT max( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 24.057662963867188, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING count( T1.Cylinders) > 6     ", "score": 24.040176391601562, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 6     ", "score": 22.535972595214844, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 22.19183349609375, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "score": 20.648460388183594, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 165, "beams": [{"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower DESC LIMIT 1    ", "score": -0.0022681276313960552, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower DESC LIMIT 1    ", "score": -6.090545177459717, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Cylinders DESC LIMIT 1    ", "score": -13.584932327270508, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -15.517202377319336, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.MPG DESC LIMIT 1    ", "score": -24.797204971313477, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Cylinders DESC LIMIT 1    ", "score": -39.344757080078125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "score": -39.489158630371094, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.Horsepower) DESC LIMIT 1    ", "score": -39.817176818847656, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -40.30438232421875, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower DESC LIMIT 1    ", "score": -42.60823059082031, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) DESC LIMIT 1    ", "score": -43.69823455810547, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Cylinders DESC LIMIT 1    ", "score": -43.836280822753906, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -44.0887565612793, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -44.7833251953125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "score": -45.1439208984375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 166, "beams": [{"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1    ", "score": 28.309412002563477, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1    ", "score": 16.3282470703125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": 8.552881240844727, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.MPG DESC LIMIT 1    ", "score": 5.948373794555664, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -5.697471618652344, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "score": -6.6986846923828125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Cylinders) = 4 ORDER BY T2.Horsepower DESC LIMIT 1    ", "score": -9.559137344360352, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) DESC LIMIT 1    ", "score": -10.552478790283203, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -11.902389526367188, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1    ", "score": -13.861289978027344, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.MPG DESC LIMIT 1    ", "score": -13.866498947143555, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY max( T2.Horsepower) DESC LIMIT 1    ", "score": -14.353958129882812, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "score": -14.610921859741211, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.MPG DESC LIMIT 1    ", "score": -16.41693687438965, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1    ", "score": -21.097976684570312, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 171, "beams": [{"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 156.85939025878906, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.FullName = 'Ford Motor Company'       ", "score": 137.68447875976562, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM car_names AS T3 JOIN model_list AS T15 ON T3.Model = T15.Model JOIN car_makers AS T4 ON T15.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 132.72445678710938, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "score": 131.9560546875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 127.3623046875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 123.1126480102539, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Weight) < 3500     EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 123.03143310546875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 122.523681640625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 122.50209045410156, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 121.32034301757812, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 118.03205871582031, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Weight) < 3500     EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 117.22477722167969, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 116.96592712402344, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id  GROUP BY T3.Maker HAVING count( T4.Maker) = 'Ford Motor Company'     ", "score": 113.544921875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "score": 102.47647094726562, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 172, "beams": [{"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 159.19271850585938, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.FullName = 'Ford Motor Company'       ", "score": 144.73031616210938, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "score": 140.21881103515625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 123.60604095458984, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 123.16032409667969, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT count(DISTINCT T3.Model) FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 122.43994140625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 121.64867401123047, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.MPG < '3500'       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 121.41368103027344, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 121.17986297607422, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Weight) < 3500     EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 119.93120574951172, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT avg(DISTINCT T3.Model) FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "score": 119.2935791015625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "score": 104.57476806640625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "score": 104.10954284667969, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Model = 'Ford Motor Company'       ", "score": 103.34938049316406, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT count(DISTINCT T3.Model) FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "score": 103.15399169921875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 179, "beams": [{"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 93.77769470214844, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "score": 67.95629119873047, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'Airline'       ", "score": 57.26203536987305, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 52.426910400390625, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT max( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 52.27371597290039, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT count( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 51.08557891845703, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT min( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 50.88542175292969, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING count( T1.Airline) = 'JetBlue Airways'     ", "score": 49.29560852050781, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT sum( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 47.21790313720703, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING avg( T1.Airline) = 'JetBlue Airways'     ", "score": 46.38990020751953, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T2 JOIN airports AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 46.263587951660156, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING max( T1.Airline) = 'JetBlue Airways'     ", "score": 41.3254280090332, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING min( T1.Airline) = 'JetBlue Airways'     ", "score": 39.39903259277344, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING sum( T1.Airline) = 'JetBlue Airways'     ", "score": 39.00431823730469, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "score": 26.566932678222656, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 180, "beams": [{"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 98.268798828125, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 94.72162628173828, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "score": 76.10112762451172, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT count( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 58.54503631591797, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 58.326438903808594, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT max( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 57.87019348144531, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT min( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 56.82379150390625, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT count( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 54.962684631347656, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 54.76910400390625, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT max( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 54.31102752685547, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING count( T1.Airline) = 'Jetblue Airways'     ", "score": 53.89866256713867, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT min( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 53.26634979248047, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT sum( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 52.26268005371094, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING avg( T1.Airline) = 'Jetblue Airways'     ", "score": 50.864112854003906, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING count( T1.Airline) = 'JetBlue Airways'     ", "score": 50.61788558959961, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 181, "beams": [{"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 99.73490142822266, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "score": 68.9496841430664, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 61.37333679199219, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 60.15192794799805, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 57.24856185913086, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING count( T1.Airline) = 'JetBlue Airways'     ", "score": 56.657981872558594, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 55.81077575683594, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'Airline'       ", "score": 53.39606475830078, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT sum( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 53.0046272277832, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING avg( T1.Airline) = 'JetBlue Airways'     ", "score": 52.08832550048828, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING max( T1.Airline) = 'JetBlue Airways'     ", "score": 45.261817932128906, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING min( T1.Airline) = 'JetBlue Airways'     ", "score": 43.148170471191406, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING sum( T1.Airline) = 'JetBlue Airways'     ", "score": 41.1089973449707, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "score": 30.657012939453125, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "score": 29.317516326904297, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 182, "beams": [{"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 104.62708282470703, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 100.25248718261719, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "score": 78.9893569946289, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 65.95686340332031, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 65.03192138671875, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING count( T1.Airline) = 'Jetblue Airways'     ", "score": 62.95350646972656, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 61.57554244995117, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 61.377197265625, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 60.65475082397461, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 60.563514709472656, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING count( T1.Airline) = 'JetBlue Airways'     ", "score": 58.71162414550781, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING avg( T1.Airline) = 'Jetblue Airways'     ", "score": 58.611907958984375, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT sum( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "score": 57.41470718383789, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 56.995269775390625, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "score": 56.17902374267578, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 183, "beams": [{"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 84.62615966796875, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "score": 70.40646362304688, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT max( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 45.485145568847656, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT avg( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 41.16987991333008, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT sum( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 38.223785400390625, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT min( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 37.949302673339844, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "score": 37.61448287963867, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "score": 37.00566482543945, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING count( T1.Country) = 'USA'     ", "score": 36.79043960571289, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT count( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 36.687705993652344, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING avg( T1.Country) = 'USA'     ", "score": 35.35941696166992, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "score": 34.90988540649414, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING sum( T1.Country) = 'USA'     ", "score": 33.42958450317383, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING max( T1.Country) = 'USA'     ", "score": 33.281578063964844, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "score": 32.44511413574219, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 184, "beams": [{"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 89.02253723144531, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "score": 71.22301483154297, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT max( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 55.93461227416992, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT avg( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 52.07062530517578, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT sum( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 48.06358337402344, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING count( T1.Country) = 'USA'     ", "score": 47.98383712768555, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT min( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 46.87472152709961, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT count( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "score": 45.680564880371094, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "score": 45.06399917602539, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "score": 41.595252990722656, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING avg( T1.Country) = 'USA'     ", "score": 40.705509185791016, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "score": 39.05769348144531, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING max( T1.Country) = 'USA'     ", "score": 38.918582916259766, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING sum( T1.Country) = 'USA'     ", "score": 38.632530212402344, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT max( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States' GROUP BY T1.Abbreviation      ", "score": 38.318843841552734, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 185, "beams": [{"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony'       ", "score": 74.79289245605469, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING count( T1.City) = 'Anthony'     ", "score": 37.89442443847656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT avg( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 36.809959411621094, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 35.376590728759766, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT max( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 34.608558654785156, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING avg( T1.City) = 'Anthony'     ", "score": 32.87595748901367, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 31.841346740722656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT min( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 31.503578186035156, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT count( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 29.12285614013672, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 26.14116668701172, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING min( T1.City) = 'Anthony'     ", "score": 26.113075256347656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT sum( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 25.93686294555664, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING max( T1.City) = 'Anthony'     ", "score": 24.616039276123047, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING sum( T1.City) = 'Anthony'     ", "score": 23.918354034423828, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 22.799213409423828, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 186, "beams": [{"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony'       ", "score": 56.280677795410156, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT avg( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 23.731491088867188, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT max( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 21.013545989990234, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING count( T1.City) = 'Anthony'     ", "score": 18.163787841796875, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT min( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 18.014400482177734, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT count( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 16.009235382080078, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 15.036209106445312, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING avg( T1.City) = 'Anthony'     ", "score": 13.852088928222656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT sum( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "score": 13.647674560546875, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 12.195068359375, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 7.249134063720703, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING min( T1.City) = 'Anthony'     ", "score": 6.952342987060547, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING max( T1.City) = 'Anthony'     ", "score": 6.3348388671875, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 5.9938812255859375, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "score": 4.547691345214844, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 187, "beams": [{"orig_question": "How many airlines do we have?", "inferred_code": "SELECT count( *) FROM airlines AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( *) FROM airlines AS T1        ", "score": -33.18901443481445, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines AS T1        ", "score": -33.46416473388672, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1        ", "score": -35.202816009521484, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1        ", "score": -35.60224151611328, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1        ", "score": -37.183773040771484, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "score": -40.064414978027344, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1        ", "score": -41.24122619628906, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( T1.uid) FROM airlines AS T1        ", "score": -42.47889709472656, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT avg( T1.Airline) FROM flights AS T1        ", "score": -42.61581802368164, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT avg( T1.uid) FROM airlines AS T1        ", "score": -43.555206298828125, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( T1.Airline) FROM flights AS T1        ", "score": -44.21582794189453, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT sum( *) FROM airlines AS T1        ", "score": -44.99041748046875, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1        ", "score": -45.31797790527344, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT sum( T1.uid) FROM airlines AS T1        ", "score": -46.97447967529297, "correct_code": "SELECT count(*) FROM AIRLINES"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 188, "beams": [{"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT count( *) FROM airlines AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1        ", "score": -32.50432586669922, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1        ", "score": -34.63814163208008, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( T1.uid) FROM airlines AS T1        ", "score": -34.748016357421875, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines AS T1        ", "score": -35.154354095458984, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "score": -37.2714729309082, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT avg( T1.uid) FROM airlines AS T1        ", "score": -38.535667419433594, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1        ", "score": -38.57856750488281, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( T1.Airline) FROM flights AS T1        ", "score": -38.6582145690918, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1        ", "score": -38.925445556640625, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( *) FROM airlines AS T1        ", "score": -39.840797424316406, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( T1.uid) FROM airlines AS T1        ", "score": -39.948204040527344, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT avg( T1.Airline) FROM flights AS T1        ", "score": -41.46485137939453, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( T1.Airline) FROM flights AS T1        ", "score": -44.22859573364258, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( *) FROM airlines AS T1        ", "score": -44.70463180541992, "correct_code": "SELECT count(*) FROM AIRLINES"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 189, "beams": [{"orig_question": "How many airports do we have?", "inferred_code": "SELECT count( *) FROM airports AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT min( *) FROM airports AS T1        ", "score": -36.79304504394531, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airports AS T1        ", "score": -36.80230712890625, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( *) FROM airports AS T1        ", "score": -42.0267448425293, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT sum( *) FROM airports AS T1        ", "score": -47.8317756652832, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1        ", "score": -48.32355499267578, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT max( *) FROM airports AS T1        ", "score": -52.0905876159668, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1        ", "score": -53.36961364746094, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( T1.AirportCode) FROM airports AS T1        ", "score": -54.067970275878906, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "score": -55.05418395996094, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1        ", "score": -55.81083679199219, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT max( T1.AirportCode) FROM airports AS T1        ", "score": -61.432586669921875, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1        ", "score": -72.65045166015625, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( T1.SourceAirport) FROM flights AS T1        ", "score": -74.13398742675781, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT count( *) FROM airports AS T1        ", "score": -75.17391967773438, "correct_code": "SELECT count(*) FROM AIRPORTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 190, "beams": [{"orig_question": "Return the number of  airports.", "inferred_code": "SELECT count( *) FROM airports AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airports AS T1        ", "score": -36.243614196777344, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT min( *) FROM airports AS T1        ", "score": -37.963592529296875, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT avg( *) FROM airports AS T1        ", "score": -43.14937210083008, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT sum( *) FROM airports AS T1        ", "score": -50.44321060180664, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT max( *) FROM airports AS T1        ", "score": -54.71419906616211, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1        ", "score": -61.909542083740234, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1        ", "score": -62.29958724975586, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "score": -62.66116714477539, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT avg( T1.AirportCode) FROM airports AS T1        ", "score": -66.65693664550781, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1        ", "score": -72.20406341552734, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT max( T1.AirportCode) FROM airports AS T1        ", "score": -76.5312728881836, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "score": -85.0943603515625, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1        ", "score": -85.44544982910156, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.CountryAbbrev FROM airports AS T1        ", "score": -88.71155548095703, "correct_code": "SELECT count(*) FROM AIRPORTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 191, "beams": [{"orig_question": "How many flights do we have?", "inferred_code": "SELECT count( *) FROM flights AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT min( *) FROM flights AS T1        ", "score": -32.923553466796875, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM flights AS T1        ", "score": -34.17420196533203, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1        ", "score": -37.3176155090332, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1        ", "score": -37.678592681884766, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1        ", "score": -41.32768630981445, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1        ", "score": -44.453582763671875, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT sum( *) FROM flights AS T1        ", "score": -45.203739166259766, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1        ", "score": -46.39610290527344, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT avg( *) FROM flights AS T1        ", "score": -52.45975112915039, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "score": -57.29022979736328, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "score": -60.31056594848633, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1        ", "score": -62.09071731567383, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.Country FROM airlines AS T1        ", "score": -62.94337844848633, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1        ", "score": -63.45117950439453, "correct_code": "SELECT count(*) FROM FLIGHTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 192, "beams": [{"orig_question": "Return the number of flights.", "inferred_code": "SELECT count( *) FROM flights AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT min( *) FROM flights AS T1        ", "score": -32.53755187988281, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1        ", "score": -32.57212829589844, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1        ", "score": -39.29093933105469, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1        ", "score": -45.780269622802734, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1        ", "score": -46.62660598754883, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM flights AS T1        ", "score": -48.33195495605469, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1        ", "score": -49.373172760009766, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT sum( *) FROM flights AS T1        ", "score": -61.986412048339844, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "score": -71.38365936279297, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "score": -72.53257751464844, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT avg( *) FROM flights AS T1        ", "score": -76.03361511230469, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1        ", "score": -79.51998138427734, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1        ", "score": -79.81822204589844, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.Country FROM airports AS T1        ", "score": -80.11483001708984, "correct_code": "SELECT count(*) FROM FLIGHTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 193, "beams": [{"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": 36.49359130859375, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -2.0150489807128906, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -2.6810569763183594, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -2.8257598876953125, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -7.129158020019531, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -7.873210906982422, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING count( T1.Abbreviation) = 'UAL'     ", "score": -9.146602630615234, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING avg( T1.Abbreviation) = 'UAL'     ", "score": -13.61483383178711, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -15.933425903320312, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING max( T1.Abbreviation) = 'UAL'     ", "score": -18.63095474243164, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -18.87004852294922, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING sum( T1.Abbreviation) = 'UAL'     ", "score": -19.67849349975586, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING min( T1.Abbreviation) = 'UAL'     ", "score": -22.76650619506836, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'UAL'       ", "score": -29.80249786376953, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT count( T1.uid) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -44.358463287353516, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 194, "beams": [{"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": 36.87043380737305, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -0.7186279296875, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -0.9765586853027344, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -1.9619636535644531, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -6.691993713378906, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -7.202186584472656, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING count( T1.Abbreviation) = 'UAL'     ", "score": -8.940380096435547, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING avg( T1.Abbreviation) = 'UAL'     ", "score": -12.972370147705078, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING max( T1.Abbreviation) = 'UAL'     ", "score": -18.33823013305664, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING sum( T1.Abbreviation) = 'UAL'     ", "score": -20.421306610107422, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING min( T1.Abbreviation) = 'UAL'     ", "score": -23.574905395507812, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -25.23037338256836, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.uid FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "score": -28.241680145263672, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'UAL'       ", "score": -33.64039993286133, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1   HAVING count( T1.Abbreviation) = 'UAL'     ", "score": -46.26061248779297, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 195, "beams": [{"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 99.77239990234375, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "score": 82.15774536132812, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "score": 68.28347778320312, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 63.17446517944336, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 60.8128662109375, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT sum( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 58.477928161621094, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 58.455326080322266, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 56.06688690185547, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "score": 54.87798309326172, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'United States'       ", "score": 51.129337310791016, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1   HAVING count( T1.Country) = 'USA'     ", "score": 50.34694290161133, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1   HAVING avg( T1.Country) = 'USA'     ", "score": 48.533302307128906, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.uid) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 47.32826232910156, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT max( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 47.316837310791016, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "score": 45.866756439208984, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 196, "beams": [{"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 97.99656677246094, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "score": 86.32369232177734, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "score": 66.75382995605469, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 62.221405029296875, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 61.046669006347656, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = 'USA'       ", "score": 55.536041259765625, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 55.10109329223633, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT sum( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 55.069801330566406, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'United States'       ", "score": 54.560203552246094, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "score": 52.38557052612305, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 51.52235412597656, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "score": 50.933570861816406, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "score": 49.66770935058594, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1   HAVING count( T1.Country) = 'USA'     ", "score": 48.02107620239258, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT max( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "score": 47.91024398803711, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 197, "beams": [{"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton'       ", "score": 66.14551544189453, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Afton'       ", "score": 32.959537506103516, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, avg( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 25.753665924072266, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT max( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 24.65658950805664, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT avg( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 23.07767105102539, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING count( T1.AirportName) = 'Alton'     ", "score": 22.970653533935547, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING avg( T1.AirportName) = 'Alton'     ", "score": 22.639240264892578, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, max( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 21.40499496459961, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, min( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 15.794525146484375, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT min( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 15.609718322753906, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT sum( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 15.578983306884766, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, count( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 14.913177490234375, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING max( T1.AirportName) = 'Alton'     ", "score": 13.861587524414062, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, sum( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 13.477336883544922, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING min( T1.AirportName) = 'Alton'     ", "score": 12.901573181152344, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 198, "beams": [{"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton'       ", "score": 78.36056518554688, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Afton'       ", "score": 44.027305603027344, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT avg( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 40.86234664916992, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT max( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 39.64098358154297, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, avg( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 38.12493896484375, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING avg( T1.AirportName) = 'Alton'     ", "score": 36.038169860839844, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING count( T1.AirportName) = 'Alton'     ", "score": 34.58564376831055, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, max( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 34.29084014892578, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT min( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 33.02278518676758, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT sum( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 32.778621673583984, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT count( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "score": 29.56641387939453, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, min( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 28.23487091064453, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, count( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 27.610057830810547, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING max( T1.AirportName) = 'Alton'     ", "score": 26.731674194335938, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, sum( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "score": 26.56822967529297, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 199, "beams": [{"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 98.27906799316406, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 85.4960708618164, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT count( *) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 65.6366195678711, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 64.09403228759766, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.AirportName) = 'AKO'     ", "score": 59.73439025878906, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.Country = 'AKO'       ", "score": 59.40625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 56.04638671875, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 55.1349983215332, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.CountryAbbrev = 'AKO'       ", "score": 54.835357666015625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.AirportName) = 'AKO'     ", "score": 54.045204162597656, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 53.68341827392578, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 51.05088806152344, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airlines AS T2 JOIN airports AS T1 WHERE T2.Abbreviation = 'AKO'       ", "score": 49.647705078125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 49.57661437988281, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( *) = AKO     ", "score": 46.5756950378418, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 200, "beams": [{"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 96.09578704833984, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 59.55951690673828, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 59.43994140625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.AirportCode) = 'AKO'     ", "score": 55.316741943359375, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "score": 52.06871032714844, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 51.81663513183594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 51.731224060058594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.AirportCode) = 'AKO'     ", "score": 50.336830139160156, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 45.76707077026367, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING max( T1.AirportCode) = 'AKO'     ", "score": 39.56028747558594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT count( *) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "score": 39.206085205078125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING min( T1.AirportCode) = 'AKO'     ", "score": 38.315486907958984, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING sum( T1.AirportCode) = 'AKO'     ", "score": 36.14360809326172, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.CountryAbbrev = 'AKO'       ", "score": 35.937095642089844, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( *) = AKO     ", "score": 34.28376007080078, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 201, "beams": [{"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 103.29195404052734, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'City'       ", "score": 68.34689331054688, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 62.130592346191406, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 57.71182632446289, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.City) = 'Aberdeen'     ", "score": 57.51995086669922, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 57.13363265991211, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.City) = 'Aberdeen'     ", "score": 56.42448043823242, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 55.35051345825195, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 51.006832122802734, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING min( T1.City) = 'Aberdeen'     ", "score": 50.00877380371094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING max( T1.City) = 'Aberdeen'     ", "score": 48.831024169921875, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING sum( T1.City) = 'Aberdeen'     ", "score": 45.37785720825195, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'City'       ", "score": 26.910079956054688, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'City'       ", "score": 22.502559661865234, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'City'       ", "score": 21.995426177978516, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 202, "beams": [{"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 108.8056640625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 68.75291442871094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 64.43136596679688, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 63.51971435546875, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 63.21041488647461, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.City) = 'Aberdeen'     ", "score": 60.883487701416016, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.City) = 'Aberdeen'     ", "score": 58.02757263183594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 57.337059020996094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING max( T1.City) = 'Aberdeen'     ", "score": 54.21583557128906, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING min( T1.City) = 'Aberdeen'     ", "score": 53.08400344848633, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING sum( T1.City) = 'Aberdeen'     ", "score": 48.35533142089844, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT count( *) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "score": 42.97157287597656, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1   HAVING avg( T1.City) = 'Aberdeen'     ", "score": 21.405624389648438, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1   HAVING count( T1.City) = 'Aberdeen'     ", "score": 18.173049926757812, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1   HAVING count( T1.City) = 'Aberdeen'     ", "score": 13.715721130371094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 203, "beams": [{"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 98.8140640258789, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 79.12850189208984, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "score": 67.93669128417969, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "score": 67.63906860351562, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 65.78199768066406, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 65.61033630371094, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 63.27362060546875, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "score": 61.21420669555664, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.CountryAbbrev = 'APG'       ", "score": 60.58351135253906, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 59.071659088134766, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 57.36408996582031, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'APG'       ", "score": 56.90679168701172, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = APG       ", "score": 52.25984573364258, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'APG'       ", "score": 49.5192985534668, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE * = APG       ", "score": 42.52915954589844, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 204, "beams": [{"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 103.08203887939453, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 82.91813659667969, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "score": 74.18716430664062, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 69.74962615966797, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "score": 69.23894500732422, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "score": 69.14323425292969, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 66.60098266601562, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 66.17076110839844, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 62.641510009765625, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.CountryAbbrev = 'APG'       ", "score": 61.84137725830078, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 60.76210021972656, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "score": 55.02388000488281, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'APG'       ", "score": 54.543521881103516, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'APG'       ", "score": 51.909080505371094, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE * = APG       ", "score": 40.92786407470703, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 205, "beams": [{"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 75.70899963378906, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'ATO'       ", "score": 68.87667083740234, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'ATO'       ", "score": 58.887176513671875, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 41.930572509765625, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 40.2007942199707, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'ATO'       ", "score": 39.84648513793945, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 38.61985778808594, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = ATO       ", "score": 38.25922775268555, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 37.8615608215332, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'ATO'       ", "score": 36.587501525878906, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.CountryAbbrev = 'ATO'       ", "score": 35.501163482666016, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 34.70669174194336, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.Airline = ATO       ", "score": 30.15526580810547, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE * = ATO       ", "score": 20.38452911376953, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1   HAVING count( *) = ATO     ", "score": 9.832599639892578, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 206, "beams": [{"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 83.89895629882812, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'ATO'       ", "score": 61.05421829223633, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 51.21205520629883, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 48.827064514160156, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 48.748958587646484, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'ATO'       ", "score": 44.036712646484375, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 44.00387191772461, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = ATO       ", "score": 43.35503005981445, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'ATO'     ", "score": 38.474666595458984, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'ATO'     ", "score": 37.96856689453125, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 37.30492401123047, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "score": 35.04642105102539, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'ATO'       ", "score": 33.20136260986328, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.Airline = ATO       ", "score": 18.363876342773438, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1   HAVING count( *) = ATO     ", "score": 10.038997650146484, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 207, "beams": [{"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 110.33658599853516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 87.08592987060547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 81.43124389648438, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 74.25570678710938, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 72.1217269897461, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 69.86347198486328, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 69.24700164794922, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 68.48169708251953, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 64.34944152832031, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'City Aberdeen'     ", "score": 61.644222259521484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 61.61870193481445, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'City Aberdeen'     ", "score": 60.69793701171875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 58.100120544433594, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT avg( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 56.58925247192383, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "score": 56.15658187866211, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 208, "beams": [{"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 105.15670776367188, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 75.4681396484375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 70.46847534179688, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 69.01866149902344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 68.92063903808594, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 67.03497314453125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 63.801578521728516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "score": 56.17382049560547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 54.70600509643555, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 53.39046859741211, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 52.77254867553711, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "score": 50.24744415283203, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "score": 47.81029510498047, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "score": 47.50407791137695, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 40.874229431152344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 209, "beams": [{"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 98.3028793334961, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 67.63246154785156, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 63.73005676269531, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 59.65617370605469, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 58.93553924560547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 58.39414596557617, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT avg( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 51.73827362060547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 51.195491790771484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 48.98235321044922, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 46.79411315917969, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 45.768524169921875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 45.536197662353516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 43.97618865966797, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "score": 43.543983459472656, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "score": 42.49932098388672, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 210, "beams": [{"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 100.36146545410156, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 71.82283020019531, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 66.87652587890625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 65.87662506103516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 58.968475341796875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 58.49296569824219, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 56.9103889465332, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 50.635555267333984, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "score": 50.04296875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 49.737239837646484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 48.59965133666992, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "score": 44.567405700683594, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "score": 43.735267639160156, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "score": 40.78985595703125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 30.887496948242188, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 213, "beams": [{"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 112.61542510986328, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 85.58715057373047, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 85.42288208007812, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 83.21530151367188, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 79.63536071777344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 76.56450653076172, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue'       ", "score": 76.51104736328125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT min( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 74.8884506225586, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 73.06791687011719, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT sum( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 72.19314575195312, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING count( T2.Airline) = 'JetBlue Airways'     ", "score": 64.9097671508789, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING avg( T2.Airline) = 'JetBlue Airways'     ", "score": 63.811676025390625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING max( T2.Airline) = 'JetBlue Airways'     ", "score": 58.412200927734375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT avg( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 58.15228271484375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING min( T2.Airline) = 'JetBlue Airways'     ", "score": 56.76519775390625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 214, "beams": [{"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 100.26908874511719, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 96.32470703125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue'       ", "score": 77.61180114746094, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 69.38036346435547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT min( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 68.97990417480469, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 68.34178924560547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 65.25231170654297, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT min( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 65.01361083984375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 64.23365020751953, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 61.085594177246094, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT sum( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 57.08233642578125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "score": 57.03419494628906, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 56.8956298828125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT * FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "score": 55.74764633178711, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING count( T2.Airline) = 'Jetblue Airways'     ", "score": 55.09186553955078, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 215, "beams": [{"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 89.32638549804688, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'ASY'       ", "score": 85.80302429199219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'United Airlines'       ", "score": 79.69953155517578, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'ASY'       ", "score": 76.5468978881836, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'United Airlines'       ", "score": 68.47383880615234, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'ASY'       ", "score": 68.37614440917969, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'United Airlines'       ", "score": 68.25367736816406, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'ASY'       ", "score": 64.58180236816406, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 63.21412658691406, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 62.39011764526367, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 61.39933776855469, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 61.204261779785156, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 61.12476348876953, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'ASY'       ", "score": 57.71305847167969, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'ASY'       ", "score": 57.43635559082031, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 216, "beams": [{"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 79.14618682861328, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 72.72147369384766, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'ASY Airport' and T1.Airline = 'United Airlines'       ", "score": 68.47606658935547, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'ASY Airport'       ", "score": 63.82032012939453, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'United Airlines'       ", "score": 63.61699676513672, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'ASY Airport' and T1.Airline = 'United Airlines'       ", "score": 59.0478515625, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'ASY Airport'       ", "score": 56.51815414428711, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'ASY Airport' and T1.Airline = 'ASY Airport'       ", "score": 54.00521469116211, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 52.62223815917969, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 52.2319450378418, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 51.367340087890625, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'ASY Airport' and T2.AirportName = 'United Airlines'       ", "score": 50.8829345703125, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 50.52922058105469, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 49.88642883300781, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'United Airlines'       ", "score": 47.480316162109375, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 217, "beams": [{"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'AHD'       ", "score": 90.8319091796875, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 90.31327056884766, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'United Airlines'       ", "score": 80.52226257324219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'AHD'       ", "score": 78.41082763671875, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD' and T2.AirportName = 'United Airlines'       ", "score": 74.29943084716797, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'AHD'       ", "score": 74.01233673095703, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'United Airlines'       ", "score": 73.92184448242188, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'AHD'       ", "score": 72.26600646972656, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 70.62773132324219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'AHD'       ", "score": 70.62287902832031, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'United Airlines'       ", "score": 68.79457092285156, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = 'United Airlines' and T2.DestAirport = 'AHD'       ", "score": 64.90584564208984, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 64.67581176757812, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "score": 63.328060150146484, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'AHD'       ", "score": 62.93881607055664, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 218, "beams": [{"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'AHD Airport' and T1.Airline = 'United Airlines'       ", "score": 104.23329162597656, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD Airport' and T2.AirportName = 'United Airlines'       ", "score": 97.82342529296875, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD Airport' and T1.Airline = 'United Airlines'       ", "score": 94.20988464355469, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'AHD Airport' and T1.Airline = 'AHD Airport'       ", "score": 83.02269744873047, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD Airport' and T2.AirportCode = 'United Airlines'       ", "score": 81.82164764404297, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 81.43087005615234, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "score": 79.33782958984375, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "score": 77.95472717285156, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "score": 77.8121566772461, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "score": 73.94315338134766, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD Airport' and T2.AirportName = 'AHD Airport'       ", "score": 73.68633270263672, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD Airport' and T1.Airline = 'AHD Airport'       ", "score": 73.68574523925781, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "score": 70.5850601196289, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD Airport' and T1.Airline = 'United Airlines'       ", "score": 70.31083679199219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'AHD Airport' and T1.Airline = 'AHD'       ", "score": 69.84406280517578, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 219, "beams": [{"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 152.23721313476562, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'City' and T1.Airline = 'United Airlines'       ", "score": 133.5395050048828, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT min( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 119.65550994873047, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 119.29307556152344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 118.97929382324219, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT sum( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 117.32365417480469, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 115.30970001220703, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT avg( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 114.06706237792969, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING count( T2.City) = 'Aberdeen'     ", "score": 112.36357116699219, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T2.City = 'United Airlines'       ", "score": 112.35151672363281, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING avg( T2.City) = 'Aberdeen'     ", "score": 109.79144287109375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 108.35159301757812, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING max( T2.City) = 'Aberdeen'     ", "score": 107.78485107421875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 107.29209899902344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' GROUP BY count( *) HAVING count( T1.Airline) = 'United Airlines'     ", "score": 104.99223327636719, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 220, "beams": [{"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 156.70965576171875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT min( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 125.03350067138672, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 123.70789337158203, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 120.84614562988281, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 120.09436798095703, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT sum( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 118.57132720947266, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING count( T2.City) = 'Aberdeen'     ", "score": 116.86824035644531, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 114.49667358398438, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING avg( T2.City) = 'Aberdeen'     ", "score": 113.39654541015625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "score": 112.77059936523438, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING max( T2.City) = 'Aberdeen'     ", "score": 112.54676055908203, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 110.96234130859375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 110.88221740722656, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "score": 109.02120971679688, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' GROUP BY count( *) HAVING count( T1.Airline) = 'United Airlines'     ", "score": 108.59228515625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 233, "beams": [{"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 75.30360412597656, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "score": 59.30323791503906, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 55.33338928222656, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'AHD'       ", "score": 51.53490447998047, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 47.37739944458008, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 42.56108093261719, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "score": 39.10601043701172, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 38.49404525756836, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 37.6494140625, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 36.31943130493164, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'AHD'       ", "score": 35.917327880859375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = 'AHD'       ", "score": 35.21357727050781, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 32.023193359375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 31.742839813232422, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 29.16843032836914, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 234, "beams": [{"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 55.06476974487305, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 40.99213409423828, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 31.317718505859375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 WHERE T1.SourceAirport = 'AHD'       ", "score": 20.959823608398438, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "score": 18.02019500732422, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 17.501174926757812, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 16.937088012695312, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 16.852550506591797, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 15.473159790039062, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 11.908493041992188, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 8.674213409423828, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING count( T2.SourceAirport) = 'AHD'     ", "score": 8.297470092773438, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 7.274372100830078, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT count( T1.uid) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "score": 5.771266937255859, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING avg( T2.SourceAirport) = 'AHD'     ", "score": 5.078189849853516, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 235, "beams": [{"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 72.65044403076172, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "score": 59.861907958984375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 59.83007049560547, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'AHD'       ", "score": 50.19316101074219, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "score": 47.01399230957031, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = 'AHD'       ", "score": 38.17637634277344, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'AHD'       ", "score": 37.90938949584961, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 35.57227325439453, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 34.08833312988281, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 33.78622055053711, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 33.101905822753906, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 32.879005432128906, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 WHERE T1.uid = AHD       ", "score": 30.062580108642578, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 29.423450469970703, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = AHD       ", "score": 24.68749237060547, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 236, "beams": [{"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 57.84288024902344, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 48.700958251953125, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 46.99942398071289, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "score": 36.82213592529297, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "score": 31.195316314697266, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 WHERE T1.DestAirport = 'AHD'       ", "score": 30.312088012695312, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "score": 20.73900604248047, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = 'AHD'       ", "score": 19.949005126953125, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 19.58700180053711, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 18.676010131835938, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'AHD'       ", "score": 17.823291778564453, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 17.433673858642578, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 14.001426696777344, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT count( T1.uid) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 13.12618637084961, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "score": 9.911880493164062, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 245, "beams": [{"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 96.0350570678711, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 61.72609329223633, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 57.284854888916016, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 55.98007583618164, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 53.72945785522461, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 53.297119140625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING count( T2.Airline) = 'United Airlines'     ", "score": 46.163238525390625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING avg( T2.Airline) = 'United Airlines'     ", "score": 42.14130401611328, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING max( T2.Airline) = 'United Airlines'     ", "score": 40.11116409301758, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING sum( T2.Airline) = 'United Airlines'     ", "score": 34.43098068237305, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING min( T2.Airline) = 'United Airlines'     ", "score": 34.31962203979492, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY max( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "score": 12.054634094238281, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY avg( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "score": 7.62701416015625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "score": 6.365043640136719, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY sum( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "score": 3.93817138671875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 246, "beams": [{"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 86.48628234863281, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 48.58881759643555, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 45.52162551879883, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT count( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 41.161277770996094, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 40.57550048828125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "score": 39.48851013183594, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING avg( T2.Airline) = 'United Airlines'     ", "score": 36.71242904663086, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING count( T2.Airline) = 'United Airlines'     ", "score": 35.352684020996094, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING max( T2.Airline) = 'United Airlines'     ", "score": 34.687137603759766, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING sum( T2.Airline) = 'United Airlines'     ", "score": 29.555145263671875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING min( T2.Airline) = 'United Airlines'     ", "score": 27.07660675048828, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = United Airlines       ", "score": 9.195541381835938, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY max( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "score": -2.1647262573242188, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY avg( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "score": -5.122322082519531, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.Airline = United Airlines       ", "score": -13.9952392578125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 247, "beams": [{"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 86.57062530517578, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 69.93832397460938, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "score": 54.79899597167969, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "score": 54.75381851196289, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Airport'       ", "score": 50.228694915771484, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 47.7794303894043, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 46.86559295654297, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 46.482078552246094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "score": 44.87354278564453, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 43.15058135986328, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "score": 38.65864181518555, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 38.43721008300781, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'Airport'       ", "score": 32.987483978271484, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "score": 31.645652770996094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 30.945945739746094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 248, "beams": [{"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 91.59876251220703, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 72.32241821289062, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 50.80115509033203, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "score": 50.75390625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 49.539886474609375, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "score": 49.15342330932617, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 49.15299987792969, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "score": 48.19340133666992, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 45.58418273925781, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "score": 45.30118942260742, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "score": 44.8763313293457, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 40.469696044921875, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "score": 38.532474517822266, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'APG'       ", "score": 38.22706604003906, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.AirportName) = 'APG'     ", "score": 35.551353454589844, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 249, "beams": [{"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 80.42694854736328, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 63.52994155883789, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Airport'       ", "score": 46.38127517700195, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 42.618927001953125, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 41.15235137939453, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 39.869789123535156, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "score": 38.856712341308594, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 37.14877700805664, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "score": 36.147220611572266, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 32.2880859375, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "score": 31.59634017944336, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'Airport'       ", "score": 27.969581604003906, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 25.563385009765625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "score": 25.366291046142578, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 23.88528060913086, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 250, "beams": [{"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 72.8860855102539, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "score": 53.845115661621094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 31.63207244873047, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 30.62076187133789, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 29.543582916259766, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "score": 28.06041717529297, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 27.447486877441406, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'APG'       ", "score": 27.012893676757812, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "score": 24.520431518554688, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "score": 20.740253448486328, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "score": 20.60887908935547, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "score": 18.04611587524414, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "score": 17.430320739746094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.AirportName) = 'APG'     ", "score": 14.818561553955078, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.AirportName) = 'APG'     ", "score": 11.237335205078125, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 251, "beams": [{"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 95.54925537109375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 58.465606689453125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 53.80459213256836, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 53.6099853515625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 52.55493927001953, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "score": 51.98731231689453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 49.34785079956055, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 48.215858459472656, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 46.78302764892578, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "score": 41.482872009277344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "score": 40.161712646484375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "score": 39.58094787597656, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "score": 14.460163116455078, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 13.154212951660156, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 11.330093383789062, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 252, "beams": [{"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 97.65375518798828, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 59.989585876464844, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 56.44867706298828, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 55.043800354003906, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 53.14470672607422, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 51.478355407714844, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 48.27510452270508, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 48.2369384765625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "score": 46.31673049926758, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "score": 45.301124572753906, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "score": 43.31566619873047, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "score": 41.27686309814453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'Aberdeen'     ", "score": 16.368125915527344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 14.905258178710938, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 11.094940185546875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 253, "beams": [{"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 90.46619415283203, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "score": 57.41797637939453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 54.574981689453125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 49.70039749145508, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 48.86272048950195, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 48.679100036621094, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 45.27791976928711, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 44.57619094848633, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 42.833187103271484, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "score": 36.44476318359375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "score": 35.71775436401367, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "score": 33.515830993652344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "score": 20.944469451904297, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "score": 17.706268310546875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "score": 16.186084747314453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 254, "beams": [{"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 93.10429382324219, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 56.28180694580078, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 51.71676254272461, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 50.94768524169922, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 49.1485595703125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "score": 46.717315673828125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 44.90732955932617, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "score": 43.96318435668945, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "score": 43.50728988647461, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "score": 40.013832092285156, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "score": 37.058082580566406, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "score": 35.91954040527344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'Aberdeen'       ", "score": 15.19281005859375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'Aberdeen'     ", "score": 15.148818969726562, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "score": 8.56268310546875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 259, "beams": [{"orig_question": "How many employees are there?", "inferred_code": "SELECT count( *) FROM employee AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT min( *) FROM employee AS T1        ", "score": -31.02474594116211, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee AS T1        ", "score": -31.087291717529297, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT avg( *) FROM employee AS T1        ", "score": -33.46269607543945, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT sum( *) FROM employee AS T1        ", "score": -34.17698669433594, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT avg( T1.Employee_ID) FROM employee AS T1        ", "score": -42.995086669921875, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT max( *) FROM employee AS T1        ", "score": -43.64680099487305, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT min( T1.Employee_ID) FROM employee AS T1        ", "score": -43.68710708618164, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1        ", "score": -45.197547912597656, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT min( T1.Name) FROM employee AS T1        ", "score": -47.026153564453125, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT sum( T1.Employee_ID) FROM employee AS T1        ", "score": -48.02101135253906, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT T1.Name FROM employee AS T1        ", "score": -49.946372985839844, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1        ", "score": -51.37738800048828, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT T1.Employee_ID FROM employee AS T1        ", "score": -52.276824951171875, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT max( T1.Employee_ID) FROM employee AS T1        ", "score": -52.6893196105957, "correct_code": "SELECT count(*) FROM employee"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 260, "beams": [{"orig_question": "Count the number of employees", "inferred_code": "SELECT count( *) FROM employee AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT min( *) FROM employee AS T1        ", "score": -33.88320541381836, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee AS T1        ", "score": -34.01378631591797, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT avg( *) FROM employee AS T1        ", "score": -37.43619155883789, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT sum( *) FROM employee AS T1        ", "score": -40.55998611450195, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT count( *) FROM employee AS T1        ", "score": -43.73259353637695, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT avg( T1.Employee_ID) FROM employee AS T1        ", "score": -43.83112716674805, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT max( *) FROM employee AS T1        ", "score": -46.961273193359375, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT T1.Employee_ID FROM employee AS T1        ", "score": -48.96287536621094, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT T1.Name FROM employee AS T1        ", "score": -51.894264221191406, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT min( T1.Employee_ID) FROM employee AS T1        ", "score": -52.0238037109375, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT sum( T1.Employee_ID) FROM employee AS T1        ", "score": -52.62751007080078, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT max( T1.Employee_ID) FROM employee AS T1        ", "score": -52.701419830322266, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1        ", "score": -53.74608612060547, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1        ", "score": -61.73313522338867, "correct_code": "SELECT count(*) FROM employee"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 269, "beams": [{"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1    ORDER BY T1.Number_products DESC LIMIT 1    ", "score": -24.370582580566406, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -26.923019409179688, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -29.49072265625, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY sum( T1.Number_products) DESC LIMIT 1    ", "score": -32.6273193359375, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY avg( T1.Number_products) DESC LIMIT 1    ", "score": -33.132896423339844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT max( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -38.26402282714844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, max( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "score": -42.69245910644531, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, avg( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "score": -42.71002197265625, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY min( T1.Number_products) DESC LIMIT 1    ", "score": -43.13303756713867, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT avg( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -43.9907341003418, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT min( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -46.27986145019531, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY max( T1.Number_products) DESC LIMIT 1    ", "score": -47.6376953125, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT sum( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -48.22306823730469, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT count( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -48.24488067626953, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 270, "beams": [{"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1    ORDER BY T1.Number_products DESC LIMIT 1    ", "score": -16.91912841796875, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY sum( T1.Number_products) DESC LIMIT 1    ", "score": -18.588985443115234, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY avg( T1.Number_products) DESC LIMIT 1    ", "score": -23.755151748657227, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -26.954620361328125, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -32.614646911621094, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY max( T1.Number_products) DESC LIMIT 1    ", "score": -36.59021759033203, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT max( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -38.49216079711914, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY min( T1.Number_products) DESC LIMIT 1    ", "score": -39.622398376464844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, avg( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "score": -41.7469367980957, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, max( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "score": -43.233238220214844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT avg( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -44.190189361572266, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT min( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -48.54124450683594, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT sum( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -49.561683654785156, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT count( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "score": -50.515708923339844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 271, "beams": [{"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": 0.0, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), sum( T1.Number_products) FROM shop AS T1        ", "score": -28.719463348388672, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), avg( T1.Number_products) FROM shop AS T1        ", "score": -32.64739990234375, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT count( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": -34.33038330078125, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT avg( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": -35.756919860839844, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT sum( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": -36.00626754760742, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), T1.Number_products FROM shop AS T1  GROUP BY T1.Number_products      ", "score": -43.69732666015625, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), count( T1.Number_products) FROM shop AS T1        ", "score": -45.5647087097168, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT T1.Number_products, max( T1.Number_products) FROM shop AS T1  GROUP BY T1.Number_products      ", "score": -49.255096435546875, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT max( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -57.23103332519531, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT count( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -58.901329040527344, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT avg( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -58.97707748413086, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT sum( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -59.72705078125, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 272, "beams": [{"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": 0.0, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), sum( T1.Number_products) FROM shop AS T1        ", "score": -29.312986373901367, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), avg( T1.Number_products) FROM shop AS T1        ", "score": -34.49830627441406, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT count( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": -34.90652084350586, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT sum( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": -35.751495361328125, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT avg( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "score": -35.962337493896484, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), T1.Number_products FROM shop AS T1  GROUP BY T1.Number_products      ", "score": -44.01402282714844, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT T1.Number_products, max( T1.Number_products) FROM shop AS T1  GROUP BY T1.Number_products      ", "score": -47.61671829223633, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), count( T1.Number_products) FROM shop AS T1        ", "score": -50.613582611083984, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT max( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -58.826210021972656, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT avg( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -61.540977478027344, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT sum( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -61.819190979003906, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT count( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "score": -61.82701873779297, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 279, "beams": [{"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Year_awarded DESC LIMIT 1    ", "score": -36.85107421875, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "score": -36.987613677978516, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -37.627323150634766, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY sum( T2.Bonus) DESC LIMIT 1    ", "score": -38.40587615966797, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY count( T2.Bonus) DESC LIMIT 1    ", "score": -42.57756423950195, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT count( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -44.2390022277832, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY max( T2.Bonus) DESC LIMIT 1    ", "score": -44.34762191772461, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT min( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -45.25810623168945, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -46.507789611816406, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY avg( T2.Bonus) DESC LIMIT 1    ", "score": -46.528358459472656, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -47.2504997253418, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1    ORDER BY T1.Name DESC LIMIT 1    ", "score": -48.36579132080078, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY min( T2.Bonus) DESC LIMIT 1    ", "score": -50.9731559753418, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Is_full_time DESC LIMIT 1    ", "score": -63.793304443359375, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 280, "beams": [{"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY sum( T2.Bonus) DESC LIMIT 1    ", "score": -36.84628677368164, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY count( T2.Bonus) DESC LIMIT 1    ", "score": -41.45653533935547, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -41.78241729736328, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Year_awarded DESC LIMIT 1    ", "score": -45.760398864746094, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY max( T2.Bonus) DESC LIMIT 1    ", "score": -46.11035919189453, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY avg( T2.Bonus) DESC LIMIT 1    ", "score": -48.58999252319336, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -49.484046936035156, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT count( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -50.452632904052734, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT min( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -50.76755905151367, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "score": -50.77458953857422, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY min( T2.Bonus) DESC LIMIT 1    ", "score": -55.6001091003418, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1    ORDER BY T1.Name DESC LIMIT 1    ", "score": -67.16345977783203, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "score": -69.03840637207031, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY sum( T2.Bonus) DESC LIMIT 1    ", "score": -77.81196594238281, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 289, "beams": [{"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Bonus) FROM evaluation AS T1        ", "score": 0.0, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT max( T1.Bonus) FROM evaluation AS T1        ", "score": -33.00049591064453, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT avg( T1.Bonus) FROM evaluation AS T1        ", "score": -37.97594451904297, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT count( T1.Bonus) FROM evaluation AS T1        ", "score": -38.5546760559082, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT min( T1.Bonus) FROM evaluation AS T1        ", "score": -38.93553924560547, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT T1.Bonus FROM evaluation AS T1        ", "score": -43.51073455810547, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1        ", "score": -115.0324478149414, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Year_awarded) FROM evaluation AS T1        ", "score": -119.14765930175781, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT count( *) FROM evaluation AS T1        ", "score": -123.72738647460938, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Employee_ID) FROM evaluation AS T1        ", "score": -125.36076354980469, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Name) FROM shop AS T1        ", "score": -125.76799011230469, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Is_full_time) FROM hiring AS T1        ", "score": -125.93606567382812, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.City) FROM employee AS T1        ", "score": -128.53660583496094, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Age) FROM employee AS T1        ", "score": -129.3476104736328, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Location) FROM shop AS T1        ", "score": -129.80181884765625, "correct_code": "SELECT sum(bonus) FROM evaluation"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 290, "beams": [{"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Bonus) FROM evaluation AS T1        ", "score": 0.0, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT max( T1.Bonus) FROM evaluation AS T1        ", "score": -34.017234802246094, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT avg( T1.Bonus) FROM evaluation AS T1        ", "score": -39.41832733154297, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT count( T1.Bonus) FROM evaluation AS T1        ", "score": -39.85771179199219, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT min( T1.Bonus) FROM evaluation AS T1        ", "score": -40.32814407348633, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT T1.Bonus FROM evaluation AS T1        ", "score": -46.1363410949707, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Year_awarded) FROM evaluation AS T1        ", "score": -106.71745300292969, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1        ", "score": -122.49663543701172, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT count( *) FROM evaluation AS T1        ", "score": -127.2782211303711, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Employee_ID) FROM evaluation AS T1        ", "score": -128.4822540283203, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.City) FROM employee AS T1        ", "score": -132.04428100585938, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Location) FROM shop AS T1        ", "score": -132.3531494140625, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Age) FROM employee AS T1        ", "score": -133.44320678710938, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Start_from) FROM hiring AS T1        ", "score": -133.6265411376953, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.District) FROM shop AS T1        ", "score": -134.0788116455078, "correct_code": "SELECT sum(bonus) FROM evaluation"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 295, "beams": [{"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Location) FROM shop AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT T1.Location FROM shop AS T1        ", "score": -36.40984344482422, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Location) FROM shop AS T1        ", "score": -39.532569885253906, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Location) FROM shop AS T1        ", "score": -46.79465103149414, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Location) FROM shop AS T1        ", "score": -47.950904846191406, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Location) FROM shop AS T1        ", "score": -54.80107116699219, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "score": -55.513343811035156, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM shop AS T1        ", "score": -60.98157501220703, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM employee AS T1        ", "score": -80.44541931152344, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM hiring AS T1        ", "score": -103.12713623046875, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "score": -110.2715835571289, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM shop AS T1        ", "score": -110.84912109375, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT T1.Name FROM shop AS T1        ", "score": -111.5365982055664, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Employee_ID) FROM evaluation AS T1        ", "score": -115.9521484375, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Employee_ID) FROM hiring AS T1        ", "score": -116.9378662109375, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 296, "beams": [{"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Location) FROM shop AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT T1.Location FROM shop AS T1        ", "score": -37.276241302490234, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Location) FROM shop AS T1        ", "score": -39.51845932006836, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Location) FROM shop AS T1        ", "score": -46.274776458740234, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Location) FROM shop AS T1        ", "score": -48.44465255737305, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Location) FROM shop AS T1        ", "score": -55.97931671142578, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM shop AS T1        ", "score": -78.10992431640625, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "score": -86.75601196289062, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM employee AS T1        ", "score": -112.14970397949219, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM shop AS T1        ", "score": -124.71138000488281, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT T1.Name FROM shop AS T1        ", "score": -126.99421691894531, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM hiring AS T1        ", "score": -134.06947326660156, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM shop AS T1        ", "score": -136.58416748046875, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Employee_ID) FROM evaluation AS T1        ", "score": -136.8141632080078, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "score": -137.2174835205078, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 297, "beams": [{"orig_question": "How many documents do we have?", "inferred_code": "SELECT count( *) FROM Documents AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT min( *) FROM Documents AS T1        ", "score": -32.96337127685547, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT sum( *) FROM Documents AS T1        ", "score": -35.00455093383789, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Documents AS T1        ", "score": -36.3584098815918, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( *) FROM Documents AS T1        ", "score": -36.38351058959961, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( T1.Document_ID) FROM Documents AS T1        ", "score": -41.72291946411133, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( *) FROM Documents AS T1        ", "score": -46.97821807861328, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT min( T1.Document_ID) FROM Documents AS T1        ", "score": -47.16482925415039, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( T1.Document_Description) FROM Documents AS T1        ", "score": -47.91761779785156, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( T1.Document_Name) FROM Documents AS T1        ", "score": -48.33715057373047, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT sum( T1.Document_ID) FROM Documents AS T1        ", "score": -48.84125518798828, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( T1.Document_ID) FROM Documents AS T1        ", "score": -50.35752868652344, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( T1.Document_Description) FROM Documents AS T1        ", "score": -55.45265197753906, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT min( T1.Document_Description) FROM Documents AS T1        ", "score": -55.609771728515625, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( T1.Document_Name) FROM Documents AS T1        ", "score": -55.89555740356445, "correct_code": "SELECT count(*) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 298, "beams": [{"orig_question": "Count the number of documents.", "inferred_code": "SELECT count( *) FROM Documents AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT min( *) FROM Documents AS T1        ", "score": -33.76697540283203, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Documents AS T1        ", "score": -36.9778938293457, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( *) FROM Documents AS T1        ", "score": -38.67886734008789, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT sum( *) FROM Documents AS T1        ", "score": -40.14540481567383, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Document_ID) FROM Documents AS T1        ", "score": -43.62388229370117, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT max( *) FROM Documents AS T1        ", "score": -49.44784164428711, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Document_Name) FROM Documents AS T1        ", "score": -51.22480392456055, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT max( T1.Document_ID) FROM Documents AS T1        ", "score": -52.70292282104492, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Document_Description) FROM Documents AS T1        ", "score": -54.34386444091797, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT min( T1.Document_ID) FROM Documents AS T1        ", "score": -54.50032043457031, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT sum( T1.Document_ID) FROM Documents AS T1        ", "score": -54.87185287475586, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT max( T1.Document_Name) FROM Documents AS T1        ", "score": -59.284400939941406, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Version_Number) FROM Templates AS T1        ", "score": -59.37474060058594, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT T1.Document_ID FROM Documents AS T1        ", "score": -59.415489196777344, "correct_code": "SELECT count(*) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 299, "beams": [{"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, T1.Document_Description FROM Documents AS T1        ", "score": 0.0, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT count( *), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -34.76664733886719, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, count( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -36.23771667480469, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT avg( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -37.99885177612305, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT min( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -39.46587371826172, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, avg( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -39.649234771728516, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, min( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -40.2900390625, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, max( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -40.33299255371094, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT max( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -40.72177505493164, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, sum( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -41.826576232910156, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, avg( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -42.42197036743164, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT sum( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -43.01826858520508, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, max( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -43.57106018066406, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, count( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -43.66152572631836, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT count( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -44.64497375488281, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 300, "beams": [{"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, T1.Document_Description FROM Documents AS T1        ", "score": 0.0, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, avg( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -35.59866714477539, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT max( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -36.200401306152344, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, max( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -37.60257339477539, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT min( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -37.6646728515625, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT count( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -38.4770622253418, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT count( *), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -39.92244338989258, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT avg( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -40.129215240478516, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, count( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -40.7239990234375, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, count( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -40.918922424316406, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, min( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -41.80670166015625, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, max( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -42.76423645019531, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, count( *) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -42.94782257080078, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, avg( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "score": -43.101165771484375, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT sum( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "score": -43.46266174316406, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 301, "beams": [{"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "score": 37.4109001159668, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "score": 36.23459243774414, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T2.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description like '%w%'       ", "score": 18.176652908325195, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "score": 2.2967071533203125, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Template_ID HAVING count( T1.Document_Description) like '%w%'     ", "score": 0.5985946655273438, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING count( T1.Document_Description) like '%w%'     ", "score": -0.8004798889160156, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT max( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "score": -1.7616958618164062, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Template_ID HAVING avg( T1.Document_Description) like '%w%'     ", "score": -2.7842636108398438, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT max( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "score": -2.833606719970703, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT avg( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "score": -4.133403778076172, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING avg( T1.Document_Description) like '%w%'     ", "score": -4.143436431884766, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT count( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "score": -4.342411041259766, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, count( *) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_Name      ", "score": -4.747093200683594, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT avg( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "score": -5.2169036865234375, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT count( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "score": -5.374126434326172, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 302, "beams": [{"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "score": 30.817153930664062, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "score": 26.904516220092773, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING count( T1.Document_Description) like '%w%'     ", "score": -4.6779327392578125, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT max( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "score": -7.622493743896484, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT count( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "score": -8.186822891235352, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT avg( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "score": -8.461715698242188, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING avg( T1.Document_Description) like '%w%'     ", "score": -9.188566207885742, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Template_ID HAVING count( T1.Document_Description) like '%w%'     ", "score": -9.654949188232422, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT max( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "score": -11.514640808105469, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, count( T1.Template_ID) FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_Name      ", "score": -11.782634735107422, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT count( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "score": -12.255332946777344, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING sum( T1.Document_Description) like '%w%'     ", "score": -12.266716003417969, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT avg( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "score": -12.365060806274414, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT sum( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "score": -12.530984878540039, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, count( T1.Document_ID) FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_Name      ", "score": -13.051733016967773, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 303, "beams": [{"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "score": 118.3628158569336, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T2.Template_ID, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "score": 108.96923828125, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "score": 100.80245971679688, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "score": 94.27323913574219, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "score": 89.27346801757812, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT count( *), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 84.65354919433594, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_Name, T2.Template_ID, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "score": 84.5959701538086, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, count( *) FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "score": 83.43792724609375, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT count( *), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 82.49627685546875, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT avg( T1.Document_ID), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 80.69691467285156, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, avg( T1.Template_ID), T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 80.22382354736328, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, max( T1.Template_ID), T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 80.20881652832031, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT max( T1.Document_ID), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 79.69945526123047, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, count( T1.Template_ID), T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 79.20135498046875, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_ID, T1.Template_ID, T1.Document_Description HAVING count( T1.Document_Name) = 'Robbin CV'     ", "score": 78.52725219726562, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 304, "beams": [{"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "score": 107.27832794189453, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "score": 104.85978698730469, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T2.Template_ID, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "score": 93.27479553222656, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "score": 92.33291625976562, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_Details FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "score": 72.39865112304688, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T13 ON T1.Template_ID = T13.Template_ID JOIN Ref_Template_Types AS T2 ON T13.Template_Type_Code = T2.Template_Type_Code WHERE T1.Document_Name = 'Robbin CV'       ", "score": 72.02008056640625, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "score": 71.7594223022461, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, count( T1.Document_Description), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "score": 71.54690551757812, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, avg( T1.Document_Description), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "score": 71.28150939941406, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T2.Template_Details, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "score": 71.227783203125, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_Name, T1.Document_Description, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "score": 70.799072265625, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT count( *), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "score": 70.73723602294922, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, count( *) FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "score": 70.60871887207031, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_ID, T1.Document_Description, T1.Template_ID HAVING count( T1.Document_Name) = 'Robbin CV'     ", "score": 67.2996826171875, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_ID, T1.Template_ID, T1.Document_Description HAVING count( T1.Document_Name) = 'Robbin CV'     ", "score": 66.31966400146484, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 305, "beams": [{"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "score": -0.5012632608413696, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": -0.9308153390884399, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "score": -12.719606399536133, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -25.4459228515625, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_ID) FROM Documents AS T1        ", "score": -29.891475677490234, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "score": -38.87559509277344, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Documents AS T1        ", "score": -41.33436584472656, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "score": -42.10253143310547, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": -42.31195831298828, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Templates AS T1        ", "score": -44.00879669189453, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Version_Number) FROM Templates AS T1        ", "score": -45.730770111083984, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -46.26777648925781, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": -46.69887924194336, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "score": -46.75202560424805, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Details) FROM Templates AS T1        ", "score": -47.52106475830078, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 306, "beams": [{"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "score": -27.28322410583496, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "score": -31.669225692749023, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_ID) FROM Documents AS T1        ", "score": -32.319305419921875, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -36.036338806152344, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "score": -38.719032287597656, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Documents AS T1        ", "score": -40.730770111083984, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": -41.291961669921875, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_Name) FROM Documents AS T1        ", "score": -46.82045364379883, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": -47.197349548339844, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": -49.76914978027344, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Version_Number) FROM Templates AS T1        ", "score": -51.650089263916016, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -52.880313873291016, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Details) FROM Templates AS T1        ", "score": -53.062625885009766, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "score": -56.009765625, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 317, "beams": [{"orig_question": "How many templates do we have?", "inferred_code": "SELECT count( *) FROM Templates AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT min( *) FROM Templates AS T1        ", "score": -36.36024475097656, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( *) FROM Templates AS T1        ", "score": -38.49262237548828, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Templates AS T1        ", "score": -38.53068542480469, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT sum( *) FROM Templates AS T1        ", "score": -42.60356903076172, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1        ", "score": -51.002906799316406, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT max( *) FROM Templates AS T1        ", "score": -51.04133605957031, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1        ", "score": -60.97336196899414, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT min( T1.Template_ID) FROM Templates AS T1        ", "score": -63.73240661621094, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Version_Number) FROM Templates AS T1        ", "score": -63.95198059082031, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT sum( T1.Template_ID) FROM Templates AS T1        ", "score": -64.22501373291016, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_Details) FROM Templates AS T1        ", "score": -64.45787048339844, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -64.47737884521484, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1        ", "score": -66.03925323486328, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -69.61041259765625, "correct_code": "SELECT count(*) FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 318, "beams": [{"orig_question": "Count the number of templates.", "inferred_code": "SELECT count( *) FROM Templates AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT min( *) FROM Templates AS T1        ", "score": -36.95094299316406, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Templates AS T1        ", "score": -38.37953186035156, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( *) FROM Templates AS T1        ", "score": -40.02825164794922, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT sum( *) FROM Templates AS T1        ", "score": -47.61117935180664, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT max( *) FROM Templates AS T1        ", "score": -52.31627655029297, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1        ", "score": -55.13572692871094, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( T1.Version_Number) FROM Templates AS T1        ", "score": -58.562599182128906, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1        ", "score": -64.94084167480469, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1        ", "score": -64.94427490234375, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT T1.Version_Number FROM Templates AS T1        ", "score": -65.8615951538086, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT max( T1.Version_Number) FROM Templates AS T1        ", "score": -68.33734130859375, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT min( T1.Version_Number) FROM Templates AS T1        ", "score": -70.76826477050781, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT sum( T1.Version_Number) FROM Templates AS T1        ", "score": -72.15137481689453, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -73.07585906982422, "correct_code": "SELECT count(*) FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 319, "beams": [{"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "score": 0.0, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -17.48932647705078, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -31.75724220275879, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( *) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -32.33583068847656, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, min( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -33.81503677368164, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT max( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -34.96145248413086, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -35.47807312011719, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -37.43621063232422, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT count( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -37.90370178222656, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -38.419700622558594, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT min( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -38.86140823364258, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, sum( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -39.685333251953125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT avg( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -39.7763671875, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -39.94212341308594, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( *) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -41.16545486450195, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 320, "beams": [{"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "score": 0.0, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -28.962749481201172, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -33.22747039794922, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( *) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -33.23418045043945, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT max( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -33.84250259399414, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, min( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -35.3530387878418, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT count( *), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -35.360069274902344, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -35.55078887939453, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT min( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -35.85869216918945, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -37.5669059753418, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT avg( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -38.01622772216797, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT count( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -38.57925796508789, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -39.30206298828125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -40.31919860839844, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "score": -40.572181701660156, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 321, "beams": [{"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Templates AS T1        ", "score": 0.0, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -28.907320022583008, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1        ", "score": -29.497989654541016, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -32.337310791015625, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -35.29502868652344, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -36.53215408325195, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -41.887481689453125, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -51.532073974609375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -57.84907150268555, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -59.338836669921875, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -61.0771598815918, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -65.6197509765625, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "score": -150.4371795654297, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -151.6624755859375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "score": -156.24029541015625, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 322, "beams": [{"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Templates AS T1        ", "score": 0.0, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1        ", "score": -19.846586227416992, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -25.66266632080078, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -31.10525131225586, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -32.85508728027344, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -33.464027404785156, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "score": -39.154300689697266, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -40.364994049072266, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -48.24711227416992, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -49.67010498046875, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -49.960296630859375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "score": -55.407928466796875, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Ref_Template_Types AS T1        ", "score": -120.64892578125, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Ref_Template_Types AS T1        ", "score": -124.08229064941406, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "score": -139.646484375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 327, "beams": [{"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5       ", "score": 55.484092712402344, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 24.901729583740234, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Version_Number > 5       ", "score": 19.27349853515625, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT count( *), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 18.633377075195312, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "score": 17.34064483642578, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 16.75501251220703, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 16.467243194580078, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING max( T1.Version_Number) > 5     ", "score": 15.961463928222656, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, count( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "score": 15.418479919433594, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 14.722084045410156, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "score": 11.021194458007812, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING sum( T1.Version_Number) > 5     ", "score": 10.773788452148438, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Template_Type_Code > '5'       ", "score": 10.16982650756836, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING avg( T1.Version_Number) > 5     ", "score": 8.072837829589844, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING count( *) > 5     ", "score": -7.095485687255859, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 328, "beams": [{"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5       ", "score": 68.83296203613281, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 38.32734680175781, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT count( *), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 35.84956741333008, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, count( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "score": 33.96868133544922, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 33.62097930908203, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 32.80996322631836, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "score": 32.32966232299805, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "score": 31.453575134277344, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING max( T1.Version_Number) > 5     ", "score": 31.329654693603516, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Version_Number > 5       ", "score": 29.90966796875, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "score": 27.884685516357422, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING sum( T1.Version_Number) > 5     ", "score": 27.482872009277344, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, min( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "score": 27.034408569335938, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING avg( T1.Version_Number) > 5     ", "score": 22.612743377685547, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING count( *) > 5     ", "score": 4.7282257080078125, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 335, "beams": [{"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -1.1920928244535389e-07, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "score": -16.48457908630371, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), min( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -32.475154876708984, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -33.22405242919922, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "score": -33.37181091308594, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -34.01687240600586, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), avg( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -34.9085578918457, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -35.529518127441406, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), max( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -37.248783111572266, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -38.12868881225586, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), count( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -43.821556091308594, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), sum( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -44.218631744384766, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), min( T2.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -49.56597137451172, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT max( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "score": -49.642879486083984, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -50.01832580566406, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 336, "beams": [{"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -2.3841830625315197e-06, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "score": -12.937031745910645, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), min( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -31.34494972229004, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -31.703502655029297, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -32.597557067871094, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), max( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -33.06047439575195, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), avg( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -33.643341064453125, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "score": -34.486289978027344, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -35.701515197753906, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "score": -37.466373443603516, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), sum( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -40.31879425048828, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), count( T1.Template_Type_Code) FROM Templates AS T1        ", "score": -40.646732330322266, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), min( T2.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -42.24605178833008, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT max( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "score": -44.66535186767578, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), max( T2.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -45.20603942871094, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 337, "beams": [{"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 93.23644256591797, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 67.12337493896484, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 56.236568450927734, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 56.11701583862305, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 54.5825309753418, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING count( T2.Document_Name) = 'Data base'     ", "score": 51.77739715576172, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 49.25006866455078, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 48.25749588012695, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING avg( T2.Document_Name) = 'Data base'     ", "score": 48.016361236572266, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING max( T2.Document_Name) = 'Data base'     ", "score": 40.18745422363281, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING sum( T2.Document_Name) = 'Data base'     ", "score": 39.305519104003906, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING min( T2.Document_Name) = 'Data base'     ", "score": 35.27056884765625, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 29.275863647460938, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 29.025245666503906, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code HAVING count( T2.Document_Name) = 'Data base'     ", "score": 27.672691345214844, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 338, "beams": [{"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 81.8880386352539, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 56.53788757324219, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 48.39125442504883, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 47.678653717041016, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 46.620079040527344, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING count( T2.Document_Name) = 'Data base'     ", "score": 43.363807678222656, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 42.8687744140625, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING avg( T2.Document_Name) = 'Data base'     ", "score": 41.95038604736328, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "score": 39.54384994506836, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING max( T2.Document_Name) = 'Data base'     ", "score": 34.72013473510742, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING sum( T2.Document_Name) = 'Data base'     ", "score": 34.05496597290039, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data'       ", "score": 30.021076202392578, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING min( T2.Document_Name) = 'Data base'     ", "score": 27.485912322998047, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code HAVING count( *) = Data base     ", "score": 16.445693969726562, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code HAVING count( *) = Data base     ", "score": 4.937995910644531, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 347, "beams": [{"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "score": -8.344646857949556e-07, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -13.954049110412598, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT max( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -35.3309440612793, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -38.581459045410156, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, max( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -39.96116638183594, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT avg( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -40.0304069519043, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT min( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -42.58939743041992, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT count( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -42.8721809387207, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, count( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -44.26716613769531, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT sum( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -45.26962661743164, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, sum( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -45.9206428527832, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT max( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "score": -49.446929931640625, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, min( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -49.96367645263672, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, avg( T2.Template_Type_Description) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code      ", "score": -52.821956634521484, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, max( T2.Template_Type_Description) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code      ", "score": -53.929012298583984, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 348, "beams": [{"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "score": 0.0, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -19.811052322387695, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT max( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -30.858234405517578, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT avg( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -32.97631072998047, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT count( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -36.4215202331543, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT min( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -38.09794235229492, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -38.26361083984375, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT sum( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "score": -40.852569580078125, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, max( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -40.86986541748047, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, count( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -44.540565490722656, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, sum( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -47.680274963378906, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT max( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "score": -51.1217041015625, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, min( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "score": -51.67749786376953, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT avg( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "score": -53.421669006347656, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT count( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "score": -56.20832824707031, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 351, "beams": [{"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 58.51336669921875, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 55.16735076904297, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 22.16423797607422, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 21.962203979492188, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING count( T1.Template_Type_Description) = 'Book'     ", "score": 20.519203186035156, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 19.827960968017578, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 19.468040466308594, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 18.840377807617188, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 17.11020278930664, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 16.48004913330078, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING avg( T1.Template_Type_Description) = 'Book'     ", "score": 15.938095092773438, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 15.666885375976562, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Book'     ", "score": 15.216842651367188, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 14.150135040283203, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 12.600475311279297, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 352, "beams": [{"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 59.12301254272461, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 56.646820068359375, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 25.55362319946289, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 23.342510223388672, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 23.10710906982422, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 22.598217010498047, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 21.074913024902344, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 20.698684692382812, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 20.223957061767578, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING count( T1.Template_Type_Description) = 'Book'     ", "score": 18.889278411865234, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 18.33428955078125, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "score": 18.181068420410156, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING avg( T1.Template_Type_Description) = 'Book'     ", "score": 17.113998413085938, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "score": 15.765129089355469, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Book'     ", "score": 15.280082702636719, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 353, "beams": [{"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "score": -1.2755313036905136e-05, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -11.273626327514648, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID        ", "score": -18.621837615966797, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "score": -21.01013946533203, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -24.675416946411133, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -28.124204635620117, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -31.584518432617188, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -31.768888473510742, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "score": -35.155513763427734, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "score": -35.439388275146484, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "score": -37.3525276184082, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "score": -39.018436431884766, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "score": -40.51251983642578, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "score": -41.53017807006836, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "score": -41.725372314453125, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 354, "beams": [{"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "score": -0.004003130830824375, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Document_Description FROM Documents AS T1        ", "score": -5.522672176361084, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "score": -29.205678939819336, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "score": -31.254047393798828, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "score": -31.75772476196289, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -32.56777572631836, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -32.654205322265625, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -33.45354080200195, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -34.64600372314453, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "score": -36.0270881652832, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "score": -37.43427276611328, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "score": -42.94265365600586, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Template_Details FROM Templates AS T1        ", "score": -48.745819091796875, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Other_Details FROM Documents AS T1        ", "score": -56.33685302734375, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Templates AS T1        ", "score": -66.08451843261719, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 355, "beams": [{"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 65.20024108886719, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 26.753826141357422, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "score": 23.279884338378906, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 23.25201416015625, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT min( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 20.08126449584961, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 19.088214874267578, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING avg( T2.Template_Type_Description) = 'Presentation'     ", "score": 17.27715301513672, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT sum( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 14.341068267822266, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING max( T2.Template_Type_Description) = 'Presentation'     ", "score": 13.230899810791016, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING sum( T2.Template_Type_Description) = 'Presentation'     ", "score": 10.249832153320312, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING min( T2.Template_Type_Description) = 'Presentation'     ", "score": 10.033447265625, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Documents AS T1 JOIN Templates AS T13 ON T1.Template_ID = T13.Template_ID JOIN Ref_Template_Types AS T2 ON T13.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": -9.149532318115234, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "score": -15.542045593261719, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "score": -18.586807250976562, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING avg( T2.Template_Type_Description) = 'Presentation'     ", "score": -20.93048095703125, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 356, "beams": [{"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 70.68612670898438, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 32.78194046020508, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 29.139842987060547, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT min( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 28.678447723388672, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 24.82518768310547, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING avg( T2.Template_Type_Description) = 'Presentation'     ", "score": 24.62548828125, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "score": 23.854385375976562, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT sum( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": 20.87713623046875, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Description = 'Presentation'       ", "score": 18.147079467773438, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING max( T2.Template_Type_Description) = 'Presentation'     ", "score": 17.127601623535156, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING min( T2.Template_Type_Description) = 'Presentation'     ", "score": 15.604202270507812, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING sum( T2.Template_Type_Description) = 'Presentation'     ", "score": 15.04119873046875, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 WHERE T1.Template_ID = Presentation       ", "score": -5.175910949707031, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Documents AS T1 JOIN Templates AS T13 ON T1.Template_ID = T13.Template_ID JOIN Ref_Template_Types AS T2 ON T13.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "score": -5.308723449707031, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1  GROUP BY T1.Template_ID HAVING count( *) = Presentation     ", "score": -14.089916229248047, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 357, "beams": [{"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -26.38824462890625, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -32.238502502441406, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1        ", "score": -35.35844802856445, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -37.5344123840332, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -47.2153205871582, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -57.97925567626953, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Paragraphs AS T1        ", "score": -83.67115020751953, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT count( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "score": -94.08901977539062, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT T1.Paragraph_ID FROM Paragraphs AS T1        ", "score": -96.03105163574219, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT sum( *) FROM Paragraphs AS T1        ", "score": -98.62655639648438, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT sum( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "score": -100.79022979736328, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT min( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "score": -108.1261978149414, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT min( *) FROM Paragraphs AS T1        ", "score": -111.28707122802734, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT avg( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "score": -114.06986999511719, "correct_code": "SELECT count(*) FROM Paragraphs"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 358, "beams": [{"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -33.147857666015625, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1        ", "score": -33.83799743652344, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -39.82124710083008, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -42.5721321105957, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -50.25198745727539, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "score": -57.05277633666992, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Paragraphs AS T1        ", "score": -76.39300537109375, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT min( *) FROM Paragraphs AS T1        ", "score": -83.50648498535156, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "score": -89.65621948242188, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT T1.Paragraph_ID FROM Paragraphs AS T1        ", "score": -90.13449096679688, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( T1.Version_Number) FROM Templates AS T1        ", "score": -95.45635986328125, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT min( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "score": -99.60640716552734, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT sum( *) FROM Paragraphs AS T1        ", "score": -105.8985595703125, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT T1.Version_Number FROM Templates AS T1        ", "score": -107.36875915527344, "correct_code": "SELECT count(*) FROM Paragraphs"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 359, "beams": [{"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 108.12104034423828, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 78.84562683105469, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 78.2624740600586, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 77.57620239257812, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 77.31874084472656, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 77.05915832519531, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 64.46212768554688, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "score": 61.13475799560547, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Summer Show'     ", "score": 57.877567291259766, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Summer Show'     ", "score": 53.42019271850586, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Summer Show'     ", "score": 51.78354263305664, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Summer Show'     ", "score": 51.020137786865234, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 43.3036994934082, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "score": 33.26795196533203, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "score": 32.918846130371094, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 360, "beams": [{"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 108.25013732910156, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 78.10798645019531, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 76.08200073242188, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 74.79017639160156, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 74.78073120117188, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 73.79729461669922, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "score": 63.642940521240234, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 62.910701751708984, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Summer Show'     ", "score": 58.21445083618164, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Summer Show'     ", "score": 54.56366729736328, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Summer Show'     ", "score": 52.317623138427734, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Summer Show'     ", "score": 52.287391662597656, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "score": 45.513389587402344, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "score": 33.86927032470703, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "score": 32.22413635253906, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 361, "beams": [{"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 72.91624450683594, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT max( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 37.35614013671875, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT count( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 36.970401763916016, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT avg( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 34.918731689453125, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT min( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 33.53811264038086, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT sum( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 33.4345817565918, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING count( T1.Paragraph_Text) like '%Korea%'     ", "score": 31.785762786865234, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING avg( T1.Paragraph_Text) like '%Korea%'     ", "score": 25.76495361328125, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T13 ON T1.Template_ID = T13.Template_ID JOIN Paragraphs AS T2 ON T13.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text like '%Korea%'       ", "score": 24.112213134765625, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 23.793224334716797, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea %'       ", "score": 23.11033058166504, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING sum( T1.Paragraph_Text) like '%Korea%'     ", "score": 21.616870880126953, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING max( T1.Paragraph_Text) like '%Korea%'     ", "score": 19.437511444091797, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING min( T1.Paragraph_Text) like '%Korea%'     ", "score": 16.722225189208984, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 5.75592041015625, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 362, "beams": [{"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 67.06619262695312, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT count( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 33.9562873840332, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT max( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 33.34663772583008, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 32.3795280456543, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT avg( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 31.648361206054688, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT sum( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 30.53656768798828, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT min( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": 29.16900634765625, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea %'       ", "score": 28.36855125427246, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING count( T1.Paragraph_Text) like '%Korea%'     ", "score": 25.573040008544922, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING avg( T1.Paragraph_Text) like '%Korea%'     ", "score": 21.750816345214844, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING sum( T1.Paragraph_Text) like '%Korea%'     ", "score": 19.457122802734375, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING max( T1.Paragraph_Text) like '%Korea%'     ", "score": 16.22502899169922, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T13 ON T1.Template_ID = T13.Template_ID JOIN Paragraphs AS T2 ON T13.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text like '%Korea%'       ", "score": 14.946525573730469, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING min( T1.Paragraph_Text) like '%Korea%'     ", "score": 12.932838439941406, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "score": -3.1260757446289062, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 363, "beams": [{"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'       ", "score": 131.79510498046875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Document_ID, T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Welcome to NY'       ", "score": 97.14630889892578, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT max( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 91.53671264648438, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Document_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'       ", "score": 90.9316177368164, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Welcome to NY'     ", "score": 88.38983154296875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT count( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 88.20246887207031, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 88.04707336425781, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 87.46286010742188, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT avg( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 87.0978012084961, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT min( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 84.40830993652344, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 83.56770324707031, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT sum( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 83.4217529296875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Welcome to NY'     ", "score": 82.17152404785156, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 81.22648620605469, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'NY'       ", "score": 78.67884826660156, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 364, "beams": [{"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'       ", "score": 119.23160552978516, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT max( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 82.62979125976562, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT count( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 81.46305084228516, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'NY'       ", "score": 80.29022979736328, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT min( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 77.9974136352539, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT avg( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 77.48724365234375, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 77.3580322265625, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 76.24012756347656, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Welcome to NY'     ", "score": 76.0224380493164, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 75.76432800292969, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT sum( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "score": 73.03126525878906, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 70.29840087890625, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "score": 69.62631225585938, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Welcome to NY'     ", "score": 67.9159164428711, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Welcome to NY'     ", "score": 64.76226806640625, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 365, "beams": [{"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 77.21276092529297, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 35.65618133544922, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 35.50562286376953, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer'       ", "score": 33.47441864013672, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "score": 33.40304946899414, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 33.166744232177734, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 32.84004592895508, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 32.52823257446289, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Customer reviews'     ", "score": 28.6082763671875, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Customer reviews'     ", "score": 23.908016204833984, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Customer reviews'     ", "score": 22.90032958984375, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Customer reviews'     ", "score": 22.604923248291016, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "score": -7.7989959716796875, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "score": -8.182518005371094, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer'       ", "score": -8.418441772460938, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 366, "beams": [{"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 89.36842346191406, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 49.69783020019531, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 48.76924514770508, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 47.219383239746094, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 46.094661712646484, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "score": 45.00908660888672, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "score": 44.4476203918457, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Customer reviews'     ", "score": 41.645511627197266, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer'       ", "score": 39.31670379638672, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Customer reviews'     ", "score": 34.800567626953125, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Customer reviews'     ", "score": 34.7691535949707, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Customer reviews'     ", "score": 33.68178939819336, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "score": 5.6343994140625, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "score": 4.830543518066406, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "score": 3.2046279907226562, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 381, "beams": [{"orig_question": "How many teachers are there?", "inferred_code": "SELECT count( *) FROM teacher AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM teacher AS T1        ", "score": -32.96710205078125, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT min( *) FROM teacher AS T1        ", "score": -33.13970947265625, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT avg( *) FROM teacher AS T1        ", "score": -37.614315032958984, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT sum( *) FROM teacher AS T1        ", "score": -42.12934875488281, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT avg( T1.Teacher_ID) FROM teacher AS T1        ", "score": -43.91702651977539, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT T1.Name FROM teacher AS T1        ", "score": -46.47530746459961, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1        ", "score": -46.93164825439453, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT max( *) FROM teacher AS T1        ", "score": -47.03912353515625, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT max( T1.Teacher_ID) FROM teacher AS T1        ", "score": -51.54105758666992, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT T1.Teacher_ID FROM teacher AS T1        ", "score": -52.01848602294922, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1        ", "score": -53.84516906738281, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT sum( T1.Teacher_ID) FROM teacher AS T1        ", "score": -54.21728515625, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT min( T1.Teacher_ID) FROM teacher AS T1        ", "score": -54.55470657348633, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1        ", "score": -57.74817657470703, "correct_code": "SELECT count(*) FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 382, "beams": [{"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT count( *) FROM teacher AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT min( *) FROM teacher AS T1        ", "score": -33.9725456237793, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM teacher AS T1        ", "score": -35.41377258300781, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT avg( T1.Teacher_ID) FROM teacher AS T1        ", "score": -38.418357849121094, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT avg( *) FROM teacher AS T1        ", "score": -39.39743423461914, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT sum( *) FROM teacher AS T1        ", "score": -41.458919525146484, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1        ", "score": -42.5496940612793, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT min( T1.Teacher_ID) FROM teacher AS T1        ", "score": -44.52393341064453, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT T1.Name FROM teacher AS T1        ", "score": -46.232872009277344, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT max( T1.Teacher_ID) FROM teacher AS T1        ", "score": -47.055137634277344, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT sum( T1.Teacher_ID) FROM teacher AS T1        ", "score": -47.675010681152344, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT max( *) FROM teacher AS T1        ", "score": -49.94507598876953, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1        ", "score": -50.55946731567383, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT T1.Teacher_ID FROM teacher AS T1        ", "score": -51.528663635253906, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1        ", "score": -51.72827911376953, "correct_code": "SELECT count(*) FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 385, "beams": [{"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, T1.Hometown FROM teacher AS T1        ", "score": 0.0, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT max( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -26.557559967041016, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, avg( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -33.218631744384766, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, max( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -34.77805709838867, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT avg( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -35.03179168701172, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT min( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -41.384521484375, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT sum( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -43.974735260009766, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, min( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -45.06290817260742, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, count( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -47.74357604980469, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, sum( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -50.04623031616211, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT count( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -51.7147216796875, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT max( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "score": -59.15549850463867, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT max( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "score": -61.1826057434082, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT avg( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "score": -67.78788757324219, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT avg( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "score": -69.70970153808594, "correct_code": "SELECT Age ,  Hometown FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 386, "beams": [{"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, T1.Hometown FROM teacher AS T1        ", "score": 0.0, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT max( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -26.264339447021484, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, avg( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -32.221927642822266, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, max( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -33.386314392089844, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT avg( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -34.994686126708984, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT min( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -41.98625564575195, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT sum( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -44.315223693847656, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, min( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -44.68234634399414, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, count( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -47.540000915527344, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, sum( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "score": -49.330326080322266, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT count( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "score": -51.95252227783203, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT max( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "score": -58.18307113647461, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT max( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "score": -59.799503326416016, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT avg( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "score": -67.0483627319336, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT avg( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "score": -68.56135559082031, "correct_code": "SELECT Age ,  Hometown FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 387, "beams": [{"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 55.800498962402344, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 14.303802490234375, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": 13.910655975341797, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 13.411758422851562, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 13.069271087646484, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 12.42996597290039, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING avg( T1.Hometown) != 'Little Lever Urban District'     ", "score": 9.120208740234375, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 7.903953552246094, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING sum( T1.Hometown) != 'Little Lever Urban District'     ", "score": 6.8789825439453125, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING min( T1.Hometown) != 'Little Lever Urban District'     ", "score": 4.932621002197266, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING max( T1.Hometown) != 'Little Lever Urban District'     ", "score": 3.9690818786621094, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Name != 'Little Lever Urban District'       ", "score": -23.165771484375, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": -25.669139862060547, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": -26.408031463623047, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": -27.102989196777344, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 388, "beams": [{"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 58.462032318115234, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 18.83232879638672, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 18.655628204345703, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 18.496501922607422, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": 17.636611938476562, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 17.376895904541016, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "score": 13.125968933105469, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING avg( T1.Hometown) != 'Little Lever Urban District'     ", "score": 11.698535919189453, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING sum( T1.Hometown) != 'Little Lever Urban District'     ", "score": 9.89206314086914, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING min( T1.Hometown) != 'Little Lever Urban District'     ", "score": 7.66839599609375, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING max( T1.Hometown) != 'Little Lever Urban District'     ", "score": 6.404735565185547, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": -20.171340942382812, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": -20.4158935546875, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": -20.43798828125, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "score": -21.708038330078125, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 391, "beams": [{"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT min( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -38.49695587158203, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT max( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -39.860740661621094, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT avg( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -42.07236862182617, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( T1.Age) ASC LIMIT 1    ", "score": -43.21018981933594, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT count( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -45.16407775878906, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "score": -47.255428314208984, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "score": -47.65386962890625, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY min( T1.Age) ASC LIMIT 1    ", "score": -49.35852813720703, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT sum( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -50.36388397216797, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( *) ASC LIMIT 1    ", "score": -52.97686767578125, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY max( T1.Age) ASC LIMIT 1    ", "score": -55.85342788696289, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Hometown ASC LIMIT 1    ", "score": -77.90697479248047, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT min( T1.Hometown) FROM teacher AS T1    ORDER BY count( T1.Age) ASC LIMIT 1    ", "score": -81.73643493652344, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT max( T1.Hometown) FROM teacher AS T1    ORDER BY count( T1.Age) ASC LIMIT 1    ", "score": -82.96876525878906, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 392, "beams": [{"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT min( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -39.283172607421875, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( T1.Age) ASC LIMIT 1    ", "score": -41.953128814697266, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT avg( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -42.86204147338867, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT max( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -42.889949798583984, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "score": -44.60776901245117, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY min( T1.Age) ASC LIMIT 1    ", "score": -45.42164993286133, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "score": -45.97471237182617, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT count( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -46.3775634765625, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT sum( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -51.5108642578125, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( *) ASC LIMIT 1    ", "score": -52.664005279541016, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY max( T1.Age) ASC LIMIT 1    ", "score": -54.49430847167969, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Name FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "score": -55.87770080566406, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Hometown ASC LIMIT 1    ", "score": -76.14637756347656, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID    ORDER BY T2.Grade ASC LIMIT 1    ", "score": -78.84230041503906, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 399, "beams": [{"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID        ", "score": 0.0, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, avg( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -30.654085159301758, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, max( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -30.731618881225586, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, min( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -31.02036476135254, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -31.915420532226562, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, sum( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -32.62420654296875, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, min( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -33.702362060546875, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -36.00068664550781, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, avg( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -36.21147918701172, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT max( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "score": -39.1888427734375, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT avg( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "score": -40.3159065246582, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT min( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "score": -42.4796028137207, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, sum( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -43.46363067626953, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT count( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "score": -43.56488037109375, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 400, "beams": [{"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID        ", "score": 0.0, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, max( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -20.050817489624023, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, avg( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -23.065988540649414, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, sum( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -24.046072006225586, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -24.607074737548828, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, min( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "score": -25.508779525756836, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -31.061981201171875, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -34.925533294677734, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, min( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -36.30152130126953, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, avg( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -36.68256378173828, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -38.35213851928711, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, T2.Course_ID FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID        ", "score": -39.566314697265625, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, sum( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "score": -41.55938720703125, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT max( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "score": -44.185333251953125, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 403, "beams": [{"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 58.114776611328125, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 16.704910278320312, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 15.806449890136719, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 15.692024230957031, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 15.03841781616211, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING count( T2.Course) = 'Math'     ", "score": 11.447078704833984, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 10.616405487060547, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING avg( T2.Course) = 'Math'     ", "score": 6.710857391357422, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING max( T2.Course) = 'Math'     ", "score": 1.8468132019042969, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING min( T2.Course) = 'Math'     ", "score": 1.1512298583984375, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING sum( T2.Course) = 'Math'     ", "score": -2.5799942016601562, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT count( *) FROM course_arrange AS T13 JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": -27.677616119384766, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY count( T1.Name) HAVING count( T2.Course) = 'Math'     ", "score": -29.24740982055664, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY max( T1.Name) HAVING count( T2.Course) = 'Math'     ", "score": -29.95919418334961, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY avg( T1.Name) HAVING count( T2.Course) = 'Math'     ", "score": -30.039520263671875, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 404, "beams": [{"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 54.87024688720703, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 18.320823669433594, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 14.743167877197266, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 14.652923583984375, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 14.273422241210938, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "score": 11.105304718017578, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING count( T2.Course) = 'Math'     ", "score": 7.448493957519531, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING avg( T2.Course) = 'Math'     ", "score": 4.8360748291015625, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING max( T2.Course) = 'Math'     ", "score": 1.2493553161621094, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING min( T2.Course) = 'Math'     ", "score": 0.3119621276855469, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING sum( T2.Course) = 'Math'     ", "score": -2.865001678466797, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course_ID = Math       ", "score": -7.815643310546875, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Name = 'Math'       ", "score": -14.004852294921875, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID  GROUP BY T1.Name HAVING count( *) = Math     ", "score": -20.390155792236328, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT count( *) FROM course AS T1 WHERE T1.Course = 'Math'       ", "score": -25.232357025146484, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 411, "beams": [{"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "score": 43.302001953125, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT min( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "score": 15.630495071411133, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT * FROM visitor AS T1 WHERE T1.Age < 30       ", "score": 9.575874328613281, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT sum( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "score": 8.803035736083984, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING min( T1.Age) < 30     ", "score": 5.236682891845703, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Age < 30       ", "score": -3.3712196350097656, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT T1.Name FROM museum AS T1 JOIN visit AS T13 ON T1.Museum_ID = T13.Museum_ID JOIN visitor AS T2 ON T13.visitor_ID = T2.ID WHERE T2.Age < 30       ", "score": -3.4811134338378906, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING count( T1.Age) < 30     ", "score": -3.95123291015625, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT T1.Age FROM visitor AS T1 WHERE T1.Age < 30       ", "score": -6.362312316894531, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT avg( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "score": -6.761695861816406, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING max( T1.Age) < 30     ", "score": -8.60409927368164, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING sum( T1.Age) < 30     ", "score": -8.883663177490234, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING avg( T1.Age) < 30     ", "score": -9.106224060058594, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT avg( T1.Name) FROM museum AS T1 JOIN visit AS T13 ON T1.Museum_ID = T13.Museum_ID JOIN visitor AS T2 ON T13.visitor_ID = T2.ID WHERE T2.Age < 30       ", "score": -11.484443664550781, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT max( T1.Age) FROM visitor AS T1 WHERE T1.Age < 30       ", "score": -18.73920440673828, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 413, "beams": [{"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "score": 9.028138160705566, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT min( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "score": -24.41284942626953, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT count( *) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "score": -26.307533264160156, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT sum( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "score": -26.414161682128906, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT max( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "score": -28.259326934814453, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT count( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "score": -32.357017517089844, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Num_of_Ticket != 4       ", "score": -34.44220733642578, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT T1.Age FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "score": -35.34009552001953, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING max( T1.Level_of_membership) != 4     ", "score": -40.2255744934082, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING avg( T1.Level_of_membership) != 4     ", "score": -42.342628479003906, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING min( T1.Level_of_membership) != 4     ", "score": -43.64814758300781, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING count( T1.Level_of_membership) != 4     ", "score": -45.21520233154297, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING sum( T1.Level_of_membership) != 4     ", "score": -47.02111053466797, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Name != '4'       ", "score": -68.97950744628906, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.visitor_ID != '4'       ", "score": -71.27173614501953, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 415, "beams": [{"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1    ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -2.3841855067985307e-07, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "score": -15.10600471496582, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY sum( T1.Num_of_Staff) DESC LIMIT 1    ", "score": -29.25383758544922, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY avg( T1.Num_of_Staff) DESC LIMIT 1    ", "score": -34.215885162353516, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY max( T1.Num_of_Staff) DESC LIMIT 1    ", "score": -35.3071174621582, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT max( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -40.167381286621094, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Name, T1.Museum_ID FROM museum AS T1    ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -42.9581184387207, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT avg( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -43.0423698425293, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, avg( T1.Name) FROM museum AS T1  GROUP BY T1.Museum_ID  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -43.822547912597656, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, max( T1.Name) FROM museum AS T1  GROUP BY T1.Museum_ID  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -44.451839447021484, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT count( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -45.358158111572266, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT min( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -46.062923431396484, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY min( T1.Num_of_Staff) DESC LIMIT 1    ", "score": -46.59247589111328, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, count( T1.Name) FROM museum AS T1  GROUP BY T1.Museum_ID  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -48.31221389770508, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT sum( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "score": -48.39101791381836, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 416, "beams": [{"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "score": 44.00839614868164, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT min( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "score": 12.289392471313477, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT sum( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "score": 12.280445098876953, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT count( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "score": 10.105724334716797, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT max( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "score": 9.619449615478516, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "score": 3.0711898803710938, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING count( T1.Open_Year) < '2009'     ", "score": 1.1948623657226562, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT T1.Num_of_Staff FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "score": -2.4472084045410156, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING max( T1.Open_Year) < '2009'     ", "score": -4.737354278564453, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT count( *) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "score": -8.865474700927734, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING sum( T1.Open_Year) < '2009'     ", "score": -8.98514175415039, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING avg( T1.Open_Year) < '2009'     ", "score": -9.814998626708984, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT sum( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "score": -28.374134063720703, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT min( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "score": -28.499038696289062, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT max( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "score": -31.440628051757812, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 417, "beams": [{"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum'       ", "score": 103.05240631103516, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT avg( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "score": 64.13233947753906, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT max( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "score": 63.512672424316406, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING count( T1.Name) = 'Plaza Museum'     ", "score": 62.772090911865234, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, avg( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "score": 61.68165969848633, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING avg( T1.Name) = 'Plaza Museum'     ", "score": 59.8510627746582, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, max( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "score": 55.383949279785156, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, count( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "score": 54.8261604309082, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING max( T1.Name) = 'Plaza Museum'     ", "score": 53.0053825378418, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT sum( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "score": 52.85441589355469, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT count( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "score": 51.762535095214844, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, sum( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "score": 50.462982177734375, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT min( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "score": 50.1458625793457, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING sum( T1.Name) = 'Plaza Museum'     ", "score": 48.90812683105469, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, min( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "score": 48.36762237548828, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 423, "beams": [{"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -1.5497195136049413e-06, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1  GROUP BY T1.Name, T1.Age  ORDER BY count( *) DESC LIMIT 1    ", "score": -13.382488250732422, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY sum( T2.Total_spent) DESC LIMIT 1    ", "score": -17.273786544799805, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID    ORDER BY T2.Num_of_Ticket DESC LIMIT 1    ", "score": -17.89458656311035, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY max( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -29.34413719177246, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY avg( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -29.81882095336914, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID    ORDER BY T2.Total_spent DESC LIMIT 1    ", "score": -31.6595458984375, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY min( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -34.87591552734375, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT max( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -39.33202362060547, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT avg( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -41.83704376220703, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, avg( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Name  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -42.43387985229492, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, max( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Name  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -42.52117156982422, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT sum( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -43.17891311645508, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT count( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -44.1197509765625, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT min( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "score": -44.746524810791016, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 424, "beams": [{"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "score": 0.0, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT sum( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -27.756446838378906, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), sum( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -28.345998764038086, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT min( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -30.103412628173828, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), min( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -31.321269989013672, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT count( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -35.70608901977539, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), max( T1.Total_spent) FROM visit AS T1        ", "score": -39.01466369628906, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT T1.Num_of_Ticket, max( T1.Num_of_Ticket) FROM visit AS T1  GROUP BY T1.Num_of_Ticket      ", "score": -40.942832946777344, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), count( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -50.77490234375, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), T1.Num_of_Ticket FROM visit AS T1  GROUP BY T1.Num_of_Ticket      ", "score": -50.85498046875, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Total_spent), max( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -53.87582015991211, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT max( T1.Num_of_Ticket), sum( T1.Num_of_Ticket) FROM visit AS T1        ", "score": -54.718345642089844, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 425, "beams": [{"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": 37.79291915893555, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": 36.75077819824219, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT max( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": 5.682598114013672, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT max( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": 4.333553314208984, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT count( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": 2.4628334045410156, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT T1.Num_of_Ticket FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": 1.9530868530273438, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT T1.Total_spent FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": 0.6475868225097656, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT avg( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": -0.13658523559570312, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT min( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": -0.22201156616210938, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID HAVING count( T2.Level_of_membership) = 1     ", "score": -0.9161567687988281, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT min( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": -1.2332954406738281, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT avg( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": -1.6593017578125, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID HAVING count( T2.Level_of_membership) = 1     ", "score": -2.7147750854492188, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT count( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "score": -3.338123321533203, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID HAVING avg( T2.Level_of_membership) = 1     ", "score": -14.161746978759766, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 429, "beams": [{"orig_question": "Find the total number of players.", "inferred_code": "SELECT count( *) FROM players AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT count( *) FROM players AS T1        ", "score": -26.907852172851562, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "score": -33.15373992919922, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT T1.player_id FROM players AS T1        ", "score": -35.007911682128906, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT min( T1.player_id) FROM players AS T1        ", "score": -37.943485260009766, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "score": -38.34369659423828, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players AS T1        ", "score": -40.33640670776367, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "score": -40.9356689453125, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "score": -41.19169235229492, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT min( *) FROM players AS T1        ", "score": -41.36275100708008, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT sum( T1.player_id) FROM players AS T1        ", "score": -48.950035095214844, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "score": -49.225433349609375, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT avg( T1.player_id) FROM players AS T1        ", "score": -50.50149917602539, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "score": -57.04169464111328, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT sum( *) FROM players AS T1        ", "score": -57.55506134033203, "correct_code": "SELECT count(*) FROM players"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 430, "beams": [{"orig_question": "How many players are there?", "inferred_code": "SELECT count( *) FROM players AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT count( *) FROM players AS T1        ", "score": -24.667869567871094, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT T1.player_id FROM players AS T1        ", "score": -32.37055969238281, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT min( *) FROM players AS T1        ", "score": -34.476898193359375, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT min( T1.player_id) FROM players AS T1        ", "score": -34.670440673828125, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players AS T1        ", "score": -36.72787094116211, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "score": -38.07398223876953, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "score": -40.40400314331055, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT avg( T1.player_id) FROM players AS T1        ", "score": -41.356842041015625, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "score": -42.272132873535156, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT sum( T1.player_id) FROM players AS T1        ", "score": -42.312767028808594, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "score": -43.62473678588867, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT sum( *) FROM players AS T1        ", "score": -48.20304870605469, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "score": -49.71989822387695, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT max( T1.player_id) FROM players AS T1        ", "score": -51.4974479675293, "correct_code": "SELECT count(*) FROM players"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 431, "beams": [{"orig_question": "Find the total number of matches.", "inferred_code": "SELECT count( *) FROM matches AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT min( *) FROM matches AS T1        ", "score": -34.169960021972656, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "score": -35.795562744140625, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "score": -36.13770294189453, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM matches AS T1        ", "score": -41.51565170288086, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "score": -44.11960983276367, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "score": -44.17388916015625, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "score": -51.46516036987305, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT sum( *) FROM matches AS T1        ", "score": -62.567291259765625, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "score": -70.6814193725586, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.round FROM matches AS T1        ", "score": -73.85015869140625, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT avg( *) FROM matches AS T1        ", "score": -73.91743469238281, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.surface FROM matches AS T1        ", "score": -78.03726196289062, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.ranking FROM rankings AS T1        ", "score": -79.44227600097656, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.best_of FROM matches AS T1        ", "score": -80.35730743408203, "correct_code": "SELECT count(*) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 432, "beams": [{"orig_question": "Count the number of matches.", "inferred_code": "SELECT count( *) FROM matches AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "score": -34.35675811767578, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( *) FROM matches AS T1        ", "score": -35.4749755859375, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM matches AS T1        ", "score": -36.31098556518555, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "score": -46.34912109375, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "score": -50.195037841796875, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( *) FROM matches AS T1        ", "score": -50.792720794677734, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "score": -53.01950454711914, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( *) FROM matches AS T1        ", "score": -62.322105407714844, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "score": -64.62737274169922, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "score": -69.43135070800781, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.round FROM matches AS T1        ", "score": -71.59492492675781, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( *) FROM matches AS T1        ", "score": -72.12861633300781, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.surface FROM matches AS T1        ", "score": -76.53256225585938, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.ranking FROM rankings AS T1        ", "score": -77.32627868652344, "correct_code": "SELECT count(*) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 432, "beams": [{"orig_question": "Count the number of matches.", "inferred_code": "SELECT count( *) FROM matches AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "score": -34.35675811767578, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( *) FROM matches AS T1        ", "score": -35.4749755859375, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM matches AS T1        ", "score": -36.31098556518555, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "score": -46.34912109375, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "score": -50.195037841796875, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( *) FROM matches AS T1        ", "score": -50.792720794677734, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "score": -53.01950454711914, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( *) FROM matches AS T1        ", "score": -62.322105407714844, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "score": -64.62737274169922, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "score": -69.43135070800781, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.round FROM matches AS T1        ", "score": -71.59492492675781, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( *) FROM matches AS T1        ", "score": -72.12861633300781, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.surface FROM matches AS T1        ", "score": -76.53256225585938, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.ranking FROM rankings AS T1        ", "score": -77.32627868652344, "correct_code": "SELECT count(*) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 491, "beams": [{"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "score": 67.27783966064453, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.result = 'Captured'       ", "score": 58.916412353515625, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE T1.name = 'Captured'       ", "score": 40.64748764038086, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.name FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "score": 33.86098098754883, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT min( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "score": 32.312782287597656, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE T1.ship_type = 'Captured'       ", "score": 30.510868072509766, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT avg( T1.name) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "score": 28.23150634765625, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.disposition_of_ship FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "score": 28.227855682373047, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT sum( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "score": 28.133655548095703, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.name = 'Captured'       ", "score": 27.868267059326172, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT min( *) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.result = 'Captured'       ", "score": 23.692306518554688, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.result FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.disposition_of_ship = 'Captured'       ", "score": 22.798500061035156, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.id FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "score": 19.55147933959961, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.name FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.result = 'Captured'       ", "score": 18.70301055908203, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE * = Captured       ", "score": 16.495819091796875, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 493, "beams": [{"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, T1.result FROM battle AS T1        ", "score": 0.0, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, max( T1.date), T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -34.96769332885742, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, max( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "score": -36.55751037597656, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, avg( T1.date), T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -37.618350982666016, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT max( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -38.47445297241211, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, count( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "score": -38.83690643310547, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, min( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "score": -38.984947204589844, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, avg( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "score": -40.9017333984375, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, sum( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "score": -41.376182556152344, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT min( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -42.75630569458008, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT avg( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -42.86758041381836, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, count( *) FROM battle AS T1  GROUP BY T1.date      ", "score": -43.620269775390625, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, count( T1.date), T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -44.37888717651367, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT sum( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -46.08671569824219, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT count( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "score": -46.10417175292969, "correct_code": "SELECT name ,  date FROM battle"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 494, "beams": [{"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T1.killed FROM death AS T1  GROUP BY T1.killed      ", "score": -0.1752028614282608, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "score": -1.8888630867004395, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "score": -5.281975269317627, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T1.id FROM death AS T1  GROUP BY T1.id      ", "score": -5.433548450469971, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T1.injured FROM death AS T1  GROUP BY T1.injured      ", "score": -13.746649742126465, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), sum( T1.killed) FROM death AS T1        ", "score": -24.28136444091797, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), count( *) FROM death AS T1        ", "score": -24.467967987060547, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.lost_in_battle FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T2.lost_in_battle      ", "score": -27.752145767211914, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.result FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.result      ", "score": -28.555803298950195, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), avg( T1.killed) FROM death AS T1        ", "score": -29.464725494384766, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT sum( T1.killed), min( T1.killed), T1.killed FROM death AS T1  GROUP BY T1.killed      ", "score": -30.687341690063477, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT sum( T1.killed), min( T1.killed), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "score": -31.828208923339844, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.ship_type FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T2.ship_type      ", "score": -34.32011413574219, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 495, "beams": [{"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "score": -1.8358125089434907e-05, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "score": -11.196499824523926, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT count( *), T1.name FROM battle AS T1  GROUP BY T1.name      ", "score": -12.58031940460205, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT sum( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "score": -13.66067123413086, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT min( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "score": -18.138221740722656, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT T1.injured, T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "score": -20.069921493530273, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T2.name      ", "score": -21.41771125793457, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT max( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "score": -21.494808197021484, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT count( *), T1.id FROM battle AS T1  GROUP BY T1.id      ", "score": -22.10940933227539, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT count( *), avg( T1.injured) FROM death AS T1        ", "score": -23.336963653564453, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT sum( T1.injured), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "score": -24.77677345275879, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), avg( T2.name) FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "score": -25.929473876953125, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), min( T2.name) FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "score": -28.013792037963867, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), sum( T2.name) FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "score": -29.083580017089844, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT min( T1.injured), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "score": -29.198034286499023, "correct_code": "SELECT avg(injured) FROM death"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 496, "beams": [{"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'       ", "score": 25.12889289855957, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, max( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "score": -1.0421504974365234, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT max( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "score": -1.5414714813232422, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, avg( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "score": -9.610963821411133, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT avg( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "score": -12.965028762817383, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, sum( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "score": -13.501861572265625, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, min( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "score": -14.171783447265625, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT sum( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "score": -14.406139373779297, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT min( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "score": -15.273674011230469, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, count( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "score": -15.909927368164062, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING count( T2.tonnage) = 't'     ", "score": -18.749286651611328, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT count( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "score": -18.87899398803711, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING avg( T2.tonnage) = 't'     ", "score": -22.879844665527344, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING max( T2.tonnage) = 't'     ", "score": -23.76781463623047, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING sum( T2.tonnage) = 't'     ", "score": -26.311450958251953, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 497, "beams": [{"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril'       ", "score": 41.3860969543457, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT max( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "score": 1.7110481262207031, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT avg( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "score": -0.005706787109375, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, avg( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "score": -0.13628768920898438, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING count( T1.bulgarian_commander) != 'Boril'     ", "score": -0.8336715698242188, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, max( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "score": -3.3495101928710938, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING avg( T1.bulgarian_commander) != 'Boril'     ", "score": -3.8465499877929688, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT count( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "score": -4.409709930419922, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT min( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "score": -6.12640380859375, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, count( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "score": -6.883689880371094, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT sum( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "score": -7.369865417480469, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING max( T1.bulgarian_commander) != 'Boril'     ", "score": -8.093891143798828, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING sum( T1.bulgarian_commander) != 'Boril'     ", "score": -9.448955535888672, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, sum( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "score": -10.906997680664062, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, min( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "score": -11.211891174316406, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 498, "beams": [{"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'       ", "score": 60.43635559082031, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "score": 27.752403259277344, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, avg(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "score": 26.086292266845703, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "score": 26.056594848632812, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "score": 25.425430297851562, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.lost_in_battle = Brig       ", "score": 22.796485900878906, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle  GROUP BY T2.lost_in_battle HAVING count( T2.ship_type) = 'Brig'     ", "score": 22.491050720214844, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "score": 21.814197540283203, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, count(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "score": 21.445331573486328, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, min(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "score": 19.57390594482422, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, max(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "score": 18.835681915283203, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "score": 16.943340301513672, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle  GROUP BY T2.lost_in_battle HAVING min( T2.ship_type) = 'Brig'     ", "score": 14.971366882324219, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle  GROUP BY T2.lost_in_battle HAVING avg( T2.ship_type) = 'Brig'     ", "score": 14.221176147460938, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 WHERE T1.name = 'Brig'       ", "score": 2.3656997680664062, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 501, "beams": [{"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "score": 119.82008361816406, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin'       ", "score": 101.4808349609375, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Kaloyan' and T1.bulgarian_commander = 'Baldwin I'       ", "score": 85.11705017089844, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "score": 82.258056640625, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' GROUP BY T1.name HAVING count( T1.latin_commander) = 'Baldwin I'     ", "score": 80.72188568115234, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Kaloyan'       ", "score": 80.1563949584961, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "score": 80.07581329345703, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING count( T1.bulgarian_commander) = 'Kaloyan'     ", "score": 79.63674926757812, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "score": 78.38487243652344, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING avg( T1.bulgarian_commander) = 'Kaloyan'     ", "score": 77.36000061035156, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' GROUP BY T1.name HAVING avg( T1.latin_commander) = 'Baldwin I'     ", "score": 76.44508361816406, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "score": 76.30593872070312, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING max( T1.bulgarian_commander) = 'Kaloyan'     ", "score": 74.04103088378906, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.bulgarian_commander = 'Baldwin I'       ", "score": 72.11367797851562, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING min( T1.bulgarian_commander) = 'Kaloyan'     ", "score": 70.47594451904297, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 502, "beams": [{"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.result) FROM battle AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT T1.result FROM battle AS T1        ", "score": -36.12775802612305, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.result) FROM battle AS T1        ", "score": -37.5106201171875, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.result) FROM battle AS T1        ", "score": -45.15676498413086, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.result) FROM battle AS T1        ", "score": -47.35490798950195, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.result) FROM battle AS T1        ", "score": -54.12778091430664, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.id) FROM battle AS T1        ", "score": -99.34323120117188, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM battle AS T1        ", "score": -115.19902038574219, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.lost_in_battle) FROM ship AS T1        ", "score": -116.6231918334961, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM battle AS T1        ", "score": -136.92388916015625, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.id) FROM battle AS T1        ", "score": -146.54946899414062, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT T1.id FROM battle AS T1        ", "score": -149.03273010253906, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT T1.lost_in_battle FROM ship AS T1        ", "score": -155.3922576904297, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.lost_in_battle) FROM ship AS T1        ", "score": -155.806396484375, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.id) FROM battle AS T1        ", "score": -156.6545867919922, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 506, "beams": [{"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 WHERE T1.note like '%East%'       ", "score": 49.75088119506836, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 WHERE T1.killed like %East%       ", "score": 43.93731689453125, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id WHERE T2.name like '%East%'       ", "score": 24.10315704345703, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id WHERE T2.result like '%East%'       ", "score": 22.590648651123047, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.location like '%East%'       ", "score": 21.01943588256836, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 WHERE T1.id like %East%       ", "score": 11.524711608886719, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT max( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "score": 10.374420166015625, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id WHERE T2.date like '%East%'       ", "score": 9.61727523803711, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT min( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "score": 9.599552154541016, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT count( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "score": 9.562599182128906, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT avg( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "score": 7.877330780029297, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT sum( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "score": 4.308483123779297, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT max( T1.note) FROM death AS T1 WHERE T1.killed like %East%       ", "score": 4.100711822509766, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT count( T1.note) FROM death AS T1 WHERE T1.killed like %East%       ", "score": 3.9092254638671875, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1  GROUP BY T1.note HAVING count( T1.note) like '%East%'     ", "score": 3.7389755249023438, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 507, "beams": [{"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "score": 4.360437393188477, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%2%'       ", "score": -5.225649356842041, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "score": -12.098738670349121, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "score": -18.550189971923828, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%2%'       ", "score": -21.256181716918945, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_2 like '%1%'       ", "score": -23.18069076538086, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "score": -26.53589630126953, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%2%'       ", "score": -26.962121963500977, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.line_1 like '%1%'       ", "score": -29.369842529296875, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_2 like '%2%'       ", "score": -30.703798294067383, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.address_id FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "score": -31.542247772216797, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.line_1 like '%1%'       ", "score": -32.771331787109375, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1  GROUP BY T1.line_1 HAVING count( T1.line_1) like '%1%'     ", "score": -33.591251373291016, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT count( *) FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "score": -33.93733596801758, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.line_1 like '%1%'       ", "score": -34.400001525878906, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 508, "beams": [{"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, T1.line_2 FROM Addresses AS T1        ", "score": 0.0, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.first_name, T2.line_2 FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id        ", "score": -33.19839859008789, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT max( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "score": -37.00646209716797, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT avg( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "score": -39.44704818725586, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, max( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "score": -39.50814437866211, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, min( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "score": -40.163360595703125, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, avg( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "score": -40.649169921875, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT count( *), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "score": -41.31272506713867, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT min( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "score": -41.32410430908203, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, count( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "score": -41.43017578125, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT sum( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "score": -43.34702682495117, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, T1.line_3 FROM Addresses AS T1        ", "score": -44.4398193359375, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT count( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "score": -45.31651306152344, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, sum( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "score": -46.43270492553711, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT count( T1.first_name), T2.line_2 FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id  GROUP BY T2.line_2      ", "score": -60.103973388671875, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 509, "beams": [{"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T1.course_id FROM Courses AS T1        ", "score": -32.3143310546875, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT min( T1.course_id) FROM Courses AS T1        ", "score": -33.47010803222656, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT sum( T1.course_id) FROM Courses AS T1        ", "score": -35.994773864746094, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT count( T1.course_id) FROM Courses AS T1        ", "score": -41.15547180175781, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT avg( T1.course_id) FROM Courses AS T1        ", "score": -42.06129455566406, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT sum( T1.course_name) FROM Courses AS T1        ", "score": -43.582069396972656, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "score": -43.60375213623047, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1        ", "score": -44.58243942260742, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT min( *) FROM Courses AS T1        ", "score": -45.07509231567383, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT min( T1.course_name) FROM Courses AS T1        ", "score": -47.13796615600586, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Courses AS T1        ", "score": -48.177154541015625, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T1.course_id FROM Sections AS T1        ", "score": -48.39141082763672, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT avg( T1.course_name) FROM Courses AS T1        ", "score": -49.386009216308594, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT sum( *) FROM Courses AS T1        ", "score": -50.632869720458984, "correct_code": "SELECT count(*) FROM Courses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 510, "beams": [{"orig_question": "How many courses are there?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT T1.course_id FROM Courses AS T1        ", "score": -32.46308517456055, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT min( T1.course_id) FROM Courses AS T1        ", "score": -33.959537506103516, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT sum( T1.course_id) FROM Courses AS T1        ", "score": -41.38105773925781, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT avg( T1.course_id) FROM Courses AS T1        ", "score": -42.17540740966797, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "score": -44.41012954711914, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1        ", "score": -45.950958251953125, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT min( *) FROM Courses AS T1        ", "score": -46.727542877197266, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Courses AS T1        ", "score": -47.86710739135742, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT min( T1.course_name) FROM Courses AS T1        ", "score": -50.108734130859375, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT max( T1.course_id) FROM Courses AS T1        ", "score": -50.58711624145508, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT count( T1.course_id) FROM Courses AS T1        ", "score": -50.9597282409668, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT sum( T1.course_name) FROM Courses AS T1        ", "score": -51.36229705810547, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT avg( T1.course_name) FROM Courses AS T1        ", "score": -52.35333251953125, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT T1.course_id FROM Sections AS T1        ", "score": -55.770301818847656, "correct_code": "SELECT count(*) FROM Courses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 511, "beams": [{"orig_question": "How is the math course described?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 67.9975357055664, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 59.53326416015625, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 54.29167175292969, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( *) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 49.53333282470703, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT sum( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 47.65378189086914, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT min( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 46.2335319519043, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 45.735694885253906, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT avg( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 45.36817932128906, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT max( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 37.42440414428711, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( *) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 35.1021728515625, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT sum( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 32.94375991821289, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT min( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 31.668712615966797, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT avg( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 30.804550170898438, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1  GROUP BY T1.course_description HAVING count( T1.course_name) = 'math'     ", "score": 26.269596099853516, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( *) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 22.84796142578125, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 512, "beams": [{"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 73.63934326171875, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 48.80177307128906, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 35.17739486694336, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT max( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 33.71197509765625, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT min( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 32.8929443359375, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT avg( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 32.26200485229492, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT sum( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "score": 30.03253936767578, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING count( T2.department_name) = 'math'     ", "score": 29.796283721923828, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING avg( T2.department_name) = 'math'     ", "score": 24.438678741455078, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING min( T2.department_name) = 'math'     ", "score": 20.203445434570312, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING max( T2.department_name) = 'math'     ", "score": 20.198143005371094, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING sum( T2.department_name) = 'math'     ", "score": 18.642620086669922, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name = 'math'       ", "score": 18.564010620117188, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "score": 9.548900604248047, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1  GROUP BY T1.course_description HAVING count( T1.course_name) = 'math'     ", "score": 9.103065490722656, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 513, "beams": [{"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 116.0125503540039, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 79.87648010253906, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT max( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 79.87376403808594, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 79.21056365966797, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING count( T1.city) = 'Port Chelsea'     ", "score": 79.12100982666016, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 78.8884506225586, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT sum( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 75.22740936279297, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING avg( T1.city) = 'Port Chelsea'     ", "score": 69.81602478027344, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING max( T1.city) = 'Port Chelsea'     ", "score": 65.04402923583984, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING min( T1.city) = 'Port Chelsea'     ", "score": 64.5121078491211, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING sum( T1.city) = 'Port Chelsea'     ", "score": 62.91631317138672, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT max( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "score": 43.897918701171875, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "score": 43.86647033691406, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "score": 42.82183837890625, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "score": 42.73658752441406, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 514, "beams": [{"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 106.51285552978516, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 70.45429992675781, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 69.91506958007812, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 68.84098815917969, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT max( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 68.82003784179688, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING count( T1.city) = 'Port Chelsea'     ", "score": 67.67918395996094, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT sum( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 64.72474670410156, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING avg( T1.city) = 'Port Chelsea'     ", "score": 60.59491729736328, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING max( T1.city) = 'Port Chelsea'     ", "score": 55.53755187988281, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING min( T1.city) = 'Port Chelsea'     ", "score": 55.340911865234375, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING sum( T1.city) = 'Port Chelsea'     ", "score": 54.293731689453125, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT count( *) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "score": 37.74751281738281, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "score": 31.7535400390625, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "score": 30.962799072265625, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "score": 29.966995239257812, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 517, "beams": [{"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Degree_Programs AS T1        ", "score": -38.80914306640625, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -40.80115509033203, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -46.680023193359375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Departments AS T1        ", "score": -48.133941650390625, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -51.21729278564453, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -57.48955535888672, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_name) FROM Departments AS T1        ", "score": -65.3556137084961, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Departments AS T1        ", "score": -82.47625732421875, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Departments AS T1        ", "score": -88.63316345214844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT T1.department_name FROM Departments AS T1        ", "score": -90.25724792480469, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_description) FROM Departments AS T1        ", "score": -93.70133972167969, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Departments AS T1        ", "score": -93.73423767089844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.department_id) FROM Departments AS T1        ", "score": -97.5531005859375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_name) FROM Departments AS T1        ", "score": -101.79396057128906, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 518, "beams": [{"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Degree_Programs AS T1        ", "score": -37.409236907958984, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -40.48644256591797, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -44.634613037109375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -49.26527786254883, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "score": -57.165122985839844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Departments AS T1        ", "score": -59.68695068359375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_name) FROM Departments AS T1        ", "score": -68.10813903808594, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT T1.department_name FROM Departments AS T1        ", "score": -90.23854064941406, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_description) FROM Departments AS T1        ", "score": -94.18937683105469, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Departments AS T1        ", "score": -96.30894470214844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Departments AS T1        ", "score": -99.16911315917969, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_name) FROM Departments AS T1        ", "score": -100.36446380615234, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_name) FROM Departments AS T1        ", "score": -102.3823471069336, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Departments AS T1        ", "score": -102.90472412109375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 519, "beams": [{"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_name) FROM Courses AS T1        ", "score": -4.6491513785440475e-06, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "score": -12.664227485656738, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "score": -13.46321964263916, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1        ", "score": -35.54861068725586, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.course_name) FROM Courses AS T1        ", "score": -36.743263244628906, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.course_name) FROM Courses AS T1        ", "score": -44.69029998779297, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "score": -47.71698760986328, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT T1.degree_summary_name FROM Degree_Programs AS T1        ", "score": -48.0876350402832, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.course_name) FROM Courses AS T1        ", "score": -48.5797004699707, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "score": -54.04024124145508, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "score": -54.72991180419922, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.course_name) FROM Courses AS T1        ", "score": -56.46758270263672, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "score": -58.04526901245117, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Courses AS T1        ", "score": -60.66954040527344, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_description) FROM Degree_Programs AS T1        ", "score": -61.500328063964844, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 520, "beams": [{"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "score": -0.38472071290016174, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Courses AS T1        ", "score": -1.141438364982605, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Student_Enrolment_Courses AS T1        ", "score": -32.44511032104492, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT T1.degree_program_id FROM Degree_Programs AS T1        ", "score": -35.134864807128906, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT T1.course_id FROM Courses AS T1        ", "score": -35.487091064453125, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Sections AS T1        ", "score": -35.72353744506836, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "score": -36.150474548339844, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.course_id) FROM Courses AS T1        ", "score": -39.4023551940918, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Degree_Programs AS T1        ", "score": -42.13630676269531, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "score": -44.49812698364258, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.course_id) FROM Courses AS T1        ", "score": -48.309120178222656, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_description) FROM Degree_Programs AS T1        ", "score": -48.931304931640625, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "score": -49.427734375, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "score": -52.010398864746094, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.course_id) FROM Courses AS T1        ", "score": -53.45098114013672, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 523, "beams": [{"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, T1.section_description FROM Sections AS T1        ", "score": 0.0, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT max( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -37.45583724975586, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, avg( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -41.50774002075195, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, max( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -43.13279724121094, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT avg( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -43.94960021972656, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT sum( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -44.661766052246094, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT min( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -45.614036560058594, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, count( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -46.048397064208984, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT count( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -46.8033332824707, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, sum( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -49.048702239990234, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, min( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -51.90076446533203, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, T2.course_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -59.979736328125, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT max( T1.section_name), avg( T1.section_description) FROM Sections AS T1        ", "score": -78.89823150634766, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT max( T1.section_name), max( T1.section_description) FROM Sections AS T1        ", "score": -80.49346923828125, "correct_code": "SELECT section_name ,  section_description FROM Sections"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 524, "beams": [{"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, T1.section_description FROM Sections AS T1        ", "score": 0.0, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT max( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -37.44873046875, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, avg( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -41.60150146484375, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, max( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -43.31226348876953, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT avg( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -43.916114807128906, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT sum( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -45.07600784301758, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT min( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -46.08039093017578, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, count( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -46.359622955322266, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT count( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "score": -46.912841796875, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, sum( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -49.06129455566406, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, min( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "score": -51.893760681152344, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, T2.course_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -56.86846923828125, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT max( T1.section_name), avg( T1.section_description) FROM Sections AS T1        ", "score": -78.98599243164062, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT max( T1.section_name), max( T1.section_description) FROM Sections AS T1        ", "score": -80.68397521972656, "correct_code": "SELECT section_name ,  section_description FROM Sections"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 532, "beams": [{"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%None%'       ", "score": -30.071887969970703, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%Ward%'       ", "score": -31.599180221557617, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%1%'       ", "score": -33.72646713256836, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_description like '%None%'       ", "score": -44.204647064208984, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.other_details like '%None%'       ", "score": -44.69626235961914, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T2 ON T14.student_id = T2.student_id WHERE T2.last_name like '%None%'       ", "score": -45.23176956176758, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T2 ON T14.student_id = T2.student_id WHERE T2.last_name like '%1%'       ", "score": -45.39015579223633, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_description like '%Ward%'       ", "score": -46.42713165283203, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.other_details like '%Ward%'       ", "score": -46.593231201171875, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_description like '%1%'       ", "score": -46.87739944458008, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T15 ON T14.student_id = T15.student_id JOIN Addresses AS T2 ON T15.permanent_address_id = T2.address_id WHERE T2.other_address_details like '%None%'       ", "score": -46.908355712890625, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T15 ON T14.student_id = T15.student_id JOIN Addresses AS T2 ON T15.permanent_address_id = T2.address_id WHERE T2.other_address_details like '%Ward%'       ", "score": -47.12907791137695, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.other_details like '%1%'       ", "score": -47.903228759765625, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T2 ON T14.student_id = T2.student_id WHERE T2.last_name like '%Ward%'       ", "score": -47.97945785522461, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T15 ON T14.student_id = T15.student_id JOIN Addresses AS T2 ON T15.permanent_address_id = T2.address_id WHERE T2.other_address_details like '%1%'       ", "score": -50.277381896972656, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 535, "beams": [{"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor'       ", "score": 58.91303634643555, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelor'       ", "score": 47.26639938354492, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelor       ", "score": 30.74207305908203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( T1.last_name) FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 22.371463775634766, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.course_id = Bachelor       ", "score": 22.10610580444336, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 21.585376739501953, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id  GROUP BY T1.student_id HAVING count( T2.course_name) = 'Bachelor'     ", "score": 20.693843841552734, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT count( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 19.930652618408203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, min( T1.last_name) FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 19.41756820678711, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT min( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 18.94301986694336, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT avg( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 18.88274383544922, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT max( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 17.62871551513672, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, sum( T1.last_name) FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 16.119022369384766, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 15.311756134033203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT sum( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 15.010063171386719, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 536, "beams": [{"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor'       ", "score": 54.744056701660156, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelor'       ", "score": 53.10844421386719, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelor       ", "score": 49.5078239440918, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelors'       ", "score": 49.16117858886719, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.department_id = Bachelor       ", "score": 48.98692321777344, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelors       ", "score": 47.16643142700195, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelors'       ", "score": 47.13935852050781, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.department_id = Bachelors       ", "score": 42.72450256347656, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.course_id = Bachelor       ", "score": 37.34998321533203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.course_id = Bachelors       ", "score": 32.50373840332031, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id WHERE T2.department_name = 'Bachelor'       ", "score": 26.327136993408203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.student_course_id = Bachelor       ", "score": 22.93859100341797, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 21.421607971191406, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id WHERE T2.department_name = 'Bachelors'       ", "score": 20.841388702392578, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "score": 20.512187957763672, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 545, "beams": [{"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": 0.0, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -18.15811538696289, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1        ", "score": -36.68848419189453, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT max( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -39.05623245239258, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT count( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -40.347312927246094, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id        ", "score": -42.77448654174805, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT min( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -43.02294921875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT avg( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -43.507301330566406, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -43.945167541503906, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_id in (SELECT count( T22.course_id) FROM Student_Enrolment_Courses AS T22        )       ", "score": -44.05652618408203, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -44.37189483642578, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_id in (SELECT avg( T22.course_id) FROM Student_Enrolment_Courses AS T22        )       ", "score": -45.66518020629883, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_id in (SELECT max( T22.course_id) FROM Student_Enrolment_Courses AS T22        )       ", "score": -46.07390594482422, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT sum( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -46.241424560546875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -46.61151123046875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 546, "beams": [{"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T4 ON T2.student_enrolment_id = T4.student_enrolment_id JOIN Semesters AS T3 ON T4.semester_id = T3.semester_id        ", "score": -0.5431610345840454, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T4 ON T2.student_enrolment_id = T4.student_enrolment_id JOIN Semesters AS T3 ON T4.semester_id = T3.semester_id JOIN Sections AS T5 ON T1.course_id = T5.course_id        ", "score": -1.546286702156067, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id        ", "score": -2.225161552429199, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "score": -3.0654637813568115, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id        ", "score": -3.195866584777832, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T4 ON T2.student_enrolment_id = T4.student_enrolment_id JOIN Semesters AS T3 ON T4.semester_id = T3.semester_id        ", "score": -4.782853126525879, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Sections AS T4 ON T1.course_id = T4.course_id        ", "score": -6.6511054039001465, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Students AS T4 ON T3.student_id = T4.student_id        ", "score": -8.565353393554688, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id        ", "score": -8.906746864318848, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id JOIN Sections AS T5 ON T1.course_id = T5.course_id        ", "score": -8.94943618774414, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T14 ON T2.student_enrolment_id = T14.student_enrolment_id JOIN Semesters AS T3 ON T14.semester_id = T3.semester_id        ", "score": -9.248092651367188, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id        ", "score": -9.3211669921875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Degree_Programs AS T4 ON T3.degree_program_id = T4.degree_program_id        ", "score": -10.17878532409668, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id        ", "score": -10.435447692871094, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id        ", "score": -11.142423629760742, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 553, "beams": [{"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 147.57095336914062, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT max( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 110.39601135253906, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = '1'       ", "score": 108.0587158203125, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT avg( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 107.30755615234375, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING max( T1.first_name) = 'Timmothy'     ", "score": 107.07379150390625, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT sum( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 105.54878997802734, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING avg( T1.first_name) = 'Timmothy'     ", "score": 105.41316986083984, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING avg( T1.last_name) = 'Ward'     ", "score": 105.34474182128906, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT min( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 105.25064086914062, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT count( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 104.97522735595703, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING sum( T1.first_name) = 'Timmothy'     ", "score": 104.35274505615234, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING count( T1.last_name) = 'Ward'     ", "score": 104.17252349853516, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING count( T1.first_name) = 'Timmothy'     ", "score": 103.96952819824219, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING max( T1.last_name) = 'Ward'     ", "score": 101.75765228271484, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING sum( T1.last_name) = 'Ward'     ", "score": 101.19623565673828, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 554, "beams": [{"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 146.91249084472656, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT max( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 109.01042175292969, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING max( T1.first_name) = 'Timmothy'     ", "score": 109.00372314453125, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING avg( T1.first_name) = 'Timmothy'     ", "score": 107.7782974243164, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT avg( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 106.17816162109375, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING avg( T1.last_name) = 'Ward'     ", "score": 105.93362426757812, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING sum( T1.first_name) = 'Timmothy'     ", "score": 105.43508911132812, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING count( T1.first_name) = 'Timmothy'     ", "score": 104.755126953125, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING count( T1.last_name) = 'Ward'     ", "score": 103.68737030029297, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT sum( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 102.88072204589844, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT count( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 102.54646301269531, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING max( T1.last_name) = 'Ward'     ", "score": 101.58627319335938, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT min( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "score": 100.97943115234375, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING sum( T1.last_name) = 'Ward'     ", "score": 100.5923080444336, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING min( T1.first_name) = 'Timmothy'     ", "score": 99.6280746459961, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 555, "beams": [{"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "score": -29.983829498291016, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.middle_name ASC LIMIT 1    ", "score": -32.12204360961914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "score": -32.53156280517578, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -36.05574035644531, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -36.115901947021484, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.first_name, T1.middle_name, T1.last_name  ORDER BY count( *) ASC LIMIT 1    ", "score": -36.92462158203125, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -39.13499069213867, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, min( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -40.9398078918457, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, max( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -43.367557525634766, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( *) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -43.63102722167969, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, count( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -43.69539260864258, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, avg( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -44.97572326660156, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, sum( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -44.97781753540039, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT count( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -47.6844596862793, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 556, "beams": [{"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -2.9802276912960224e-06, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.date_first_registered, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -12.732287406921387, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -28.537857055664062, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -31.921768188476562, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, count( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -38.17667770385742, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.date_first_registered, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -38.84455871582031, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, min( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -39.00994873046875, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, min( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -39.020816802978516, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -40.185455322265625, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.first_name, T1.middle_name, T1.last_name  ORDER BY count( *) ASC LIMIT 1    ", "score": -40.404727935791016, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "score": -41.370479583740234, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "score": -42.288944244384766, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT min( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -42.48352813720703, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, sum( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -42.60298538208008, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.date_first_registered, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -42.82753372192383, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 557, "beams": [{"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "score": -0.030459150671958923, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.middle_name ASC LIMIT 1    ", "score": -3.50659441947937, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id    ORDER BY T2.department_name ASC LIMIT 1    ", "score": -14.026629447937012, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id    ORDER BY T2.department_id ASC LIMIT 1    ", "score": -15.17868423461914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "score": -16.714351654052734, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Semesters AS T2 ON T13.semester_id = T2.semester_id    ORDER BY T2.semester_name ASC LIMIT 1    ", "score": -17.550945281982422, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_left ASC LIMIT 1    ", "score": -20.75973892211914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "score": -20.782291412353516, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -21.536102294921875, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id    ORDER BY T2.department_id ASC LIMIT 1    ", "score": -22.929397583007812, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.student_enrolment_id ASC LIMIT 1    ", "score": -24.043987274169922, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.degree_program_id ASC LIMIT 1    ", "score": -28.270763397216797, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id    ORDER BY T2.country ASC LIMIT 1    ", "score": -29.379806518554688, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id    ORDER BY T2.degree_summary_name ASC LIMIT 1    ", "score": -30.06378936767578, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.current_address_id ASC LIMIT 1    ", "score": -31.15085220336914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 558, "beams": [{"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "score": -0.0004573014739435166, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.middle_name ASC LIMIT 1    ", "score": -7.692197322845459, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.student_enrolment_id ASC LIMIT 1    ", "score": -13.946981430053711, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "score": -19.059682846069336, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "score": -19.2844295501709, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_left ASC LIMIT 1    ", "score": -21.47804069519043, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "score": -24.632837295532227, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Semesters AS T2 ON T13.semester_id = T2.semester_id    ORDER BY T2.semester_name ASC LIMIT 1    ", "score": -27.122079849243164, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id    ORDER BY T2.department_id ASC LIMIT 1    ", "score": -27.779199600219727, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.last_name ASC LIMIT 1    ", "score": -28.10067367553711, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id    ORDER BY T2.country ASC LIMIT 1    ", "score": -29.737924575805664, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id    ORDER BY T2.department_name ASC LIMIT 1    ", "score": -30.7018985748291, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.last_name ASC LIMIT 1    ", "score": -31.378337860107422, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.semester_id ASC LIMIT 1    ", "score": -33.074188232421875, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.first_name, T1.middle_name, T1.last_name  ORDER BY min( T1.last_name) ASC LIMIT 1    ", "score": -33.17280197143555, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 563, "beams": [{"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1        ", "score": 0.0, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( *) FROM Transcripts AS T1        ", "score": -31.621837615966797, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1        ", "score": -31.950786590576172, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "score": -33.699615478515625, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1        ", "score": -33.97691345214844, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "score": -35.35930633544922, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1        ", "score": -35.68402099609375, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1        ", "score": -39.55243682861328, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT avg( T1.date_left) FROM Students AS T1        ", "score": -77.70923614501953, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.date_left) FROM Students AS T1        ", "score": -84.64848327636719, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.date_first_registered) FROM Students AS T1        ", "score": -91.28064727783203, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcript_Contents AS T1        ", "score": -91.51529693603516, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcripts AS T1        ", "score": -92.02423858642578, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT T1.date_left FROM Students AS T1        ", "score": -95.45716857910156, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.ssn) FROM Students AS T1        ", "score": -102.45897674560547, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 564, "beams": [{"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1        ", "score": 0.0, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( *) FROM Addresses AS T1        ", "score": -36.42791748046875, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1        ", "score": -37.4434928894043, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1        ", "score": -38.11240005493164, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1        ", "score": -39.09416961669922, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "score": -44.18386459350586, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1        ", "score": -47.444305419921875, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "score": -47.6102180480957, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcripts AS T1        ", "score": -100.36473083496094, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcript_Contents AS T1        ", "score": -105.99723052978516, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.transcript_id) FROM Transcripts AS T1        ", "score": -107.03815460205078, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.transcript_id) FROM Transcript_Contents AS T1        ", "score": -111.30208587646484, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT T1.date_left FROM Students AS T1        ", "score": -112.4129638671875, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.date_left) FROM Students AS T1        ", "score": -112.80783081054688, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT T1.transcript_id FROM Transcripts AS T1        ", "score": -117.35896301269531, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 565, "beams": [{"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -2.7656173188006505e-05, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.other_student_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -12.136261940002441, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.other_address_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -25.83138084411621, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.first_name FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -30.05405044555664, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.date_first_registered FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -31.219261169433594, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.date_left FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -38.180259704589844, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, avg( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -40.1622200012207, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, max( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -40.36466979980469, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, count( T1.other_details) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -40.399864196777344, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, count( *) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -40.73014831542969, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.date_first_registered ASC LIMIT 1    ", "score": -42.947364807128906, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.date_first_registered, T2.transcript_date FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "score": -43.934730529785156, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1  GROUP BY T1.transcript_date, T1.other_details  ORDER BY count( *) ASC LIMIT 1    ", "score": -44.08654022216797, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, max( T1.other_details) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -44.93545913696289, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, avg( T1.other_details) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -45.41171646118164, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 566, "beams": [{"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, max( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -28.890501022338867, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.date_first_registered, T2.transcript_date FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "score": -30.341686248779297, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT max( T1.transcript_date), T1.other_details FROM Transcripts AS T1  GROUP BY T1.other_details  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -30.498802185058594, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T2.other_student_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -31.727174758911133, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.date_left, T2.transcript_date FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "score": -31.903799057006836, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, min( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -32.52178192138672, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, avg( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -34.622276306152344, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, sum( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -35.422035217285156, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T2.other_address_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -36.811607360839844, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, count( *) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -37.5369987487793, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.other_details, T1.transcript_date FROM Transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -38.765724182128906, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT min( T1.transcript_date), T1.other_details FROM Transcripts AS T1  GROUP BY T1.other_details  ORDER BY T1.transcript_date ASC LIMIT 1    ", "score": -38.78168869018555, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.date_first_registered, T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "score": -39.23395919799805, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1  GROUP BY T1.transcript_date, T1.other_details  ORDER BY sum( T1.transcript_date) ASC LIMIT 1    ", "score": -47.24226760864258, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 567, "beams": [{"orig_question": "How many transcripts are released?", "inferred_code": "SELECT count( *) FROM Transcripts AS T1        ", "score": -0.1868520975112915, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "score": -1.7694097757339478, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Transcripts AS T1        ", "score": -28.0372257232666, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Transcript_Contents AS T1        ", "score": -29.40458869934082, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "score": -32.915653228759766, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT min( *) FROM Transcripts AS T1        ", "score": -35.44198226928711, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT min( *) FROM Transcript_Contents AS T1        ", "score": -37.117042541503906, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT sum( *) FROM Transcripts AS T1        ", "score": -42.545814514160156, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT sum( *) FROM Transcript_Contents AS T1        ", "score": -44.28974151611328, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT avg( *) FROM Transcripts AS T1        ", "score": -48.394859313964844, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT T1.transcript_id FROM Transcript_Contents AS T1        ", "score": -48.59202194213867, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1        ", "score": -48.760704040527344, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT max( *) FROM Transcripts AS T1        ", "score": -49.347904205322266, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1        ", "score": -49.395484924316406, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT avg( *) FROM Transcript_Contents AS T1        ", "score": -50.1115608215332, "correct_code": "SELECT count(*) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 568, "beams": [{"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT count( *) FROM Transcripts AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "score": -27.071054458618164, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Transcripts AS T1        ", "score": -29.703969955444336, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT min( *) FROM Transcripts AS T1        ", "score": -37.664573669433594, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT avg( *) FROM Transcripts AS T1        ", "score": -43.23838424682617, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT sum( *) FROM Transcripts AS T1        ", "score": -43.45997619628906, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT max( *) FROM Transcripts AS T1        ", "score": -54.57928466796875, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Transcript_Contents AS T1        ", "score": -55.45973205566406, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT min( *) FROM Transcript_Contents AS T1        ", "score": -64.9696273803711, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT T1.transcript_id FROM Transcripts AS T1        ", "score": -69.65068817138672, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT avg( *) FROM Transcript_Contents AS T1        ", "score": -70.41057586669922, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "score": -70.57489776611328, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT sum( *) FROM Transcript_Contents AS T1        ", "score": -70.83724212646484, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT T1.transcript_id FROM Transcript_Contents AS T1        ", "score": -81.08992004394531, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT max( *) FROM Transcript_Contents AS T1        ", "score": -81.6239013671875, "correct_code": "SELECT count(*) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 569, "beams": [{"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.date_left DESC LIMIT 1    ", "score": -32.508094787597656, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.date_left FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date DESC LIMIT 1    ", "score": -33.268348693847656, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -34.497257232666016, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -44.884544372558594, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -48.2226676940918, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY sum( T1.transcript_date) DESC LIMIT 1    ", "score": -49.340232849121094, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY count( T1.transcript_date) DESC LIMIT 1    ", "score": -49.4705696105957, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY max( T1.transcript_date) DESC LIMIT 1    ", "score": -49.59482192993164, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY avg( T1.transcript_date) DESC LIMIT 1    ", "score": -50.2376823425293, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -50.383827209472656, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.last_name DESC LIMIT 1    ", "score": -52.16709899902344, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -52.808082580566406, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY min( T1.transcript_date) DESC LIMIT 1    ", "score": -57.45909118652344, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date DESC LIMIT 1    ", "score": -64.26689147949219, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 570, "beams": [{"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -27.052223205566406, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -39.130516052246094, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -41.89841842651367, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.last_name DESC LIMIT 1    ", "score": -43.612823486328125, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -45.838993072509766, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY count( T1.transcript_date) DESC LIMIT 1    ", "score": -46.3491325378418, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "score": -46.76423263549805, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY max( T1.transcript_date) DESC LIMIT 1    ", "score": -46.76585388183594, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY sum( T1.transcript_date) DESC LIMIT 1    ", "score": -48.302757263183594, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY avg( T1.transcript_date) DESC LIMIT 1    ", "score": -48.97528076171875, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.date_left DESC LIMIT 1    ", "score": -53.284366607666016, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY min( T1.transcript_date) DESC LIMIT 1    ", "score": -53.7242431640625, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T2.country DESC LIMIT 1    ", "score": -61.183258056640625, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T2.state_province_county DESC LIMIT 1    ", "score": -64.98302459716797, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 577, "beams": [{"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.address_id) FROM Addresses AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.address_id) FROM Addresses AS T1        ", "score": -38.17841339111328, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1        ", "score": -38.36791229248047, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.current_address_id) FROM Students AS T1        ", "score": -43.37584686279297, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.permanent_address_id) FROM Students AS T1        ", "score": -45.54999542236328, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.address_id) FROM Addresses AS T1        ", "score": -45.953243255615234, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.address_id) FROM Addresses AS T1        ", "score": -49.74549865722656, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.address_id) FROM Addresses AS T1        ", "score": -59.284175872802734, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.other_address_details) FROM Addresses AS T1        ", "score": -63.75651550292969, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.city) FROM Addresses AS T1        ", "score": -65.27503967285156, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.ssn) FROM Students AS T1        ", "score": -73.58222198486328, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.email_address) FROM Students AS T1        ", "score": -77.12630462646484, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT T1.current_address_id FROM Students AS T1        ", "score": -80.31697082519531, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.current_address_id) FROM Students AS T1        ", "score": -81.62686920166016, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT T1.city FROM Addresses AS T1        ", "score": -82.0282974243164, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 578, "beams": [{"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1        ", "score": -0.0039817458018660545, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -5.73002815246582, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1        ", "score": -7.230924129486084, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -12.692634582519531, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.email_address FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id        ", "score": -20.027751922607422, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -23.804702758789062, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.email_address FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id        ", "score": -25.536609649658203, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -25.544858932495117, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.address_id) FROM Addresses AS T1        ", "score": -29.834064483642578, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -30.304899215698242, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -31.00358772277832, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -31.041105270385742, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -31.09461212158203, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.address_id) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "score": -35.26429748535156, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1        ", "score": -35.70566940307617, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 587, "beams": [{"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 60.507442474365234, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 26.259063720703125, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 24.31732177734375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Directed_by FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 24.023921966552734, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT min( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 22.79855728149414, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 21.725784301757812, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT sum( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 19.8123779296875, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING count( T1.Directed_by) = 'Ben Jones'     ", "score": 18.088058471679688, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING avg( T1.Directed_by) = 'Ben Jones'     ", "score": 14.4075927734375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Written_by FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 13.663318634033203, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "score": 11.11761474609375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING max( T1.Directed_by) = 'Ben Jones'     ", "score": 10.871856689453125, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING sum( T1.Directed_by) = 'Ben Jones'     ", "score": 9.94839859008789, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING min( T1.Directed_by) = 'Ben Jones'     ", "score": 7.784797668457031, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 3.9216651916503906, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 588, "beams": [{"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "score": 52.53392791748047, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 36.68903732299805, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "score": 16.63727569580078, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "score": 15.286888122558594, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "score": 14.063835144042969, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "score": 12.731143951416016, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Directed_by) = 'Ben Jones'     ", "score": 11.73263931274414, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "score": 11.164955139160156, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Directed_by) = 'Ben Jones'     ", "score": 10.807758331298828, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": 10.384613037109375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Directed_by) = 'Ben Jones'     ", "score": 6.503589630126953, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Directed_by) = 'Ben Jones'     ", "score": 4.8504486083984375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Directed_by) = 'Ben Jones'     ", "score": 3.435283660888672, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "score": -3.0448684692382812, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING count( T1.Directed_by) = 'Ben Jones'     ", "score": -4.5431365966796875, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 589, "beams": [{"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 51.342166900634766, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT min( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 11.164531707763672, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT T1.Written_by FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 10.98177719116211, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT sum( T1.Title) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 10.260211944580078, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING count( T1.Written_by) = 'Joseph Kuhr'     ", "score": 9.308391571044922, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 7.389213562011719, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT avg( T1.Written_by) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 5.682037353515625, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING avg( T1.Written_by) = 'Joseph Kuhr'     ", "score": 5.580657958984375, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING max( T1.Written_by) = 'Joseph Kuhr'     ", "score": 4.542591094970703, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT sum( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 4.416988372802734, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING sum( T1.Written_by) = 'Joseph Kuhr'     ", "score": 3.8612518310546875, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 3.3445396423339844, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT min( T1.Title) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 1.5475845336914062, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING min( T1.Written_by) = 'Joseph Kuhr'     ", "score": 1.0383415222167969, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT sum( T1.Written_by) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 0.9256668090820312, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 590, "beams": [{"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 40.35041046142578, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 13.873275756835938, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT T1.Written_by FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 8.288986206054688, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT min( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 3.039318084716797, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT avg( T1.Written_by) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 2.4764556884765625, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT sum( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": 0.6285781860351562, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING count( T1.Written_by) = 'Joseph Kuhr'     ", "score": -1.5805015563964844, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT avg( T1.id) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": -2.9713363647460938, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING avg( T1.Written_by) = 'Joseph Kuhr'     ", "score": -3.3619308471679688, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT T1.id FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": -3.8787269592285156, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING max( T1.Written_by) = 'Joseph Kuhr'     ", "score": -6.13629150390625, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING sum( T1.Written_by) = 'Joseph Kuhr'     ", "score": -6.720485687255859, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT sum( T1.id) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": -8.123390197753906, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING min( T1.Written_by) = 'Joseph Kuhr'     ", "score": -10.360790252685547, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT * FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "score": -12.728374481201172, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 597, "beams": [{"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -0.08198173344135284, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "score": -2.7610418796539307, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT T1.series_name, count(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "score": -4.167867660522461, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT T1.series_name, T1.Content FROM TV_Channel AS T1        ", "score": -16.040800094604492, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), sum(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -25.31552505493164, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), avg(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -26.00261688232422, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -26.34022331237793, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -26.922382354736328, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -28.87697982788086, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "score": -30.530742645263672, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), min(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -30.666650772094727, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -30.94147300720215, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT T1.series_name, sum(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "score": -31.562273025512695, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "score": -32.30095672607422, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), max(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -32.604434967041016, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 598, "beams": [{"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, T1.Content FROM TV_Channel AS T1        ", "score": -0.062142737209796906, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, count(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "score": -2.8150227069854736, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "score": -7.968380928039551, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.Title, T2.Content FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id        ", "score": -13.634917259216309, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.Title, count(DISTINCT T2.Content) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Title      ", "score": -14.89194393157959, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Title), T2.Content FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T2.Content      ", "score": -17.457597732543945, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "score": -22.351337432861328, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "score": -23.661340713500977, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "score": -23.90488052368164, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, sum(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "score": -25.143505096435547, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, avg(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "score": -25.590126037597656, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "score": -26.44192886352539, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Title), count(DISTINCT T2.Content) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id        ", "score": -27.788021087646484, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, min(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "score": -29.24485969543457, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, max(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "score": -29.728839874267578, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 599, "beams": [{"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 86.06129455566406, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 81.23334503173828, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 52.59690475463867, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 50.49092102050781, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 50.317970275878906, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 47.846588134765625, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 46.90046310424805, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 46.79286575317383, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 45.60931396484375, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 45.5147819519043, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel = 'Sky Radio'       ", "score": 43.818634033203125, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'TV Channel'       ", "score": 43.25439453125, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 42.07170104980469, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'Sky Radio'     ", "score": 39.589195251464844, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'Sky Radio'     ", "score": 36.01688766479492, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 600, "beams": [{"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 101.24468231201172, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 67.29685974121094, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 64.68550872802734, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 64.29251098632812, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT avg( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 62.39850616455078, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 62.14299011230469, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT min( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 59.39311981201172, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING avg( T1.series_name) = 'Sky Radio'     ", "score": 57.14207458496094, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING max( T1.series_name) = 'Sky Radio'     ", "score": 56.123313903808594, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING sum( T1.series_name) = 'Sky Radio'     ", "score": 53.4625129699707, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING min( T1.series_name) = 'Sky Radio'     ", "score": 50.72414779663086, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 28.12713623046875, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 25.595130920410156, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 24.906631469726562, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT avg( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 23.100013732910156, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 601, "beams": [{"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 72.76737976074219, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 68.75825500488281, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.Package_Option = 'Sky Radio'       ", "score": 64.07032012939453, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 38.53974914550781, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 36.807777404785156, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 34.65824508666992, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 34.06713104248047, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel = 'Sky Radio'       ", "score": 34.00386047363281, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 33.137115478515625, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 32.81192398071289, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "score": 29.926597595214844, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'TV Channel'       ", "score": 29.75802993774414, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'Sky Radio'     ", "score": 28.408878326416016, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'Sky Radio'     ", "score": 22.56473159790039, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'TV Channel'       ", "score": 21.237600326538086, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 602, "beams": [{"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 81.67386627197266, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 47.149070739746094, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 42.73799514770508, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT sum( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 41.56062698364258, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 39.69434356689453, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT min( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 39.35258483886719, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT avg( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "score": 37.392147064208984, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING avg( T1.series_name) = 'Sky Radio'     ", "score": 32.385231018066406, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING max( T1.series_name) = 'Sky Radio'     ", "score": 31.188369750976562, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING sum( T1.series_name) = 'Sky Radio'     ", "score": 30.533130645751953, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING min( T1.series_name) = 'Sky Radio'     ", "score": 26.182655334472656, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 5.3342437744140625, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'TV'       ", "score": 4.518277645111084, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'TV Channels'       ", "score": 3.2659850120544434, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "score": 0.6072463989257812, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 603, "beams": [{"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channel'       ", "score": 28.259044647216797, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'English'       ", "score": 12.566057205200195, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV'       ", "score": -2.6749186515808105, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "score": -6.702276229858398, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT sum( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "score": -7.495395660400391, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "score": -7.83880615234375, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT avg( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "score": -13.070402145385742, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING count( T1.Language) = 'TV Channel'     ", "score": -16.12856674194336, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING min( T1.Language) = 'TV Channel'     ", "score": -19.082916259765625, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING avg( T1.Language) = 'TV Channel'     ", "score": -20.385862350463867, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT max( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "score": -21.248939514160156, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT T1.Language FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channel'       ", "score": -21.907596588134766, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT T1.id FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channel'       ", "score": -23.867347717285156, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING sum( T1.Language) = 'TV Channel'     ", "score": -24.8249454498291, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -25.100845336914062, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 604, "beams": [{"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'English'       ", "score": 2.3395605087280273, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV'       ", "score": -5.034503936767578, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channels'       ", "score": -30.75204849243164, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -34.474365234375, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -35.00872802734375, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT sum( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -35.56769561767578, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT sum( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -36.07670593261719, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -37.363311767578125, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -37.45768356323242, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT T1.Language FROM TV_Channel AS T1 WHERE T1.Language = 'English'       ", "score": -37.694549560546875, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT avg( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -38.35396194458008, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT avg( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "score": -39.156578063964844, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING avg( T1.Language) = 'English'     ", "score": -40.35838317871094, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV'       ", "score": -40.538543701171875, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV'       ", "score": -40.96720886230469, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 609, "beams": [{"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 120.57738494873047, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 82.51820373535156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Fall of the Blue Beetle!'       ", "score": 82.4697494506836, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'The Rise of the Blue Beetle!'     ", "score": 80.65332794189453, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.Channel FROM Cartoon AS T1 WHERE T1.Title = 'The Rise of the Blue Beetle!'       ", "score": 80.0125732421875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 77.35986328125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 76.81510925292969, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 73.7374267578125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 72.87466430664062, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'The Rise of the Blue Beetle!'     ", "score": 71.42882537841797, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Title) = 'The Rise of the Blue Beetle!'     ", "score": 70.32791137695312, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Title) = 'The Rise of the Blue Beetle!'     ", "score": 69.99232482910156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 69.614990234375, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Blue Beetle'       ", "score": 69.32843017578125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Title) = 'The Rise of the Blue Beetle!'     ", "score": 64.09445190429688, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 610, "beams": [{"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 114.94400787353516, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "score": 108.92156219482422, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 76.82552337646484, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 74.5948257446289, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'The Rise of the Blue Beetle!'     ", "score": 74.17619323730469, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 71.94926452636719, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 71.33119201660156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "score": 70.77354431152344, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Blue Beetle'       ", "score": 69.48255920410156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "score": 68.54401397705078, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'The Rise of the Blue Beetle'     ", "score": 68.49681091308594, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "score": 68.15330505371094, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'The Rise of the Blue Beetle!'     ", "score": 66.01264190673828, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "score": 65.92567443847656, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "score": 65.28787231445312, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 611, "beams": [{"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'Sky Radio'       ", "score": 67.11114501953125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio' and T2.series_name = 'Sky Radio'       ", "score": 62.81636047363281, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'TV Channel'       ", "score": 60.40196990966797, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T2.series_name = 'Sky Radio'       ", "score": 59.930686950683594, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T2.series_name = 'TV Channel'       ", "score": 56.80158996582031, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio' and T2.series_name = 'TV Channel'       ", "score": 56.1697998046875, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV' and T2.series_name = 'Sky Radio'       ", "score": 51.27693557739258, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV' and T2.series_name = 'TV Channel'       ", "score": 47.250999450683594, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T1.Channel = 'Sky Radio'       ", "score": 39.138343811035156, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T1.Channel = 'Sky Radio'       ", "score": 37.82427215576172, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'TV'       ", "score": 35.20694351196289, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio' and T1.Channel = 'Sky Radio'       ", "score": 33.35734939575195, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'Sky Radio'       ", "score": 30.839683532714844, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'Sky Radio'       ", "score": 29.778059005737305, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T1.Channel = 'TV Channel'       ", "score": 29.641521453857422, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 612, "beams": [{"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 92.56351470947266, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 68.76251220703125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 55.76446533203125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 54.4463996887207, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 53.16121292114258, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 52.635772705078125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 50.961055755615234, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "score": 44.405433654785156, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING avg( T2.series_name) = 'Sky Radio'     ", "score": 43.275177001953125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING max( T2.series_name) = 'Sky Radio'     ", "score": 40.27958297729492, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING min( T2.series_name) = 'Sky Radio'     ", "score": 38.088008880615234, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING sum( T2.series_name) = 'Sky Radio'     ", "score": 34.53688430786133, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 31.99492645263672, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 30.748111724853516, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 29.454143524169922, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 617, "beams": [{"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "score": 0.0, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), sum( T1.Share) FROM TV_series AS T1        ", "score": -29.761520385742188, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT sum( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "score": -35.902374267578125, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT count( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "score": -35.93584060668945, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), avg( T1.Share) FROM TV_series AS T1        ", "score": -37.23077392578125, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT avg( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "score": -37.91364288330078, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), T1.Share FROM TV_series AS T1  GROUP BY T1.Share      ", "score": -42.43024826049805, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), max( T1.18_49_Rating_Share) FROM TV_series AS T1        ", "score": -45.51678466796875, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT T1.Share, max( T1.Share) FROM TV_series AS T1  GROUP BY T1.Share      ", "score": -47.41030502319336, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), count( T1.Share) FROM TV_series AS T1        ", "score": -53.9736213684082, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "score": -58.15907669067383, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.18_49_Rating_Share), max( T1.Share) FROM TV_series AS T1        ", "score": -60.50600814819336, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM TV_series AS T1        ", "score": -61.58612060546875, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 618, "beams": [{"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "score": 0.0, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT sum( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "score": -29.98868179321289, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM TV_series AS T1        ", "score": -36.18540954589844, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT avg( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "score": -36.37509536743164, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), count( T1.Share) FROM TV_series AS T1        ", "score": -36.97554397583008, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), avg( T1.Share) FROM TV_series AS T1        ", "score": -39.40604782104492, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT T1.Share, min( T1.Share) FROM TV_series AS T1  GROUP BY T1.Share      ", "score": -41.91545104980469, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT count( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "score": -45.293922424316406, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), T1.Share FROM TV_series AS T1  GROUP BY T1.Share      ", "score": -50.88550567626953, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT T1.series_name, max( T2.Share) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T1.series_name      ", "score": -55.08631896972656, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.18_49_Rating_Share), min( T1.Share) FROM TV_series AS T1        ", "score": -55.6171989440918, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), min( T1.18_49_Rating_Share) FROM TV_series AS T1        ", "score": -63.72013854980469, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.series_name), max( T2.Share) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel        ", "score": -64.77245330810547, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 619, "beams": [{"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 106.94985961914062, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 68.11743927001953, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 62.205039978027344, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 62.01142883300781, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 61.535831451416016, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 58.848777770996094, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 57.69340515136719, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "score": 56.44214630126953, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "score": 53.756935119628906, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "score": 53.00717544555664, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "score": 48.8631591796875, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'Episode'       ", "score": 45.251041412353516, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Air_Date) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 23.28607940673828, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Air_Date) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 17.609107971191406, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'Lifetime'       ", "score": 15.746343612670898, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 620, "beams": [{"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 111.53504943847656, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT max( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 75.07617950439453, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT count( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 72.9065170288086, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT avg( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 71.827392578125, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT min( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 70.30451965332031, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT sum( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 65.86740112304688, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 62.50336456298828, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "score": 58.56953430175781, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "score": 57.52322769165039, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "score": 53.64472961425781, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "score": 50.97547912597656, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "score": 48.833160400390625, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Original_air_date FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 46.82787322998047, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 44.55714416503906, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'Lifetime'       ", "score": 30.497692108154297, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 621, "beams": [{"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 86.520263671875, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 46.158477783203125, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 45.58210372924805, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 45.514801025390625, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 44.81795120239258, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 44.60032653808594, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'Episode'       ", "score": 41.826377868652344, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 39.39822006225586, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "score": 34.06282043457031, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "score": 32.59998321533203, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "score": 29.241989135742188, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "score": 27.586589813232422, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 19.66571807861328, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "score": 9.024307250976562, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'TV'       ", "score": 4.495519161224365, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 622, "beams": [{"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 119.36257934570312, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 77.90302276611328, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 77.47554779052734, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 76.44866943359375, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 76.26602935791016, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "score": 73.04214477539062, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 71.7138671875, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 70.60589599609375, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "score": 68.57296752929688, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "score": 68.43344116210938, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "score": 65.1837158203125, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "score": 63.28968048095703, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel  GROUP BY T1.Weekly_Rank HAVING count( T2.Title) = 'A Love of a Lifetime'     ", "score": 37.33202362060547, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Weekly_Rank) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 36.059913635253906, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Weekly_Rank) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "score": 35.09972381591797, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 623, "beams": [{"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 103.48668670654297, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 64.09500885009766, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 61.835994720458984, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 58.572322845458984, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "score": 57.978939056396484, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 57.11627960205078, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 55.832069396972656, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 53.619422912597656, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Episode) = 'A Love of a Lifetime'     ", "score": 53.22919464111328, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Episode) = 'A Love of a Lifetime'     ", "score": 51.38304901123047, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Episode) = 'A Love of a Lifetime'     ", "score": 50.851593017578125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Episode) = 'A Love of a Lifetime'     ", "score": 46.12807846069336, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'Episode'       ", "score": 41.053306579589844, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT count( T1.Channel) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "score": 24.83612060546875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "score": 20.47374725341797, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 624, "beams": [{"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 119.35983276367188, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 77.26750946044922, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "score": 75.82725524902344, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 73.92497253417969, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Episode) = 'A Love of a Lifetime'     ", "score": 73.7118911743164, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 72.05111694335938, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Episode) = 'A Love of a Lifetime'     ", "score": 71.53857421875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 70.32830810546875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Episode) = 'A Love of a Lifetime'     ", "score": 68.78996276855469, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 67.82112884521484, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Episode) = 'A Love of a Lifetime'     ", "score": 63.01499557495117, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "score": 37.641761779785156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "score": 33.64021301269531, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "score": 30.36888885498047, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "score": 28.406051635742188, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 625, "beams": [{"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 76.46550750732422, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 61.120140075683594, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 43.17952346801758, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 39.5933952331543, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 39.51968002319336, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT min( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 35.496177673339844, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT avg( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 34.81976318359375, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "score": 30.812881469726562, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 27.850196838378906, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING avg( T2.series_name) = 'Sky Radio'     ", "score": 25.625244140625, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING max( T2.series_name) = 'Sky Radio'     ", "score": 25.482563018798828, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING sum( T2.series_name) = 'Sky Radio'     ", "score": 24.88547134399414, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 24.32333755493164, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "score": 24.30893325805664, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING min( T2.series_name) = 'Sky Radio'     ", "score": 22.342811584472656, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 626, "beams": [{"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 108.33183288574219, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 73.69981384277344, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 71.7867431640625, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 68.64987182617188, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 67.74211883544922, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "score": 66.1152572631836, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "score": 60.228599548339844, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING avg( T2.series_name) = 'Sky Radio'     ", "score": 59.63927459716797, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING max( T2.series_name) = 'Sky Radio'     ", "score": 57.726783752441406, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING sum( T2.series_name) = 'Sky Radio'     ", "score": 55.57234573364258, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING min( T2.series_name) = 'Sky Radio'     ", "score": 53.08473587036133, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "score": 25.785842895507812, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "score": 24.033119201660156, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "score": 20.634864807128906, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "score": 19.81146240234375, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 629, "beams": [{"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": 0.0, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Original_air_date DESC LIMIT 1    ", "score": -36.73932647705078, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT max( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -40.01031494140625, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT avg( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -42.371604919433594, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1  GROUP BY T1.Production_code, T1.Channel  ORDER BY count( *) DESC LIMIT 1    ", "score": -42.749393463134766, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, max( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -43.53338623046875, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.id  ORDER BY avg( T2.Air_Date) DESC LIMIT 1    ", "score": -43.65489959716797, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, avg( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -44.29783630371094, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.id  ORDER BY max( T2.Air_Date) DESC LIMIT 1    ", "score": -45.97311782836914, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT min( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -46.50229263305664, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT count( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -47.4137077331543, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, count( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -47.988319396972656, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT sum( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -48.86858367919922, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.id  ORDER BY sum( T2.Air_Date) DESC LIMIT 1    ", "score": -51.64234161376953, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, sum( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -51.81208801269531, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 630, "beams": [{"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Channel DESC LIMIT 1    ", "score": -0.0001134808044298552, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Rating DESC LIMIT 1    ", "score": -9.083945274353027, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Original_air_date DESC LIMIT 1    ", "score": -18.85485076904297, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Air_Date DESC LIMIT 1    ", "score": -20.27547836303711, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Directed_by DESC LIMIT 1    ", "score": -22.75330352783203, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Production_code DESC LIMIT 1    ", "score": -28.778221130371094, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id    ORDER BY T2.Country DESC LIMIT 1    ", "score": -28.950164794921875, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.18_49_Rating_Share DESC LIMIT 1    ", "score": -29.559349060058594, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id    ORDER BY T2.Content DESC LIMIT 1    ", "score": -29.68062973022461, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Written_by DESC LIMIT 1    ", "score": -30.235641479492188, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT max( T1.Production_code), T1.Channel FROM Cartoon AS T1  GROUP BY T1.Channel  ORDER BY T1.Channel DESC LIMIT 1    ", "score": -30.496749877929688, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Share DESC LIMIT 1    ", "score": -31.632644653320312, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Title DESC LIMIT 1    ", "score": -31.88409423828125, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.id DESC LIMIT 1    ", "score": -34.038124084472656, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id    ORDER BY T2.Language DESC LIMIT 1    ", "score": -34.70817565917969, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 631, "beams": [{"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV'       ", "score": 7.054508209228516, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT max( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "score": -31.708072662353516, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.series_name = 'TV'       ", "score": -36.935264587402344, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT avg( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "score": -36.95106887817383, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, max( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "score": -38.086788177490234, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING avg( T1.Hight_definition_TV) = 'TV'     ", "score": -39.64634704589844, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING count( T1.Hight_definition_TV) = 'TV'     ", "score": -39.94047927856445, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, avg( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "score": -40.26260757446289, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT min( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "score": -40.27423095703125, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT sum( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "score": -40.27456283569336, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT count( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "score": -40.35559844970703, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING max( T1.Hight_definition_TV) = 'TV'     ", "score": -40.59458923339844, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, count( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "score": -41.67508316040039, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING sum( T1.Hight_definition_TV) = 'TV'     ", "score": -42.24736785888672, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, sum( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "score": -43.85255432128906, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 632, "beams": [{"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel'       ", "score": 25.614337921142578, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Package_Option = 'TV Channel'       ", "score": 13.93502426147461, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel = 'TV Channel'       ", "score": 8.990089416503906, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV'       ", "score": 4.1558051109313965, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.series_name = 'TV Channel'       ", "score": -5.3209686279296875, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT max( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "score": -8.961732864379883, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'TV Channel'       ", "score": -9.247869491577148, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT avg( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "score": -14.33323860168457, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT count( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "score": -15.460193634033203, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, max( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.Package_Option      ", "score": -16.087324142456055, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING max( T1.Hight_definition_TV) = 'TV Channel'     ", "score": -16.16397476196289, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT min( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "score": -16.220550537109375, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, avg( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.Package_Option      ", "score": -17.8983211517334, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, count( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.Package_Option      ", "score": -17.96507453918457, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING avg( T1.Hight_definition_TV) = 'TV Channel'     ", "score": -18.53489112854004, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 633, "beams": [{"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 67.02054595947266, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 29.808502197265625, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 24.770263671875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 24.063785552978516, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 23.517375946044922, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 22.539588928222656, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "score": 21.933536529541016, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "score": 20.202362060546875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Written_by) = 'Todd Casey'     ", "score": 19.740013122558594, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Written_by) = 'Todd Casey'     ", "score": 16.294071197509766, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Written_by) = 'Todd Casey'     ", "score": 14.666210174560547, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Channel FROM Cartoon AS T1 WHERE T1.Written_by = 'Todd Casey'       ", "score": 4.366233825683594, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": -12.95523452758789, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "score": -14.99658203125, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "score": -16.66314697265625, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 634, "beams": [{"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 53.594966888427734, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 16.551227569580078, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'TV'       ", "score": 13.333272933959961, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "score": 12.547607421875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 12.412822723388672, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "score": 11.340827941894531, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 11.149154663085938, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Written_by) = 'Todd Casey'     ", "score": 10.614044189453125, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 10.583831787109375, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "score": 10.368457794189453, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Written_by) = 'Todd Casey'     ", "score": 8.137199401855469, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Written_by) = 'Todd Casey'     ", "score": 6.318271636962891, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'TV'       ", "score": -23.784177780151367, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "score": -24.623779296875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "score": -25.809520721435547, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 639, "beams": [{"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English'       ", "score": -14.154329299926758, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT max( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "score": -48.78950119018555, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT avg( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "score": -50.92251205444336, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT count( *), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "score": -55.82378005981445, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT sum( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "score": -57.158203125, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING avg( T1.Language) != 'English'     ", "score": -57.36552047729492, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT min( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "score": -57.410621643066406, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Content, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English'       ", "score": -57.61260986328125, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING count( T1.Language) != 'English'     ", "score": -59.61486053466797, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT count( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "score": -60.013267517089844, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, avg( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "score": -60.02001190185547, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, max( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "score": -60.20521926879883, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING sum( T1.Language) != 'English'     ", "score": -60.76359558105469, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING max( T1.Language) != 'English'     ", "score": -61.631256103515625, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING min( T1.Language) != 'English'     ", "score": -62.2713737487793, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 640, "beams": [{"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV'       ", "score": 18.337743759155273, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English'       ", "score": -12.749923706054688, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT max( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "score": -15.03335952758789, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT avg( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "score": -17.183326721191406, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT count( *), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "score": -22.88151741027832, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT sum( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "score": -23.059555053710938, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT min( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "score": -23.730667114257812, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING avg( T1.Language) != 'TV'     ", "score": -25.152448654174805, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING count( T1.Language) != 'TV'     ", "score": -25.631057739257812, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING sum( T1.Language) != 'TV'     ", "score": -28.686969757080078, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT count( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "score": -28.977863311767578, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING max( T1.Language) != 'TV'     ", "score": -28.982463836669922, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, avg( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "score": -29.042129516601562, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, max( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "score": -29.072736740112305, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING min( T1.Language) != 'TV'     ", "score": -29.2608585357666, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 647, "beams": [{"orig_question": "How many poker players are there?", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT min( *) FROM poker_player AS T1        ", "score": -33.86963653564453, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player AS T1        ", "score": -34.504150390625, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( *) FROM poker_player AS T1        ", "score": -37.31830978393555, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT sum( *) FROM poker_player AS T1        ", "score": -39.01707458496094, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -40.21552658081055, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT min( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -45.871238708496094, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT max( *) FROM poker_player AS T1        ", "score": -47.64110565185547, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( T1.People_ID) FROM poker_player AS T1        ", "score": -49.14673614501953, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT max( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -49.449588775634766, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT sum( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -50.47673416137695, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1        ", "score": -53.06525421142578, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "score": -53.17477035522461, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "score": -55.0035285949707, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT min( T1.People_ID) FROM poker_player AS T1        ", "score": -55.471168518066406, "correct_code": "SELECT count(*) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 648, "beams": [{"orig_question": "Count the number of poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT min( *) FROM poker_player AS T1        ", "score": -36.47047805786133, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player AS T1        ", "score": -37.32857894897461, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( *) FROM poker_player AS T1        ", "score": -41.17972183227539, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -42.69221115112305, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT sum( *) FROM poker_player AS T1        ", "score": -46.01670837402344, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "score": -46.9436149597168, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( T1.People_ID) FROM poker_player AS T1        ", "score": -47.41230773925781, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "score": -49.27434158325195, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT max( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -49.78553771972656, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT max( *) FROM poker_player AS T1        ", "score": -49.787925720214844, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT max( T1.People_ID) FROM poker_player AS T1        ", "score": -54.40742111206055, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "score": -56.66178512573242, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1        ", "score": -59.83238220214844, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT sum( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -62.02373504638672, "correct_code": "SELECT count(*) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 651, "beams": [{"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1        ", "score": -0.0007974305190145969, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, max( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -7.1345062255859375, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, avg( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -20.963594436645508, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, min( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -22.450836181640625, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, sum( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -24.679279327392578, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT max( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -26.523466110229492, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT max( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "score": -32.84635543823242, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, count( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -33.797420501708984, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT avg( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -37.031097412109375, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT sum( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -37.215641021728516, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT min( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -38.42886734008789, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT avg( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "score": -43.45955276489258, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT sum( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "score": -43.583892822265625, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT min( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "score": -44.807029724121094, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT count( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -45.3653564453125, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 652, "beams": [{"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1        ", "score": 0.0, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -20.67791748046875, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, max( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -22.171249389648438, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, avg( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -29.09101104736328, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT avg( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -33.53297805786133, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT sum( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -34.442543029785156, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, min( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -34.68696212768555, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT min( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -35.93189239501953, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, sum( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -37.44742202758789, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "score": -41.679969787597656, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, count( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "score": -42.77908706665039, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT count( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "score": -43.83280563354492, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), avg( T1.Best_Finish) FROM poker_player AS T1        ", "score": -47.6288948059082, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), min( T1.Best_Finish) FROM poker_player AS T1        ", "score": -53.834537506103516, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), sum( T1.Best_Finish) FROM poker_player AS T1        ", "score": -54.652557373046875, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 653, "beams": [{"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1        ", "score": 0.0, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1        ", "score": -33.49436569213867, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1        ", "score": -35.292945861816406, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1        ", "score": -35.32916259765625, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1        ", "score": -40.58029556274414, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1        ", "score": -45.464900970458984, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": -59.8586540222168, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": -91.34288024902344, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -109.74217224121094, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "score": -113.39710998535156, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -116.09443664550781, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "score": -122.28189086914062, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "score": -123.27537536621094, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1        ", "score": -125.30937194824219, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Height FROM people AS T1        ", "score": -127.84979248046875, "correct_code": "SELECT avg(Earnings) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 654, "beams": [{"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1        ", "score": 0.0, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1        ", "score": -33.5794677734375, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1        ", "score": -34.71087646484375, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1        ", "score": -35.72679138183594, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1        ", "score": -41.640968322753906, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1        ", "score": -45.6845588684082, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": -60.623111724853516, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": -91.61353302001953, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -111.32128143310547, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "score": -116.69760131835938, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "score": -119.94762420654297, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1        ", "score": -125.46273040771484, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "score": -125.587890625, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1        ", "score": -126.47903442382812, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1        ", "score": -127.18557739257812, "correct_code": "SELECT avg(Earnings) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 655, "beams": [{"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -37.32566452026367, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "score": -43.1790657043457, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -43.27153015136719, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "score": -44.221073150634766, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -45.728485107421875, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "score": -47.5821533203125, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "score": -48.036537170410156, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -50.598838806152344, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -51.618263244628906, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY min( T1.Earnings) DESC LIMIT 1    ", "score": -56.96358108520508, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "score": -80.00309753417969, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "score": -81.12498474121094, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "score": -84.40440368652344, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "score": -85.13566589355469, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 656, "beams": [{"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -37.09211730957031, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "score": -41.140899658203125, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "score": -42.022789001464844, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -43.2181396484375, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "score": -44.35519027709961, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -45.79447555541992, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "score": -46.58192443847656, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -49.17902374267578, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -51.08737564086914, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY min( T1.Earnings) DESC LIMIT 1    ", "score": -56.653831481933594, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "score": -77.76083374023438, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "score": -78.62474060058594, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "score": -80.89320373535156, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "score": -83.38357543945312, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 657, "beams": [{"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 33.4185791015625, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT count( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 19.754898071289062, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 16.747520446777344, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 16.479663848876953, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 12.581743240356445, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT T1.Final_Table_Made FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": -1.0365104675292969, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -9.09188461303711, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING sum( T1.Earnings) < 200000     ", "score": -17.58295440673828, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING count( T1.Earnings) < 200000     ", "score": -19.13352394104004, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING avg( T1.Earnings) < 200000     ", "score": -20.086044311523438, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING max( T1.Earnings) < 200000     ", "score": -22.94190216064453, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT count( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -24.171985626220703, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -25.94019317626953, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -26.588729858398438, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -30.137454986572266, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 658, "beams": [{"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 41.477718353271484, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 21.627967834472656, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT T1.Final_Table_Made FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 19.165828704833984, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 18.071346282958984, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 17.26910400390625, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT count( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "score": 10.074527740478516, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": 3.8984413146972656, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING count( T1.Earnings) < 200000     ", "score": -6.480384826660156, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING sum( T1.Earnings) < 200000     ", "score": -6.938407897949219, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING max( T1.Earnings) < 200000     ", "score": -10.280532836914062, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING avg( T1.Earnings) < 200000     ", "score": -10.627155303955078, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -16.09778594970703, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -20.23143768310547, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "score": -21.5648193359375, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1   HAVING avg( T1.Earnings) < 200000     ", "score": -30.740982055664062, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 659, "beams": [{"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -4.768370445162873e-07, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -14.56010627746582, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -18.154705047607422, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "score": -20.708370208740234, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "score": -24.318477630615234, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -34.068058013916016, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -34.27112579345703, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -37.70253372192383, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -38.56325149536133, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -38.84308624267578, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -41.303924560546875, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.People_ID in (SELECT count( T22.People_ID) FROM poker_player AS T22        )       ", "score": -41.66212844848633, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -43.3235969543457, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.People_ID in (SELECT avg( T22.People_ID) FROM poker_player AS T22        )       ", "score": -44.22435760498047, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "score": -44.53880310058594, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 660, "beams": [{"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "score": 0.0, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT max( T1.Name) FROM people AS T1        ", "score": -36.61045837402344, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT count( T1.Name) FROM people AS T1        ", "score": -36.68285369873047, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1        ", "score": -39.63445281982422, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1        ", "score": -42.29854202270508, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT min( T1.Name) FROM people AS T1        ", "score": -43.687557220458984, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": -52.91259765625, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "score": -67.0190200805664, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "score": -88.54393005371094, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player AS T1        ", "score": -100.9307632446289, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.People_ID FROM people AS T1        ", "score": -101.24771118164062, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "score": -103.58089447021484, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1        ", "score": -105.81535339355469, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Height FROM people AS T1        ", "score": -108.03902435302734, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1        ", "score": -108.31011199951172, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 661, "beams": [{"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 59.65087127685547, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 22.863895416259766, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 21.495899200439453, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "score": 18.562702178955078, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 17.487777709960938, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 17.190231323242188, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 16.71051025390625, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( T2.Earnings) > 300000     ", "score": 16.39441680908203, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING sum( T2.Earnings) > 300000     ", "score": 13.969169616699219, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING max( T2.Earnings) > 300000     ", "score": 11.22146987915039, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING avg( T2.Earnings) > 300000     ", "score": 7.8808746337890625, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "score": 7.620872497558594, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING min( T2.Earnings) > 300000     ", "score": 3.4600753784179688, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "score": -29.493934631347656, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "score": -33.19306564331055, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 662, "beams": [{"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 56.56620407104492, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 21.13387680053711, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 16.74306869506836, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 16.06789779663086, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 14.673377990722656, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "score": 12.382713317871094, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( T2.Earnings) > 300000     ", "score": 12.194576263427734, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING sum( T2.Earnings) > 300000     ", "score": 10.549911499023438, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "score": 7.994621276855469, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING max( T2.Earnings) > 300000     ", "score": 7.686065673828125, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING avg( T2.Earnings) > 300000     ", "score": 6.174533843994141, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING min( T2.Earnings) > 300000     ", "score": -0.7987556457519531, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "score": -1.6260795593261719, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "score": -31.42287826538086, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "score": -34.021888732910156, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 665, "beams": [{"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -43.19719314575195, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT min( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -45.451255798339844, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT avg( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -45.888912200927734, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "score": -47.407325744628906, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "score": -47.42045211791992, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( T2.Earnings) ASC LIMIT 1    ", "score": -48.99672317504883, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT count( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -50.8385009765625, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT sum( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -52.972206115722656, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY min( T2.Earnings) ASC LIMIT 1    ", "score": -54.02742385864258, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY max( T2.Earnings) ASC LIMIT 1    ", "score": -54.74055862426758, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( *) ASC LIMIT 1    ", "score": -83.33502197265625, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "score": -90.33618927001953, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "score": -90.41434478759766, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( T2.Earnings) ASC LIMIT 1    ", "score": -92.3067626953125, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 666, "beams": [{"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -43.01869201660156, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT min( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -45.22166442871094, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT avg( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -45.7577018737793, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "score": -46.576778411865234, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "score": -47.68730926513672, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( T2.Earnings) ASC LIMIT 1    ", "score": -49.54669952392578, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT count( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -51.0190315246582, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT sum( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "score": -52.874141693115234, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY max( T2.Earnings) ASC LIMIT 1    ", "score": -53.89014434814453, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY min( T2.Earnings) ASC LIMIT 1    ", "score": -54.67721176147461, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( *) ASC LIMIT 1    ", "score": -78.27921295166016, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "score": -89.21581268310547, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "score": -90.45314025878906, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT min( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "score": -91.43292236328125, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 667, "beams": [{"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -34.857269287109375, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -41.04267501831055, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY avg( T2.Height) DESC LIMIT 1    ", "score": -45.36227798461914, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY count( T2.Height) DESC LIMIT 1    ", "score": -45.90755081176758, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -45.967987060546875, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY sum( T2.Height) DESC LIMIT 1    ", "score": -46.11787796020508, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -50.493988037109375, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY max( T2.Height) DESC LIMIT 1    ", "score": -51.29043197631836, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -52.827335357666016, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY min( T2.Height) DESC LIMIT 1    ", "score": -54.029632568359375, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Money_Rank DESC LIMIT 1    ", "score": -55.203277587890625, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( *) DESC LIMIT 1    ", "score": -62.53041076660156, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY avg( T2.Height) DESC LIMIT 1    ", "score": -79.78227233886719, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY count( T2.Height) DESC LIMIT 1    ", "score": -80.52949523925781, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 668, "beams": [{"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -34.464111328125, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -41.96422576904297, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY sum( T2.Height) DESC LIMIT 1    ", "score": -43.106239318847656, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY avg( T2.Height) DESC LIMIT 1    ", "score": -44.31214141845703, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -44.52078628540039, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY count( T2.Height) DESC LIMIT 1    ", "score": -44.6807975769043, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -47.94044494628906, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY max( T2.Height) DESC LIMIT 1    ", "score": -48.81706619262695, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "score": -51.20481491088867, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY min( T2.Height) DESC LIMIT 1    ", "score": -52.499176025390625, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( *) DESC LIMIT 1    ", "score": -61.782493591308594, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "score": -71.72429656982422, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Money_Rank DESC LIMIT 1    ", "score": -72.19061279296875, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY sum( T2.Height) DESC LIMIT 1    ", "score": -77.61595153808594, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 669, "beams": [{"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 46.57027816772461, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 21.988744735717773, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 15.251304626464844, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 15.149499893188477, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 13.492511749267578, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 10.750572204589844, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING max( T2.Height) > 200     ", "score": 5.791252136230469, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING avg( T2.Height) > 200     ", "score": -0.2675056457519531, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING count( T2.Height) > 200     ", "score": -1.2952880859375, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING sum( T2.Height) > 200     ", "score": -2.5812225341796875, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": -5.203712463378906, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING min( T2.Height) > 200     ", "score": -6.291393280029297, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": -10.114368438720703, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "score": -27.977474212646484, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "score": -43.52923583984375, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 670, "beams": [{"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 52.3311767578125, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT count( *) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 29.387279510498047, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 21.920167922973633, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 21.057939529418945, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 15.259712219238281, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 14.21780776977539, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "score": 12.499626159667969, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING max( T2.Height) > 200     ", "score": 10.754253387451172, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING avg( T2.Height) > 200     ", "score": 6.285400390625, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING sum( T2.Height) > 200     ", "score": 3.2622909545898438, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING min( T2.Height) > 200     ", "score": -1.0658493041992188, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING count( T2.Height) > 200     ", "score": -2.1933860778808594, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 WHERE T1.Earnings > 200       ", "score": -4.904945373535156, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "score": -21.75946807861328, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "score": -33.01411437988281, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 681, "beams": [{"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 44.80862808227539, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 4.043731689453125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 2.551483154296875, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 1.5105361938476562, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'Russia'     ", "score": 1.3079986572265625, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 1.0716438293457031, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": -0.5591621398925781, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'Russia'     ", "score": -3.2308006286621094, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'Russia'     ", "score": -3.919597625732422, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'Russia'     ", "score": -7.1409149169921875, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'Russia'     ", "score": -7.141796112060547, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT max( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "score": -38.46480941772461, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.Name != 'Russia'       ", "score": -38.493682861328125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT count( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "score": -40.009132385253906, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "score": -40.85245132446289, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 682, "beams": [{"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 62.88130187988281, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 21.886749267578125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'Russia'     ", "score": 20.062034606933594, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 19.59664535522461, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 19.060646057128906, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 18.881866455078125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "score": 17.07093048095703, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'Russia'     ", "score": 13.830078125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'Russia'     ", "score": 13.21923828125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'Russia'     ", "score": 10.485603332519531, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'Russia'     ", "score": 10.155067443847656, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "score": -20.35272979736328, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "score": -22.36132049560547, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "score": -23.198204040527344, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT min( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "score": -23.447723388671875, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 685, "beams": [{"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM people AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT T1.Nationality FROM people AS T1        ", "score": -34.94276809692383, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -35.86188888549805, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -45.314640045166016, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -46.11310958862305, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -53.99617004394531, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM people AS T1        ", "score": -118.45022583007812, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM poker_player AS T1        ", "score": -125.21122741699219, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM people AS T1        ", "score": -143.5699462890625, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT T1.Name FROM people AS T1        ", "score": -145.51004028320312, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM poker_player AS T1        ", "score": -146.29855346679688, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM people AS T1        ", "score": -151.32522583007812, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM people AS T1        ", "score": -153.8533935546875, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM people AS T1        ", "score": -154.0703582763672, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM people AS T1        ", "score": -161.11752319335938, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 686, "beams": [{"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM people AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT T1.Nationality FROM people AS T1        ", "score": -37.374267578125, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -39.7388801574707, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -47.67961883544922, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -48.2894401550293, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM people AS T1        ", "score": -53.99293899536133, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM people AS T1        ", "score": -122.39471435546875, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM poker_player AS T1        ", "score": -124.52684020996094, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM people AS T1        ", "score": -138.50839233398438, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT T1.Name FROM people AS T1        ", "score": -154.98255920410156, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM people AS T1        ", "score": -161.04388427734375, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM people AS T1        ", "score": -163.27609252929688, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM poker_player AS T1        ", "score": -163.93719482421875, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM people AS T1        ", "score": -165.38502502441406, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM people AS T1        ", "score": -169.93597412109375, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 687, "beams": [{"orig_question": "How many states are there?", "inferred_code": "SELECT count( *) FROM AREA_CODE_STATE AS T1        ", "score": -0.02295353077352047, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.state) FROM AREA_CODE_STATE AS T1        ", "score": -3.785740375518799, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT T1.state FROM AREA_CODE_STATE AS T1        ", "score": -33.580894470214844, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT min( T1.state) FROM AREA_CODE_STATE AS T1        ", "score": -34.15266799926758, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT sum( T1.state) FROM AREA_CODE_STATE AS T1        ", "score": -42.7253303527832, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT avg( T1.state) FROM AREA_CODE_STATE AS T1        ", "score": -44.857154846191406, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT max( T1.state) FROM AREA_CODE_STATE AS T1        ", "score": -48.626853942871094, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -91.65514373779297, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.created) FROM VOTES AS T1        ", "score": -93.8112564086914, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.state) FROM VOTES AS T1        ", "score": -104.12617492675781, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.contestant_number) FROM VOTES AS T1        ", "score": -118.17166137695312, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.contestant_number) FROM CONTESTANTS AS T1        ", "score": -124.4061508178711, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.phone_number) FROM VOTES AS T1        ", "score": -125.31968688964844, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.vote_id) FROM VOTES AS T1        ", "score": -126.37018585205078, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1        ", "score": -126.97265625, "correct_code": "SELECT count(*) FROM area_code_state"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 689, "beams": [{"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, T1.state FROM VOTES AS T1        ", "score": 0.0, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, avg( T1.phone_number), T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "score": -38.80149841308594, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, max( T1.phone_number), T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "score": -39.09769821166992, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT max( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "score": -39.40574645996094, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT min( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "score": -39.59804916381836, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, min( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "score": -39.8789176940918, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, count( *) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "score": -41.124755859375, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, count( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "score": -41.79969787597656, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, max( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "score": -43.477874755859375, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, count( T1.phone_number), T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "score": -43.515132904052734, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT count( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "score": -43.59403610229492, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT avg( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "score": -44.315162658691406, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, T2.state FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state        ", "score": -44.464927673339844, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, sum( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "score": -44.85509490966797, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, avg( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "score": -46.19854736328125, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 690, "beams": [{"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": 0.0, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -28.21799087524414, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT avg( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -34.53247833251953, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), sum( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -36.270362854003906, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), count( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -37.75191879272461, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), avg( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -38.46939468383789, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT T1.area_code, min( T1.area_code) FROM AREA_CODE_STATE AS T1  GROUP BY T1.area_code      ", "score": -41.35640335083008, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT count( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -43.822715759277344, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), T1.area_code FROM AREA_CODE_STATE AS T1  GROUP BY T1.area_code      ", "score": -53.603755950927734, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), max( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -65.85832214355469, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), count( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -66.42662048339844, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), avg( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "score": -66.91024780273438, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 691, "beams": [{"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "score": 79.62474822998047, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT T1.created FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "score": 60.90735626220703, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT min( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "score": 60.322975158691406, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT sum( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "score": 57.62702941894531, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT avg( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "score": 56.07057189941406, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT count( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "score": 42.96363067626953, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING count( T1.state) = 'CA'     ", "score": 30.0224609375, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING avg( T1.state) = 'CA'     ", "score": 27.604259490966797, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING sum( T1.state) = 'CA'     ", "score": 23.121463775634766, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING max( T1.state) = 'CA'     ", "score": 22.931262969970703, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING min( T1.state) = 'CA'     ", "score": 18.937789916992188, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT min( T1.created) FROM VOTES AS T1   HAVING count( T1.state) = 'CA'     ", "score": 10.921859741210938, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT T1.created FROM VOTES AS T1  GROUP BY T1.created HAVING count( T1.state) = 'CA'     ", "score": 10.632865905761719, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT T1.created FROM VOTES AS T1  GROUP BY T1.created HAVING avg( T1.state) = 'CA'     ", "score": 8.734062194824219, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT sum( T1.created) FROM VOTES AS T1   HAVING count( T1.state) = 'CA'     ", "score": 8.1761474609375, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 692, "beams": [{"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "score": 55.65989303588867, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "score": 21.5125732421875, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT min( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "score": 19.481224060058594, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT max( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "score": 19.317096710205078, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT avg( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "score": 18.52359390258789, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT sum( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "score": 14.195777893066406, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING count( T1.contestant_name) != 'Jessie Alloway'     ", "score": 10.5439453125, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING avg( T1.contestant_name) != 'Jessie Alloway'     ", "score": 7.1746978759765625, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING sum( T1.contestant_name) != 'Jessie Alloway'     ", "score": 4.130542755126953, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING min( T1.contestant_name) != 'Jessie Alloway'     ", "score": 3.121379852294922, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING max( T1.contestant_name) != 'Jessie Alloway'     ", "score": 2.054584503173828, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_number != Jessie Alloway       ", "score": 1.1788444519042969, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T13 ON T1.contestant_number = T13.contestant_number JOIN AREA_CODE_STATE AS T2 ON T13.state = T2.state WHERE T2.area_code != Jessie Alloway       ", "score": -10.340816497802734, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.state != 'Jessie Alloway'       ", "score": -14.088584899902344, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING count( *) != Jessie Alloway     ", "score": -24.421096801757812, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 693, "beams": [{"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, T1.created FROM VOTES AS T1        ", "score": 0.0, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, max(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "score": -24.53476333618164, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "score": -28.425071716308594, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, sum(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "score": -29.701778411865234, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, count(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "score": -30.0452823638916, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, avg(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "score": -31.845666885375977, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, min(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "score": -31.872291564941406, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "score": -33.49344253540039, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "score": -33.92436218261719, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "score": -34.105712890625, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "score": -35.73207473754883, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, T2.created FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state        ", "score": -53.71934509277344, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.state), max(DISTINCT T1.created) FROM VOTES AS T1        ", "score": -53.863773345947266, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.state), sum(DISTINCT T1.created) FROM VOTES AS T1        ", "score": -57.43830108642578, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.state), max(DISTINCT T1.created) FROM VOTES AS T1        ", "score": -58.21781921386719, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 699, "beams": [{"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling'       ", "score": 63.70224380493164, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT avg( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 30.075462341308594, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, avg( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 26.726173400878906, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT max( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 25.868270874023438, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, count( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 24.964252471923828, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, max( T1.state), T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 24.457725524902344, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, avg( T1.state), T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 24.090641021728516, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT min( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 22.971019744873047, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, count( T1.state), T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 22.402164459228516, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT count( *), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 21.442317962646484, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, max( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 21.414501190185547, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, sum( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 20.700111389160156, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, min( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 20.605850219726562, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT sum( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "score": 19.966903686523438, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number  GROUP BY T1.contestant_number HAVING avg( T2.contestant_name) = 'Tabatha Gehling'     ", "score": 19.84332275390625, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 701, "beams": [{"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "score": 48.9935417175293, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "score": 45.83856964111328, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "score": 10.832256317138672, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.state like '%Al%'       ", "score": 9.57126235961914, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT min( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "score": 8.090167999267578, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT max( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "score": 7.837104797363281, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT avg( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "score": 7.656230926513672, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "score": 7.246299743652344, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.state like '%AL%'       ", "score": 5.8617706298828125, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT min( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "score": 4.4450225830078125, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT sum( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "score": 4.195823669433594, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT max( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "score": 4.120914459228516, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT avg( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "score": 3.8194122314453125, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING count( T1.contestant_name) like '%Al%'     ", "score": 3.631488800048828, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING avg( T1.contestant_name) like '%Al%'     ", "score": 2.4572715759277344, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 702, "beams": [{"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 46.48005676269531, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.IndepYear > 1950       ", "score": 35.77061462402344, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 1950       ", "score": 29.88310432434082, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region > '1950'       ", "score": 18.348411560058594, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.ID > 1950       ", "score": 16.69101333618164, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode > '1950'       ", "score": 13.394533157348633, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.District > '1950'       ", "score": 12.528221130371094, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent > '1950'       ", "score": 9.778301239013672, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Code > '1950'       ", "score": 6.636631011962891, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.HeadOfState > '1950'       ", "score": 5.820182800292969, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.GovernmentForm > '1950'       ", "score": 4.301319122314453, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 4.045783996582031, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 3.1915550231933594, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial > '1950'       ", "score": -5.401174545288086, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language > '1950'       ", "score": -6.636592864990234, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 703, "beams": [{"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 54.94530487060547, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 1950       ", "score": 49.798011779785156, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.IndepYear > 1950       ", "score": 46.40437316894531, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.LifeExpectancy > 1950       ", "score": 21.64044189453125, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode > '1950'       ", "score": 18.956256866455078, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.ID > 1950       ", "score": 18.6856689453125, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 17.75446319580078, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region > '1950'       ", "score": 15.756702423095703, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 14.644184112548828, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 12.858955383300781, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.District > '1950'       ", "score": 12.063045501708984, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 10.660160064697266, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent > '1950'       ", "score": 10.570636749267578, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "score": 9.223136901855469, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Code > '1950'       ", "score": 7.603755950927734, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 720, "beams": [{"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 86.93153381347656, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Apia'       )       ", "score": 74.95774841308594, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 70.18623352050781, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "score": 66.58523559570312, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "score": 63.82219314575195, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Apia'       )       ", "score": 58.181400299072266, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Apia'       )       ", "score": 57.43437957763672, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 56.46428680419922, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Apia'       )       ", "score": 54.677589416503906, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT avg( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 52.20648956298828, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 51.52569580078125, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 50.34013748168945, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 49.47925567626953, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22   HAVING min( T22.Continent) = 'Asia'     )       ", "score": 48.25168228149414, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Name HAVING min( T1.Region) = 'Asia'     ", "score": 47.87755584716797, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 721, "beams": [{"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 56.558563232421875, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 42.55325698852539, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Apia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 21.46381950378418, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY count( *) ASC LIMIT 1    ", "score": 18.617992401123047, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 17.3375244140625, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 17.176109313964844, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 15.162185668945312, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY count( T1.LifeExpectancy) ASC LIMIT 1    ", "score": 14.647098541259766, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 14.35903549194336, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY sum( T1.LifeExpectancy) ASC LIMIT 1    ", "score": 13.050216674804688, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1  GROUP BY T1.Name HAVING count( T1.Continent) = 'Asia' ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 12.910812377929688, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 11.528980255126953, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY avg( T1.LifeExpectancy) ASC LIMIT 1    ", "score": 8.300579071044922, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1  GROUP BY T1.Name HAVING min( T1.Continent) = 'Asia' ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 7.363300323486328, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Apia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "score": 7.2220964431762695, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 722, "beams": [{"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 41.55908203125, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.Population) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 20.092266082763672, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT max( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 17.578195571899414, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T2.GNP) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 17.025238037109375, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Apia'       ", "score": 15.691393852233887, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), sum( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 14.457893371582031, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia'       ", "score": 6.226829528808594, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), min( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 5.355278015136719, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT avg( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 5.17877197265625, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), avg( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 3.7138595581054688, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T2.Population) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia'       ", "score": 3.5748329162597656, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Population      ", "score": 3.2134857177734375, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT count( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 2.623516082763672, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT min( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 1.8161125183105469, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), T1.GNP FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.GNP      ", "score": 1.4542922973632812, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 723, "beams": [{"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 140.89730834960938, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 139.94635009765625, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, sum( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 133.9480438232422, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, sum( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 133.94131469726562, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Region = 'Asia'       ) GROUP BY T1.Population      ", "score": 132.64576721191406, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 131.48089599609375, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.Population = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 130.52383422851562, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, sum( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Region = 'Asia'       ) GROUP BY T1.Population      ", "score": 125.65837860107422, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, T1.GNP FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 125.57246398925781, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Region, max( T1.Population) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Region      ", "score": 125.17601013183594, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, T1.GNP FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 124.39971923828125, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT sum( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 124.23306274414062, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Region, sum( T1.Population) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Region      ", "score": 124.11797332763672, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT sum( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "score": 123.29057312011719, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Region = 'Asia'       ) GROUP BY T1.Population      ", "score": 123.29048156738281, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 732, "beams": [{"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -36.29949951171875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1        ", "score": -39.48779296875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -45.637847900390625, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -47.121097564697266, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -58.284786224365234, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM country AS T1        ", "score": -59.84746551513672, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM city AS T1        ", "score": -65.42605590820312, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM sqlite_sequence AS T1        ", "score": -79.690185546875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.ID) FROM city AS T1        ", "score": -81.55603790283203, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT T1.Name FROM country AS T1        ", "score": -90.30215454101562, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM country AS T1        ", "score": -94.72076416015625, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT T1.Name FROM city AS T1        ", "score": -97.17201232910156, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM country AS T1        ", "score": -99.02090454101562, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM city AS T1        ", "score": -100.3669204711914, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 733, "beams": [{"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -37.07074737548828, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1        ", "score": -38.52164077758789, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -48.2601432800293, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -49.29341506958008, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "score": -59.446075439453125, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM country AS T1        ", "score": -59.54564666748047, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM city AS T1        ", "score": -77.77662658691406, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.ID) FROM city AS T1        ", "score": -78.80482482910156, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM sqlite_sequence AS T1        ", "score": -92.21107482910156, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT T1.Name FROM country AS T1        ", "score": -93.07130432128906, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM country AS T1        ", "score": -95.97004699707031, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Continent) FROM country AS T1        ", "score": -104.32713317871094, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM country AS T1        ", "score": -104.8229751586914, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM country AS T1        ", "score": -105.21533203125, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 734, "beams": [{"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 75.39579010009766, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 73.45550537109375, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 35.14203643798828, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 34.09553527832031, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 33.28801727294922, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Arica'     ", "score": 32.448753356933594, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 32.341827392578125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Arica'     ", "score": 30.27764892578125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Africa'     ", "score": 29.961349487304688, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Arica'     ", "score": 29.703514099121094, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 29.358318328857422, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Africa'     ", "score": 28.42546844482422, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Africa'     ", "score": 27.86376953125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 27.486217498779297, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 27.035911560058594, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 735, "beams": [{"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 73.32821655273438, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 72.68944549560547, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 38.00873565673828, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 37.08537292480469, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 35.124568939208984, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 34.37923812866211, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Africa'     ", "score": 29.728267669677734, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Africa'     ", "score": 29.09886932373047, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Africa'     ", "score": 29.00029754638672, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Arica'     ", "score": 28.988285064697266, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Arica'     ", "score": 28.958450317382812, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Arica'     ", "score": 28.3204345703125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 27.623825073242188, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "score": 26.8968505859375, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "score": 25.398151397705078, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 762, "beams": [{"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "score": 65.1608657836914, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 62.89623260498047, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Nama' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "score": 60.68602752685547, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "score": 59.91252136230469, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 58.80841064453125, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "score": 58.56114196777344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Nama' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 58.505775451660156, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode = 'Asan' and T1.LifeExpectancy = (SELECT max( T23.LifeExpectancy) FROM country AS T23 WHERE T23.Continent = 'Nama'       )       ", "score": 58.47984313964844, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "score": 57.73479461669922, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode = 'Asan' and T1.LifeExpectancy = (SELECT max( T23.LifeExpectancy) FROM country AS T23 WHERE T23.Continent = 'Asia'       )       ", "score": 56.54350662231445, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 56.06439971923828, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 55.72911071777344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Nama' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "score": 55.390899658203125, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode = 'Asan' and T1.SurfaceArea = (SELECT max( T23.SurfaceArea) FROM country AS T23 WHERE T23.Continent = 'Nama'       )       ", "score": 55.34422302246094, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "score": 55.03965759277344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 763, "beams": [{"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 117.85847473144531, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 113.43388366699219, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "score": 113.12191772460938, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 111.05891418457031, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "score": 108.38050842285156, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "score": 107.23594665527344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.IndepYear = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 106.42669677734375, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.IndepYear = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "score": 101.69712829589844, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 99.81198120117188, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.IndepYear = (SELECT max( T22.IndepYear) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "score": 96.74766540527344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asian'       )       ", "score": 96.10768127441406, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asian'       )       ", "score": 92.48085021972656, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Asian'       )       ", "score": 92.41924285888672, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Name = 'Asia'       )       ", "score": 92.23187255859375, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asian'       )       ", "score": 90.98597717285156, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 770, "beams": [{"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "score": 42.9249153137207, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930       ", "score": 34.910072326660156, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": 30.44274139404297, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.Language < '1930'       ", "score": 17.938779830932617, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.CountryCode < '1930'       ", "score": 8.834735870361328, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "score": 6.921321868896484, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode  GROUP BY count( T1.Language) HAVING min( T2.CountryCode) < '1930'     ", "score": 3.2322311401367188, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "score": 3.1441192626953125, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.ID < 1930       ", "score": 2.5944480895996094, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "score": 1.832275390625, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": -0.3609352111816406, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm < '1930'       ", "score": -0.4259185791015625, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "score": -1.1798896789550781, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": -4.136569976806641, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name < '1930'       ", "score": -10.600147247314453, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 771, "beams": [{"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": 32.19713592529297, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930       ", "score": 21.08426284790039, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "score": 18.52081298828125, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.Language < '1930'       ", "score": 6.973724365234375, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1   HAVING min( T1.IsOfficial) < '1930'     ", "score": -2.0735912322998047, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": -3.2347412109375, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.CountryCode < '1930'       ", "score": -3.5332412719726562, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code < '1930'       ", "score": -3.921916961669922, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1   HAVING count( T1.IsOfficial) < '1930'     ", "score": -8.239151000976562, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": -9.138538360595703, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": -9.803836822509766, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.ID < 1930       ", "score": -10.270851135253906, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.IsOfficial) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": -10.904792785644531, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "score": -11.892574310302734, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name < '1930'       ", "score": -11.944942474365234, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 788, "beams": [{"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY min( T1.Population) ASC LIMIT 1    ", "score": -25.015377044677734, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, min( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -33.993377685546875, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, max( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -35.687896728515625, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY count( T1.Population) ASC LIMIT 1    ", "score": -36.054046630859375, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY sum( T1.Population) ASC LIMIT 1    ", "score": -39.593074798583984, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, count( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -39.66884231567383, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT max( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -40.488826751708984, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, max( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -40.493865966796875, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY avg( T1.Population) ASC LIMIT 1    ", "score": -40.837406158447266, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY count( *) ASC LIMIT 1    ", "score": -41.74658966064453, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT min( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -42.27067565917969, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, avg( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -42.43343734741211, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT avg( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -43.211219787597656, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, avg( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -43.29081344604492, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 789, "beams": [{"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, max( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -36.0733642578125, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, min( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -36.3956184387207, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.SurfaceArea, T1.IndepYear FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    ", "score": -37.89366149902344, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT max( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -41.6181640625, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, count( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -42.0037956237793, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, avg( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -42.15729904174805, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT min( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -43.22368621826172, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, avg( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -43.68299865722656, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY min( T1.Population) ASC LIMIT 1    ", "score": -43.904422760009766, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT avg( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -44.11465072631836, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, max( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "score": -44.24592208862305, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT count( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -44.8063850402832, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, count( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "score": -44.97148132324219, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY sum( T1.Population) ASC LIMIT 1    ", "score": -46.15007781982422, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 790, "beams": [{"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -0.2962447702884674, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.LocalName FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -7.453011512756348, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.HeadOfState FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -13.83069133758545, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.GovernmentForm FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -25.53517723083496, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode    ORDER BY T1.Region DESC LIMIT 1    ", "score": -25.95641326904297, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.LocalName FROM country AS T1    ORDER BY T1.Region DESC LIMIT 1    ", "score": -29.873065948486328, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, max( T1.Name) FROM country AS T1  GROUP BY T1.Name  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -33.6710090637207, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.Region FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -34.7433967590332, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, min( T1.Name) FROM country AS T1  GROUP BY T1.Name  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -34.77540969848633, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, max( T1.Name), T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -36.130306243896484, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.Code FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -36.390689849853516, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.HeadOfState FROM country AS T1    ORDER BY T1.Region DESC LIMIT 1    ", "score": -37.35643768310547, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T2.ID FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -37.39825439453125, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, count( *) FROM country AS T1  GROUP BY T1.Name  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -37.735069274902344, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, avg( T1.Name), T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -38.11949920654297, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 791, "beams": [{"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -0.0698113963007927, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.Region DESC LIMIT 1    ", "score": -2.6966633796691895, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.Population DESC LIMIT 1    ", "score": -15.58903694152832, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.HeadOfState DESC LIMIT 1    ", "score": -20.198705673217773, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, max( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -32.51904296875, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, max( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.Region DESC LIMIT 1    ", "score": -35.091064453125, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, avg( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -36.283931732177734, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, avg( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.Region DESC LIMIT 1    ", "score": -38.85481262207031, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, min( T1.HeadOfState) FROM country AS T1  GROUP BY T1.Population  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -39.128055572509766, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT max( T1.Name), T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -39.832584381103516, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, max( T1.HeadOfState) FROM country AS T1  GROUP BY T1.Population  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "score": -39.9337272644043, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.Name, T1.Population, T1.HeadOfState  ORDER BY sum( T1.SurfaceArea) DESC LIMIT 1    ", "score": -40.158451080322266, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, min( T1.HeadOfState) FROM country AS T1  GROUP BY T1.Population  ORDER BY T1.Region DESC LIMIT 1    ", "score": -40.65821838378906, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.Name, T1.Population, T1.HeadOfState  ORDER BY max( T1.SurfaceArea) DESC LIMIT 1    ", "score": -41.28446578979492, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT max( T1.Name), T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.Region DESC LIMIT 1    ", "score": -42.44487380981445, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 806, "beams": [{"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 72.12594604492188, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT min( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 37.23377227783203, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Region = 'Asia'       ", "score": 36.42364501953125, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT sum( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 31.508548736572266, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 30.227455139160156, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT avg( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 26.02985382080078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Apia'       ", "score": 25.666383743286133, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING count( T1.Continent) = 'Asia'     ", "score": 24.99718475341797, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING avg( T1.Continent) = 'Asia'     ", "score": 22.011856079101562, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT T1.CountryCode FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 20.7176513671875, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 20.29834747314453, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 19.682716369628906, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING sum( T1.Continent) = 'Asia'     ", "score": 18.342731475830078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT max( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 18.16592788696289, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT T1.ID FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 15.036209106445312, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 807, "beams": [{"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 70.53369140625, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT min( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 38.13786315917969, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Region = 'Asia'       ", "score": 33.515228271484375, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT sum( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 28.93221664428711, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 27.597942352294922, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Apia'       ", "score": 23.313491821289062, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT avg( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 23.247840881347656, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING count( T1.Continent) = 'Asia'     ", "score": 22.493610382080078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "score": 20.042682647705078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING avg( T1.Continent) = 'Asia'     ", "score": 19.400848388671875, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING max( T1.Continent) = 'Asia'     ", "score": 17.72986602783203, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT max( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 16.15514373779297, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING sum( T1.Continent) = 'Asia'     ", "score": 15.315132141113281, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT avg( T1.ID) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 14.420150756835938, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT T1.CountryCode FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "score": 13.39535140991211, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 808, "beams": [{"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 152.43258666992188, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Europe' and T1.Population > 80000       ", "score": 133.03619384765625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 115.07455444335938, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING count( T1.Population) > 80000     ", "score": 114.54531860351562, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING sum( T1.Population) > 80000     ", "score": 114.14659881591797, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING max( T1.Continent) = 'Europe'     ", "score": 112.62132263183594, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 112.44902038574219, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 112.02571105957031, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 110.8263168334961, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING count( T1.Continent) = 'Europe'     ", "score": 109.9354476928711, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING avg( T1.Population) > 80000     ", "score": 108.8048324584961, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 108.48413848876953, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING sum( T1.Continent) = 'Europe'     ", "score": 108.47647094726562, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING min( T1.Continent) = 'Europe'     ", "score": 107.31267547607422, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING max( T1.Population) > 80000     ", "score": 106.23292541503906, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 809, "beams": [{"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 153.40188598632812, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Europe' and T1.Population > 80000       ", "score": 135.9685821533203, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING sum( T1.Population) > 80000     ", "score": 130.02969360351562, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING count( T1.Population) > 80000     ", "score": 120.0650405883789, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 117.45895385742188, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING max( T1.Population) > 80000     ", "score": 116.47358703613281, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 114.80339050292969, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 114.7400894165039, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 114.73778533935547, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING max( T1.Continent) = 'Europe'     ", "score": 114.140625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING avg( T1.Population) > 80000     ", "score": 113.89246368408203, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Europe' GROUP BY T1.Name HAVING sum( T1.Population) > 80000     ", "score": 112.57179260253906, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING count( T1.Continent) = 'Europe'     ", "score": 112.46188354492188, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING sum( T1.Continent) = 'Europe'     ", "score": 110.97857666015625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "score": 109.46308135986328, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 812, "beams": [{"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 89.10684204101562, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "score": 88.22071838378906, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT min( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 54.60116958618164, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT count( T1.LocalName) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "score": 54.2122802734375, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT min( T1.LocalName) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "score": 52.31744384765625, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT max( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 51.58531951904297, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode HAVING max( T2.Population) between 160000 AND 900000     ", "score": 51.398624420166016, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT count( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 50.34571838378906, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode HAVING min( T2.Population) between 160000 AND 900000     ", "score": 49.14109420776367, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING avg( T1.Population) between 160000 AND 900000     ", "score": 49.055503845214844, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode HAVING avg( T2.Population) between 160000 AND 900000     ", "score": 48.82740020751953, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING count( T1.Population) between 160000 AND 900000     ", "score": 48.32294845581055, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT avg( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 48.219913482666016, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT sum( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 47.45780944824219, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING sum( T1.Population) between 160000 AND 900000     ", "score": 47.257835388183594, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 813, "beams": [{"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 103.27606964111328, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "score": 82.0134048461914, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1 WHERE T1.Population between 160000 AND N\u00eemes       ", "score": 67.30741119384766, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT min( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 65.83232879638672, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT max( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 63.951271057128906, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT sum( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 60.4002799987793, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT count( T1.LocalName) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "score": 60.339637756347656, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING avg( T1.Population) between 160000 AND 900000     ", "score": 60.32905578613281, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT count( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 59.79242706298828, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING sum( T1.Population) between 160000 AND 900000     ", "score": 59.064292907714844, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING count( T1.Population) between 160000 AND 900000     ", "score": 58.46260070800781, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT avg( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "score": 58.267608642578125, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING max( T1.Population) between 160000 AND 900000     ", "score": 57.840065002441406, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING min( T1.Population) between 160000 AND 900000     ", "score": 54.269500732421875, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND N\u00eemes       ", "score": 48.47471618652344, "correct_code": "select name from city where population between 160000 and 900000"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 822, "beams": [{"orig_question": "How many conductors are there?", "inferred_code": "SELECT count( *) FROM conductor AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT min( *) FROM conductor AS T1        ", "score": -29.912839889526367, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "score": -31.129779815673828, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor AS T1        ", "score": -33.232601165771484, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1        ", "score": -33.335960388183594, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1        ", "score": -33.727272033691406, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT avg( *) FROM conductor AS T1        ", "score": -38.35810852050781, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT sum( *) FROM conductor AS T1        ", "score": -40.574317932128906, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1        ", "score": -41.611637115478516, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT min( T1.Conductor_ID) FROM conductor AS T1        ", "score": -44.676910400390625, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT avg( T1.Conductor_ID) FROM conductor AS T1        ", "score": -46.78949737548828, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1        ", "score": -46.98740768432617, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT max( *) FROM conductor AS T1        ", "score": -53.60318374633789, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT sum( T1.Conductor_ID) FROM conductor AS T1        ", "score": -53.672672271728516, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT T1.Conductor_ID FROM conductor AS T1        ", "score": -54.989009857177734, "correct_code": "SELECT count(*) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 823, "beams": [{"orig_question": "Count the number of conductors.", "inferred_code": "SELECT count( *) FROM conductor AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT min( *) FROM conductor AS T1        ", "score": -31.361995697021484, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "score": -32.527442932128906, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1        ", "score": -36.01587677001953, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor AS T1        ", "score": -37.12358856201172, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( *) FROM conductor AS T1        ", "score": -39.019283294677734, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT sum( *) FROM conductor AS T1        ", "score": -45.019474029541016, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( T1.Conductor_ID) FROM conductor AS T1        ", "score": -46.87894058227539, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1        ", "score": -47.81820297241211, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1        ", "score": -50.97686767578125, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT count( *) FROM conductor AS T1        ", "score": -52.047210693359375, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1        ", "score": -52.46104431152344, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT max( *) FROM conductor AS T1        ", "score": -52.59835433959961, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( T1.Orchestra) FROM orchestra AS T1        ", "score": -53.15398406982422, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT T1.Conductor_ID FROM conductor AS T1        ", "score": -56.865203857421875, "correct_code": "SELECT count(*) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 826, "beams": [{"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 70.4616928100586, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 31.566242218017578, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 31.54366683959961, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 29.271148681640625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 28.60747528076172, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'USA'     ", "score": 27.000473022460938, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 25.202259063720703, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'USA'     ", "score": 23.057846069335938, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'USA'     ", "score": 20.794025421142578, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'USA'     ", "score": 19.068954467773438, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'USA'     ", "score": 17.908493041992188, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "score": -11.321098327636719, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "score": -11.489326477050781, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "score": -13.53326416015625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Name != 'USA'       ", "score": -20.088485717773438, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 827, "beams": [{"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 75.18843841552734, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 36.377044677734375, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 35.53165817260742, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 34.328399658203125, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'USA'     ", "score": 34.20996856689453, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 33.24077224731445, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "score": 30.151214599609375, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'USA'     ", "score": 27.16119384765625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'USA'     ", "score": 26.54248809814453, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'USA'     ", "score": 23.68313217163086, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'USA'     ", "score": 22.737369537353516, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "score": -4.247993469238281, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "score": -5.078636169433594, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "score": -6.27056884765625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "score": -7.446418762207031, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 830, "beams": [{"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT avg( T1.Attendance) FROM show AS T1        ", "score": 0.0, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT sum( T1.Attendance) FROM show AS T1        ", "score": -29.739334106445312, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT max( T1.Attendance) FROM show AS T1        ", "score": -30.69415283203125, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT min( T1.Attendance) FROM show AS T1        ", "score": -34.356998443603516, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT T1.Attendance FROM show AS T1        ", "score": -35.30491638183594, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.Attendance) FROM show AS T1        ", "score": -41.641143798828125, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -50.914527893066406, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -69.95606994628906, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -98.29147338867188, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.Official_ratings_(millions)) FROM performance AS T1        ", "score": -98.97831726074219, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -106.73835754394531, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT T1.Result FROM show AS T1        ", "score": -110.3189468383789, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "score": -111.02729034423828, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.Show_ID) FROM show AS T1        ", "score": -113.04640197753906, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.If_first_show) FROM show AS T1        ", "score": -117.711669921875, "correct_code": "SELECT avg(Attendance) FROM SHOW"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 831, "beams": [{"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT avg( T1.Attendance) FROM show AS T1        ", "score": 0.0, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT sum( T1.Attendance) FROM show AS T1        ", "score": -28.5091609954834, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT max( T1.Attendance) FROM show AS T1        ", "score": -31.289283752441406, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Attendance FROM show AS T1        ", "score": -33.043846130371094, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT min( T1.Attendance) FROM show AS T1        ", "score": -33.30784225463867, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( T1.Attendance) FROM show AS T1        ", "score": -41.8975944519043, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -54.54407501220703, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -66.45821380615234, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -101.89701080322266, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( T1.Official_ratings_(millions)) FROM performance AS T1        ", "score": -104.80258178710938, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "score": -106.32752990722656, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "score": -112.78004455566406, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Result FROM show AS T1        ", "score": -114.01973724365234, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( T1.Show_ID) FROM show AS T1        ", "score": -119.30010986328125, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Show_ID FROM show AS T1        ", "score": -122.47134399414062, "correct_code": "SELECT avg(Attendance) FROM SHOW"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 832, "beams": [{"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 49.98489761352539, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT sum( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 21.803043365478516, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT avg( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 15.539337158203125, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), count( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 14.257343292236328, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 13.644821166992188, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT T1.Share, min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "score": 9.53255844116211, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), avg( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 9.293773651123047, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live'       ", "score": 9.236007690429688, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT count( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 6.587444305419922, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING count( T1.Type) != 'Live final'     ", "score": 4.880832672119141, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING max( T1.Type) != 'Live final'     ", "score": 3.2633743286132812, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), T1.Share FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "score": 0.3712120056152344, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING avg( T1.Type) != 'Live final'     ", "score": 0.27691650390625, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING min( T1.Type) != 'Live final'     ", "score": -2.0270118713378906, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING sum( T1.Type) != 'Live final'     ", "score": -2.611492156982422, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 833, "beams": [{"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 51.00928497314453, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT sum( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 22.89449119567871, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT avg( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 16.488037109375, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), count( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 14.208198547363281, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 13.113384246826172, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT T1.Share, min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "score": 11.444427490234375, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), avg( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 9.679447174072266, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live'       ", "score": 8.60867977142334, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING count( T1.Type) != 'Live final'     ", "score": 6.587718963623047, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT count( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "score": 4.932773590087891, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING max( T1.Type) != 'Live final'     ", "score": 4.7281951904296875, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), T1.Share FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "score": 1.7031669616699219, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING avg( T1.Type) != 'Live final'     ", "score": 0.5800514221191406, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING min( T1.Type) != 'Live final'     ", "score": -0.0208282470703125, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING sum( T1.Type) != 'Live final'     ", "score": -3.34857177734375, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 834, "beams": [{"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT T1.Nationality FROM conductor AS T1        ", "score": -36.17024612426758, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -39.3677978515625, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -47.16737365722656, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -48.05944061279297, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -55.183860778808594, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -112.34493255615234, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Conductor_ID) FROM conductor AS T1        ", "score": -146.5070037841797, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT T1.Name FROM conductor AS T1        ", "score": -148.31773376464844, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -151.88345336914062, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -155.9168243408203, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -156.343505859375, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM conductor AS T1        ", "score": -164.0447540283203, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -164.31582641601562, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Age) FROM conductor AS T1        ", "score": -190.4964599609375, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 835, "beams": [{"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT T1.Nationality FROM conductor AS T1        ", "score": -36.711570739746094, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -38.42042922973633, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -45.69730758666992, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -47.597843170166016, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM conductor AS T1        ", "score": -54.54446792602539, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -117.35487365722656, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Conductor_ID) FROM conductor AS T1        ", "score": -148.88243103027344, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT T1.Name FROM conductor AS T1        ", "score": -156.69973754882812, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -157.89749145507812, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -162.28260803222656, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -163.59408569335938, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM conductor AS T1        ", "score": -167.91127014160156, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM conductor AS T1        ", "score": -171.44029235839844, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Year_of_Work) FROM conductor AS T1        ", "score": -190.75364685058594, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 838, "beams": [{"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -42.699623107910156, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "score": -45.32832717895508, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "score": -45.63833236694336, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -45.99449157714844, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "score": -47.23816680908203, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -48.141510009765625, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -48.46426773071289, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY max( T1.Year_of_Work) DESC LIMIT 1    ", "score": -49.913360595703125, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -51.618473052978516, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY min( T1.Year_of_Work) DESC LIMIT 1    ", "score": -57.66827392578125, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "score": -58.848060607910156, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "score": -87.93971252441406, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "score": -88.34300994873047, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "score": -89.82427978515625, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 839, "beams": [{"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -40.327335357666016, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -46.331207275390625, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "score": -46.37034606933594, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "score": -46.85584259033203, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -47.841033935546875, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -48.55128479003906, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "score": -50.393524169921875, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "score": -50.58008575439453, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY max( T1.Year_of_Work) DESC LIMIT 1    ", "score": -51.32722473144531, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "score": -56.07730484008789, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY min( T1.Year_of_Work) DESC LIMIT 1    ", "score": -57.92995071411133, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "score": -86.64952087402344, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "score": -87.18280792236328, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "score": -90.84909057617188, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 840, "beams": [{"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID        ", "score": 0.0, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, avg( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -31.74174690246582, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, max( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -31.757417678833008, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, count( *) FROM conductor AS T1 JOIN orchestra AS T13 ON T1.Conductor_ID = T13.Conductor_ID JOIN performance AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID  GROUP BY T1.Name      ", "score": -32.345970153808594, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, min( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -33.75945281982422, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, sum( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -34.451725006103516, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT max( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -34.463966369628906, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT avg( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -34.74422836303711, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT count( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -38.51913070678711, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT sum( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -38.69539260864258, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT min( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -38.723777770996094, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, count( *) FROM conductor AS T1 JOIN orchestra AS T13 ON T1.Conductor_ID = T13.Conductor_ID JOIN performance AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID  GROUP BY T1.Name      ", "score": -43.62779235839844, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "score": -45.16487503051758, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT count( *), T2.Name FROM performance AS T13 JOIN orchestra AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID JOIN conductor AS T2 ON T14.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Name      ", "score": -45.48550033569336, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 841, "beams": [{"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID        ", "score": 0.0, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, max( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -29.360004425048828, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, min( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -29.968191146850586, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, avg( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -30.76898193359375, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, sum( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "score": -32.60724639892578, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT max( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -33.93511199951172, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, count( *) FROM conductor AS T1  GROUP BY T1.Name      ", "score": -34.398380279541016, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT avg( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -34.87429428100586, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "score": -35.35677719116211, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, min( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "score": -36.14569091796875, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, avg( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "score": -39.532413482666016, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT count( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -39.66162109375, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT sum( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -40.05963134765625, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT min( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "score": -40.141178131103516, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 846, "beams": [{"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 73.45096588134766, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 37.95918273925781, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 33.004539489746094, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "score": 30.914413452148438, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 30.810775756835938, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 30.78066635131836, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 30.622520446777344, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "score": 30.56957244873047, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING avg( T2.Year_of_Founded) > 2008     ", "score": 26.481624603271484, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING max( T2.Year_of_Founded) > 2008     ", "score": 25.92690658569336, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING min( T2.Year_of_Founded) > 2008     ", "score": 18.564430236816406, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Year_of_Work > 2008       ", "score": 3.6734390258789062, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "score": -3.348419189453125, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "score": -3.49395751953125, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T13 ON T1.Conductor_ID = T13.Conductor_ID JOIN performance AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID  GROUP BY T1.Name HAVING count( *) > 2008     ", "score": -34.109588623046875, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 847, "beams": [{"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 77.4521255493164, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 40.37358093261719, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 36.78071594238281, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 35.30037307739258, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 34.602088928222656, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "score": 34.274593353271484, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "score": 33.64097595214844, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "score": 31.83404541015625, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING avg( T2.Year_of_Founded) > 2008     ", "score": 27.923980712890625, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING max( T2.Year_of_Founded) > 2008     ", "score": 27.611968994140625, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING min( T2.Year_of_Founded) > 2008     ", "score": 22.823524475097656, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "score": -1.9014205932617188, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "score": -3.6363143920898438, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Year_of_Work > 2008       ", "score": -6.5025177001953125, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING avg( T2.Year_of_Founded) > 2008     ", "score": -8.118370056152344, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 946, "beams": [{"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": 0.0, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, max( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "score": -36.01969528198242, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT max( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "score": -36.43838119506836, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1        ", "score": -37.71038818359375, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_arrived, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "score": -38.497032165527344, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, avg( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "score": -38.5837287902832, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, count( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "score": -39.09574508666992, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT avg( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "score": -40.837867736816406, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, sum( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "score": -41.6679573059082, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT sum( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "score": -41.72513961791992, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT min( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "score": -42.52165603637695, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT count( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "score": -42.559547424316406, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, min( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "score": -42.852413177490234, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.name, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "score": -45.18238830566406, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_birth, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "score": -46.20685577392578, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 947, "beams": [{"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": -6.9244303703308105, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, T2.name FROM Professionals AS T1 JOIN Treatments AS T13 ON T1.professional_id = T13.professional_id JOIN Dogs AS T2 ON T13.dog_id = T2.dog_id        ", "score": -13.245607376098633, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1        ", "score": -25.28788185119629, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.date_arrived, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "score": -28.811378479003906, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT max( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "score": -34.28388214111328, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.name, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "score": -35.85053253173828, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT max( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "score": -37.72804260253906, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, max( T1.first_name) FROM Professionals AS T1  GROUP BY T1.first_name      ", "score": -39.00004959106445, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, T2.professional_id FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id        ", "score": -39.16350173950195, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT avg( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "score": -39.33535385131836, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, avg( T1.first_name) FROM Professionals AS T1  GROUP BY T1.first_name      ", "score": -39.35462188720703, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT sum( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "score": -41.5120849609375, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT min( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "score": -41.61112594604492, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.date_of_birth, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "score": -41.9168815612793, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 950, "beams": [{"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "score": -0.0005407063290476799, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "score": -7.5228986740112305, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, max( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -29.551645278930664, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -29.764719009399414, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -30.692188262939453, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -32.33601760864258, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -32.922115325927734, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, max( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -33.56532669067383, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( *) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -33.97200012207031, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -36.89116668701172, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -38.53858947753906, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, avg( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -38.845298767089844, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -39.00812911987305, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_description FROM Owners AS T1 JOIN Dogs AS T13 ON T1.owner_id = T13.owner_id JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "score": -39.05511474609375, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 951, "beams": [{"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "score": -0.0305373165756464, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "score": -4.157097339630127, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_description FROM Owners AS T1 JOIN Dogs AS T13 ON T1.owner_id = T13.owner_id JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "score": -18.65336799621582, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -27.467721939086914, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -31.09832763671875, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, max( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -31.358102798461914, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -32.44873046875, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, count( *) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -33.64484786987305, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T1.last_name FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -35.64897155761719, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -35.667659759521484, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -36.53969192504883, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T1.last_name FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -37.397132873535156, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "score": -38.26878356933594, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, avg( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "score": -38.68172073364258, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 952, "beams": [{"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "score": 0.0, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -36.67915725708008, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -39.1761360168457, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -40.098114013671875, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -40.47380828857422, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -40.6809196472168, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -40.80758285522461, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -41.582359313964844, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -43.778011322021484, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -44.01392364501953, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT min( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -48.66314697265625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT count( *), T1.first_name FROM Owners AS T1  GROUP BY T1.first_name      ", "score": -49.143863677978516, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Owners AS T1        ", "score": -50.54318618774414, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.name, T2.first_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id        ", "score": -67.37644958496094, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 953, "beams": [{"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "score": 0.0, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Owners AS T1        ", "score": -26.809707641601562, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -39.23078536987305, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -39.7614860534668, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -41.31294250488281, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -44.53498840332031, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -44.820133209228516, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "score": -44.991363525390625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -48.15837478637695, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -49.652896881103516, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT min( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -51.628047943115234, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, count( T1.last_name) FROM Owners AS T1  GROUP BY T1.first_name      ", "score": -52.083457946777344, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "score": -54.471534729003906, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, max( T1.last_name) FROM Owners AS T1  GROUP BY T1.first_name      ", "score": -60.18134689331055, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name) FROM Owners AS T1  GROUP BY T1.first_name      ", "score": -61.5346565246582, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 956, "beams": [{"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'       ", "score": 49.37144470214844, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING count( T1.state) = 'Virginia'     ", "score": 15.024688720703125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 11.116130828857422, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 4.765045166015625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 3.655384063720703, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": 3.1331100463867188, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 2.1933021545410156, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING sum( T1.state) = 'Virginia'     ", "score": 1.6225433349609375, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING max( T1.state) = 'Virginia'     ", "score": 1.4791831970214844, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 1.3949661254882812, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": 1.2440986633300781, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING avg( T1.state) = 'Virginia'     ", "score": 1.1929512023925781, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING min( T1.state) = 'Virginia'     ", "score": -0.1317596435546875, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": -0.9528999328613281, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": -2.6369781494140625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 957, "beams": [{"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'       ", "score": 72.0025634765625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 43.21852111816406, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": 40.74234390258789, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": 38.21611022949219, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": 37.9427604675293, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT min( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": 36.8870735168457, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "score": 36.348876953125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 35.23322296142578, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 35.22490310668945, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 33.90713119506836, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 33.479434967041016, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING count( T1.state) = 'Virginia'     ", "score": 32.637413024902344, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, count( *) FROM Owners AS T1 WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 31.4930419921875, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, count( *) FROM Owners AS T1 WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "score": 27.141521453857422, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING avg( T1.state) = 'Virginia'     ", "score": 22.53820037841797, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 958, "beams": [{"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "score": 0.0, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -22.835018157958984, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -30.187410354614258, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -31.963367462158203, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -32.978904724121094, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -34.066734313964844, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -36.33606719970703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -36.7615966796875, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -41.091732025146484, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -41.436248779296875, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -41.48652648925781, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "score": -53.07062911987305, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "score": -57.18463134765625, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "score": -59.02445602416992, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT avg( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "score": -62.24304962158203, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 959, "beams": [{"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "score": 0.0, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -20.982105255126953, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -27.59278678894043, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -29.99053382873535, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -30.277170181274414, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -33.490962982177734, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -33.827857971191406, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -34.81067657470703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -39.75110626220703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -39.94767379760742, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -40.2974967956543, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "score": -48.499732971191406, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "score": -54.41278839111328, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "score": -54.51130294799805, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT avg( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "score": -57.537315368652344, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 964, "beams": [{"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -26.762855529785156, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -27.57676124572754, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -31.890213012695312, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -34.24237060546875, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -35.3565559387207, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -37.14574432373047, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -38.54526138305664, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -38.93315505981445, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -40.71866989135742, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -46.792503356933594, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "score": -53.41648483276367, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "score": -58.17181396484375, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "score": -59.77363967895508, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT avg( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "score": -62.06064987182617, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 965, "beams": [{"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -31.549327850341797, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -34.94519805908203, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -37.408103942871094, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -41.64531326293945, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -41.767601013183594, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -42.177284240722656, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "score": -42.584251403808594, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -42.94633865356445, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -45.008697509765625, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "score": -49.31145095825195, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "score": -65.8470458984375, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "score": -68.90812683105469, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "score": -72.42333984375, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), count( T1.date_departed) FROM Dogs AS T1        ", "score": -73.90580749511719, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 966, "beams": [{"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -0.00908633042126894, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -4.705530166625977, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( T1.dog_id) FROM Treatments AS T1        ", "score": -31.17458724975586, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT T1.dog_id FROM Treatments AS T1        ", "score": -35.20798110961914, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "score": -36.6757698059082, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( T1.dog_id) FROM Treatments AS T1        ", "score": -41.429161071777344, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT avg( T1.dog_id) FROM Treatments AS T1        ", "score": -41.8874626159668, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "score": -42.63595962524414, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT sum( T1.dog_id) FROM Treatments AS T1        ", "score": -44.04512023925781, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -44.60968017578125, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT max( T1.dog_id) FROM Treatments AS T1        ", "score": -49.97431945800781, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "score": -50.75151062011719, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "score": -51.466064453125, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( T1.dog_id) FROM Dogs AS T1        ", "score": -51.99348449707031, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT sum( *) FROM Dogs AS T1        ", "score": -55.36704635620117, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 967, "beams": [{"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -1.0013530300057027e-05, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -11.516362190246582, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( T1.dog_id) FROM Treatments AS T1        ", "score": -24.166885375976562, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT T1.dog_id FROM Treatments AS T1        ", "score": -34.54875564575195, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "score": -35.59440612792969, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "score": -39.978797912597656, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( T1.dog_id) FROM Treatments AS T1        ", "score": -40.334171295166016, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT avg( T1.dog_id) FROM Treatments AS T1        ", "score": -42.63710021972656, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT sum( T1.dog_id) FROM Treatments AS T1        ", "score": -45.36960983276367, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "score": -46.43778991699219, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -49.017032623291016, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( T1.dog_id) FROM Dogs AS T1        ", "score": -49.308876037597656, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT max( T1.dog_id) FROM Treatments AS T1        ", "score": -50.404052734375, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "score": -50.86235046386719, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT sum( *) FROM Dogs AS T1        ", "score": -53.931396484375, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 968, "beams": [{"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1        ", "score": -19.17259979248047, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Professionals AS T1        ", "score": -25.336902618408203, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.dog_id) FROM Treatments AS T1        ", "score": -27.145030975341797, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1        ", "score": -29.966590881347656, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM Dogs AS T1        ", "score": -38.59928894042969, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT T1.professional_id FROM Treatments AS T1        ", "score": -38.633750915527344, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1        ", "score": -40.38334655761719, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "score": -40.63060760498047, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "score": -44.6696891784668, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.treatment_id) FROM Treatments AS T1        ", "score": -45.703819274902344, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "score": -47.05763626098633, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.dog_id) FROM Dogs AS T1        ", "score": -50.65959167480469, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "score": -51.44585418701172, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.treatment_type_description) FROM Treatment_Types AS T1        ", "score": -54.2205696105957, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 969, "beams": [{"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": 0.0, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "score": -23.04911231994629, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id        ", "score": -23.3966121673584, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": -25.701921463012695, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "score": -26.234601974487305, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM Dogs AS T1 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id JOIN Professionals AS T2 ON T3.professional_id = T2.professional_id        ", "score": -29.62246322631836, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id        ", "score": -31.878917694091797, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Dogs AS T3 ON T1.dog_id = T3.dog_id        ", "score": -34.3218994140625, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id        ", "score": -34.52375030517578, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": -34.59065246582031, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": -35.75755310058594, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id in (SELECT count( T23.professional_id) FROM Treatments AS T23        )       ", "score": -36.37392044067383, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id        ", "score": -36.74580383300781, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT T1.professional_id FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": -36.81714630126953, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "score": -37.59682846069336, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 970, "beams": [{"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.role_code like '%West%'       ", "score": 38.007293701171875, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%'       ", "score": 36.747047424316406, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.city like '%West%'       ", "score": 32.41253662109375, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.state like '%West%'       ", "score": 24.911636352539062, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.role_code like '%West%' GROUP BY T1.city      ", "score": 22.46857452392578, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 15.964311599731445, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "score": 13.796684265136719, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 4.315402984619141, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "score": 1.9443435668945312, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, avg( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 1.9156036376953125, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, max( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 1.8429603576660156, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, sum( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 1.6518287658691406, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, count( T1.city), T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "score": 1.6379547119140625, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, avg( T1.street), T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "score": -0.7067146301269531, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1  GROUP BY T1.role_code, T1.street, T1.city, T1.state HAVING count( T1.street) like '%West%'     ", "score": -3.093524932861328, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 971, "beams": [{"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%'       ", "score": 34.938804626464844, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.city like '%West%'       ", "score": 30.990144729614258, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.state like '%West%'       ", "score": 30.802223205566406, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.role_code like '%West%'       ", "score": 28.07141876220703, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 7.827798843383789, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 7.753204345703125, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, max( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 5.364509582519531, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "score": 4.485790252685547, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( T1.state) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "score": 3.927204132080078, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 2.918750762939453, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, sum( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": 2.150592803955078, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, max( T1.street), T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "score": 0.5503692626953125, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, avg( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "score": -0.08654403686523438, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, avg( T1.street), T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "score": -0.7611770629882812, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT avg( T1.role_code), T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "score": -3.460773468017578, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 972, "beams": [{"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%'       ", "score": 42.544898986816406, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.state like '%North%'       ", "score": 26.54208755493164, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name like '%North%'       ", "score": 21.848417282104492, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.last_name like '%North%'       ", "score": 16.08223533630371, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name like '%North%'       ", "score": 15.070098876953125, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.first_name like '%North%'       ", "score": 14.490371704101562, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.last_name like '%North%'       ", "score": 9.452957153320312, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "score": 8.36993408203125, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.first_name like '%North%'       ", "score": 7.873481750488281, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 4.767627716064453, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1  GROUP BY T1.first_name, T1.last_name, T1.email_address HAVING count( T1.state) like '%North%'     ", "score": 3.5631370544433594, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 3.4192733764648438, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "score": 3.163890838623047, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( *) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "score": 2.999889373779297, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.email_address like '%North%'       ", "score": 1.67657470703125, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 973, "beams": [{"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%'       ", "score": 48.67869567871094, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name like '%North%'       ", "score": 23.590776443481445, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.state like '%North%'       ", "score": 18.516754150390625, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "score": 15.16073989868164, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 14.280651092529297, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 13.128166198730469, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "score": 12.1810302734375, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.last_name like '%North%'       ", "score": 11.077964782714844, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT avg( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 10.044506072998047, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT max( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 9.461555480957031, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT count( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 9.333690643310547, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT min( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "score": 8.738418579101562, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "score": 7.437442779541016, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.first_name like '%North%'       ", "score": 6.6609954833984375, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1  GROUP BY T1.first_name, T1.last_name, T1.email_address HAVING count( T1.state) like '%North%'     ", "score": 5.246395111083984, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 976, "beams": [{"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "score": -0.0006310140597634017, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.date_of_treatment DESC LIMIT 1    ", "score": -7.368587970733643, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.cost_of_treatment DESC LIMIT 1    ", "score": -16.924638748168945, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT max( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "score": -19.374719619750977, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.cost_of_treatment DESC LIMIT 1    ", "score": -20.11593246459961, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT avg( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "score": -33.5991325378418, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT sum( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "score": -34.823123931884766, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT min( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "score": -35.84159469604492, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT max( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.cost_of_treatment DESC LIMIT 1    ", "score": -36.74644470214844, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.date_of_treatment DESC LIMIT 1    ", "score": -37.92580032348633, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.age DESC LIMIT 1    ", "score": -38.29736328125, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT count( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "score": -42.58159255981445, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY max( T1.date_of_treatment) DESC LIMIT 1    ", "score": -44.311378479003906, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY avg( T1.date_of_treatment) DESC LIMIT 1    ", "score": -44.3560791015625, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY sum( T1.date_of_treatment) DESC LIMIT 1    ", "score": -44.57689666748047, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 977, "beams": [{"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "score": -7.152555099310121e-07, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.cost_of_treatment ASC LIMIT 1    ", "score": -14.163042068481445, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.age ASC LIMIT 1    ", "score": -28.17083740234375, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.date_of_treatment ASC LIMIT 1    ", "score": -35.87084197998047, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT max( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "score": -37.28327560424805, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.date_arrived ASC LIMIT 1    ", "score": -40.73816680908203, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT avg( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "score": -41.8109016418457, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.date_of_birth ASC LIMIT 1    ", "score": -43.1727294921875, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT min( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "score": -43.55398178100586, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.cost_of_treatment ASC LIMIT 1    ", "score": -44.106590270996094, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY avg( T1.date_of_treatment) ASC LIMIT 1    ", "score": -44.223854064941406, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY count( *) ASC LIMIT 1    ", "score": -44.39642333984375, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT sum( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "score": -46.49129867553711, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT count( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "score": -48.211151123046875, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY min( T1.date_of_treatment) ASC LIMIT 1    ", "score": -49.814945220947266, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 984, "beams": [{"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": 7.1523027420043945, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -3.0522842407226562, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -5.223240852355957, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -6.368050575256348, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -12.984134674072266, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -15.217020034790039, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -15.440764427185059, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -19.38888931274414, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.dog_id FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -21.39034080505371, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -23.938425064086914, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, min( T1.weight) FROM Dogs AS T1 WHERE T1.abandoned_yn = '1' GROUP BY T1.age    INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -25.728734970092773, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.abandoned_yn, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -25.973447799682617, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -26.64776039123535, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, count( *) FROM Dogs AS T1 WHERE T1.abandoned_yn = '1' GROUP BY T1.age    INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -27.094406127929688, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, max( T2.age), T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0' GROUP BY T2.weight        ", "score": -27.319950103759766, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 985, "beams": [{"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": 2.4277000427246094, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -7.568175792694092, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -9.61594009399414, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -9.790005683898926, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -17.451499938964844, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -18.3784236907959, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -18.96141815185547, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -22.161972045898438, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -28.06911849975586, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.abandoned_yn, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -28.972312927246094, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.dog_id FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -29.577468872070312, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.weight, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -29.804128646850586, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -30.077054977416992, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = 'Note'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "score": -30.576562881469727, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, min( T2.age), T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0' GROUP BY T2.weight        ", "score": -31.23638153076172, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 986, "beams": [{"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1        ", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1        ", "score": -33.10674285888672, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1        ", "score": -33.24181365966797, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1        ", "score": -34.48680114746094, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1        ", "score": -39.182315826416016, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.age FROM Dogs AS T1        ", "score": -43.63664627075195, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -75.96723937988281, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -106.52908325195312, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "score": -114.39581298828125, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.breed_code FROM Dogs AS T1        ", "score": -116.47105407714844, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.breed_name FROM Breeds AS T1        ", "score": -117.44256591796875, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.name FROM Dogs AS T1        ", "score": -119.15242004394531, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.weight FROM Dogs AS T1        ", "score": -123.21842956542969, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "score": -124.77296447753906, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT avg( T1.breed_code) FROM Dogs AS T1        ", "score": -127.52335357666016, "correct_code": "SELECT avg(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 987, "beams": [{"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1        ", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1        ", "score": -33.59394836425781, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1        ", "score": -34.59710693359375, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1        ", "score": -36.118404388427734, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1        ", "score": -39.70266342163086, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.age FROM Dogs AS T1        ", "score": -44.88025665283203, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -67.90090942382812, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "score": -99.57655334472656, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "score": -113.10734558105469, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.breed_code FROM Dogs AS T1        ", "score": -121.63323974609375, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.breed_name FROM Breeds AS T1        ", "score": -122.1939468383789, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.name FROM Dogs AS T1        ", "score": -124.02196502685547, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.weight FROM Dogs AS T1        ", "score": -127.15096282958984, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "score": -129.59507751464844, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( T1.weight) FROM Dogs AS T1        ", "score": -129.85728454589844, "correct_code": "SELECT avg(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 988, "beams": [{"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -0.02559933252632618, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -3.677962064743042, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -34.268470764160156, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -38.5115852355957, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -39.83282470703125, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -44.064186096191406, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -44.09874725341797, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY count( T1.age) DESC LIMIT 1    ", "score": -45.21379089355469, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY avg( T1.age) DESC LIMIT 1    ", "score": -46.86994934082031, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -48.183677673339844, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY sum( T1.age) DESC LIMIT 1    ", "score": -48.79212951660156, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -48.922908782958984, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -50.32341766357422, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -52.64410400390625, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY count( T1.date_of_birth) DESC LIMIT 1    ", "score": -52.76130294799805, "correct_code": "SELECT max(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 989, "beams": [{"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -0.0006466205231845379, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -7.343984603881836, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -34.75748825073242, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -41.265785217285156, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -42.705989837646484, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -44.55569076538086, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY count( T1.age) DESC LIMIT 1    ", "score": -45.18840026855469, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY avg( T1.age) DESC LIMIT 1    ", "score": -47.729427337646484, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -49.14157485961914, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY sum( T1.age) DESC LIMIT 1    ", "score": -49.14686584472656, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -49.237735748291016, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "score": -50.982688903808594, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "score": -52.40119552612305, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY max( T1.age) DESC LIMIT 1    ", "score": -54.112796783447266, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY min( T1.age) DESC LIMIT 1    ", "score": -54.770877838134766, "correct_code": "SELECT max(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 990, "beams": [{"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, T1.charge_amount FROM Charges AS T1        ", "score": -0.014083758927881718, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, sum( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -4.269771575927734, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, max( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -15.602151870727539, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, avg( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -19.42856216430664, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, count( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -19.549144744873047, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, min( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -24.42020606994629, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT max( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -42.675689697265625, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT max( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "score": -43.930564880371094, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT sum( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -46.31672668457031, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT min( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -47.40974807739258, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT avg( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -47.600341796875, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT avg( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "score": -48.853416442871094, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, count( *) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -48.973548889160156, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT sum( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "score": -50.02312088012695, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT min( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "score": -50.38823699951172, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 991, "beams": [{"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, T1.charge_amount FROM Charges AS T1        ", "score": 0.0, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, sum( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -21.907602310180664, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, max( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -24.662464141845703, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, count( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -27.99260711669922, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, avg( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -30.965227127075195, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, min( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "score": -36.429779052734375, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT max( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -43.11045455932617, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT min( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -48.75382614135742, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT avg( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -48.811485290527344, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT sum( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -49.54770278930664, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT count( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "score": -53.265968322753906, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT max( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "score": -64.30776977539062, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT max( T1.charge_type), max( T1.charge_amount) FROM Charges AS T1        ", "score": -67.40362548828125, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT avg( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "score": -69.98622131347656, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT min( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "score": -70.19058990478516, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 992, "beams": [{"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -24.12256622314453, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_type DESC LIMIT 1    ", "score": -25.439130783081055, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT sum( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -28.929800033569336, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "score": -29.560863494873047, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT avg( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -32.327083587646484, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY count( *) DESC LIMIT 1    ", "score": -32.855594635009766, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY max( T1.charge_amount) DESC LIMIT 1    ", "score": -33.2730712890625, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT min( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -34.73958969116211, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY avg( T1.charge_amount) DESC LIMIT 1    ", "score": -35.12912368774414, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT count( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -35.66893005371094, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY min( T1.charge_amount) DESC LIMIT 1    ", "score": -45.29705047607422, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_type FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -47.49637985229492, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_type DESC LIMIT 1    ", "score": -48.674781799316406, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "score": -53.19908905029297, "correct_code": "SELECT max(charge_amount) FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 993, "beams": [{"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_type FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -26.191673278808594, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_type DESC LIMIT 1    ", "score": -36.237606048583984, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "score": -44.73805618286133, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -44.97658157348633, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY avg( T1.charge_amount) DESC LIMIT 1    ", "score": -45.92886734008789, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY count( *) DESC LIMIT 1    ", "score": -46.693336486816406, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY max( T1.charge_amount) DESC LIMIT 1    ", "score": -48.29743194580078, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT avg( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -48.88333511352539, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT sum( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -52.830387115478516, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT min( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -54.229461669921875, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT count( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "score": -54.84600067138672, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_type FROM Charges AS T1  GROUP BY T1.charge_type  ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "score": -57.916961669921875, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.cost_of_treatment DESC LIMIT 1    ", "score": -58.73442077636719, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY min( T1.charge_amount) DESC LIMIT 1    ", "score": -59.17674255371094, "correct_code": "SELECT max(charge_amount) FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 994, "beams": [{"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, T1.cell_number FROM Professionals AS T1        ", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.cell_number, T1.home_phone FROM Professionals AS T1        ", "score": -22.184890747070312, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, max( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -33.63826370239258, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, avg( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -36.02001190185547, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT max( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -38.8320198059082, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, count( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -39.20248794555664, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, count( *) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "score": -39.46953582763672, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT avg( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -39.82637405395508, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT min( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -40.96780776977539, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT count( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -41.72828674316406, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, min( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "score": -44.63064193725586, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT sum( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -44.71907424926758, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, sum( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -45.296730041503906, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, max( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "score": -45.69472122192383, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 995, "beams": [{"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, T1.cell_number FROM Professionals AS T1        ", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.cell_number, T1.home_phone FROM Professionals AS T1        ", "score": -20.522537231445312, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, max( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -32.61219787597656, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, avg( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -35.051475524902344, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT max( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -36.32289123535156, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT avg( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -37.44574737548828, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT count( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -38.59721374511719, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, count( *) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "score": -38.844783782958984, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, count( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -38.88373565673828, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT min( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -39.30593490600586, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT sum( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -41.81117630004883, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, min( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "score": -42.16151428222656, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, max( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "score": -43.94264602661133, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, sum( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "score": -44.56471252441406, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, sum( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "score": -44.63558578491211, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 996, "beams": [{"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "score": 0.0, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, max(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "score": -28.86331558227539, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, avg(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "score": -32.7685546875, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, count(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "score": -33.93911361694336, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -34.475894927978516, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_name, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "score": -35.65068054199219, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT count(DISTINCT *), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -37.41740417480469, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, sum(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "score": -39.700740814208984, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, min(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "score": -39.72895431518555, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -39.83921813964844, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -40.913639068603516, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -44.38911056518555, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_name), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -45.76083755493164, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -46.67179489135742, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_name), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "score": -48.46456527709961, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 997, "beams": [{"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, T1.size_code FROM Dogs AS T1        ", "score": -0.0453304760158062, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code        ", "score": -3.116356372833252, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_name, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code        ", "score": -33.62641143798828, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, avg(DISTINCT T1.size_code) FROM Dogs AS T1  GROUP BY T1.breed_code      ", "score": -35.334354400634766, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_code), T1.size_code FROM Dogs AS T1  GROUP BY T1.size_code      ", "score": -36.25392532348633, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, max(DISTINCT T1.size_code) FROM Dogs AS T1  GROUP BY T1.breed_code      ", "score": -36.297935485839844, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, avg(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T1.breed_code      ", "score": -37.193092346191406, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, max(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T1.breed_code      ", "score": -38.59473419189453, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_code), T1.size_code FROM Dogs AS T1  GROUP BY T1.size_code      ", "score": -38.66960144042969, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.size_code      ", "score": -38.716739654541016, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.breed_code), T1.size_code FROM Dogs AS T1  GROUP BY T1.size_code      ", "score": -39.558250427246094, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.size_code      ", "score": -39.941070556640625, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, count(DISTINCT T1.size_code) FROM Dogs AS T1  GROUP BY T1.breed_code      ", "score": -40.75503158569336, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.size_code      ", "score": -43.617919921875, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, count(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T1.breed_code      ", "score": -43.71732711791992, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1000, "beams": [{"orig_question": "How many singers are there?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT min( *) FROM singer AS T1        ", "score": -33.49449157714844, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer AS T1        ", "score": -36.05208969116211, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "score": -36.368953704833984, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "score": -36.43966293334961, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( *) FROM singer AS T1        ", "score": -39.89617919921875, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT sum( *) FROM singer AS T1        ", "score": -45.03900146484375, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1        ", "score": -49.491737365722656, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "score": -49.841880798339844, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "score": -51.10678482055664, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT max( *) FROM singer AS T1        ", "score": -55.06610107421875, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( T1.Singer_ID) FROM singer AS T1        ", "score": -58.461666107177734, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT T1.Singer_ID FROM singer AS T1        ", "score": -65.63969421386719, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT min( T1.Singer_ID) FROM singer AS T1        ", "score": -66.50895690917969, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( T1.Sales) FROM song AS T1        ", "score": -68.982666015625, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1001, "beams": [{"orig_question": "What is the count of singers?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT min( *) FROM singer AS T1        ", "score": -33.8614616394043, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "score": -35.237483978271484, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "score": -38.19218444824219, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "score": -46.42584228515625, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "score": -49.04355239868164, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1        ", "score": -49.16046905517578, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer AS T1        ", "score": -54.93462371826172, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT sum( *) FROM singer AS T1        ", "score": -54.957462310791016, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT avg( *) FROM singer AS T1        ", "score": -56.068359375, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT max( *) FROM singer AS T1        ", "score": -69.41786193847656, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT avg( T1.Singer_ID) FROM singer AS T1        ", "score": -70.09417724609375, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT min( T1.Singer_ID) FROM singer AS T1        ", "score": -70.73640441894531, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "score": -75.99543762207031, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT T1.Singer_ID FROM singer AS T1        ", "score": -76.83153533935547, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1004, "beams": [{"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, T1.Citizenship FROM singer AS T1        ", "score": 0.0, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -30.921714782714844, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, max( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -38.773231506347656, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT avg( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -40.05485534667969, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, avg( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -40.62636184692383, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT min( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -42.73420333862305, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT sum( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -44.139854431152344, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, count( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -48.228660583496094, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, min( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -49.04596710205078, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT count( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -49.41301345825195, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, sum( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -50.71266555786133, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), max( T1.Citizenship) FROM singer AS T1        ", "score": -68.85799407958984, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), avg( T1.Citizenship) FROM singer AS T1        ", "score": -70.35447692871094, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT avg( T1.Birth_Year), max( T1.Citizenship) FROM singer AS T1        ", "score": -78.02471923828125, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), count( T1.Citizenship) FROM singer AS T1        ", "score": -78.97509002685547, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1005, "beams": [{"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, T1.Citizenship FROM singer AS T1        ", "score": 0.0, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -30.023340225219727, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, max( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -36.87493896484375, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, avg( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -37.923423767089844, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT avg( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -39.516056060791016, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT min( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -40.63678741455078, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT sum( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -42.98150634765625, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, count( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -45.898193359375, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, min( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -46.01093292236328, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT count( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "score": -48.209171295166016, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, sum( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "score": -48.378116607666016, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), max( T1.Citizenship) FROM singer AS T1        ", "score": -66.36011505126953, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), avg( T1.Citizenship) FROM singer AS T1        ", "score": -66.97575378417969, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), min( T1.Citizenship) FROM singer AS T1        ", "score": -75.47298431396484, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), count( T1.Citizenship) FROM singer AS T1        ", "score": -75.84893798828125, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1006, "beams": [{"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "score": 55.48173904418945, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "score": 17.23955535888672, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "score": 13.916885375976562, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "score": 12.94607162475586, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "score": 12.196823120117188, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING count( T1.Citizenship) != 'France'     ", "score": 11.75296401977539, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "score": 9.229331970214844, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING avg( T1.Citizenship) != 'France'     ", "score": 7.128810882568359, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING sum( T1.Citizenship) != 'France'     ", "score": 5.854679107666016, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING max( T1.Citizenship) != 'France'     ", "score": 4.413005828857422, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING min( T1.Citizenship) != 'France'     ", "score": 2.6563339233398438, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING count( T1.Citizenship) != 'France'     ", "score": -25.68762969970703, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1   HAVING count( T1.Citizenship) != 'France'     ", "score": -29.051746368408203, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING avg( T1.Citizenship) != 'France'     ", "score": -30.806411743164062, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Name != 'France'       ", "score": -33.73830032348633, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1007, "beams": [{"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "score": 14.859888076782227, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "score": -23.45297622680664, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "score": -26.96872901916504, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "score": -27.08209800720215, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "score": -27.629344940185547, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "score": -31.506847381591797, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING count( T1.Citizenship) != 'French'     ", "score": -31.5784854888916, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING avg( T1.Citizenship) != 'French'     ", "score": -33.19254684448242, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING max( T1.Citizenship) != 'French'     ", "score": -36.85364532470703, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING sum( T1.Citizenship) != 'French'     ", "score": -37.059234619140625, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING min( T1.Citizenship) != 'French'     ", "score": -37.68943786621094, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Name != 'French'       ", "score": -46.474090576171875, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING count( T1.Citizenship) != 'French'     ", "score": -69.36885833740234, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING avg( T1.Citizenship) != 'French'     ", "score": -71.00175476074219, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Birth_Year != French       ", "score": -77.22146606445312, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1010, "beams": [{"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -36.83829116821289, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -38.505313873291016, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -42.004520416259766, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -42.84781265258789, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY count( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -44.79676055908203, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY max( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -45.03533935546875, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -45.9460334777832, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -46.337921142578125, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -47.44572067260742, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY min( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -57.73805618286133, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -75.28978729248047, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -79.63967895507812, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY avg( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -80.419921875, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -82.38427734375, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1011, "beams": [{"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": 0.0, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -20.756973266601562, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY max( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -35.25921630859375, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -36.161842346191406, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -40.570762634277344, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY count( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -40.932395935058594, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -43.349334716796875, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -46.122066497802734, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -46.983299255371094, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "score": -47.64442825317383, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY min( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -50.705413818359375, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -61.168235778808594, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -64.01160430908203, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -66.75086212158203, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "score": -66.8501205444336, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1018, "beams": [{"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": 0.0, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -34.38667297363281, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT avg( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -40.005680084228516, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT min( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -40.91339111328125, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -40.95833206176758, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT sum( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -41.98457717895508, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -42.15139389038086, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -43.4135627746582, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT count( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -46.39735412597656, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, min( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -46.726112365722656, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, sum( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -46.916812896728516, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": -75.19042205810547, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": -76.55646514892578, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": -77.929443359375, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, count( *) FROM song AS T1  GROUP BY T1.Title      ", "score": -80.59489440917969, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1019, "beams": [{"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": 0.0, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -35.865013122558594, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -41.6416015625, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT min( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -41.79850387573242, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT avg( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -42.58797073364258, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -44.255123138427734, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT sum( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -45.586544036865234, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -46.052371978759766, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT count( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "score": -48.81219482421875, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, min( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -50.90006637573242, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, sum( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "score": -51.94755554199219, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": -77.2747802734375, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": -80.0167236328125, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": -81.88998413085938, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT min( T1.Title), avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "score": -83.25086975097656, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1020, "beams": [{"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 60.60452651977539, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 21.58890151977539, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 20.631397247314453, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 20.23507308959961, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 19.300582885742188, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "score": 19.203723907470703, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "score": 18.255859375, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 17.121601104736328, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING sum( T2.Sales) > 300000     ", "score": 16.419937133789062, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( T2.Sales) > 300000     ", "score": 11.017738342285156, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING min( T2.Sales) > 300000     ", "score": 4.431365966796875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 WHERE T1.Net_Worth_Millions > 300000       ", "score": -7.3757781982421875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "score": -17.625286102294922, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "score": -19.08246612548828, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "score": -19.53814697265625, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1021, "beams": [{"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 63.53425979614258, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 25.342666625976562, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 24.574432373046875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 24.2054443359375, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 22.928668975830078, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "score": 21.30052947998047, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "score": 20.729278564453125, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "score": 20.680068969726562, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING sum( T2.Sales) > 300000     ", "score": 19.962738037109375, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( T2.Sales) > 300000     ", "score": 15.426071166992188, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING min( T2.Sales) > 300000     ", "score": 6.942684173583984, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 WHERE T1.Net_Worth_Millions > 300000       ", "score": -4.1363983154296875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "score": -15.377693176269531, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "score": -15.651809692382812, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "score": -16.402626037597656, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1030, "beams": [{"orig_question": "How many available features are there in total?", "inferred_code": "SELECT count( *) FROM Other_Available_Features AS T1        ", "score": 0.0, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Other_Available_Features AS T1        ", "score": -34.092037200927734, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.feature_name) FROM Other_Available_Features AS T1        ", "score": -34.148433685302734, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1        ", "score": -37.709632873535156, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT sum( T1.feature_name) FROM Other_Available_Features AS T1        ", "score": -37.910621643066406, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( *) FROM Other_Available_Features AS T1        ", "score": -38.33431625366211, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.feature_id) FROM Other_Available_Features AS T1        ", "score": -38.58234786987305, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT sum( *) FROM Other_Available_Features AS T1        ", "score": -40.577239990234375, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT T1.feature_id FROM Other_Available_Features AS T1        ", "score": -42.884422302246094, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT sum( T1.feature_id) FROM Other_Available_Features AS T1        ", "score": -42.89339065551758, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.feature_description) FROM Other_Available_Features AS T1        ", "score": -44.34716033935547, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.apt_feature_1) FROM Properties AS T1        ", "score": -45.51510238647461, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT avg( T1.feature_name) FROM Other_Available_Features AS T1        ", "score": -45.864646911621094, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.oth_feature_1) FROM Properties AS T1        ", "score": -46.27570343017578, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT max( T1.feature_name) FROM Other_Available_Features AS T1        ", "score": -46.84181594848633, "correct_code": "SELECT count(*) FROM Other_Available_Features"}], "db_name": "real_estate_properties", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1031, "beams": [{"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "score": 85.2189712524414, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING count( T2.feature_name) = 'AirCon'     ", "score": 49.8509635925293, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_type_name = 'AirCon'       ", "score": 47.80654525756836, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1 WHERE T1.feature_name = 'AirCon'       ", "score": 46.64125061035156, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT avg( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "score": 44.9486198425293, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING avg( T2.feature_name) = 'AirCon'     ", "score": 44.709476470947266, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT max( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "score": 43.69265365600586, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT count( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "score": 43.29347229003906, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING max( T2.feature_name) = 'AirCon'     ", "score": 38.87400436401367, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT sum( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "score": 38.0297966003418, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT min( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "score": 37.1176643371582, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING min( T2.feature_name) = 'AirCon'     ", "score": 34.7418098449707, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING sum( T2.feature_name) = 'AirCon'     ", "score": 33.939170837402344, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1 WHERE T1.feature_type_code = 'AirCon'       ", "score": 31.64295196533203, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_code FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "score": 27.20343780517578, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}], "db_name": "real_estate_properties", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
