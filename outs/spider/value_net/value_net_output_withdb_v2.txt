{"index": 0, "beams": [{"orig_question": "How many singers do we have?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "inferred_question": "How many singers are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8605920211398382, "beam_bleu_score": 0.6495279402461448}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT min( *) FROM singer AS T1        ", "inferred_question": "", "score": -30.809890747070312, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.6495279402461448}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What is the average capacity of all stadiums?", "score": -32.07801055908203, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05550903242434224, "beam_bleu_score": 0.07253758034132313}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM singer AS T1        ", "inferred_question": "Show me everything about singers.", "score": -33.44770812988281, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07335902496163982, "beam_bleu_score": 0.3370346671329419}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "inferred_question": "What are the names of singers?", "score": -33.59171676635742, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15962763659136703, "beam_bleu_score": 0.3128418715354195}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the average name of all singers?", "score": -36.753089904785156, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15475120750929017, "beam_bleu_score": 0.2547654395622258}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT sum( *) FROM singer AS T1        ", "inferred_question": "", "score": -40.45178985595703, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.2547654395622258}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT sum( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What is the total capacity of all stadiums?", "score": -41.070533752441406, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06083787006019392, "beam_bleu_score": 0.04414664783524847}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT T1.Capacity FROM stadium AS T1        ", "inferred_question": "What are the capacities of stadiums?", "score": -42.30142593383789, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.046933919516256806, "beam_bleu_score": 0.050914332076110964}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT min( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the capacities of stadiums with minimum capacity?", "score": -42.4748420715332, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05579508984347392, "beam_bleu_score": 0.0370803898938293}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( *) FROM singer AS T1        ", "inferred_question": "", "score": -43.591888427734375, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0370803898938293}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "inferred_question": "What are the names of singers with minimum name?", "score": -44.668724060058594, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.119396639964229, "beam_bleu_score": 0.22520419219851376}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the capacities of stadiums with maximum capacity?", "score": -44.68417739868164, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.056526321870584484, "beam_bleu_score": 0.05183325034815577}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the total name of all singers?", "score": -45.708213806152344, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28380707741329647, "beam_bleu_score": 0.24705691690760725}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT avg( T1.Average) FROM stadium AS T1        ", "inferred_question": "What is the average average number of visitors of all stadiums?", "score": -47.49559783935547, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05677269741475777, "beam_bleu_score": 0.06333279109228278}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1, "beams": [{"orig_question": "What is the total number of singers?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "inferred_question": "How many singers are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9224292011794392, "beam_bleu_score": 0.3135472746964853}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the capacities of stadiums with minimum capacity?", "score": -28.160459518432617, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.058721249156763355, "beam_bleu_score": 0.23061350181564957}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT avg( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What is the average capacity of all stadiums?", "score": -28.93086051940918, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05038809343126638, "beam_bleu_score": 0.3889516974084787}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT sum( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What is the total capacity of all stadiums?", "score": -32.964088439941406, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06119424905330628, "beam_bleu_score": 0.5002408922210438}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "inferred_question": "What are the names of singers?", "score": -33.086421966552734, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21954753486005985, "beam_bleu_score": 0.5458499081077502}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "inferred_question": "What are the names of singers with minimum name?", "score": -33.67873001098633, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12826854909523366, "beam_bleu_score": 0.4076995811191736}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the average name of all singers?", "score": -35.52918243408203, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16248013253870652, "beam_bleu_score": 0.5781288957316278}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM singer AS T1        ", "inferred_question": "Show me everything about singers.", "score": -37.419166564941406, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06952672373454671, "beam_bleu_score": 0.2791603850850766}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the average numbers of visitors of stadiums with minimum average number of visitors?", "score": -38.93437576293945, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1012075115066825, "beam_bleu_score": 0.24456937823975614}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT T1.Capacity FROM stadium AS T1        ", "inferred_question": "What are the capacities of stadiums?", "score": -38.976844787597656, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04333776717543625, "beam_bleu_score": 0.37133549610202693}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the total name of all singers?", "score": -39.274940490722656, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32779357804610676, "beam_bleu_score": 0.7539009906526505}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT avg( T1.Average) FROM stadium AS T1        ", "inferred_question": "What is the average average number of visitors of all stadiums?", "score": -41.706451416015625, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0646281757431979, "beam_bleu_score": 0.3956896895503917}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the capacities of stadiums with maximum capacity?", "score": -42.335933685302734, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06112140230243868, "beam_bleu_score": 0.22500736583717507}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT min( T1.Singer_ID) FROM singer AS T1        ", "inferred_question": "What are the ids of singers with minimum id?", "score": -42.98709487915039, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08418690423333508, "beam_bleu_score": 0.44609674630825524}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT sum( T1.Average) FROM stadium AS T1        ", "inferred_question": "What is the total average number of visitors of all stadiums?", "score": -43.58990478515625, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08064590208209022, "beam_bleu_score": 0.4798684360207671}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 4, "beams": [{"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 46.65163803100586, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.060932491507667996, "beam_bleu_score": 0.2893456043542782}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T1.Average) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the average average number of visitors and maximum average number of visitors of stadiums hosting concerts in which singers whose home country is france performed? Also show the minimum age of the singers.", "score": 46.36632537841797, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.027301865677221704, "beam_bleu_score": 0.25938894698802245}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T1.Average), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the average average number of visitors and minimum average number of visitors of stadiums hosting concerts in which singers whose home country is france performed? Also show the maximum age of the singers.", "score": 37.78122329711914, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04267027448587202, "beam_bleu_score": 0.25786753857616873}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Age), min( T1.Age), max( T1.Age) FROM singer AS T1 WHERE T1.Country = 'France'       ", "inferred_question": "What are the average age, minimum age, and maximum age of singers whose home country is france?", "score": 27.57888412475586, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8599617176611947, "beam_bleu_score": 0.6357967699438755}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT max( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the maximum average number of visitors of the stadiums.", "score": 15.015247344970703, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06062492405711095, "beam_bleu_score": 0.2859207927992703}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT min( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the minimum average number of visitors of the stadiums.", "score": 14.751199722290039, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06036708390443035, "beam_bleu_score": 0.2859207927992703}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID   HAVING max( T2.Country) = 'France'     ", "inferred_question": "What are the minimum age and maximum age of singers who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 14.16061019897461, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.020520809143213525, "beam_bleu_score": 0.3173862787481248}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), avg( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the minimum age and average age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 12.095657348632812, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.051513075323037394, "beam_bleu_score": 0.25779646756664754}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT sum( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the total average number of visitors of the stadiums.", "score": 11.02548599243164, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.060289044487980226, "beam_bleu_score": 0.2923441719443915}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID   HAVING count( T2.Country) = 'France'     ", "inferred_question": "What are the minimum age and maximum age of singers who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 10.759014129638672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.020520809143213525, "beam_bleu_score": 0.3173862787481248}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), avg( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the average age and maximum age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 10.50433349609375, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05019507744614482, "beam_bleu_score": 0.2649503346456638}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT count( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the number of average numbers of visitors of the stadiums.", "score": 9.225566864013672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05501156435754073, "beam_bleu_score": 0.28456676068833187}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), sum( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the minimum age and total age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 7.693561553955078, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04443335613570831, "beam_bleu_score": 0.2638726378053152}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), count( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'       ", "inferred_question": "What are the number of ages and maximum age of singers whose home country is france who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 6.454570770263672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.03438279299572111, "beam_bleu_score": 0.2639883946324047}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), T2.Age FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France' GROUP BY T2.Age      ", "inferred_question": "", "score": 0.9130325317382812, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 5, "beams": [{"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": 15.359737396240234, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.052580876959431255, "beam_bleu_score": 0.2702990118624108}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T1.Average) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the average average number of visitors and maximum average number of visitors of stadiums hosting concerts in which singers whose home country is french performed? Also show the minimum age of the singers.", "score": 5.807151794433594, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.010614540788479454, "beam_bleu_score": 0.2456058392101193}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T1.Average), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the average average number of visitors and minimum average number of visitors of stadiums hosting concerts in which singers whose home country is french performed? Also show the maximum age of the singers.", "score": -2.9864559173583984, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.02741032353155448, "beam_bleu_score": 0.24409434688749668}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Is_male = French       ", "inferred_question": "", "score": -4.541116714477539, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Age), min( T1.Age), max( T1.Age) FROM singer AS T1 WHERE T1.Country = 'French'       ", "inferred_question": "What are the average age, minimum age, and maximum age of singers whose home country is french?", "score": -10.067874908447266, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7480250725771704, "beam_bleu_score": 0.5675318941264537}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT max( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the maximum average number of visitors of the stadiums.", "score": -15.95585823059082, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.053278421308356805, "beam_bleu_score": 0.26676493148653146}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT min( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the minimum average number of visitors of the stadiums.", "score": -16.511943817138672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.053652853914414766, "beam_bleu_score": 0.26676493148653146}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT sum( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the total average number of visitors of the stadiums.", "score": -19.844520568847656, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05125585394233034, "beam_bleu_score": 0.27289125770125394}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), avg( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the average age and maximum age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": -20.72132110595703, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04258310946330457, "beam_bleu_score": 0.24689083715611113}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT count( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the minimum age and maximum age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the number of average numbers of visitors of the stadiums.", "score": -20.916854858398438, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05415342387308997, "beam_bleu_score": 0.26262890190532373}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), avg( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the minimum age and average age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": -23.117700576782227, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04578770378325869, "beam_bleu_score": 0.2396232493658253}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), T2.Age FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French' GROUP BY T2.Age      ", "inferred_question": "", "score": -24.998245239257812, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), count( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'French'       ", "inferred_question": "What are the number of ages and maximum age of singers whose home country is french who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": -25.03154754638672, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.027431325383731164, "beam_bleu_score": 0.24306294343666107}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID   HAVING count( T2.Country) = 'French'     ", "inferred_question": "What are the minimum age and maximum age of singers who performed in concerts hosted in stadiums? Also show the average average number of visitors of the stadiums.", "score": -26.17513084411621, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.2946930321969253}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Age = French       ", "inferred_question": "", "score": -61.96039581298828, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 6, "beams": [{"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the most famous songs and release years of singers with minimum age?", "score": 0.0, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32324277061593143, "beam_bleu_score": 0.4527067839685026}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT max( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -37.995845794677734, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, max( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -39.62163543701172, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, avg( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -40.582584381103516, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT avg( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -42.41324234008789, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -42.55162811279297, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY count( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -43.123958587646484, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT min( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -44.162296295166016, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY min( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -44.18937683105469, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, min( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -45.50093460083008, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT count( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -47.12169647216797, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT sum( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -47.449100494384766, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, count( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -47.6531982421875, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -49.64201354980469, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -49.86699295043945, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 7, "beams": [{"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the most famous songs and release years of singers with minimum age?", "score": 0.0, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4461096410461335, "beam_bleu_score": 0.6404646620352227}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT max( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -39.571414947509766, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT avg( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -42.42283630371094, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, avg( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -42.71337890625, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, max( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -43.1120719909668, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -43.931610107421875, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY count( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -44.082393646240234, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY min( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -44.43215560913086, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT min( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -45.21595764160156, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT count( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -48.813026428222656, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -49.518638610839844, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, min( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -49.5980110168457, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT sum( T1.Song_Name), T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_release_year  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -49.748905181884766, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, count( T1.Song_release_year) FROM singer AS T1  GROUP BY T1.Song_Name  ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "", "score": -50.646209716796875, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1  GROUP BY T1.Song_Name, T1.Song_release_year  ORDER BY max( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -53.57224655151367, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 8, "beams": [{"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "What are the distinct home countries of singers with a age of more than 20 years?", "score": 81.06266784667969, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.5503382763012086}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": 38.982242584228516, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "What are the distinct home countries of singers with a age of more than 20 years with maximum home country?", "score": 37.216861724853516, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7734200228833387, "beam_bleu_score": 0.41632805735119965}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "How many distinct home countries of singers with a age of more than 20 years are there?", "score": 37.195518493652344, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.4946467014290009}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING avg( T1.Age) > 20     ", "inferred_question": "", "score": 36.54063034057617, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "What are the distinct home countries of singers with a age of more than 20 years with minimum home country?", "score": 36.29646682739258, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7229687397965857, "beam_bleu_score": 0.41632805735119965}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING sum( T1.Age) > 20     ", "inferred_question": "", "score": 34.53741455078125, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "", "score": 34.32891082763672, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "", "score": 30.88300323486328, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING count( T1.Age) > 20     ", "inferred_question": "", "score": 30.27202606201172, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING min( T1.Age) > 20     ", "inferred_question": "", "score": 27.636634826660156, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": -3.382781982421875, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": -3.4810638427734375, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": -4.393135070800781, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING avg( T1.Age) > 20     ", "inferred_question": "", "score": -6.760948181152344, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 9, "beams": [{"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "What are the distinct home countries of singers with a age of more than 20 years?", "score": 75.77813720703125, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.5246721747448196}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": 39.87813186645508, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING avg( T1.Age) > 20     ", "inferred_question": "", "score": 34.71080780029297, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "What are the distinct home countries of singers with a age of more than 20 years with maximum home country?", "score": 33.92023849487305, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7872236540570433, "beam_bleu_score": 0.3974385430468621}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING sum( T1.Age) > 20     ", "inferred_question": "", "score": 32.39799880981445, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "How many distinct home countries of singers with a age of more than 20 years are there?", "score": 31.75607681274414, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9008031488084911, "beam_bleu_score": 0.4415950116322805}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "What are the distinct home countries of singers with a age of more than 20 years with minimum home country?", "score": 29.46857452392578, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7501326916355129, "beam_bleu_score": 0.3974385430468621}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING count( T1.Age) > 20     ", "inferred_question": "", "score": 28.82123565673828, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "", "score": 27.308055877685547, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT T1.Country FROM singer AS T1  GROUP BY T1.Country HAVING min( T1.Age) > 20     ", "inferred_question": "", "score": 25.009933471679688, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM singer AS T1 WHERE T1.Age > 20       ", "inferred_question": "", "score": 24.813602447509766, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": 0.160369873046875, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": -1.8685760498046875, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM singer AS T1   HAVING max( T1.Age) > 20     ", "inferred_question": "", "score": -4.361595153808594, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM singer AS T1   HAVING avg( T1.Age) > 20     ", "inferred_question": "", "score": -7.583168029785156, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 14, "beams": [{"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000       ", "inferred_question": "What are the locations and names of stadiums with a capacity of less than 10000 people and with a capacity of more than 5000 people?", "score": 103.70722961425781, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49641657444346443, "beam_bleu_score": 0.4298473228968171}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT max( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 64.7999267578125, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT avg( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 61.114662170410156, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING avg( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 60.42581558227539, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT min( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 59.1168327331543, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING count( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 58.81702423095703, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING max( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 57.495819091796875, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT sum( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 57.155216217041016, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING sum( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 56.76561737060547, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, max( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 56.390567779541016, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT count( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 55.146610260009766, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING min( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 53.00783920288086, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, count( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 52.991477966308594, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, avg( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 52.19324493408203, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT T1.Location, sum( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 50.07015609741211, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 15, "beams": [{"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000       ", "inferred_question": "What are the locations and names of stadiums with a capacity of less than 10000 people and with a capacity of more than 5000 people?", "score": 103.48839569091797, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34300538106551703, "beam_bleu_score": 0.5080463440118614}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT max( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 70.82475280761719, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT avg( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 67.95548248291016, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT min( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 66.35138702392578, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT count( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 63.64404296875, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT sum( T1.Location), T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Name      ", "inferred_question": "", "score": 62.91438293457031, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING count( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 60.240447998046875, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING avg( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 60.12702178955078, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, max( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 59.77667236328125, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING max( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 58.596290588378906, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, T1.Name FROM stadium AS T1  GROUP BY T1.Location, T1.Name HAVING sum( T1.Capacity) between 5000 AND 10000     ", "inferred_question": "", "score": 56.78864669799805, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, count( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 56.48261642456055, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, min( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 55.21855926513672, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, sum( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 54.12392807006836, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT T1.Location, avg( T1.Name) FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000 GROUP BY T1.Location      ", "inferred_question": "", "score": 53.299373626708984, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 16, "beams": [{"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the maximum capacity and average average number of visitors of stadiums?", "score": -0.00534853944554925, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8016006842918031, "beam_bleu_score": 0.6025859269197776}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), avg( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the maximum capacity and average capacity of stadiums?", "score": -5.233607769012451, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.7521408729228006}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT sum( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the total capacity and average average number of visitors of stadiums?", "score": -33.7632942199707, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7048076023578169, "beam_bleu_score": 0.5267918301030744}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT min( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the minimum capacity and average average number of visitors of stadiums?", "score": -35.152469635009766, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31182522736953555, "beam_bleu_score": 0.5577846654575527}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), avg( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the average capacity and average average number of visitors of stadiums?", "score": -37.48373794555664, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5193606972841154, "beam_bleu_score": 0.5073682482087357}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), min( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the maximum capacity and minimum average number of visitors of stadiums?", "score": -38.943756103515625, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5259800108641264, "beam_bleu_score": 0.5952544858007861}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT sum( T1.Capacity), avg( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the total capacity and average capacity of stadiums?", "score": -39.089656829833984, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8859376643952024, "beam_bleu_score": 0.6357627158688139}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), min( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the maximum capacity and minimum capacity of stadiums?", "score": -39.45318603515625, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4853711725627642, "beam_bleu_score": 0.6476985833944783}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), sum( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the maximum capacity and total average number of visitors of stadiums?", "score": -40.131038665771484, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7508185457572073, "beam_bleu_score": 0.6295080715317168}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT T1.Capacity, avg( T1.Average) FROM stadium AS T1  GROUP BY T1.Capacity      ", "inferred_question": "", "score": -40.330135345458984, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT min( T1.Capacity), avg( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the minimum capacity and average capacity of stadiums?", "score": -40.67008972167969, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35179191947384014, "beam_bleu_score": 0.6945546808072794}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT T1.Capacity, avg( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Capacity      ", "inferred_question": "", "score": -42.88240051269531, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT max( T1.Capacity), max( T1.Average) FROM stadium AS T1        ", "inferred_question": "What are the maximum capacity and maximum average number of visitors of stadiums?", "score": -42.94306564331055, "correct_code": "select max(capacity), average from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8174451856620767, "beam_bleu_score": 0.5952544858007861}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 17, "beams": [{"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the average capacity and maximum capacity of stadiums?", "score": -2.3841855067985307e-07, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.6933199120478338}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the average average number of visitors and maximum capacity of stadiums?", "score": -15.39480209350586, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8025385649544348, "beam_bleu_score": 0.5653140252788954}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), min( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the average capacity and minimum capacity of stadiums?", "score": -35.15990447998047, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5143167966681079, "beam_bleu_score": 0.6379411695115791}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT sum( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the total capacity and maximum capacity of stadiums?", "score": -35.349395751953125, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8013260874880467, "beam_bleu_score": 0.6038092858109928}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT min( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the minimum capacity and maximum capacity of stadiums?", "score": -35.39701843261719, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5268351366947881, "beam_bleu_score": 0.576528801955843}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), sum( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the average capacity and total capacity of stadiums?", "score": -37.23866271972656, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9410836804948792, "beam_bleu_score": 0.5807823951622767}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT count( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the number of average numbers of visitors and maximum capacity of stadiums?", "score": -40.43450927734375, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8098979843182159, "beam_bleu_score": 0.5289594065112488}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT max( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the maximum average number of visitors and maximum capacity of stadiums?", "score": -40.44940185546875, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8236551732343409, "beam_bleu_score": 0.5461016911104418}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT T1.Average, max( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Average      ", "inferred_question": "", "score": -41.6200065612793, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT count( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the number of capacities and maximum capacity of stadiums?", "score": -42.709510803222656, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7574807945984843, "beam_bleu_score": 0.6138942109388335}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT avg( T1.Capacity), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity      ", "inferred_question": "", "score": -48.707454681396484, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT sum( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the total average number of visitors and maximum capacity of stadiums?", "score": -49.05385208129883, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7616167939053524, "beam_bleu_score": 0.5683268770006135}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT min( T1.Average), max( T1.Capacity) FROM stadium AS T1        ", "inferred_question": "What are the minimum average number of visitors and maximum capacity of stadiums?", "score": -50.11540222167969, "correct_code": "select avg(capacity) ,  max(capacity) from stadium", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6280713212440103, "beam_bleu_score": 0.5461016911104418}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 18, "beams": [{"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": 0.0, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Average DESC LIMIT 1    ", "inferred_question": "What are the names and capacities of stadiums with maximum average number of visitors?", "score": -25.616649627685547, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.815737407477841, "beam_bleu_score": 0.5315772844935617}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Highest) DESC LIMIT 1    ", "inferred_question": "", "score": -29.18097496032715, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Capacity) DESC LIMIT 1    ", "inferred_question": "", "score": -30.102733612060547, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY sum( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -36.46023941040039, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT max( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -37.60159683227539, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT avg( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -38.27393341064453, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, avg( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -39.30060577392578, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, max( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -42.54106903076172, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY count( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -43.03274917602539, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT min( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -46.81163787841797, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY max( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -47.36713790893555, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT count( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -47.672183990478516, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT sum( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -48.105098724365234, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Highest DESC LIMIT 1    ", "inferred_question": "", "score": -48.834495544433594, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 19, "beams": [{"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": 0.0, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Average DESC LIMIT 1    ", "inferred_question": "What are the names and capacities of stadiums with maximum average number of visitors?", "score": -23.313594818115234, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7833750821189389, "beam_bleu_score": 0.5335794942619748}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Highest) DESC LIMIT 1    ", "inferred_question": "", "score": -27.551490783691406, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY avg( T1.Capacity) DESC LIMIT 1    ", "inferred_question": "", "score": -32.808738708496094, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY sum( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -36.23128890991211, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT max( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -37.672271728515625, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT avg( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -38.775516510009766, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, avg( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -40.06404495239258, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY count( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -42.756202697753906, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, max( T1.Capacity) FROM stadium AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -42.756343841552734, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Highest DESC LIMIT 1    ", "inferred_question": "", "score": -45.68209457397461, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT T1.Name, T1.Capacity FROM stadium AS T1  GROUP BY T1.Name, T1.Capacity  ORDER BY max( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -45.68263244628906, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT min( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -47.51112365722656, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT count( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -48.28850173950195, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT sum( T1.Name), T1.Capacity FROM stadium AS T1  GROUP BY T1.Capacity  ORDER BY avg( T1.Average) DESC LIMIT 1    ", "inferred_question": "", "score": -48.691017150878906, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 37, "beams": [{"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What are the names of singers who performed in concerts whose year is 2014?", "score": 58.693359375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8169196540284392, "beam_bleu_score": 0.43155958694929036}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.concert_Name FROM concert AS T1 WHERE T1.Year = '2014'       ", "inferred_question": "What are the names of concerts whose year is 2014?", "score": 37.06925964355469, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5328868709926096, "beam_bleu_score": 0.4975350229904528}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What are the names of singers who performed in concerts whose year is 2014 with maximum name?", "score": 17.68527603149414, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47682687128945445, "beam_bleu_score": 0.3508006052305383}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "How many names of singers who performed in concerts whose year is 2014 are there?", "score": 16.9747314453125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.604822213307791, "beam_bleu_score": 0.39517115804983327}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING count( T2.Year) = '2014'     ", "inferred_question": "", "score": 15.496612548828125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING max( T2.Year) = '2014'     ", "inferred_question": "", "score": 12.365989685058594, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What is the average name of all singers who performed in concerts whose year is 2014?", "score": 11.899349212646484, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.57891058122436, "beam_bleu_score": 0.4034104068489504}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What is the total name of all singers who performed in concerts whose year is 2014?", "score": 10.453594207763672, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7251381427034089, "beam_bleu_score": 0.4133118899884103}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING avg( T2.Year) = '2014'     ", "inferred_question": "", "score": 9.521320343017578, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What are the names of singers who performed in concerts whose year is 2014 with minimum name?", "score": 8.445106506347656, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5068857606420669, "beam_bleu_score": 0.3531472283832884}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING sum( T2.Year) = '2014'     ", "inferred_question": "", "score": 7.2353057861328125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING min( T2.Year) = '2014'     ", "inferred_question": "", "score": 2.0246124267578125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT max( T1.concert_Name) FROM concert AS T1 WHERE T1.Year = '2014'       ", "inferred_question": "What are the names of concerts whose year is 2014 with maximum name?", "score": 1.5885848999023438, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4227204935675305, "beam_bleu_score": 0.3701521080242293}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "How many concerts whose year is 2014 in which singers performed are there?", "score": -1.0441741943359375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4379791278887468, "beam_bleu_score": 0.3673088238194284}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "How many concerts whose year is 2014 in which singers performed are there?", "score": -5.4438323974609375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4379791278887468, "beam_bleu_score": 0.3673088238194284}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 38, "beams": [{"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What are the names of singers who performed in concerts whose year is 2014?", "score": 49.779937744140625, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8837038306392806, "beam_bleu_score": 0.7810167884139785}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What are the names of singers who performed in concerts whose year is 2014 with maximum name?", "score": 16.16583251953125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5464093989073404, "beam_bleu_score": 0.6258631812071352}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "How many names of singers who performed in concerts whose year is 2014 are there?", "score": 14.620433807373047, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7350964260140722, "beam_bleu_score": 0.6454155003396314}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Song_release_year = '2014'       ", "inferred_question": "What are the names of singers who were released in 2014?", "score": 12.541015625, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4229240318820645, "beam_bleu_score": 0.6276910624142319}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What is the average name of all singers who performed in concerts whose year is 2014?", "score": 9.167701721191406, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7020054831985556, "beam_bleu_score": 0.6214050533750134}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What is the total name of all singers who performed in concerts whose year is 2014?", "score": 7.974609375, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7478180374060617, "beam_bleu_score": 0.6348832320892708}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "What are the names of singers who performed in concerts whose year is 2014 with minimum name?", "score": 6.229255676269531, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4912815832665519, "beam_bleu_score": 0.6284548026063954}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING count( T2.Year) = '2014'     ", "inferred_question": "", "score": 4.604072570800781, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "How many concerts whose year is 2014 in which singers performed are there?", "score": -0.0215606689453125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3053619682131813, "beam_bleu_score": 0.5698884028542875}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING max( T2.Year) = '2014'     ", "inferred_question": "", "score": -2.4745712280273438, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING avg( T2.Year) = '2014'     ", "inferred_question": "", "score": -4.405292510986328, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING sum( T2.Year) = '2014'     ", "inferred_question": "", "score": -6.285614013671875, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT count( *) FROM singer_in_concert AS T13 JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'       ", "inferred_question": "How many concerts whose year is 2014 in which singers performed are there?", "score": -8.585704803466797, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3053619682131813, "beam_bleu_score": 0.5698884028542875}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T1.Name HAVING min( T2.Year) = '2014'     ", "inferred_question": "", "score": -10.930362701416016, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT T1.concert_Name FROM concert AS T1 WHERE T1.Year = '2014'       ", "inferred_question": "What are the names of concerts whose year is 2014?", "score": -12.999542236328125, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4505496861071894, "beam_bleu_score": 0.5159958960536729}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 39, "beams": [{"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "inferred_question": "What are the names and home countries of singers who are   famous for singing %hey%?", "score": 66.75010681152344, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5335458798763535, "beam_bleu_score": 0.40856260309055487}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Song_Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "inferred_question": "What are the most famous songs and home countries of singers who are   famous for singing %hey%?", "score": 35.65169906616211, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4300282523396405, "beam_bleu_score": 0.3428503299000285}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT max( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 33.16120910644531, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT avg( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 31.39804458618164, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT sum( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 26.78704833984375, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT min( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 26.77404022216797, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT count( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 26.663238525390625, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING count( T1.Song_Name) like '%Hey%'     ", "inferred_question": "", "score": 25.37103271484375, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, max( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 22.828857421875, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, avg( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 22.417110443115234, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING avg( T1.Song_Name) like '%Hey%'     ", "inferred_question": "", "score": 19.318889617919922, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, count( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 15.976768493652344, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, min( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 14.676292419433594, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING max( T1.Song_Name) like '%Hey%'     ", "inferred_question": "", "score": 14.624832153320312, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT T1.Name, sum( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 13.82400894165039, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 40, "beams": [{"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "inferred_question": "What are the names and home countries of singers who are   famous for singing %hey%?", "score": 64.33802032470703, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47559644854272876, "beam_bleu_score": 0.39216365865735825}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Song_Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "inferred_question": "What are the most famous songs and home countries of singers who are   famous for singing %hey%?", "score": 28.55017852783203, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3747984713711927, "beam_bleu_score": 0.3898843903235233}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT max( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 26.185489654541016, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT avg( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 24.952117919921875, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Country, T1.Song_Name FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       ", "inferred_question": "What are the home countries and most famous songs of singers who are   famous for singing %hey%?", "score": 24.322315216064453, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41051825890636373, "beam_bleu_score": 0.3898843903235233}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING count( T1.Song_Name) like '%Hey%'     ", "inferred_question": "", "score": 24.117107391357422, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT count( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 22.095203399658203, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT min( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 21.97018051147461, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT sum( T1.Name), T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Country      ", "inferred_question": "", "score": 20.527584075927734, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, avg( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 19.975799560546875, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, max( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 19.48147964477539, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING avg( T1.Song_Name) like '%Hey%'     ", "inferred_question": "", "score": 18.519290924072266, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING min( T1.Song_Name) like '%Hey%'     ", "inferred_question": "", "score": 14.987468719482422, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, T1.Country FROM singer AS T1  GROUP BY T1.Name, T1.Country HAVING max( T1.Song_Name) like '%Hey%'     ", "inferred_question": "", "score": 13.934673309326172, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT T1.Name, count( T1.Country) FROM singer AS T1 WHERE T1.Song_Name like '%Hey%' GROUP BY T1.Name      ", "inferred_question": "", "score": 13.647502899169922, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 45, "beams": [{"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "How many pets with a weight of more than 10.0   are there?", "score": 72.68619537353516, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7901335817519437, "beam_bleu_score": 0.4692432044538143}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "How many pets with a weight of more than 10.0   are there?", "score": 62.259864807128906, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7901335817519437, "beam_bleu_score": 0.4692432044538143}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING max( T1.weight) > 10     ", "inferred_question": "", "score": 34.947776794433594, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT min( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 34.84956741333008, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING sum( T1.weight) > 10     ", "inferred_question": "", "score": 34.74781799316406, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "Show me everything about pets with a weight of more than 10.0  .", "score": 32.37025451660156, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3800103155143798, "beam_bleu_score": 0.41908905249675066}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING count( T1.weight) > 10     ", "inferred_question": "", "score": 31.985462188720703, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT avg( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 29.45343017578125, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING avg( T1.weight) > 10     ", "inferred_question": "", "score": 27.649452209472656, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT sum( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 27.559566497802734, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "Show me everything about pets with a weight of more than 10.0  .", "score": 26.927204132080078, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3800103155143798, "beam_bleu_score": 0.41908905249675066}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.weight > 10       ", "inferred_question": "", "score": 26.142608642578125, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.41908905249675066}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "What are the weights of pets with a weight of more than 10.0  ?", "score": 21.264305114746094, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7773809185601429, "beam_bleu_score": 0.4744672780234268}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT max( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 19.265674591064453, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4744672780234268}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "What is the average weight of all pets with a weight of more than 10.0  ?", "score": 18.775836944580078, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7039845591484497, "beam_bleu_score": 0.4360753897979329}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 46, "beams": [{"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "How many pets with a weight of more than 10.0   are there?", "score": 67.61163330078125, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7847065732833273, "beam_bleu_score": 0.5099879247202272}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "How many pets with a weight of more than 10.0   are there?", "score": 61.23226547241211, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7847065732833273, "beam_bleu_score": 0.5099879247202272}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING sum( T1.weight) > 10     ", "inferred_question": "", "score": 37.96295928955078, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING max( T1.weight) > 10     ", "inferred_question": "", "score": 36.738365173339844, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING count( T1.weight) > 10     ", "inferred_question": "", "score": 31.366233825683594, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING avg( T1.weight) > 10     ", "inferred_question": "", "score": 27.18225860595703, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT min( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 25.200420379638672, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT avg( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 25.035728454589844, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT count( *) FROM Pets AS T1   HAVING max( T1.weight) > 10     ", "inferred_question": "", "score": 23.830020904541016, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT avg( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 22.588882446289062, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "Show me everything about pets with a weight of more than 10.0  .", "score": 22.489917755126953, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3355032173617175, "beam_bleu_score": 0.37386464962227073}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 22.067283630371094, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.37386464962227073}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "Show me everything about pets with a weight of more than 10.0  .", "score": 20.955379486083984, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3355032173617175, "beam_bleu_score": 0.37386464962227073}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT max( *) FROM Pets AS T1 WHERE T1.weight > 10       ", "inferred_question": "", "score": 14.147884368896484, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.37386464962227073}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.weight > 10       ", "inferred_question": "", "score": 6.195316314697266, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.37386464962227073}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 47, "beams": [{"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -0.003961217124015093, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -5.533193111419678, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.pet_age) FROM Pets AS T23        )       ", "inferred_question": "", "score": -26.41901206970215, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT avg( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -26.5401611328125, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.Age) FROM Student AS T22        )       ", "inferred_question": "", "score": -28.017425537109375, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT max( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -28.07037925720215, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT avg( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -31.798254013061523, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT max( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -33.06454849243164, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -37.02658462524414, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -37.984981536865234, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -38.02119064331055, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT T23.Age FROM Student AS T23        )       ", "inferred_question": "", "score": -40.88910675048828, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -42.2261848449707, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -43.178565979003906, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -43.22585678100586, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 48, "beams": [{"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -0.06168834865093231, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -2.9844179153442383, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -4.809149265289307, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT min( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -6.99453592300415, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -8.703397750854492, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -10.964166641235352, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -16.13912010192871, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT max( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -18.349252700805664, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT sum( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -25.335464477539062, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT count( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT min( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -26.59101104736328, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT sum( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -27.513874053955078, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT avg( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -27.682754516601562, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age = (SELECT max( T23.Age) FROM Student AS T23        )       ", "inferred_question": "", "score": -27.854938507080078, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT count( T1.weight) FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.pet_age) FROM Pets AS T22        )       ", "inferred_question": "", "score": -28.97573471069336, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT T1.weight FROM Pets AS T1 WHERE T1.pet_age = (SELECT min( T22.Age) FROM Student AS T22        )       ", "inferred_question": "", "score": -29.16183853149414, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 51, "beams": [{"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 72.37691497802734, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 62.40003204345703, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "inferred_question": "How many pets with a age of more than 20   are there?", "score": 48.55974578857422, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6629186080207132, "beam_bleu_score": 0.3606966574698189}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "inferred_question": "How many pets with a age of more than 20   are there?", "score": 37.76355743408203, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6629186080207132, "beam_bleu_score": 0.3606966574698189}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 34.76204299926758, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3606966574698189}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 34.407630920410156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3606966574698189}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING max( T2.Age) > 20     ", "inferred_question": "", "score": 30.11072540283203, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT avg( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 29.16335678100586, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 28.61467742919922, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 26.303668975830078, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 26.30355453491211, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT T1.PetType FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 25.648792266845703, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 25.608409881591797, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 24.824710845947266, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING avg( T2.Age) > 20     ", "inferred_question": "", "score": 24.074867248535156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 52, "beams": [{"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 71.23858642578125, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 65.50825500488281, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "inferred_question": "How many pets with a age of more than 20   are there?", "score": 45.02330780029297, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5969406398305445, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT T1.PetType FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 40.87913131713867, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.pet_age > 20       ", "inferred_question": "How many pets with a age of more than 20   are there?", "score": 40.16668701171875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5969406398305445, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 36.70722961425781, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 34.69438171386719, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 34.2388801574707, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 34.11262893676758, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 32.598365783691406, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 31.230361938476562, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 30.32223892211914, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.4413206513268282}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING max( T2.Age) > 20     ", "inferred_question": "", "score": 30.181346893310547, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT T1.pet_age FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 30.151134490966797, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       ", "inferred_question": "", "score": 28.708465576171875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 53, "beams": [{"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "inferred_question": "", "score": 75.65985870361328, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": true, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "inferred_question": "", "score": 68.36377716064453, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": true, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'F'       ", "inferred_question": "", "score": 49.53013229370117, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T2.Sex = 'dog'       ", "inferred_question": "", "score": 46.27357482910156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T1.PetType = 'dog' GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "inferred_question": "", "score": 43.25190734863281, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'F'       ", "inferred_question": "", "score": 41.712406158447266, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T2.Sex = 'dog'       ", "inferred_question": "", "score": 38.895103454589844, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "inferred_question": "", "score": 38.33283615112305, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "inferred_question": "", "score": 36.47846603393555, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T1.PetType = 'dog' GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "inferred_question": "", "score": 35.857627868652344, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' GROUP BY count( *) HAVING count( T1.PetType) = 'dog'     ", "inferred_question": "", "score": 34.79355239868164, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "inferred_question": "", "score": 34.313385009765625, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "inferred_question": "", "score": 33.68558883666992, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT T1.PetID FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       ", "inferred_question": "", "score": 32.439430236816406, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T1.PetType = 'dog' GROUP BY count( *) HAVING avg( T2.Sex) = 'F'     ", "inferred_question": "", "score": 31.410531997680664, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 54, "beams": [{"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 53.82992935180664, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 53.486976623535156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "inferred_question": "", "score": 20.229341506958008, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "inferred_question": "", "score": 19.959447860717773, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 18.546249389648438, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "inferred_question": "How many pets whose type is f are there?", "score": 18.460498809814453, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12364223139803765, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "inferred_question": "How many pets whose type is f are there?", "score": 17.57373046875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12364223139803765, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 16.2720947265625, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 16.139808654785156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 15.106403350830078, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 15.076316833496094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 15.051170349121094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 14.49609375, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "inferred_question": "", "score": 14.300392150878906, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "inferred_question": "", "score": 13.757095336914062, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 54, "beams": [{"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 53.82992935180664, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 53.486976623535156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "inferred_question": "", "score": 20.229341506958008, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'dog'       ", "inferred_question": "", "score": 19.959447860717773, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.pet_age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 18.546249389648438, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "inferred_question": "How many pets whose type is f are there?", "score": 18.460498809814453, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12364223139803765, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 WHERE T1.PetType = 'F'       ", "inferred_question": "How many pets whose type is f are there?", "score": 17.57373046875, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12364223139803765, "beam_bleu_score": 0.3929834427115872}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 16.2720947265625, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 16.139808654785156, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT sum( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 15.106403350830078, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT min( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 15.076316833496094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT avg( T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 15.051170349121094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT * FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F'       ", "inferred_question": "", "score": 14.49609375, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "inferred_question": "", "score": 14.300392150878906, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY count( *) HAVING count( T2.Sex) = 'F'     ", "inferred_question": "", "score": 13.757095336914062, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 55, "beams": [{"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "How many distinct types of pets are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.5684519754157443}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "What are the distinct types of pets with minimum type?", "score": -37.538909912109375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4464178969078104, "beam_bleu_score": 0.4624053316546138}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT T1.PetType FROM Pets AS T1        ", "inferred_question": "What are the distinct types of pets?", "score": -37.66643142700195, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9018776977728941, "beam_bleu_score": 0.5774945939373994}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "", "score": -44.356361389160156, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "", "score": -48.97437286376953, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "What are the distinct types of pets with maximum type?", "score": -56.59479522705078, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5307934805587997, "beam_bleu_score": 0.45465710747696075}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "How many distinct ids of pets are there?", "score": -99.50450134277344, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8492137572470373, "beam_bleu_score": 0.49381502589119514}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Has_Pet AS T1        ", "inferred_question": "", "score": -134.2255096435547, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Pets AS T1        ", "inferred_question": "How many pets are there?", "score": -135.60914611816406, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8283834440860369, "beam_bleu_score": 0.1538618843906498}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What are the distinct ids of pets with minimum id?", "score": -144.80824279785156, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3460905268134138, "beam_bleu_score": 0.42192707795219725}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT T1.PetID FROM Pets AS T1        ", "inferred_question": "What are the distinct ids of pets?", "score": -152.73660278320312, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6128181400371573, "beam_bleu_score": 0.48467304669890254}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What is the average id of all distinct pets?", "score": -157.12271118164062, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27084615945275825, "beam_bleu_score": 0.4490544557746511}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What is the total id of all distinct pets?", "score": -157.20236206054688, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39577129127823896, "beam_bleu_score": 0.45806915518279}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.pet_age) FROM Pets AS T1        ", "inferred_question": "How many distinct ages of pets are there?", "score": -159.88304138183594, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3974583951097944, "beam_bleu_score": 0.4858341826846713}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What are the distinct ids of pets with maximum id?", "score": -169.8509521484375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3414464743325094, "beam_bleu_score": 0.4139653947708629}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 56, "beams": [{"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "How many distinct types of pets are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.7789520674608175}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT T1.PetType FROM Pets AS T1        ", "inferred_question": "What are the distinct types of pets?", "score": -37.03673553466797, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6201840402897669, "beam_bleu_score": 0.5310286245894186}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "What are the distinct types of pets with minimum type?", "score": -39.60020446777344, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2869792654005676, "beam_bleu_score": 0.4417368942230817}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "", "score": -46.85870361328125, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "", "score": -47.71588134765625, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetType) FROM Pets AS T1        ", "inferred_question": "What are the distinct types of pets with maximum type?", "score": -55.93717575073242, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3744347644088277, "beam_bleu_score": 0.4482064362325773}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "How many distinct ids of pets are there?", "score": -105.63328552246094, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6824723930377572, "beam_bleu_score": 0.6505409916329102}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.PetID) FROM Has_Pet AS T1        ", "inferred_question": "", "score": -133.29762268066406, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Pets AS T1        ", "inferred_question": "How many pets are there?", "score": -148.43743896484375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8709329601204164, "beam_bleu_score": 0.40844473002041615}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What are the distinct ids of pets with minimum id?", "score": -153.46542358398438, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10305066300559695, "beam_bleu_score": 0.3519992879879664}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT T1.PetID FROM Pets AS T1        ", "inferred_question": "What are the distinct ids of pets?", "score": -157.23638916015625, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23396246765466389, "beam_bleu_score": 0.39479372341225477}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What is the total id of all distinct pets?", "score": -162.66558837890625, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22736563893025585, "beam_bleu_score": 0.24823362338023255}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What is the average id of all distinct pets?", "score": -165.52194213867188, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09668292123913935, "beam_bleu_score": 0.23322195163652046}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.pet_age) FROM Pets AS T1        ", "inferred_question": "How many distinct ages of pets are there?", "score": -168.81997680664062, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34237000171599286, "beam_bleu_score": 0.6822600731794598}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.PetID) FROM Pets AS T1        ", "inferred_question": "What are the distinct ids of pets with maximum id?", "score": -175.0345458984375, "correct_code": "SELECT count(DISTINCT pettype) FROM pets", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10820806807470573, "beam_bleu_score": 0.3595768287529208}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 67, "beams": [{"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "What are the types and weights of pets with minimum age?", "score": -2.13382354559144e-05, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6822243161509192, "beam_bleu_score": 0.45397179740455745}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID    ORDER BY T2.Age ASC LIMIT 1    ", "inferred_question": "", "score": -10.752283096313477, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -38.008766174316406, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY min( T1.pet_age) ASC LIMIT 1    ", "inferred_question": "", "score": -38.80661392211914, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -40.871986389160156, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, max( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -41.32867431640625, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT max( T1.PetType), T1.weight FROM Pets AS T1  GROUP BY T1.weight  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -41.60727310180664, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY avg( T1.pet_age) ASC LIMIT 1    ", "inferred_question": "", "score": -42.43004608154297, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT avg( T1.PetType), T1.weight FROM Pets AS T1  GROUP BY T1.weight  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -42.725486755371094, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY sum( T1.pet_age) ASC LIMIT 1    ", "inferred_question": "", "score": -44.46009063720703, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -45.41593551635742, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT min( T1.PetType), T1.weight FROM Pets AS T1  GROUP BY T1.weight  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -45.43561935424805, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1  GROUP BY T1.PetType, T1.weight  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -46.176513671875, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "inferred_question": "", "score": -48.71607971191406, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT T1.PetType, count( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -48.8830451965332, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 68, "beams": [{"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "What are the types and weights of pets with minimum age?", "score": -1.1920922133867862e-06, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7168662056478617, "beam_bleu_score": 0.43709116404382253}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID    ORDER BY T2.Age ASC LIMIT 1    ", "inferred_question": "", "score": -13.623063087463379, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, T1.weight FROM Pets AS T1    ORDER BY T1.weight ASC LIMIT 1    ", "inferred_question": "What are the types and weights of pets with minimum weight?", "score": -19.47480583190918, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4626980672289891, "beam_bleu_score": 0.43781025654469435}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -19.96157455444336, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -21.45598793029785, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -21.748085021972656, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, max( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -22.68990707397461, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( *) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -25.988496780395508, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, sum( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -26.930898666381836, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( *) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY T1.pet_age ASC LIMIT 1    ", "inferred_question": "", "score": -28.56804847717285, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY min( T1.pet_age) ASC LIMIT 1    ", "inferred_question": "", "score": -32.2183723449707, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, avg( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "inferred_question": "", "score": -34.240779876708984, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, min( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "inferred_question": "", "score": -35.1226806640625, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, count( T1.weight) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType  ORDER BY T2.Age ASC LIMIT 1    ", "inferred_question": "", "score": -35.21567153930664, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT T1.PetType, max( T1.weight) FROM Pets AS T1  GROUP BY T1.PetType  ORDER BY min( T1.pet_age) ASC LIMIT 1    ", "inferred_question": "", "score": -36.79674530029297, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 69, "beams": [{"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1       ", "inferred_question": "What are the ids and weights of pets with a age of more than 1  ?", "score": 57.90821075439453, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7760910074677795, "beam_bleu_score": 0.5451571519942929}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1       ", "inferred_question": "", "score": 57.63447570800781, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.pet_age > 1       ", "inferred_question": "", "score": 46.63960266113281, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T3.Age > 1       ", "inferred_question": "", "score": 46.05779266357422, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetID HAVING max( T2.Age) > 1     ", "inferred_question": "", "score": 22.13721466064453, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 20.2681884765625, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1  GROUP BY T1.PetID, T1.weight HAVING max( T1.pet_age) > 1     ", "inferred_question": "", "score": 19.956932067871094, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 19.790557861328125, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT avg( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 19.47214126586914, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT avg( T1.PetID), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 19.15001678466797, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT T1.PetID, avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.PetID      ", "inferred_question": "", "score": 17.529033660888672, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT min( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 16.44955062866211, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 15.871707916259766, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 13.907981872558594, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 12.563945770263672, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 70, "beams": [{"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1       ", "inferred_question": "What are the ids and weights of pets with a age of more than 1  ?", "score": 53.82592010498047, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9053759220905067, "beam_bleu_score": 0.5041573612056691}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1       ", "inferred_question": "", "score": 50.98945236206055, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.pet_age > 1       ", "inferred_question": "", "score": 41.478981018066406, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T2.weight FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T3.Age > 1       ", "inferred_question": "", "score": 38.57642364501953, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1  GROUP BY T1.PetID, T1.weight HAVING max( T1.pet_age) > 1     ", "inferred_question": "", "score": 18.725135803222656, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetID HAVING max( T2.Age) > 1     ", "inferred_question": "", "score": 18.168346405029297, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 16.945205688476562, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT avg( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 14.08648681640625, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT max( T1.PetID), T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 13.956600189208984, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, max( T1.weight) FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.PetID      ", "inferred_question": "", "score": 13.133594512939453, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, avg( T1.weight) FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.PetID      ", "inferred_question": "", "score": 12.620941162109375, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 11.346515655517578, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT count( *), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 11.16754150390625, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT min( T1.PetID), T1.weight FROM Pets AS T1 WHERE T1.pet_age > 1 GROUP BY T1.weight      ", "inferred_question": "", "score": 10.789691925048828, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT T1.PetID, T1.weight FROM Pets AS T1  GROUP BY T1.PetID, T1.weight HAVING count( *) > 1     ", "inferred_question": "", "score": -14.736370086669922, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 75, "beams": [{"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": 0.0, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T3 ON T1.StuID = T3.StuID JOIN Pets AS T2 ON T3.PetID = T2.PetID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -31.068220138549805, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -37.96851348876953, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -38.83026885986328, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT max( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "inferred_question": "", "score": -40.22882843017578, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, avg( T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "inferred_question": "", "score": -40.28693389892578, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -40.653228759765625, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT avg( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "inferred_question": "", "score": -41.6453971862793, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -41.70741271972656, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -42.05812454223633, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, max( T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "inferred_question": "", "score": -42.14291763305664, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -44.796634674072266, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9208952671414794, "beam_bleu_score": 0.6900602525540834}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT count( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "inferred_question": "", "score": -44.85588455200195, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT min( T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "inferred_question": "", "score": -45.07683181762695, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT T1.Fname, T1.Age FROM Student AS T1        ", "inferred_question": "What are the first names and ages of students?", "score": -45.29108428955078, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33089946842198326, "beam_bleu_score": 0.6003726461794257}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 76, "beams": [{"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": 0.0, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -27.32271957397461, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, avg(DISTINCT T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "inferred_question": "", "score": -36.59117889404297, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -39.04872131347656, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -40.13794708251953, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -40.2025146484375, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID in (SELECT avg( T22.StuID) FROM Has_Pet AS T22        )       ", "inferred_question": "", "score": -40.848472595214844, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T3 ON T1.StuID = T3.StuID JOIN Pets AS T2 ON T3.PetID = T2.PetID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -41.71834182739258, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -42.001914978027344, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID in (SELECT count( T22.StuID) FROM Has_Pet AS T22        )       ", "inferred_question": "", "score": -42.124629974365234, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID in (SELECT max( T22.StuID) FROM Has_Pet AS T22        )       ", "inferred_question": "", "score": -43.07099151611328, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1        ", "inferred_question": "What are the first names and ages of students?", "score": -43.15090560913086, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45949933262483, "beam_bleu_score": 0.4884849891730088}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID        ", "inferred_question": "What are the first names and ages of students who own pets?", "score": -43.17550277709961, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9054038422632185, "beam_bleu_score": 0.6642094554712518}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Fname), T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Age      ", "inferred_question": "", "score": -43.223182678222656, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT T1.Fname, max(DISTINCT T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.Fname      ", "inferred_question": "", "score": -43.65502166748047, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 83, "beams": [{"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What are the last names of students who own pets with a age of 3  ?", "score": 85.36862182617188, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.529112348072063, "beam_bleu_score": 0.5368199652362756}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 WHERE T1.Age = 3       ", "inferred_question": "What are the last names of students with a age of 3  ?", "score": 51.00324249267578, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3722382672526716, "beam_bleu_score": 0.5292775271057462}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT max( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What are the last names of students who own pets with a age of 3   with maximum last name?", "score": 43.29353332519531, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49154542888725594, "beam_bleu_score": 0.41164593392781756}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT avg( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What is the average last name of all students who own pets with a age of 3  ?", "score": 41.34900665283203, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3912095193031494, "beam_bleu_score": 0.5137141413833446}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT min( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What are the last names of students who own pets with a age of 3   with minimum last name?", "score": 40.99409484863281, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4935974909863339, "beam_bleu_score": 0.4139651577089525}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT count( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "How many last names of students who own pets with a age of 3   are there?", "score": 40.61114501953125, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3514932498945913, "beam_bleu_score": 0.43674713809912663}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING count( T2.pet_age) = 3     ", "inferred_question": "", "score": 39.69658279418945, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING avg( T2.pet_age) = 3     ", "inferred_question": "", "score": 36.10275650024414, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT sum( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What is the total last name of all students who own pets with a age of 3  ?", "score": 35.111331939697266, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3419345744953556, "beam_bleu_score": 0.5211546535675637}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING max( T2.pet_age) = 3     ", "inferred_question": "", "score": 33.470977783203125, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING min( T2.pet_age) = 3     ", "inferred_question": "", "score": 32.21714782714844, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING sum( T2.pet_age) = 3     ", "inferred_question": "", "score": 26.063251495361328, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = cat       ", "inferred_question": "", "score": 17.563846588134766, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1  GROUP BY T1.LName HAVING count( T1.Age) = 3     ", "inferred_question": "", "score": 16.366615295410156, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = '3'       ", "inferred_question": "What are the last names of students who own pets whose type is 3?", "score": 15.71780776977539, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5247710440897254, "beam_bleu_score": 0.5139807706798281}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 84, "beams": [{"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What are the last names of students who own pets with a age of 3  ?", "score": 65.77394104003906, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5038351307949784, "beam_bleu_score": 0.517440067289374}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = cat       ", "inferred_question": "", "score": 25.863122940063477, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT max( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What are the last names of students who own pets with a age of 3   with maximum last name?", "score": 24.443756103515625, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4615124251685888, "beam_bleu_score": 0.4267617941391759}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT count( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "How many last names of students who own pets with a age of 3   are there?", "score": 23.690113067626953, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3699349290051187, "beam_bleu_score": 0.4332702894399871}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT avg( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What is the average last name of all students who own pets with a age of 3  ?", "score": 22.56212615966797, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43172724869723333, "beam_bleu_score": 0.5338979071327397}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = 'cat'       ", "inferred_question": "What are the last names of students who own pets whose type is cat?", "score": 21.575668334960938, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40667939896948047, "beam_bleu_score": 0.5342109586715656}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT min( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What are the last names of students who own pets with a age of 3   with minimum last name?", "score": 21.552486419677734, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46018641947219663, "beam_bleu_score": 0.4267617941391759}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING count( T2.pet_age) = 3     ", "inferred_question": "", "score": 20.19092559814453, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT sum( T1.LName) FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.pet_age = 3       ", "inferred_question": "What is the total last name of all students who own pets with a age of 3  ?", "score": 17.488685607910156, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3835410732814606, "beam_bleu_score": 0.5424636063873673}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING avg( T2.pet_age) = 3     ", "inferred_question": "", "score": 16.922649383544922, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 WHERE T1.Age = 3       ", "inferred_question": "What are the last names of students with a age of 3  ?", "score": 14.756397247314453, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3151594772983648, "beam_bleu_score": 0.44986510105038363}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING max( T2.pet_age) = 3     ", "inferred_question": "", "score": 13.116199493408203, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING min( T2.pet_age) = 3     ", "inferred_question": "", "score": 10.797740936279297, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID  GROUP BY T1.LName HAVING sum( T2.pet_age) = 3     ", "inferred_question": "", "score": 6.775665283203125, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = '3'       ", "inferred_question": "What are the last names of students who own pets whose type is 3?", "score": -3.4408340454101562, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48715894989766884, "beam_bleu_score": 0.5185938172659139}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 87, "beams": [{"orig_question": "How many continents are there?", "inferred_code": "SELECT count( *) FROM continents AS T1        ", "inferred_question": "How many continents are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT min( T1.Continent) FROM continents AS T1        ", "inferred_question": "What are the names of continents with minimum name?", "score": -31.57335662841797, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08720486121230586, "beam_bleu_score": 0.3768478744790068}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT T1.Continent FROM continents AS T1        ", "inferred_question": "What are the names of continents?", "score": -31.722362518310547, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17667628197103957, "beam_bleu_score": 0.552119898434074}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT avg( T1.Continent) FROM continents AS T1        ", "inferred_question": "What is the average name of all continents?", "score": -38.00902557373047, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14479311854828614, "beam_bleu_score": 0.34863739467186106}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT sum( T1.Continent) FROM continents AS T1        ", "inferred_question": "What is the total name of all continents?", "score": -40.25084686279297, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4263591584983214, "beam_bleu_score": 0.36142295471871655}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Continent) FROM continents AS T1        ", "inferred_question": "How many names of continents are there?", "score": -47.33820724487305, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.571217569587358, "beam_bleu_score": 0.7385291627605953}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT max( T1.Continent) FROM continents AS T1        ", "inferred_question": "What are the names of continents with maximum name?", "score": -47.76572799682617, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08632595883470318, "beam_bleu_score": 0.3872983346207417}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Id) FROM cars_data AS T1        ", "inferred_question": "How many car names of data sheets are there?", "score": -79.87017059326172, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07675745285082147, "beam_bleu_score": 0.4869202378743401}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.ContId) FROM continents AS T1        ", "inferred_question": "How many ids of continents are there?", "score": -81.116943359375, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6128023676648893, "beam_bleu_score": 0.7801766709943855}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "inferred_question": "What are the car names of data sheets?", "score": -89.2165298461914, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07011069980530105, "beam_bleu_score": 0.24705691690760725}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents AS T1        ", "inferred_question": "Show me everything about continents.", "score": -93.36628723144531, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11170729233914833, "beam_bleu_score": 0.41944354523254873}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT T1.ContId FROM continents AS T1        ", "inferred_question": "What are the ids of continents?", "score": -94.76085662841797, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12191333733676535, "beam_bleu_score": 0.5718063759566022}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Id) FROM car_makers AS T1        ", "inferred_question": "How many ids of car makers are there?", "score": -96.5123291015625, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.061067056331296166, "beam_bleu_score": 0.5325553471945145}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1        ", "inferred_question": "How many edispls of data sheets are there?", "score": -98.21611022949219, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05028288668301861, "beam_bleu_score": 0.48591412249530486}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT min( *) FROM continents AS T1        ", "inferred_question": "", "score": -100.6136245727539, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 88, "beams": [{"orig_question": "What is the number of continents?", "inferred_code": "SELECT count( *) FROM continents AS T1        ", "inferred_question": "How many continents are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9632253267725561, "beam_bleu_score": 0.4436616545831824}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT min( T1.Continent) FROM continents AS T1        ", "inferred_question": "What are the names of continents with minimum name?", "score": -31.760494232177734, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11034044417780708, "beam_bleu_score": 0.44418544796542775}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Continent FROM continents AS T1        ", "inferred_question": "What are the names of continents?", "score": -32.32402801513672, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21384427967302588, "beam_bleu_score": 0.7065878033828865}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT avg( T1.Continent) FROM continents AS T1        ", "inferred_question": "What is the average name of all continents?", "score": -37.162696838378906, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18035952391406396, "beam_bleu_score": 0.5928042727386141}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT sum( T1.Continent) FROM continents AS T1        ", "inferred_question": "What is the total name of all continents?", "score": -42.72524642944336, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4065836022384166, "beam_bleu_score": 0.6051941316772782}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT max( T1.Continent) FROM continents AS T1        ", "inferred_question": "What are the names of continents with maximum name?", "score": -49.70304870605469, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11189532111433109, "beam_bleu_score": 0.44418544796542775}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT count( T1.Continent) FROM continents AS T1        ", "inferred_question": "How many names of continents are there?", "score": -65.26054382324219, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35359070071957244, "beam_bleu_score": 0.4630071026583851}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "inferred_question": "What are the car names of data sheets?", "score": -75.11693572998047, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0541742783935123, "beam_bleu_score": 0.3223379165564106}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT min( *) FROM continents AS T1        ", "inferred_question": "", "score": -77.73834228515625, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents AS T1        ", "inferred_question": "Show me everything about continents.", "score": -79.77125549316406, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08420827566141009, "beam_bleu_score": 0.3758926123620146}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT count( T1.Id) FROM cars_data AS T1        ", "inferred_question": "How many car names of data sheets are there?", "score": -82.78874206542969, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05143808697428731, "beam_bleu_score": 0.17121859858009383}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Country FROM car_makers AS T1        ", "inferred_question": "What are the countries of car makers?", "score": -83.6345443725586, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04647505035983823, "beam_bleu_score": 0.36828504465726397}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.CountryId FROM countries AS T1        ", "inferred_question": "What are the ids of countries?", "score": -83.82778930664062, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0486750416700078, "beam_bleu_score": 0.42539068056073387}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.Id FROM car_makers AS T1        ", "inferred_question": "What are the ids of car makers?", "score": -87.07943725585938, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0513767258519463, "beam_bleu_score": 0.3833662582202239}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T1.ContId FROM continents AS T1        ", "inferred_question": "What are the ids of continents?", "score": -87.43278503417969, "correct_code": "SELECT count(*) FROM CONTINENTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19980890525392225, "beam_bleu_score": 0.6820904398537482}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 91, "beams": [{"orig_question": "How many countries are listed?", "inferred_code": "SELECT count( *) FROM countries AS T1        ", "inferred_question": "How many countries are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9347364025999466, "beam_bleu_score": 0.7784171087249697}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT T1.Country FROM car_makers AS T1        ", "inferred_question": "What are the countries of car makers?", "score": -27.141803741455078, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06752463733458836, "beam_bleu_score": 0.4168069924611866}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What are the countries of car makers with minimum country?", "score": -33.271663665771484, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06731088403099728, "beam_bleu_score": 0.27251686444773326}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT avg( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What is the average country of all car makers?", "score": -42.46010971069336, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.062395598284984644, "beam_bleu_score": 0.21520232157603747}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT count( *) FROM countries AS T1        ", "inferred_question": "How many countries are there?", "score": -43.743865966796875, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9347364025999466, "beam_bleu_score": 0.7784171087249697}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT sum( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What is the total country of all car makers?", "score": -43.91297149658203, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10739638217708147, "beam_bleu_score": 0.22304837315412765}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT max( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What are the countries of car makers with maximum country?", "score": -52.6192626953125, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07856560581094907, "beam_bleu_score": 0.27251686444773326}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( *) FROM countries AS T1        ", "inferred_question": "", "score": -53.34040451049805, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT T1.CountryName FROM countries AS T1        ", "inferred_question": "What are the names of countries?", "score": -56.09869384765625, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2395755417788593, "beam_bleu_score": 0.4528277435127104}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( T1.CountryName) FROM countries AS T1        ", "inferred_question": "What are the names of countries with minimum name?", "score": -58.475677490234375, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14917031626066568, "beam_bleu_score": 0.30334383175324203}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT count( T1.Country) FROM car_makers AS T1        ", "inferred_question": "How many countries of car makers are there?", "score": -67.04842376708984, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1015618834381018, "beam_bleu_score": 0.5318625808737599}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT T1.CountryId FROM countries AS T1        ", "inferred_question": "What are the ids of countries?", "score": -69.22044372558594, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16861270375827264, "beam_bleu_score": 0.4742238106152008}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT avg( T1.CountryName) FROM countries AS T1        ", "inferred_question": "What is the average name of all countries?", "score": -71.50563049316406, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23129781376871283, "beam_bleu_score": 0.28972551629284654}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT sum( T1.CountryName) FROM countries AS T1        ", "inferred_question": "What is the total name of all countries?", "score": -72.21096801757812, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44207828174257024, "beam_bleu_score": 0.30181468526956173}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT min( T1.CountryId) FROM countries AS T1        ", "inferred_question": "What are the ids of countries with minimum id?", "score": -73.33314514160156, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10082037340150807, "beam_bleu_score": 0.3391902647106855}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 92, "beams": [{"orig_question": "How many countries exist?", "inferred_code": "SELECT count( *) FROM countries AS T1        ", "inferred_question": "How many countries are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9951421950893835, "beam_bleu_score": 0.6593146670851964}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.Country FROM car_makers AS T1        ", "inferred_question": "What are the countries of car makers?", "score": -31.487014770507812, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06806254021281388, "beam_bleu_score": 0.32752421313785585}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What are the countries of car makers with minimum country?", "score": -32.733009338378906, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06167353671723874, "beam_bleu_score": 0.21579251460373325}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT avg( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What is the average country of all car makers?", "score": -41.02171325683594, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0657200436891614, "beam_bleu_score": 0.19161769481888036}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT sum( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What is the total country of all car makers?", "score": -43.26398849487305, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08427797039409524, "beam_bleu_score": 0.20064110494011925}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT max( T1.Country) FROM car_makers AS T1        ", "inferred_question": "What are the countries of car makers with maximum country?", "score": -48.317779541015625, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06190426327879939, "beam_bleu_score": 0.2225090880667188}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.CountryName FROM countries AS T1        ", "inferred_question": "What are the names of countries?", "score": -55.379852294921875, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13332808932493845, "beam_bleu_score": 0.3476041118168436}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.CountryName) FROM countries AS T1        ", "inferred_question": "What are the names of countries with minimum name?", "score": -56.74988555908203, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0738131614914963, "beam_bleu_score": 0.23695215929314056}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( *) FROM countries AS T1        ", "inferred_question": "", "score": -58.82567596435547, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "inferred_question": "What are the car names of data sheets?", "score": -60.57773208618164, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07642785109462757, "beam_bleu_score": 0.06066858194850451}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T1.CountryId FROM countries AS T1        ", "inferred_question": "What are the ids of countries?", "score": -67.38824462890625, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14391779813983585, "beam_bleu_score": 0.35663597110042333}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.Id) FROM cars_data AS T1        ", "inferred_question": "What are the car names of data sheets with minimum car name?", "score": -67.96688842773438, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04938014595595408, "beam_bleu_score": 0.04352470084375888}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT min( T1.CountryId) FROM countries AS T1        ", "inferred_question": "What are the ids of countries with minimum id?", "score": -68.59616088867188, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07293674741260325, "beam_bleu_score": 0.25826413268092036}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT avg( T1.CountryName) FROM countries AS T1        ", "inferred_question": "What is the average name of all countries?", "score": -70.58847045898438, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1066217991703895, "beam_bleu_score": 0.26342716944630223}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT sum( T1.CountryName) FROM countries AS T1        ", "inferred_question": "What is the total name of all countries?", "score": -71.62245178222656, "correct_code": "SELECT count(*) FROM COUNTRIES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25278623281383816, "beam_bleu_score": 0.27712296818413296}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 95, "beams": [{"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum horsepower?", "score": 0.0, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38278598710494904, "beam_bleu_score": 0.41624352905410156}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with minimum horsepower?", "score": -21.19661521911621, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5337767304473608, "beam_bleu_score": 0.5233909686175094}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum horsepower with maximum name?", "score": -43.36310577392578, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11145241082643864, "beam_bleu_score": 0.3383425557153129}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -43.95212936401367, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum horsepower with minimum name?", "score": -44.099666595458984, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13062943343609512, "beam_bleu_score": 0.3383425557153129}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -45.3836669921875, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What is the average name of all models that contain cars with data sheets with minimum horsepower?", "score": -45.56010437011719, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24094281173123344, "beam_bleu_score": 0.3753046537405919}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -46.930084228515625, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "How many names of models that contain cars with data sheets with minimum horsepower are there?", "score": -48.3868522644043, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2886518427695123, "beam_bleu_score": 0.36869418249403824}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -50.2425537109375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What is the total name of all models that contain cars with data sheets with minimum horsepower?", "score": -50.974647521972656, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26622217184937624, "beam_bleu_score": 0.3832487099078277}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -51.129493713378906, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum mileage?", "score": -55.13405227661133, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14602446354682241, "beam_bleu_score": 0.3088525934872595}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY count( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -64.52997589111328, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -64.53658294677734, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 96, "beams": [{"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum horsepower?", "score": 0.0, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46462087968024823, "beam_bleu_score": 0.43755809836386167}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with minimum horsepower?", "score": -20.44721794128418, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5212965547116329, "beam_bleu_score": 0.5370274810298894}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum horsepower with maximum name?", "score": -41.354618072509766, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33009491856116946, "beam_bleu_score": 0.3640910173699794}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What is the average name of all models that contain cars with data sheets with minimum horsepower?", "score": -42.90886306762695, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4112742264002184, "beam_bleu_score": 0.43251554794558994}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum horsepower with minimum name?", "score": -42.95313262939453, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40246136597638693, "beam_bleu_score": 0.362179712424518}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -45.35665512084961, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -46.14484405517578, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -47.4295768737793, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "How many names of models that contain cars with data sheets with minimum horsepower are there?", "score": -47.762393951416016, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32531719174035867, "beam_bleu_score": 0.37693586130503515}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What is the total name of all models that contain cars with data sheets with minimum horsepower?", "score": -49.542232513427734, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3889276866095004, "beam_bleu_score": 0.44333415658815867}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -52.43115997314453, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.Horsepower) ASC LIMIT 1    ", "inferred_question": "", "score": -52.749488830566406, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG ASC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with minimum mileage?", "score": -60.907649993896484, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15940289361982807, "beam_bleu_score": 0.33780920577705187}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT max( T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with minimum horsepower with maximum model?", "score": -61.965213775634766, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30234912822460636, "beam_bleu_score": 0.433335187173164}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT min( T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with minimum horsepower with minimum model?", "score": -63.43118667602539, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48784851946306473, "beam_bleu_score": 0.4308517887301956}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 99, "beams": [{"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the names of car makers that offer models that contain cars with data sheets who were built in 1970?", "score": 39.202911376953125, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6413321897520984, "beam_bleu_score": 0.37494931928946434}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the names of car makers that offer models that contain cars with data sheets who were built in 1970 with maximum name?", "score": 2.6188125610351562, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5061392463642959, "beam_bleu_score": 0.3153328461509369}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT count( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "How many names of car makers that offer models that contain cars with data sheets who were built in 1970 are there?", "score": 2.1559829711914062, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5107128880249165, "beam_bleu_score": 0.32907869038628745}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT avg( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What is the average name of all car makers that offer models that contain cars with data sheets who were built in 1970?", "score": -1.6068840026855469, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.528878189951018, "beam_bleu_score": 0.35695368720264814}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT min( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the names of car makers that offer models that contain cars with data sheets who were built in 1970 with minimum name?", "score": -5.2556304931640625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4912842161830646, "beam_bleu_score": 0.3153328461509369}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING count( T2.Year) = 1970     ", "inferred_question": "", "score": -5.9013824462890625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT sum( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What is the total name of all car makers that offer models that contain cars with data sheets who were built in 1970?", "score": -7.4865875244140625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5587814283757789, "beam_bleu_score": 0.35699556842913466}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING avg( T2.Year) = 1970     ", "inferred_question": "", "score": -13.756767272949219, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING max( T2.Year) = 1970     ", "inferred_question": "", "score": -14.47491455078125, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING sum( T2.Year) = 1970     ", "inferred_question": "", "score": -19.425792694091797, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING min( T2.Year) = 1970     ", "inferred_question": "", "score": -21.308860778808594, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the names of cars with data sheets who were built in 1970?", "score": -31.862545013427734, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5406909312264049, "beam_bleu_score": 0.3972405761452819}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1970       ", "inferred_question": "How many data sheets who were built in 1970 are there?", "score": -35.620445251464844, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2028401641849693, "beam_bleu_score": 0.18294772488194055}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT T1.FullName FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the full names of car makers that offer models that contain cars with data sheets who were built in 1970?", "score": -36.23823165893555, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6228827496719036, "beam_bleu_score": 0.3478871111549705}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY max( T1.Maker) HAVING count( T2.Year) = 1970     ", "inferred_question": "", "score": -41.93011474609375, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 100, "beams": [{"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the distinct names of car makers that offer models that contain cars with data sheets who were built in 1970?", "score": 39.39824676513672, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6078337387312824, "beam_bleu_score": 0.4190385829767351}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "How many distinct names of car makers that offer models that contain cars with data sheets who were built in 1970 are there?", "score": -0.24546051025390625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48745280886396114, "beam_bleu_score": 0.36612949220415386}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the distinct names of car makers that offer models that contain cars with data sheets who were built in 1970 with maximum name?", "score": -0.8426780700683594, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3219501388947428, "beam_bleu_score": 0.35637969131062786}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING count( T2.Year) = 1970     ", "inferred_question": "", "score": -2.9869766235351562, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "", "score": -5.138637542724609, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the distinct names of car makers that offer models that contain cars with data sheets who were built in 1970 with minimum name?", "score": -8.87466049194336, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33153252917635545, "beam_bleu_score": 0.35637969131062786}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "", "score": -11.780624389648438, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.FullName FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the distinct full names of car makers that offer models that contain cars with data sheets who were built in 1970?", "score": -12.239002227783203, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5481727554646927, "beam_bleu_score": 0.40179270512232274}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING max( T2.Year) = 1970     ", "inferred_question": "", "score": -12.274116516113281, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING avg( T2.Year) = 1970     ", "inferred_question": "", "score": -13.834991455078125, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING sum( T2.Year) = 1970     ", "inferred_question": "", "score": -17.498844146728516, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY T1.Maker HAVING min( T2.Year) = 1970     ", "inferred_question": "", "score": -17.842403411865234, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "What are the distinct names of cars with data sheets who were built in 1970?", "score": -18.452587127685547, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5161971868856416, "beam_bleu_score": 0.48143429031205276}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Maker) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id  GROUP BY count( T1.Maker) HAVING count( T2.Year) = 1970     ", "inferred_question": "", "score": -42.009124755859375, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.FullName) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970       ", "inferred_question": "How many distinct full names of car makers that offer models that contain cars with data sheets who were built in 1970 are there?", "score": -43.45449447631836, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40350105844625783, "beam_bleu_score": 0.3517703461860411}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 103, "beams": [{"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct names of models that contain cars with data sheets who were built after 1980?", "score": 72.25005340576172, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.632432154330876, "beam_bleu_score": 0.38568966480540096}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct names of models that contain cars with data sheets who were built after 1980 with maximum name?", "score": 39.39417266845703, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18816277133656, "beam_bleu_score": 0.31827881351037357}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct models of cars with data sheets who were built after 1980?", "score": 39.30209732055664, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8493594851299617, "beam_bleu_score": 0.4732505577514929}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "How many distinct names of models that contain cars with data sheets who were built after 1980 are there?", "score": 34.96095657348633, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41715649038070324, "beam_bleu_score": 0.3452591631084368}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "", "score": 33.3806266784668, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING max( T2.Year) > 1980     ", "inferred_question": "", "score": 32.259647369384766, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct names of models that contain cars with data sheets who were built after 1980 with minimum name?", "score": 31.83504867553711, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18871808498058595, "beam_bleu_score": 0.31827881351037357}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "", "score": 30.975936889648438, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING sum( T2.Year) > 1980     ", "inferred_question": "", "score": 27.76435089111328, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING avg( T2.Year) > 1980     ", "inferred_question": "", "score": 24.44544219970703, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Year) > 1980     ", "inferred_question": "", "score": 23.701522827148438, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Year) > 1980     ", "inferred_question": "", "score": 17.44094467163086, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct models of cars with data sheets who were built after 1980 with maximum model?", "score": 6.2247314453125, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5195492531882278, "beam_bleu_score": 0.3766178575308429}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.MPG > '1980'       ", "inferred_question": "What are the distinct names of models that contain cars with data sheets with a mileage of more than 1980 mpgs?", "score": 4.463844299316406, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1382721340071088, "beam_bleu_score": 0.28877865047942286}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "How many distinct models of cars with data sheets who were built after 1980 are there?", "score": 4.157928466796875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8048760064699041, "beam_bleu_score": 0.4175486288521959}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 104, "beams": [{"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct names of models that contain cars with data sheets who were built after 1980?", "score": 67.35150909423828, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32963631302882157, "beam_bleu_score": 0.39657492397635297}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "How many distinct names of models that contain cars with data sheets who were built after 1980 are there?", "score": 40.71711349487305, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27415779663596795, "beam_bleu_score": 0.32969067810202624}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct names of models that contain cars with data sheets who were built after 1980 with maximum name?", "score": 37.227783203125, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09857809664804718, "beam_bleu_score": 0.3271937684291351}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "", "score": 34.0609016418457, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "What are the distinct names of models that contain cars with data sheets who were built after 1980 with minimum name?", "score": 32.926326751708984, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10415357720999319, "beam_bleu_score": 0.3271937684291351}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Year > 1980       ", "inferred_question": "", "score": 32.04941177368164, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING max( T2.Year) > 1980     ", "inferred_question": "", "score": 31.88677215576172, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING sum( T2.Year) > 1980     ", "inferred_question": "", "score": 24.168312072753906, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING avg( T2.Year) > 1980     ", "inferred_question": "", "score": 21.919696807861328, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Year) > 1980     ", "inferred_question": "", "score": 19.653343200683594, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Year) > 1980     ", "inferred_question": "", "score": 13.654460906982422, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY count( T1.Model) HAVING max( T2.Year) > 1980     ", "inferred_question": "", "score": 5.078369140625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY max( T1.Model) HAVING max( T2.Year) > 1980     ", "inferred_question": "", "score": 2.2458343505859375, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY avg( T1.Model) HAVING max( T2.Year) > 1980     ", "inferred_question": "", "score": -0.8579025268554688, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY min( T1.Model) HAVING max( T2.Year) > 1980     ", "inferred_question": "", "score": -2.095458984375, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 111, "beams": [{"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "inferred_question": "What are the accelerations of data sheets for cars whose name is amc hornet?", "score": 81.32427978515625, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7581101838156941, "beam_bleu_score": 0.49636589902072714}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.Maker = 'amc hornet'       ", "inferred_question": "What are the accelerations of data sheets for cars in models offered by car makers whose name is amc hornet?", "score": 49.05451202392578, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7764785448412593, "beam_bleu_score": 0.3898823762043822}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT max( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "inferred_question": "What are the accelerations of data sheets for cars whose name is amc hornet with maximum acceleration?", "score": 46.302879333496094, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7861434410111182, "beam_bleu_score": 0.38929253854953455}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT avg( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "inferred_question": "What is the average acceleration of all data sheets for cars whose name is amc hornet?", "score": 43.58118438720703, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.696328425858844, "beam_bleu_score": 0.46577425084632335}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT min( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "inferred_question": "What are the accelerations of data sheets for cars whose name is amc hornet with minimum acceleration?", "score": 41.01783752441406, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.652442063347245, "beam_bleu_score": 0.3841874410510564}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING count( T2.Make) = 'amc hornet'     ", "inferred_question": "", "score": 39.718727111816406, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT sum( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "inferred_question": "What is the total acceleration of all data sheets for cars whose name is amc hornet?", "score": 37.21596908569336, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7196677639914135, "beam_bleu_score": 0.4629890073129483}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT count( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet'       ", "inferred_question": "How many accelerations of data sheets for cars whose name is amc hornet are there?", "score": 35.92731857299805, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5621730212899372, "beam_bleu_score": 0.42138617245541726}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING avg( T2.Make) = 'amc hornet'     ", "inferred_question": "", "score": 35.11018371582031, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING max( T2.Make) = 'amc hornet'     ", "inferred_question": "", "score": 32.39673614501953, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING min( T2.Make) = 'amc hornet'     ", "inferred_question": "", "score": 31.099674224853516, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc'       ", "inferred_question": "What are the accelerations of data sheets for cars whose name is amc?", "score": 28.553068161010742, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.708992861917382, "beam_bleu_score": 0.45438412942239526}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING sum( T2.Make) = 'amc hornet'     ", "inferred_question": "", "score": 26.570533752441406, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT max( T1.Accelerate) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.Maker = 'amc hornet'       ", "inferred_question": "What are the accelerations of data sheets for cars in models offered by car makers whose name is amc hornet with maximum acceleration?", "score": 14.007957458496094, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8100739630722303, "beam_bleu_score": 0.3241403977999579}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id  GROUP BY T1.Accelerate HAVING count( T2.Maker) = 'amc hornet'     ", "inferred_question": "", "score": 4.884544372558594, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 113, "beams": [{"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "How many countries whose name is france in which car makers are located are there?", "score": 69.05945587158203, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39455352837184354, "beam_bleu_score": 0.4512770116685854}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT min( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What are the names of car makers that lie in countries whose name is france with minimum name?", "score": 39.277259826660156, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.03322402703598748, "beam_bleu_score": 0.29405361085369475}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT sum( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What is the total name of all car makers that lie in countries whose name is france?", "score": 34.48775863647461, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2027688507184502, "beam_bleu_score": 0.2997058431673432}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What are the names of car makers that lie in countries whose name is france?", "score": 32.00282287597656, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30556152933996616, "beam_bleu_score": 0.3702353353790109}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.Continent = france       ", "inferred_question": "", "score": 29.2823486328125, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT avg( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What is the average name of all car makers that lie in countries whose name is france?", "score": 29.027118682861328, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19190586335664084, "beam_bleu_score": 0.293821635734056}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T13 ON T1.Country = T13.CountryId JOIN continents AS T2 ON T13.Continent = T2.ContId WHERE T2.Continent = 'france'       ", "inferred_question": "How many continents whose name is france which contain countries in which car makers are located are there?", "score": 26.825706481933594, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15017337132265096, "beam_bleu_score": 0.34151439814620793}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What are the names of car makers that lie in countries whose name is france with maximum name?", "score": 22.752849578857422, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.028734427359383363, "beam_bleu_score": 0.2995151662666504}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING count( T2.CountryName) = 'france'     ", "inferred_question": "", "score": 21.079143524169922, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING avg( T2.CountryName) = 'france'     ", "inferred_question": "", "score": 15.360702514648438, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'france'       ", "inferred_question": "How many car makers whose country is france are there?", "score": 15.243507385253906, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6237439587796604, "beam_bleu_score": 0.6414082960637532}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING min( T2.CountryName) = 'france'     ", "inferred_question": "", "score": 13.901630401611328, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.Id FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What are the ids of car makers that lie in countries whose name is france?", "score": 11.791946411132812, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2778840396555584, "beam_bleu_score": 0.3804511211243593}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.Make FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T14 ON T13.Maker = T14.Id JOIN countries AS T2 ON T14.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What are the names of cars in models offered by car makers that lie in countries whose name is france?", "score": 9.656742095947266, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.2942402378353962}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T15 ON T14.Maker = T15.Id JOIN countries AS T2 ON T15.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "What are the mileages of data sheets for cars in models offered by car makers that lie in countries whose name is france?", "score": 6.158660888671875, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.2474527882414645}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 114, "beams": [{"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "How many countries whose name is france in which car makers are located are there?", "score": 91.2183837890625, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11155590249815284, "beam_bleu_score": 0.3051365360302862}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "How many countries whose name is france in which car makers are located are there?", "score": 83.82635498046875, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11155590249815284, "beam_bleu_score": 0.3051365360302862}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "How many countries whose name is france in which car makers are located are there?", "score": 60.67017364501953, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11155590249815284, "beam_bleu_score": 0.3051365360302862}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT min( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "What are the names of car makers that lie in countries whose name is france with minimum name?", "score": 58.774009704589844, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10406316816095906, "beam_bleu_score": 0.3500495614472721}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT avg( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "What is the average name of all car makers that lie in countries whose name is france?", "score": 57.052486419677734, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13977997992423208, "beam_bleu_score": 0.36974677637698483}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT sum( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "What is the total name of all car makers that lie in countries whose name is france?", "score": 55.20737838745117, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.202105475096494, "beam_bleu_score": 0.3760541697990776}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT T1.Maker FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "What are the names of car makers that lie in countries whose name is france?", "score": 54.30256652832031, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12243628142668228, "beam_bleu_score": 0.4400923072431097}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       ", "inferred_question": "How many countries whose name is france in which car makers are located are there?", "score": 52.44658660888672, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11155590249815284, "beam_bleu_score": 0.3051365360302862}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT max( T1.Maker) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "What are the names of car makers that lie in countries whose name is france with maximum name?", "score": 46.78077697753906, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10669484786704653, "beam_bleu_score": 0.3500495614472721}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'France'       ", "inferred_question": "How many car makers whose country is france are there?", "score": 46.11331558227539, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09056612348294446, "beam_bleu_score": 0.40500023381058503}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING max( T2.CountryName) = 'France'     ", "inferred_question": "", "score": 44.53691101074219, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'       ", "inferred_question": "How many countries whose name is france in which car makers are located are there?", "score": 44.50570297241211, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11155590249815284, "beam_bleu_score": 0.3051365360302862}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING count( T2.CountryName) = 'France'     ", "inferred_question": "", "score": 43.607444763183594, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING avg( T2.CountryName) = 'France'     ", "inferred_question": "", "score": 42.51860809326172, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'France'       ", "inferred_question": "How many car makers whose country is france are there?", "score": 39.59889221191406, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09056612348294446, "beam_bleu_score": 0.40500023381058503}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 115, "beams": [{"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "inferred_question": "How many models are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37503430267609084, "beam_bleu_score": 0.417531152210054}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1        ", "inferred_question": "What are the names of models with minimum name?", "score": -24.583248138427734, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.055187705761636674, "beam_bleu_score": 0.3449184566891997}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1        ", "inferred_question": "What is the average name of all models?", "score": -29.33302116394043, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07052370431850175, "beam_bleu_score": 0.27728407693272084}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.Model FROM model_list AS T1        ", "inferred_question": "What are the names of models?", "score": -32.458824157714844, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07127661959305387, "beam_bleu_score": 0.2924287869868449}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1        ", "inferred_question": "What is the total name of all models?", "score": -33.442378997802734, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09197328815068206, "beam_bleu_score": 0.27318396785667054}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "inferred_question": "How many models are there?", "score": -33.852176666259766, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37503430267609084, "beam_bleu_score": 0.417531152210054}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "inferred_question": "How many models are there?", "score": -36.74690246582031, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37503430267609084, "beam_bleu_score": 0.417531152210054}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "inferred_question": "How many models are there?", "score": -36.86201858520508, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37503430267609084, "beam_bleu_score": 0.417531152210054}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1        ", "inferred_question": "What are the names of models with maximum name?", "score": -41.06489944458008, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05502605386670534, "beam_bleu_score": 0.3518900287953426}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.Id FROM car_makers AS T1        ", "inferred_question": "What are the ids of car makers?", "score": -53.29906463623047, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07629925437015195, "beam_bleu_score": 0.2983752370784133}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT min( T1.Model) FROM car_names AS T1        ", "inferred_question": "What are the models of cars with minimum model?", "score": -55.55929946899414, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10865984224169956, "beam_bleu_score": 0.3937527715474507}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT count( *) FROM model_list AS T1        ", "inferred_question": "How many models are there?", "score": -58.90664291381836, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37503430267609084, "beam_bleu_score": 0.417531152210054}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.Id FROM cars_data AS T1        ", "inferred_question": "What are the car names of data sheets?", "score": -59.37200927734375, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06052187581029966, "beam_bleu_score": 0.2746397782060703}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1        ", "inferred_question": "What are the mileages of data sheets?", "score": -59.531124114990234, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0457823728556227, "beam_bleu_score": 0.2052868804186951}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT avg( T1.Model) FROM car_names AS T1        ", "inferred_question": "What is the average model of all cars?", "score": -60.062355041503906, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1648772334949189, "beam_bleu_score": 0.29448701892252904}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 116, "beams": [{"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "inferred_question": "How many countries whose name is united states are there?", "score": 109.615966796875, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0514760425935592, "beam_bleu_score": 0.3167218049614649}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "inferred_question": "How many countries whose name is united states are there?", "score": 83.98545837402344, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0514760425935592, "beam_bleu_score": 0.3167218049614649}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'usa'       ", "inferred_question": "How many countries whose name is usa are there?", "score": 83.26151275634766, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05226598733332799, "beam_bleu_score": 0.18995608120651725}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "inferred_question": "What is the average name of all models offered by car makers that lie in countries whose name is united states?", "score": 75.51246643066406, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.244189341302819, "beam_bleu_score": 0.3876313444354044}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "inferred_question": "What are the names of models offered by car makers that lie in countries whose name is united states with minimum name?", "score": 75.1119155883789, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.192551398719496, "beam_bleu_score": 0.3429139797159369}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "inferred_question": "How many countries whose name is united states are there?", "score": 71.752197265625, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0514760425935592, "beam_bleu_score": 0.3167218049614649}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "inferred_question": "What is the total name of all models offered by car makers that lie in countries whose name is united states?", "score": 71.47102355957031, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32044210360516767, "beam_bleu_score": 0.39680344653619853}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.Continent = United States       ", "inferred_question": "", "score": 70.91780090332031, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "How many car makers whose country is united states are there?", "score": 68.78578186035156, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30169103826850774, "beam_bleu_score": 0.3815621604530621}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'United States'       ", "inferred_question": "How many countries whose name is united states are there?", "score": 68.75059509277344, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0514760425935592, "beam_bleu_score": 0.3167218049614649}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "inferred_question": "What are the names of models offered by car makers that lie in countries whose name is united states?", "score": 66.41651153564453, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26472471244375884, "beam_bleu_score": 0.4119217577133876}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_makers AS T13 ON T1.Maker = T13.Id JOIN countries AS T2 ON T13.Country = T2.CountryId WHERE T2.CountryName = 'United States'       ", "inferred_question": "What are the names of models offered by car makers that lie in countries whose name is united states with maximum name?", "score": 62.647586822509766, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20865596139650355, "beam_bleu_score": 0.3429139797159369}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1 WHERE T1.CountryName = 'usa'       ", "inferred_question": "How many countries whose name is usa are there?", "score": 57.95237350463867, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05226598733332799, "beam_bleu_score": 0.18995608120651725}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1   HAVING max( T1.CountryName) = 'United States'     ", "inferred_question": "", "score": 57.68687057495117, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT count( *) FROM countries AS T1   HAVING avg( T1.CountryName) = 'United States'     ", "inferred_question": "", "score": 57.18946075439453, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 117, "beams": [{"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the average mileage of all data sheets with a number of cylinder of 4  ?", "score": 35.76630401611328, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4306736501096755, "beam_bleu_score": 0.5615306825682217}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT sum( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the total mileage of all data sheets with a number of cylinder of 4  ?", "score": 8.86549186706543, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38249746104526594, "beam_bleu_score": 0.4880961582848945}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT min( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What are the mileages of data sheets with a number of cylinder of 4   with minimum mileage?", "score": 1.9820556640625, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30432609553988543, "beam_bleu_score": 0.37667194128426534}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT max( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What are the mileages of data sheets with a number of cylinder of 4   with maximum mileage?", "score": 1.5941505432128906, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3387493594170311, "beam_bleu_score": 0.37667194128426534}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "How many data sheets with a number of cylinder of 4   are there?", "score": -4.072181701660156, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11902279128419602, "beam_bleu_score": 0.3501155159739004}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the average horsepower of all data sheets with a number of cylinder of 4  ?", "score": -7.184909820556641, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2900723304981846, "beam_bleu_score": 0.49619327369714544}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING avg( T1.Cylinders) = 4     ", "inferred_question": "", "score": -7.827049255371094, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING count( T1.Cylinders) = 4     ", "inferred_question": "", "score": -8.265235900878906, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What are the mileages of data sheets with a number of cylinder of 4  ?", "score": -9.262187957763672, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3733141844963048, "beam_bleu_score": 0.47623759707922625}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING max( T1.Cylinders) = 4     ", "inferred_question": "", "score": -12.705307006835938, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT count( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "How many mileages of data sheets with a number of cylinder of 4   are there?", "score": -13.466255187988281, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20229447650278132, "beam_bleu_score": 0.3879459497745379}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING min( T1.Cylinders) = 4     ", "inferred_question": "", "score": -18.79553985595703, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING sum( T1.Cylinders) = 4     ", "inferred_question": "", "score": -22.14672088623047, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the average edispl of all data sheets with a number of cylinder of 4  ?", "score": -27.035308837890625, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19121935344061347, "beam_bleu_score": 0.5208974930936587}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "How many data sheets with a number of cylinder of 4   are there?", "score": -29.728351593017578, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11902279128419602, "beam_bleu_score": 0.3501155159739004}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 118, "beams": [{"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the average mileage of all data sheets with a number of cylinder of 4  ?", "score": 37.23899459838867, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5062865418609412, "beam_bleu_score": 0.5998369108855235}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT sum( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the total mileage of all data sheets with a number of cylinder of 4  ?", "score": 16.727779388427734, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47655485890387106, "beam_bleu_score": 0.5346905494400384}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT min( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What are the mileages of data sheets with a number of cylinder of 4   with minimum mileage?", "score": 8.014209747314453, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35605772428651117, "beam_bleu_score": 0.38196251146205606}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT max( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What are the mileages of data sheets with a number of cylinder of 4   with maximum mileage?", "score": 4.962089538574219, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39328115465500346, "beam_bleu_score": 0.38196251146205606}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT count( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "How many mileages of data sheets with a number of cylinder of 4   are there?", "score": 1.0644874572753906, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33114501519813366, "beam_bleu_score": 0.39385445631348326}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What are the mileages of data sheets with a number of cylinder of 4  ?", "score": -4.17279052734375, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3579395749008023, "beam_bleu_score": 0.4831932412469726}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING count( T1.Cylinders) = 4     ", "inferred_question": "", "score": -7.082027435302734, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING avg( T1.Cylinders) = 4     ", "inferred_question": "", "score": -9.245025634765625, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "How many data sheets with a number of cylinder of 4   are there?", "score": -12.554027557373047, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.176937158632413, "beam_bleu_score": 0.3545584999955784}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING max( T1.Cylinders) = 4     ", "inferred_question": "", "score": -14.745403289794922, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the average horsepower of all data sheets with a number of cylinder of 4  ?", "score": -18.651458740234375, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3924502096311059, "beam_bleu_score": 0.5358391646593994}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING min( T1.Cylinders) = 4     ", "inferred_question": "", "score": -19.766300201416016, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Cylinders = 4       ", "inferred_question": "What is the average edispl of all data sheets with a number of cylinder of 4  ?", "score": -22.01177215576172, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23592070642487584, "beam_bleu_score": 0.5625563136587484}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1   HAVING sum( T1.Cylinders) = 4     ", "inferred_question": "", "score": -22.037837982177734, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT sum( T1.MPG) FROM cars_data AS T1   HAVING count( T1.Cylinders) = 4     ", "inferred_question": "", "score": -27.068374633789062, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 119, "beams": [{"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 8   and who were built in 1974 with minimum weight?", "score": 12.656646728515625, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5409137082729049, "beam_bleu_score": 0.3474594659838624}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 1974       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 1974   and who were built in 1974 with minimum weight?", "score": 11.442337036132812, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5202341665204683, "beam_bleu_score": 0.33136947322907084}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 8       ", "inferred_question": "What are the weights of data sheets who were built in 8 and with a number of cylinder of 1974   with minimum weight?", "score": 8.457557678222656, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5146439597993779, "beam_bleu_score": 0.34479674513589414}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 1974       ", "inferred_question": "What are the weights of data sheets who were built in 1974 and with a number of cylinder of 1974   with minimum weight?", "score": 6.487709045410156, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5229004688813952, "beam_bleu_score": 0.3350725001656901}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 8 and T1.Cylinders = 1974       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 1974   and who were built in 8 with minimum weight?", "score": 2.4736976623535156, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5139160729101319, "beam_bleu_score": 0.34080998559310516}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 8 and T1.Cylinders = 8       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 8   and who were built in 8 with minimum weight?", "score": 0.4596214294433594, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46197434251482183, "beam_bleu_score": 0.3125259393458642}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 8 and T1.Year = 1974       ", "inferred_question": "What are the weights of data sheets who were built in 1974 and with a number of cylinder of 8   with minimum weight?", "score": -4.9960479736328125, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5328106287592852, "beam_bleu_score": 0.35134229728206146}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 8 and T1.Year = 8       ", "inferred_question": "What are the weights of data sheets who were built in 8 and with a number of cylinder of 8   with minimum weight?", "score": -7.155757904052734, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47938033068870334, "beam_bleu_score": 0.31677897056858606}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 8   and who were built in 1974?", "score": -8.401588439941406, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5250871202149845, "beam_bleu_score": 0.40875538783254955}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 1974       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 1974   and who were built in 1974?", "score": -8.832660675048828, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45820739422498946, "beam_bleu_score": 0.3972544749003726}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 8       ", "inferred_question": "What are the weights of data sheets who were built in 8 and with a number of cylinder of 1974  ?", "score": -10.037364959716797, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46607913345120755, "beam_bleu_score": 0.4177789253553214}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 8   and who were built in 1974 with maximum weight?", "score": -10.54414176940918, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45967316051843266, "beam_bleu_score": 0.3491838835380022}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 1974 and T1.Year = 1974       ", "inferred_question": "What are the weights of data sheets who were built in 1974 and with a number of cylinder of 1974  ?", "score": -11.449588775634766, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4227725641029795, "beam_bleu_score": 0.403813590970752}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 1974       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 1974   and who were built in 1974 with maximum weight?", "score": -11.713151931762695, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4251355866040234, "beam_bleu_score": 0.33308203399433156}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT sum( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = 8       ", "inferred_question": "What is the total weight of all data sheets with a number of cylinder of 8   and who were built in 1974?", "score": -14.321687698364258, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4908841486850509, "beam_bleu_score": 0.43373777673388136}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 120, "beams": [{"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "inferred_question": "What are the weights of data sheets who were built in 1974 with minimum weight?", "score": 42.0045280456543, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19651976192307719, "beam_bleu_score": 0.5096283566209607}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 1974   with minimum weight?", "score": 36.96153259277344, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3938644628520712, "beam_bleu_score": 0.4796554903800741}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 8       ", "inferred_question": "What are the weights of data sheets who were built in 8 with minimum weight?", "score": 29.607553482055664, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1513800627277574, "beam_bleu_score": 0.47249487201291174}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 8       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 8   with minimum weight?", "score": 22.952253341674805, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30807084383082584, "beam_bleu_score": 0.45988794959596285}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT sum( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "inferred_question": "What is the total weight of all data sheets who were built in 1974?", "score": 13.449481964111328, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1174169306734475, "beam_bleu_score": 0.4405135875335707}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "inferred_question": "What are the weights of data sheets who were built in 1974 with maximum weight?", "score": 12.06011962890625, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12413325020838695, "beam_bleu_score": 0.4614168480373113}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT avg( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "inferred_question": "What is the average weight of all data sheets who were built in 1974?", "score": 10.762266159057617, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11602560336058265, "beam_bleu_score": 0.4399435148171949}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT count( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974       ", "inferred_question": "How many weights of data sheets who were built in 1974 are there?", "score": 9.95201301574707, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07333690344935484, "beam_bleu_score": 0.3366575699850073}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT sum( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "inferred_question": "What is the total weight of all data sheets with a number of cylinder of 1974  ?", "score": 8.815292358398438, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21837314253934614, "beam_bleu_score": 0.5146175208135573}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Year = 1974       ", "inferred_question": "What are the weights of data sheets who were built in 1974?", "score": 8.639263153076172, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09822947704124363, "beam_bleu_score": 0.35672282326717525}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT max( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 1974   with maximum weight?", "score": 7.444133758544922, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2699176919956764, "beam_bleu_score": 0.43859887277417564}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT avg( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "inferred_question": "What is the average weight of all data sheets with a number of cylinder of 1974  ?", "score": 6.006050109863281, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.232382855179603, "beam_bleu_score": 0.5039075072401329}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT count( T1.Weight) FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "inferred_question": "How many weights of data sheets with a number of cylinder of 1974   are there?", "score": 3.9788246154785156, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14141144904558722, "beam_bleu_score": 0.41453371181202886}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 1974       ", "inferred_question": "What are the weights of data sheets with a number of cylinder of 1974  ?", "score": 3.6087722778320312, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21808475026368856, "beam_bleu_score": 0.4910015874430309}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT min( T1.Weight) FROM cars_data AS T1   HAVING count( T1.Year) = 1974     ", "inferred_question": "", "score": 2.6287155151367188, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 121, "beams": [{"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, T1.Model FROM model_list AS T1        ", "inferred_question": "What are the makers and names of models?", "score": 0.0, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7619605879021081, "beam_bleu_score": 0.7354024465560612}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker        ", "inferred_question": "What are the names of car makers that offer models? Also show the names of the models.", "score": -17.7279052734375, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2726032760444993, "beam_bleu_score": 0.29720904243097934}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT max( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -33.535274505615234, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -38.2709846496582, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT sum( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -40.15998077392578, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT min( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -40.47010803222656, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT count( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -41.4006462097168, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, max( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -42.43643569946289, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, avg( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -42.50550842285156, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, count( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -43.462501525878906, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, sum( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -46.56203079223633, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Maker, min( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -47.563758850097656, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT max( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "inferred_question": "", "score": -48.24848175048828, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model        ", "inferred_question": "What are the names of cars in models? Also show the names of the models.", "score": -52.737037658691406, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26054200183354537, "beam_bleu_score": 0.29559088697089003}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "inferred_question": "", "score": -53.08294677734375, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 122, "beams": [{"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, T1.Model FROM model_list AS T1        ", "inferred_question": "What are the makers and names of models?", "score": 0.0, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7952939948487621, "beam_bleu_score": 0.7453771966019811}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker        ", "inferred_question": "What are the names of car makers that offer models? Also show the names of the models.", "score": -22.290815353393555, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26720686034012076, "beam_bleu_score": 0.29879457339966325}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT max( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -30.73416519165039, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -35.61479187011719, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT min( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -37.81752014160156, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT sum( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -38.60618209838867, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT count( T1.Maker), T1.Model FROM model_list AS T1  GROUP BY T1.Model      ", "inferred_question": "", "score": -39.890499114990234, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, avg( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -39.99249267578125, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, max( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -42.50407791137695, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, count( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -43.227783203125, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, sum( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -47.443023681640625, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Maker, min( T1.Model) FROM model_list AS T1  GROUP BY T1.Maker      ", "inferred_question": "", "score": -48.04511260986328, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model        ", "inferred_question": "What are the names of cars in models? Also show the names of the models.", "score": -49.95374298095703, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13518164208186523, "beam_bleu_score": 0.3002409225146522}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT max( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "inferred_question": "", "score": -50.5648193359375, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT avg( T1.Maker), T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Model      ", "inferred_question": "", "score": -55.53221893310547, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 125, "beams": [{"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 57.091670989990234, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27685556269423106, "beam_bleu_score": 0.5670265403942741}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 49.884029388427734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27685556269423106, "beam_bleu_score": 0.5670265403942741}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 42.935218811035156, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27685556269423106, "beam_bleu_score": 0.5670265403942741}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 38.260459899902344, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27685556269423106, "beam_bleu_score": 0.5670265403942741}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "", "score": 24.130672454833984, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "Show me everything about data sheets with a horsepower of more than 150  .", "score": 23.905437469482422, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17402938684739844, "beam_bleu_score": 0.505323812565598}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "What are the horsepowers of data sheets with a horsepower of more than 150  ?", "score": 23.868942260742188, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36167499036569806, "beam_bleu_score": 0.5496758620559591}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "What is the average horsepower of all data sheets with a horsepower of more than 150  ?", "score": 20.06134033203125, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36967391946063854, "beam_bleu_score": 0.5247333138568144}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "", "score": 17.278335571289062, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "", "score": 15.676372528076172, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "Show me everything about data sheets with a horsepower of more than 150  .", "score": 15.000102996826172, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17402938684739844, "beam_bleu_score": 0.505323812565598}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Horsepower) > '150'     ", "inferred_question": "", "score": 12.194534301757812, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "What are the horsepowers of data sheets with a horsepower of more than 150   with maximum horsepower?", "score": 11.033103942871094, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3833790168250839, "beam_bleu_score": 0.4270721111407926}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "", "score": 9.56246566772461, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "Show me everything about data sheets with a horsepower of more than 150  .", "score": 9.20859146118164, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17402938684739844, "beam_bleu_score": 0.505323812565598}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 126, "beams": [{"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 56.46510696411133, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23696658490537126, "beam_bleu_score": 0.5424972916306144}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 45.35995101928711, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23696658490537126, "beam_bleu_score": 0.5424972916306144}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 40.170326232910156, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23696658490537126, "beam_bleu_score": 0.5424972916306144}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "How many data sheets with a horsepower of more than 150   are there?", "score": 34.355560302734375, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23696658490537126, "beam_bleu_score": 0.5424972916306144}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "", "score": 23.188232421875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "What are the horsepowers of data sheets with a horsepower of more than 150  ?", "score": 22.34799575805664, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30895835973049635, "beam_bleu_score": 0.5312612936846909}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "What is the average horsepower of all data sheets with a horsepower of more than 150  ?", "score": 19.151691436767578, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34046991109574565, "beam_bleu_score": 0.5137308506236936}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "Show me everything about data sheets with a horsepower of more than 150  .", "score": 16.157215118408203, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1197243906152482, "beam_bleu_score": 0.4855854146418943}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "", "score": 16.00281524658203, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Horsepower) > '150'     ", "inferred_question": "", "score": 12.730392456054688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "", "score": 11.54140853881836, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Horsepower > '150'       ", "inferred_question": "What are the horsepowers of data sheets with a horsepower of more than 150   with maximum horsepower?", "score": 10.22708511352539, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.323542782119292, "beam_bleu_score": 0.4111952792369966}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Horsepower) > '150'     ", "inferred_question": "", "score": 9.931705474853516, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING count( T1.Horsepower) > '150'     ", "inferred_question": "", "score": 9.414188385009766, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Horsepower) > '150'     ", "inferred_question": "", "score": 5.247844696044922, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 131, "beams": [{"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the maximum name of the cars.", "score": -6.438047409057617, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15038924880266502, "beam_bleu_score": 0.4657420300509222}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower and maximum mileage of data sheets with a number of cylinder of 3  ?", "score": -12.845894813537598, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43325658386861887, "beam_bleu_score": 0.5366234817765916}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "inferred_question": "", "score": -20.289608001708984, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), sum( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the total name of the cars.", "score": -23.63547706604004, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15528379616127586, "beam_bleu_score": 0.45843318674683253}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), min( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower and minimum horsepower of data sheets with a number of cylinder of 3  ?", "score": -24.52605438232422, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4130410784854499, "beam_bleu_score": 0.5088851532972735}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower and average horsepower of data sheets with a number of cylinder of 3  ?", "score": -24.7867488861084, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45703113864656, "beam_bleu_score": 0.5055036693527865}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT sum( T1.Horsepower), max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "inferred_question": "What are the total horsepower and maximum horsepower of data sheets with a number of cylinder of 3  ?", "score": -28.356098175048828, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4807254392788344, "beam_bleu_score": 0.5075272914259346}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), sum( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower and total horsepower of data sheets with a number of cylinder of 3  ?", "score": -28.982929229736328, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4736984238296109, "beam_bleu_score": 0.5237040612207016}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), min( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the minimum name of the cars.", "score": -30.594966888427734, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22378215980472094, "beam_bleu_score": 0.4592469536202408}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), avg( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the average name of the cars.", "score": -31.67962074279785, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22818501755118858, "beam_bleu_score": 0.45124152050852145}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT min( T1.Horsepower), max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "inferred_question": "What are the minimum horsepower and maximum horsepower of data sheets with a number of cylinder of 3  ?", "score": -32.70051574707031, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41960460808979405, "beam_bleu_score": 0.5055036693527865}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT avg( T1.Horsepower), max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 3       ", "inferred_question": "What are the average horsepower and maximum horsepower of data sheets with a number of cylinder of 3  ?", "score": -33.76445770263672, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4403154506834427, "beam_bleu_score": 0.49585875221969605}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT sum( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the total horsepower of data sheets with a number of cylinder of 3   for cars? Also show the maximum name of the cars.", "score": -35.798828125, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14590134466515126, "beam_bleu_score": 0.45093807961558685}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Maker) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars in models offered by car makers? Also show the maximum name of the car makers.", "score": -38.35377883911133, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07286657510038685, "beam_bleu_score": 0.4117744034815109}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId   HAVING count( T1.Cylinders) = 3     ", "inferred_question": "What are the maximum horsepower of data sheets for cars? Also show the maximum name of the cars.", "score": -46.012638092041016, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4294233845908859, "beam_bleu_score": 0.5070341758678583}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 132, "beams": [{"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "inferred_question": "", "score": 19.38922882080078, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT T1.Horsepower, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the horsepowers of data sheets with a number of cylinder of 3   for cars? Also show the names of the cars.", "score": -5.329111099243164, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44954526606088796, "beam_bleu_score": 0.42400233828191686}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT avg( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "inferred_question": "", "score": -9.586496353149414, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the maximum name of the cars.", "score": -10.362552642822266, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47810410167944306, "beam_bleu_score": 0.38412231526604396}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT sum( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "inferred_question": "", "score": -10.585752487182617, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), avg( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the average name of the cars.", "score": -11.95639419555664, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4621313695343231, "beam_bleu_score": 0.38412231526604396}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT min( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make      ", "inferred_question": "", "score": -13.425117492675781, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), min( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the minimum name of the cars.", "score": -14.53936767578125, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4491973659483567, "beam_bleu_score": 0.3852213889157228}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), sum( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the total name of the cars.", "score": -17.728145599365234, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4805957631347404, "beam_bleu_score": 0.38963295394193526}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), count( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3       ", "inferred_question": "What are the maximum horsepower of data sheets with a number of cylinder of 3   for cars? Also show the number of names of the cars.", "score": -22.1502685546875, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48544269970563303, "beam_bleu_score": 0.37583873366390974}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING count( T1.Cylinders) = 3     ", "inferred_question": "", "score": -24.542896270751953, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING avg( T1.Cylinders) = 3     ", "inferred_question": "", "score": -25.933021545410156, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Maker FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T1.Cylinders = 3 GROUP BY T2.Maker      ", "inferred_question": "", "score": -30.039264678955078, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING max( T1.Cylinders) = 3     ", "inferred_question": "", "score": -31.024003982543945, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make HAVING min( T1.Cylinders) = 3     ", "inferred_question": "", "score": -34.93262481689453, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 133, "beams": [{"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -5.960462772236497e-07, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -14.422638893127441, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with maximum mileage?", "score": -20.983299255371094, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24593469760807984, "beam_bleu_score": 0.3933385211616769}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -30.759008407592773, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -36.38758087158203, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY max( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -40.001068115234375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -40.54518508911133, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -41.640201568603516, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY min( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -43.17976379394531, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY avg( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -44.970550537109375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY sum( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -46.78782653808594, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM model_list AS T1  GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -47.238487243652344, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY count( T1.Model)  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -48.700714111328125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -51.58465576171875, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY max( T1.Model)  ORDER BY max( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -54.182533264160156, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 134, "beams": [{"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with maximum mileage?", "score": 0.0, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44570566554848146, "beam_bleu_score": 0.2712549803360516}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with maximum mileage?", "score": -18.374835968017578, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5515394620570964, "beam_bleu_score": 0.32271786982877265}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with maximum mileage with maximum name?", "score": -39.33871078491211, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25047928889240956, "beam_bleu_score": 0.2231441816202552}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -43.17716598510742, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What is the average name of all models that contain cars with data sheets with maximum mileage?", "score": -43.24897766113281, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3466730229433931, "beam_bleu_score": 0.27670168129145334}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY max( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -43.665035247802734, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -44.66145706176758, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with maximum mileage with minimum name?", "score": -45.53437042236328, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20776145140244373, "beam_bleu_score": 0.2231441816202552}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.MPG FROM cars_data AS T1    ORDER BY T1.MPG DESC LIMIT 1    ", "inferred_question": "What are the mileages of data sheets with maximum mileage?", "score": -49.218563079833984, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13275761145513587, "beam_bleu_score": 0.2723225563994697}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What is the total name of all models that contain cars with data sheets with maximum mileage?", "score": -50.103729248046875, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3636021691202518, "beam_bleu_score": 0.28109226563715906}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "How many names of models that contain cars with data sheets with maximum mileage are there?", "score": -51.9261360168457, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32010809951923114, "beam_bleu_score": 0.22782259239767294}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -52.630863189697266, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY min( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -55.21162033081055, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT max( T1.Model) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with maximum mileage with maximum model?", "score": -57.841453552246094, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.451051298487928, "beam_bleu_score": 0.25077618277046737}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.MPG) DESC LIMIT 1    ", "inferred_question": "", "score": -61.596553802490234, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 135, "beams": [{"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What is the average horsepower of all data sheets who were built before 1980?", "score": 31.330097198486328, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39221025034015067, "beam_bleu_score": 0.6124526275973162}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What is the total horsepower of all data sheets who were built before 1980?", "score": 2.6257972717285156, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3794694853908016, "beam_bleu_score": 0.5305578268990417}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What are the horsepowers of data sheets who were built before 1980 with minimum horsepower?", "score": -0.6017417907714844, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31007970080746816, "beam_bleu_score": 0.3881999470797903}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What are the horsepowers of data sheets who were built before 1980 with maximum horsepower?", "score": -1.7038650512695312, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3216628191700329, "beam_bleu_score": 0.3881999470797903}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -5.454370498657227, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "How many horsepowers of data sheets who were built before 1980 are there?", "score": -10.917949676513672, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34454150408512774, "beam_bleu_score": 0.42887103656186043}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What are the horsepowers of data sheets who were built before 1980?", "score": -11.292469024658203, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.344989666340756, "beam_bleu_score": 0.5407148105947925}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING count( T1.Year) < 1980     ", "inferred_question": "", "score": -12.174030303955078, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING max( T1.Year) < 1980     ", "inferred_question": "", "score": -15.043479919433594, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "How many data sheets who were built before 1980 are there?", "score": -18.27796745300293, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09100243163816046, "beam_bleu_score": 0.3529120733641713}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING avg( T1.Year) < 1980     ", "inferred_question": "", "score": -20.08306121826172, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING sum( T1.Year) < 1980     ", "inferred_question": "", "score": -21.70148277282715, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -34.54582214355469, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -37.86133575439453, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -38.48318862915039, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 136, "beams": [{"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What is the average horsepower of all data sheets who were built before 1980?", "score": 31.679845809936523, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44459765773160786, "beam_bleu_score": 0.6108103954149584}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What is the total horsepower of all data sheets who were built before 1980?", "score": 3.789386749267578, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43422316985726994, "beam_bleu_score": 0.5229673927726379}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What are the horsepowers of data sheets who were built before 1980 with minimum horsepower?", "score": 0.22565841674804688, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3595003434147084, "beam_bleu_score": 0.3873389971208284}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What are the horsepowers of data sheets who were built before 1980 with maximum horsepower?", "score": -0.38385009765625, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3542881122764113, "beam_bleu_score": 0.3889699342287264}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -2.654508590698242, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "How many horsepowers of data sheets who were built before 1980 are there?", "score": -8.50131607055664, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3809119329214572, "beam_bleu_score": 0.42553123198877163}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING count( T1.Year) < 1980     ", "inferred_question": "", "score": -9.522823333740234, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "What are the horsepowers of data sheets who were built before 1980?", "score": -11.265922546386719, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4130704282156128, "beam_bleu_score": 0.5051161169770342}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING max( T1.Year) < 1980     ", "inferred_question": "", "score": -13.302873611450195, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING avg( T1.Year) < 1980     ", "inferred_question": "", "score": -18.138309478759766, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1   HAVING sum( T1.Year) < 1980     ", "inferred_question": "", "score": -19.176246643066406, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year < 1980       ", "inferred_question": "How many data sheets who were built before 1980 are there?", "score": -22.020021438598633, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09403515724496891, "beam_bleu_score": 0.32596078272597395}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -30.709243774414062, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -34.482444763183594, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1   HAVING min( T1.Year) < 1980     ", "inferred_question": "", "score": -34.804840087890625, "correct_code": "select avg(horsepower) from cars_data where year  <  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 137, "beams": [{"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars in models whose name is volvo?", "score": 62.08576202392578, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7002926433656489, "beam_bleu_score": 0.5333442353268519}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars whose model is volvo?", "score": 58.24856185913086, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6659675208543976, "beam_bleu_score": 0.605423970816063}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'Volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars in models whose name is volvo?", "score": 48.82400894165039, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7002926433656489, "beam_bleu_score": 0.5333442353268519}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars whose model is volvo?", "score": 44.39537048339844, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6659675208543976, "beam_bleu_score": 0.605423970816063}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "inferred_question": "What is the total edispl of all data sheets for cars in models whose name is volvo?", "score": 32.86402130126953, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6463916369007318, "beam_bleu_score": 0.45748793768406587}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "inferred_question": "What are the edispls of data sheets for cars in models whose name is volvo with minimum edispl?", "score": 30.61325454711914, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.673467846171639, "beam_bleu_score": 0.35883070486329266}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "inferred_question": "How many edispls of data sheets for cars in models whose name is volvo are there?", "score": 30.147281646728516, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5871804006413568, "beam_bleu_score": 0.372635169000981}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "inferred_question": "What is the total edispl of all data sheets for cars whose model is volvo?", "score": 29.207714080810547, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5968896900621956, "beam_bleu_score": 0.5199299019291908}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "inferred_question": "What are the edispls of data sheets for cars in models whose name is volvo with maximum edispl?", "score": 28.14132308959961, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6481705589595196, "beam_bleu_score": 0.35883070486329266}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "inferred_question": "What are the edispls of data sheets for cars whose model is volvo with minimum edispl?", "score": 27.03628158569336, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.599988168895998, "beam_bleu_score": 0.40762808169874504}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "inferred_question": "How many edispls of data sheets for cars whose model is volvo are there?", "score": 26.96218490600586, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.540197041978363, "beam_bleu_score": 0.43063726591264145}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model  GROUP BY avg( T1.Edispl) HAVING count( T2.Model) = 'volvo'     ", "inferred_question": "", "score": 25.395416259765625, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       ", "inferred_question": "What are the edispls of data sheets for cars whose model is volvo with maximum edispl?", "score": 24.461162567138672, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5278335937426998, "beam_bleu_score": 0.40762808169874504}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT T1.Edispl FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "inferred_question": "What are the edispls of data sheets for cars in models whose name is volvo?", "score": 20.517330169677734, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6761572614645088, "beam_bleu_score": 0.46576272898318855}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T1.Id HAVING count( T2.Model) = 'volvo'     ", "inferred_question": "", "score": 20.20376968383789, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 138, "beams": [{"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars in models offered by car makers whose full name is volvo?", "score": 36.16032028198242, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06986169442322254, "beam_bleu_score": 0.3325406251111493}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars in models offered by car makers whose full name is volvo?", "score": 36.03157424926758, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06986169442322254, "beam_bleu_score": 0.3325406251111493}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'Volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars in models whose name is volvo?", "score": 23.468204498291016, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27406707606742486, "beam_bleu_score": 0.44008565832505164}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars in models whose name is volvo?", "score": 23.35486602783203, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27406707606742486, "beam_bleu_score": 0.44008565832505164}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Maker = volvo       ", "inferred_question": "", "score": 22.037994384765625, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Maker = Volvo       ", "inferred_question": "", "score": 21.878337860107422, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "inferred_question": "What is the total edispl of all data sheets for cars in models offered by car makers whose full name is volvo?", "score": 7.364326477050781, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05567382281884958, "beam_bleu_score": 0.2705678612481791}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT sum( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "inferred_question": "What is the total edispl of all data sheets for cars in models offered by car makers whose full name is volvo?", "score": 7.272304534912109, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05567382281884958, "beam_bleu_score": 0.2705678612481791}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "inferred_question": "What are the edispls of data sheets for cars in models offered by car makers whose full name is volvo with minimum edispl?", "score": 6.265491485595703, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.023875567336749892, "beam_bleu_score": 0.21157415998832693}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT min( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "inferred_question": "What are the edispls of data sheets for cars in models offered by car makers whose full name is volvo with minimum edispl?", "score": 6.174182891845703, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.023875567336749892, "beam_bleu_score": 0.21157415998832693}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "inferred_question": "How many edispls of data sheets for cars in models offered by car makers whose full name is volvo are there?", "score": 4.952732086181641, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.01528328505953147, "beam_bleu_score": 0.20137260048290792}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT count( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "inferred_question": "How many edispls of data sheets for cars in models offered by car makers whose full name is volvo are there?", "score": 4.932807922363281, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.01528328505953147, "beam_bleu_score": 0.20137260048290792}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'Volvo'       ", "inferred_question": "What are the edispls of data sheets for cars in models offered by car makers whose full name is volvo with maximum edispl?", "score": 4.760478973388672, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.02201244596416907, "beam_bleu_score": 0.21157415998832693}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT max( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.FullName = 'volvo'       ", "inferred_question": "What are the edispls of data sheets for cars in models offered by car makers whose full name is volvo with maximum edispl?", "score": 4.658603668212891, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.02201244596416907, "beam_bleu_score": 0.21157415998832693}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T2 ON T14.Maker = T2.Id WHERE T2.Maker = 'volvo'       ", "inferred_question": "What is the average edispl of all data sheets for cars in models offered by car makers whose name is volvo?", "score": -0.5364227294921875, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06834847550077006, "beam_bleu_score": 0.3483025745507914}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 143, "beams": [{"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 79.34235382080078, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11138628192030042, "beam_bleu_score": 0.3939225942056884}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 69.73582458496094, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11138628192030042, "beam_bleu_score": 0.3939225942056884}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 69.26265716552734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11138628192030042, "beam_bleu_score": 0.3939225942056884}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 51.19450378417969, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11138628192030042, "beam_bleu_score": 0.3939225942056884}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 4     ", "inferred_question": "", "score": 42.087059020996094, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 41.324951171875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of more than 4  ?", "score": 41.11494064331055, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.013110321506532463, "beam_bleu_score": 0.26669067966888677}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "Show me everything about data sheets with a number of cylinder of more than 4  .", "score": 38.20146942138672, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.008581588998362477, "beam_bleu_score": 0.30671383333470886}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "What is the average number of cylinder of all data sheets with a number of cylinder of more than 4  ?", "score": 37.81055450439453, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.009137511616067573, "beam_bleu_score": 0.2383312933119342}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 37.72122573852539, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 4     ", "inferred_question": "", "score": 35.32051086425781, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 32.865760803222656, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 4     ", "inferred_question": "", "score": 32.737266540527344, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 31.893875122070312, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 4     ", "inferred_question": "", "score": 30.650127410888672, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 144, "beams": [{"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 77.57906341552734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26294858325213366, "beam_bleu_score": 0.5315765230722859}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 67.07331085205078, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26294858325213366, "beam_bleu_score": 0.5315765230722859}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 66.74346160888672, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26294858325213366, "beam_bleu_score": 0.5315765230722859}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "How many data sheets with a number of cylinder of more than 4   are there?", "score": 63.20524597167969, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26294858325213366, "beam_bleu_score": 0.5315765230722859}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of more than 4  ?", "score": 44.088401794433594, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14527656488426566, "beam_bleu_score": 0.4936838699806846}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 40.51506805419922, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "What is the average number of cylinder of all data sheets with a number of cylinder of more than 4  ?", "score": 40.10715866088867, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06007110112467284, "beam_bleu_score": 0.4615751390133577}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 4     ", "inferred_question": "", "score": 37.60492706298828, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 35.30702590942383, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "Show me everything about data sheets with a number of cylinder of more than 4  .", "score": 34.148353576660156, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15497319821227595, "beam_bleu_score": 0.4768050518211284}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 4     ", "inferred_question": "", "score": 31.630783081054688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT max( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of more than 4   with maximum number of cylinder?", "score": 29.898853302001953, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05645000377738563, "beam_bleu_score": 0.3683779262752865}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 29.550201416015625, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       ", "inferred_question": "", "score": 28.972087860107422, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 4     ", "inferred_question": "", "score": 28.325057983398438, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 145, "beams": [{"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 56.51078796386719, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2191129911997386, "beam_bleu_score": 0.3783819804034498}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 51.63136672973633, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2191129911997386, "beam_bleu_score": 0.3783819804034498}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 48.656131744384766, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2191129911997386, "beam_bleu_score": 0.3783819804034498}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 30.962257385253906, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2191129911997386, "beam_bleu_score": 0.3783819804034498}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "What is the average mileage of all data sheets who were built in 1980?", "score": 26.855398178100586, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12083864412905232, "beam_bleu_score": 0.21845033873295877}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 23.850360870361328, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "Show me everything about data sheets who were built in 1980.", "score": 22.897411346435547, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0880672367659483, "beam_bleu_score": 0.27947825640031804}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 21.263294219970703, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 19.169292449951172, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT max( T1.MPG) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "What are the mileages of data sheets who were built in 1980 with maximum mileage?", "score": 18.779617309570312, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0728876557995829, "beam_bleu_score": 0.18554760933862538}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "Show me everything about data sheets who were built in 1980.", "score": 18.34970474243164, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0880672367659483, "beam_bleu_score": 0.27947825640031804}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 16.528289794921875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 16.19353485107422, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "Show me everything about data sheets who were built in 1980.", "score": 15.069263458251953, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0880672367659483, "beam_bleu_score": 0.27947825640031804}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 13.410400390625, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 146, "beams": [{"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 57.28072738647461, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20387171075147947, "beam_bleu_score": 0.33920677816953354}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 55.85538101196289, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20387171075147947, "beam_bleu_score": 0.33920677816953354}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 46.81634521484375, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20387171075147947, "beam_bleu_score": 0.33920677816953354}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 26.475038528442383, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20387171075147947, "beam_bleu_score": 0.33920677816953354}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 23.02981948852539, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 21.210140228271484, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 19.402999877929688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 17.506759643554688, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "Show me everything about data sheets who were built in 1980.", "score": 15.644329071044922, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09708612965504582, "beam_bleu_score": 0.24227221116929892}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "Show me everything about data sheets who were built in 1980.", "score": 13.76531982421875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09708612965504582, "beam_bleu_score": 0.24227221116929892}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "What is the average mileage of all data sheets who were built in 1980?", "score": 13.145523071289062, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10744163357283287, "beam_bleu_score": 0.1758862461880211}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "", "score": 12.535591125488281, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1980       ", "inferred_question": "What are the names of cars with data sheets who were built in 1980?", "score": 11.670459747314453, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2434657550634347, "beam_bleu_score": 0.23929703415095274}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT avg( T1.Make) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1980       ", "inferred_question": "What is the average name of all cars with data sheets who were built in 1980?", "score": 11.451595306396484, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11297213277227014, "beam_bleu_score": 0.20759457883360155}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       ", "inferred_question": "How many data sheets who were built in 1980 are there?", "score": 10.147960662841797, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20387171075147947, "beam_bleu_score": 0.33920677816953354}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 147, "beams": [{"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "How many car makers whose full name is american motor company that offer models are there?", "score": 77.92426300048828, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6705031507142526, "beam_bleu_score": 0.6245924155103428}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "How many car makers whose full name is american motor company that offer models are there?", "score": 73.52628326416016, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6705031507142526, "beam_bleu_score": 0.6245924155103428}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "How many car makers whose full name is american motor company that offer models are there?", "score": 68.37458801269531, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6705031507142526, "beam_bleu_score": 0.6245924155103428}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What are the names of models offered by car makers whose full name is american motor company with minimum name?", "score": 51.60240173339844, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5216578551176454, "beam_bleu_score": 0.5094436015263751}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What is the average name of all models offered by car makers whose full name is american motor company?", "score": 50.612083435058594, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.678491639080872, "beam_bleu_score": 0.5109688519616373}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What are the names of models offered by car makers whose full name is american motor company?", "score": 50.32605743408203, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6854395583849817, "beam_bleu_score": 0.5698116114113637}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What is the total name of all models offered by car makers whose full name is american motor company?", "score": 48.25736999511719, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7520283058627851, "beam_bleu_score": 0.5194946418191483}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What are the models of cars in models offered by car makers whose full name is american motor company with minimum model?", "score": 42.79951477050781, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5149079051609574, "beam_bleu_score": 0.4754379635149028}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT avg( T1.Model) FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What is the average model of all cars in models offered by car makers whose full name is american motor company?", "score": 42.61594009399414, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5912535341981557, "beam_bleu_score": 0.47545156893463514}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What are the models of cars in models offered by car makers whose full name is american motor company?", "score": 41.66889190673828, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6905246039233757, "beam_bleu_score": 0.5290791686356299}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT sum( T1.Model) FROM car_names AS T1 JOIN model_list AS T13 ON T1.Model = T13.Model JOIN car_makers AS T2 ON T13.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What is the total model of all cars in models offered by car makers whose full name is american motor company?", "score": 38.42613983154297, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6597342992412956, "beam_bleu_score": 0.4816746683972807}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What are the names of models offered by car makers whose full name is american motor company with maximum name?", "score": 38.371089935302734, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6100557162428999, "beam_bleu_score": 0.5139270281769549}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'america'       ", "inferred_question": "How many car makers whose full name is america that offer models are there?", "score": 36.52384567260742, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5669193010022076, "beam_bleu_score": 0.5404747966691901}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T1.Maker HAVING avg( T2.FullName) = 'American Motor Company'     ", "inferred_question": "", "score": 32.845069885253906, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "How many car makers whose full name is american motor company that offer models are there?", "score": 32.73324203491211, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6705031507142526, "beam_bleu_score": 0.6245924155103428}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 148, "beams": [{"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "How many car makers whose full name is american motor company that offer models are there?", "score": 88.32575225830078, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.574290174320033, "beam_bleu_score": 0.50502141459308}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "inferred_question": "How many car makers whose name is american motor company that offer models are there?", "score": 75.86882781982422, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5602879379238246, "beam_bleu_score": 0.5368742578137156}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "How many car makers whose full name is american motor company that offer models are there?", "score": 63.64869689941406, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.574290174320033, "beam_bleu_score": 0.50502141459308}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "How many car makers whose full name is american motor company that offer models are there?", "score": 57.79724884033203, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.574290174320033, "beam_bleu_score": 0.50502141459308}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What are the names of models offered by car makers whose full name is american motor company with minimum name?", "score": 53.80312728881836, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44649901512815093, "beam_bleu_score": 0.44949955971684435}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What are the names of models offered by car makers whose full name is american motor company?", "score": 53.18726348876953, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5304391490288021, "beam_bleu_score": 0.5411213169379449}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What is the average name of all models offered by car makers whose full name is american motor company?", "score": 51.303932189941406, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44383454569243364, "beam_bleu_score": 0.5020401954976371}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "inferred_question": "How many car makers whose name is american motor company that offer models are there?", "score": 49.620643615722656, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5602879379238246, "beam_bleu_score": 0.5368742578137156}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       ", "inferred_question": "What is the total name of all models offered by car makers whose full name is american motor company?", "score": 47.940547943115234, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5645957546497642, "beam_bleu_score": 0.5132253051626892}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "inferred_question": "What are the names of models offered by car makers whose name is american motor company with minimum name?", "score": 43.059471130371094, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43687812124867553, "beam_bleu_score": 0.4710091217587256}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'america'       ", "inferred_question": "How many car makers whose full name is america that offer models are there?", "score": 42.93761444091797, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46493689907328206, "beam_bleu_score": 0.4433180546966751}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T1.Maker HAVING count( T2.FullName) = 'American Motor Company'     ", "inferred_question": "", "score": 40.604671478271484, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company'       ", "inferred_question": "What are the names of models offered by car makers whose name is american motor company?", "score": 40.323936462402344, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5166305775943997, "beam_bleu_score": 0.570434647201574}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'america'       ", "inferred_question": "How many car makers whose name is america that offer models are there?", "score": 32.07465744018555, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45571502859714486, "beam_bleu_score": 0.44060641721636595}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT count( *) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T2.Make = 'American Motor Company'       ", "inferred_question": "How many models that contain cars whose name is american motor company are there?", "score": 31.087448120117188, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6384993022895405, "beam_bleu_score": 0.47271867255847827}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 153, "beams": [{"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "inferred_question": "", "score": 54.6866455078125, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING min( T2.Weight) < 4000       ", "inferred_question": "", "score": 45.87158966064453, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING sum( T2.Weight) < 4000       ", "inferred_question": "", "score": 35.52653503417969, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( T2.Weight) < 4000       ", "inferred_question": "", "score": 31.552978515625, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Year < 4000         ", "inferred_question": "", "score": 30.856897354125977, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING count( T1.Weight) between 3000 AND 4000   INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "inferred_question": "", "score": 30.75670623779297, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING max( T2.Weight) < 4000       ", "inferred_question": "", "score": 30.738162994384766, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING min( T1.Weight) between 3000 AND 4000   INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "inferred_question": "", "score": 30.42124366760254, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING avg( T2.Weight) < 4000       ", "inferred_question": "", "score": 30.411588668823242, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT min( T1.Year) FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "inferred_question": "", "score": 26.426698684692383, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) < 4000       ", "inferred_question": "", "score": 25.06316375732422, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) < 4000       ", "inferred_question": "", "score": 24.4455509185791, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING sum( T1.Weight) between 3000 AND 4000   INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight < 4000         ", "inferred_question": "", "score": 24.14618682861328, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) < 4000       ", "inferred_question": "", "score": 23.34161949157715, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight between 3000 AND 4000     INTERSECT SELECT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING min( T2.Year) < 4000       ", "inferred_question": "", "score": 16.60268783569336, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 154, "beams": [{"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "inferred_question": "", "score": 79.1213150024414, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( T2.Weight) > 3000       ", "inferred_question": "", "score": 61.56753921508789, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING max( T2.Weight) > 3000       ", "inferred_question": "", "score": 61.52800369262695, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING sum( T2.Weight) > 3000       ", "inferred_question": "", "score": 58.70164489746094, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING min( T2.Weight) > 3000       ", "inferred_question": "", "score": 58.0203742980957, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING avg( T2.Weight) > 3000       ", "inferred_question": "", "score": 57.884544372558594, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING min( T1.Weight) < 4000   INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "inferred_question": "", "score": 51.09130096435547, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1  GROUP BY T1.Year HAVING count( T1.Weight) < 4000   INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "inferred_question": "", "score": 47.87354278564453, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Year) FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "inferred_question": "", "score": 45.769256591796875, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "inferred_question": "", "score": 43.72455596923828, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT min(DISTINCT T2.Year) FROM cars_data AS T2 WHERE T2.Weight > 3000         ", "inferred_question": "", "score": 43.63410949707031, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2 WHERE T2.Year > 3000         ", "inferred_question": "", "score": 41.48822021484375, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "inferred_question": "", "score": 39.38671875, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "inferred_question": "", "score": 35.96462631225586, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000     INTERSECT SELECT DISTINCT T2.Year FROM cars_data AS T2  GROUP BY T2.Year HAVING count( *) > 3000       ", "inferred_question": "", "score": 31.8137264251709, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 155, "beams": [{"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration?", "score": 0.0, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18752832912841, "beam_bleu_score": 0.5542370615058021}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with maximum horsepower?", "score": -33.093196868896484, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3212977441032624, "beam_bleu_score": 0.4155706007899976}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What is the average horsepower of all data sheets with maximum acceleration?", "score": -40.70050048828125, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21121088114140185, "beam_bleu_score": 0.5494460832963435}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -45.292484283447266, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -45.67070007324219, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What is the total horsepower of all data sheets with maximum acceleration?", "score": -46.63490295410156, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1876353916398077, "beam_bleu_score": 0.5455790871862894}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with minimum horsepower?", "score": -46.68291473388672, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15792017039483963, "beam_bleu_score": 0.4155706007899976}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY max( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -49.00946807861328, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY count( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -49.578060150146484, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY min( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -54.34463882446289, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "How many horsepowers of data sheets with maximum acceleration are there?", "score": -54.86540985107422, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20982264813658047, "beam_bleu_score": 0.4454326754501124}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum horsepower?", "score": -72.49080657958984, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1352435282740514, "beam_bleu_score": 0.46458896930585597}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with maximum horsepower?", "score": -78.43328094482422, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3212977441032624, "beam_bleu_score": 0.4155706007899976}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -78.69034576416016, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with maximum horsepower?", "score": -78.72212219238281, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3212977441032624, "beam_bleu_score": 0.4155706007899976}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 156, "beams": [{"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration?", "score": 0.0, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17951140171078983, "beam_bleu_score": 0.5612099675566639}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with maximum horsepower?", "score": -32.27008819580078, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3203594104950893, "beam_bleu_score": 0.42244186434579495}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What is the average horsepower of all data sheets with maximum acceleration?", "score": -40.41920852661133, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21069551561228816, "beam_bleu_score": 0.5470623130628228}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -44.094482421875, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT sum( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What is the total horsepower of all data sheets with maximum acceleration?", "score": -45.166839599609375, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17700021131455979, "beam_bleu_score": 0.5488757875650406}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT min( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with minimum horsepower?", "score": -45.42710494995117, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1645305909043835, "beam_bleu_score": 0.42244186434579495}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -45.43920135498047, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY max( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -47.66240310668945, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY count( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -49.356266021728516, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT count( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    ", "inferred_question": "How many horsepowers of data sheets with maximum acceleration are there?", "score": -53.61985778808594, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2104153196422225, "beam_bleu_score": 0.44849424856928793}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1  GROUP BY T1.Horsepower  ORDER BY min( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "", "score": -53.691795349121094, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum horsepower?", "score": -70.68677520751953, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14483402181977478, "beam_bleu_score": 0.46806927969377}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY sum( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with maximum horsepower?", "score": -76.33251953125, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3203594104950893, "beam_bleu_score": 0.42244186434579495}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY avg( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with maximum horsepower?", "score": -77.76017761230469, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3203594104950893, "beam_bleu_score": 0.42244186434579495}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY max( T1.Accelerate) DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum acceleration with maximum horsepower?", "score": -79.88053894042969, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3203594104950893, "beam_bleu_score": 0.42244186434579495}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 157, "beams": [{"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "inferred_question": "What are the numbers of cylinder of data sheets for cars whose model is volvo with minimum acceleration?", "score": 32.11576843261719, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6002832065005931, "beam_bleu_score": 0.43757963377680087}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 29.738115310668945, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 28.30641746520996, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "inferred_question": "What are the numbers of cylinder of data sheets for cars whose model is volvo with minimum acceleration?", "score": 25.039403915405273, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6002832065005931, "beam_bleu_score": 0.43757963377680087}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 22.94346046447754, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 20.0256404876709, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 18.562955856323242, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 17.140377044677734, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "inferred_question": "What are the numbers of cylinder of data sheets for cars in models whose name is volvo with minimum acceleration?", "score": 16.479368209838867, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6078782132935904, "beam_bleu_score": 0.3939129085582299}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT count( *) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'   ORDER BY T2.Accelerate ASC LIMIT 1    ", "inferred_question": "How many cars whose model is volvo with data sheets with minimum acceleration are there?", "score": 16.196060180664062, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3115024019003634, "beam_bleu_score": 0.4782893933500882}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' GROUP BY T1.Id  ORDER BY count( T1.Accelerate) ASC LIMIT 1    ", "inferred_question": "", "score": 16.170751571655273, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT count( *) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'   ORDER BY T2.Accelerate ASC LIMIT 1    ", "inferred_question": "How many cars whose model is volvo with data sheets with minimum acceleration are there?", "score": 15.208990097045898, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3115024019003634, "beam_bleu_score": 0.4782893933500882}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo' GROUP BY T1.Id  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 13.253774642944336, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT count( *) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'Volvo'   ORDER BY T2.Accelerate ASC LIMIT 1    ", "inferred_question": "How many cars whose model is volvo with data sheets with minimum acceleration are there?", "score": 10.007967948913574, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3115024019003634, "beam_bleu_score": 0.4782893933500882}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T2 ON T13.Model = T2.Model WHERE T2.Model = 'Volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    ", "inferred_question": "What are the numbers of cylinder of data sheets for cars in models whose name is volvo with minimum acceleration?", "score": 9.020679473876953, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6078782132935904, "beam_bleu_score": 0.3939129085582299}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 163, "beams": [{"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 76.32332611083984, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16685870904337063, "beam_bleu_score": 0.27032067046673747}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 70.32524871826172, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16685870904337063, "beam_bleu_score": 0.27032067046673747}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 64.84446716308594, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16685870904337063, "beam_bleu_score": 0.27032067046673747}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 45.7340087890625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16685870904337063, "beam_bleu_score": 0.27032067046673747}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 6     ", "inferred_question": "", "score": 40.4046630859375, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "", "score": 38.67925262451172, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of more than 6  ?", "score": 35.529754638671875, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0191916349512552, "beam_bleu_score": 0.16700415932916415}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "Show me everything about data sheets with a number of cylinder of more than 6  .", "score": 35.02271270751953, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04935398825011905, "beam_bleu_score": 0.19246073603647249}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 6     ", "inferred_question": "", "score": 34.54217529296875, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 6     ", "inferred_question": "", "score": 34.525054931640625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "", "score": 34.488983154296875, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "What is the average number of cylinder of all data sheets with a number of cylinder of more than 6  ?", "score": 33.954994201660156, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.009597416599636976, "beam_bleu_score": 0.14284642629408356}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "", "score": 33.513580322265625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 6     ", "inferred_question": "", "score": 31.714019775390625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "Show me everything about data sheets with a number of cylinder of more than 6  .", "score": 30.506263732910156, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04935398825011905, "beam_bleu_score": 0.19246073603647249}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 164, "beams": [{"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 69.71038055419922, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3412696714937036, "beam_bleu_score": 0.3842713563666531}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 52.69850158691406, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3412696714937036, "beam_bleu_score": 0.3842713563666531}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 50.04883575439453, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3412696714937036, "beam_bleu_score": 0.3842713563666531}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT sum( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "What is the total number of cylinder of all data sheets with a number of cylinder of more than 6  ?", "score": 38.26856994628906, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1566426919464763, "beam_bleu_score": 0.35367598744074014}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT avg( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "What is the average number of cylinder of all data sheets with a number of cylinder of more than 6  ?", "score": 35.58369445800781, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16670864152203724, "beam_bleu_score": 0.3596593314892561}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of more than 6  ?", "score": 34.83427429199219, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29541156883724207, "beam_bleu_score": 0.3670052129629971}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT min( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of more than 6   with minimum number of cylinder?", "score": 32.726959228515625, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.019243355028009224, "beam_bleu_score": 0.2703357541544329}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING sum( T1.Cylinders) > 6     ", "inferred_question": "", "score": 30.05728530883789, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT sum( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "", "score": 29.17624282836914, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING max( T1.Cylinders) > 6     ", "inferred_question": "", "score": 28.76551055908203, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT max( T1.Cylinders) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of more than 6   with maximum number of cylinder?", "score": 24.057662963867188, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0633826369967656, "beam_bleu_score": 0.2703357541544329}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING count( T1.Cylinders) > 6     ", "inferred_question": "", "score": 24.040176391601562, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1   HAVING avg( T1.Cylinders) > 6     ", "inferred_question": "", "score": 22.535972595214844, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT min( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "", "score": 22.19183349609375, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       ", "inferred_question": "How many data sheets with a number of cylinder of more than 6   are there?", "score": 20.648460388183594, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3412696714937036, "beam_bleu_score": 0.3842713563666531}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 165, "beams": [{"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with maximum horsepower?", "score": -0.0022681276313960552, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38676295715324494, "beam_bleu_score": 0.4187516772359367}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with maximum horsepower?", "score": -6.090545177459717, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43308025168995645, "beam_bleu_score": 0.4950432789123921}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Cylinders DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum number of cylinder?", "score": -13.584932327270508, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25471068946152686, "beam_bleu_score": 0.47078988767419594}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum horsepower?", "score": -15.517202377319336, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12400995146662852, "beam_bleu_score": 0.3950766291595002}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.MPG DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum mileage?", "score": -24.797204971313477, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08542139713811248, "beam_bleu_score": 0.36426841800376364}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Cylinders DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum number of cylinder with maximum horsepower?", "score": -39.344757080078125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3170707187406182, "beam_bleu_score": 0.3766205496837793}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -39.489158630371094, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY count( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -39.817176818847656, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with maximum horsepower with maximum horsepower?", "score": -40.30438232421875, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18885803571703919, "beam_bleu_score": 0.3300782878848091}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id    ORDER BY T2.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the ids of models that contain cars with data sheets with maximum horsepower?", "score": -42.60823059082031, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35653997768945056, "beam_bleu_score": 0.42615040431987805}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -43.69823455810547, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Cylinders DESC LIMIT 1    ", "inferred_question": "What is the average horsepower of all data sheets with maximum number of cylinder?", "score": -43.836280822753906, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2571067909269139, "beam_bleu_score": 0.41891459271057135}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the numbers of cylinder of data sheets with maximum horsepower?", "score": -44.0887565612793, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22313664636889452, "beam_bleu_score": 0.47656753154255477}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1    ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What is the average horsepower of all data sheets with maximum horsepower?", "score": -44.7833251953125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1596629310770169, "beam_bleu_score": 0.3888014411024906}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id  GROUP BY T2.Id  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -45.1439208984375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 166, "beams": [{"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with a number of cylinder of 4   with maximum horsepower?", "score": 28.309412002563477, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10023930655708213, "beam_bleu_score": 0.3398547386528492}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the models of cars with data sheets with a number of cylinder of 4   with maximum horsepower?", "score": 16.3282470703125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37060905632737784, "beam_bleu_score": 0.40143644157112357}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with a number of cylinder of 4   with maximum horsepower?", "score": 8.552881240844727, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3083512360515175, "beam_bleu_score": 0.3518806809478477}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Horsepower FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.MPG DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with a number of cylinder of 4   with maximum mileage?", "score": 5.948373794555664, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26273238430561763, "beam_bleu_score": 0.3506757323168792}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Cylinders FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the numbers of cylinder of data sheets with a number of cylinder of 4   with maximum horsepower?", "score": -5.697471618652344, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3200491388926563, "beam_bleu_score": 0.3273080601425376}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY sum( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -6.6986846923828125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Cylinders) = 4 ORDER BY T2.Horsepower DESC LIMIT 1    ", "inferred_question": "", "score": -9.559137344360352, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY avg( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -10.552478790283203, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with a number of cylinder of 4   with maximum horsepower with maximum horsepower?", "score": -11.902389526367188, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21541987384298278, "beam_bleu_score": 0.28278742500217313}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1    ", "inferred_question": "What are the names of models that contain cars with data sheets with a number of cylinder of 4   with maximum horsepower with maximum name?", "score": -13.861289978027344, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.003935751423540523, "beam_bleu_score": 0.28872671411897144}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.MPG DESC LIMIT 1    ", "inferred_question": "What are the horsepowers of data sheets with a number of cylinder of 4   with maximum mileage with maximum horsepower?", "score": -13.866498947143555, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19339429741030223, "beam_bleu_score": 0.2912517399709912}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY max( T2.Horsepower) DESC LIMIT 1    ", "inferred_question": "", "score": -14.353958129882812, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.Horsepower DESC LIMIT 1    ", "inferred_question": "What is the average horsepower of all data sheets with a number of cylinder of 4   with maximum horsepower?", "score": -14.610921859741211, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3294473026613801, "beam_bleu_score": 0.3495438735300866}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4   ORDER BY T1.MPG DESC LIMIT 1    ", "inferred_question": "What is the average horsepower of all data sheets with a number of cylinder of 4   with maximum mileage?", "score": -16.41693687438965, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3085776550131323, "beam_bleu_score": 0.3466159595028767}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -21.097976684570312, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 171, "beams": [{"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 156.85939025878906, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.FullName = 'Ford Motor Company'       ", "inferred_question": "", "score": 137.68447875976562, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM car_names AS T3 JOIN model_list AS T15 ON T3.Model = T15.Model JOIN car_makers AS T4 ON T15.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 132.72445678710938, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "inferred_question": "", "score": 131.9560546875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 127.3623046875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT max( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 123.1126480102539, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Weight) < 3500     EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 123.03143310546875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT min( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 122.523681640625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT avg( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 122.50209045410156, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT count( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 121.32034301757812, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT sum( T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 118.03205871582031, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING count( T2.Weight) < 3500     EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 117.22477722167969, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT count( *) FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 116.96592712402344, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id  GROUP BY T3.Maker HAVING count( T4.Maker) = 'Ford Motor Company'     ", "inferred_question": "", "score": 113.544921875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "inferred_question": "", "score": 102.47647094726562, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 172, "beams": [{"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 159.19271850585938, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.FullName = 'Ford Motor Company'       ", "inferred_question": "", "score": 144.73031616210938, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "inferred_question": "", "score": 140.21881103515625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 123.60604095458984, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 123.16032409667969, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT count(DISTINCT T3.Model) FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 122.43994140625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 121.64867401123047, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.MPG < '3500'       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 121.41368103027344, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 121.17986297607422, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id  GROUP BY T1.Model HAVING min( T2.Weight) < 3500     EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 119.93120574951172, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT avg(DISTINCT T3.Model) FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'       ", "inferred_question": "", "score": 119.2935791015625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "inferred_question": "", "score": 104.57476806640625, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "inferred_question": "", "score": 104.10954284667969, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 WHERE T3.Model = 'Ford Motor Company'       ", "inferred_question": "", "score": 103.34938049316406, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < 3500       EXCEPT SELECT DISTINCT count(DISTINCT T3.Model) FROM model_list AS T3 WHERE T3.Maker = Ford Motor Company       ", "inferred_question": "", "score": 103.15399169921875, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 179, "beams": [{"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways?", "score": 93.77769470214844, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4390928623051952, "beam_bleu_score": 0.3284913141755299}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "inferred_question": "What are the countries of airlines whose name is jetblue?", "score": 67.95629119873047, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4449075773775363, "beam_bleu_score": 0.2874005995654127}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'Airline'       ", "inferred_question": "What are the countries of airlines whose name is airline?", "score": 57.26203536987305, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25233343291871424, "beam_bleu_score": 0.2700242702856563}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What is the average country of all airlines whose name is jetblue airways?", "score": 52.426910400390625, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39108319639844913, "beam_bleu_score": 0.32029341285074675}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT max( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways with maximum country?", "score": 52.27371597290039, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3235997750629177, "beam_bleu_score": 0.26553345843705056}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT count( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "How many countries of airlines whose name is jetblue airways are there?", "score": 51.08557891845703, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26267079888487377, "beam_bleu_score": 0.30185455947260154}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT min( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways with minimum country?", "score": 50.88542175292969, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29365412939872926, "beam_bleu_score": 0.26553345843705056}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING count( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 49.29560852050781, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT sum( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What is the total country of all airlines whose name is jetblue airways?", "score": 47.21790313720703, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41322417002981904, "beam_bleu_score": 0.3369137302069333}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING avg( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 46.38990020751953, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T2 JOIN airports AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 46.263587951660156, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING max( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 41.3254280090332, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING min( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 39.39903259277344, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING sum( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 39.00431823730469, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "inferred_question": "What is the average country of all airlines whose name is jetblue?", "score": 26.566932678222656, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3947212847642113, "beam_bleu_score": 0.2860624212274257}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 180, "beams": [{"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways?", "score": 98.268798828125, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47673877740415005, "beam_bleu_score": 0.37577323087528636}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways?", "score": 94.72162628173828, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47673877740415005, "beam_bleu_score": 0.37577323087528636}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "inferred_question": "What are the countries of airlines whose name is jetblue?", "score": 76.10112762451172, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5102718797284196, "beam_bleu_score": 0.3464003561354203}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT count( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "How many countries of airlines whose name is jetblue airways are there?", "score": 58.54503631591797, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3195438146384957, "beam_bleu_score": 0.3276127824958897}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What is the average country of all airlines whose name is jetblue airways?", "score": 58.326438903808594, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41408803814373074, "beam_bleu_score": 0.3568666799149712}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT max( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways with maximum country?", "score": 57.87019348144531, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3307607329620942, "beam_bleu_score": 0.3305239327300751}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT min( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways with minimum country?", "score": 56.82379150390625, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31569509083464564, "beam_bleu_score": 0.3305239327300751}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT count( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "How many countries of airlines whose name is jetblue airways are there?", "score": 54.962684631347656, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3195438146384957, "beam_bleu_score": 0.3276127824958897}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT avg( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What is the average country of all airlines whose name is jetblue airways?", "score": 54.76910400390625, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41408803814373074, "beam_bleu_score": 0.3568666799149712}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT max( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways with maximum country?", "score": 54.31102752685547, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3307607329620942, "beam_bleu_score": 0.3305239327300751}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING count( T1.Airline) = 'Jetblue Airways'     ", "inferred_question": "", "score": 53.89866256713867, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT min( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the countries of airlines whose name is jetblue airways with minimum country?", "score": 53.26634979248047, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31569509083464564, "beam_bleu_score": 0.3305239327300751}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT sum( T1.Country) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What is the total country of all airlines whose name is jetblue airways?", "score": 52.26268005371094, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44411105010903695, "beam_bleu_score": 0.3691083907946781}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING avg( T1.Airline) = 'Jetblue Airways'     ", "inferred_question": "", "score": 50.864112854003906, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT T1.Country FROM airlines AS T1  GROUP BY T1.Country HAVING count( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 50.61788558959961, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 181, "beams": [{"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways?", "score": 99.73490142822266, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6847548487373705, "beam_bleu_score": 0.5248492547254288}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue?", "score": 68.9496841430664, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7353440567904271, "beam_bleu_score": 0.5232636607248728}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What is the average abbreviation of all airlines whose name is jetblue airways?", "score": 61.37333679199219, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5903642854902582, "beam_bleu_score": 0.5037664592970997}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "How many abbreviations of airlines whose name is jetblue airways are there?", "score": 60.15192794799805, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34332586002625853, "beam_bleu_score": 0.4251574668218506}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways with maximum abbreviation?", "score": 57.24856185913086, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4071541395341318, "beam_bleu_score": 0.37887697352939737}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING count( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 56.657981872558594, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways with minimum abbreviation?", "score": 55.81077575683594, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3861905375110414, "beam_bleu_score": 0.37887697352939737}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'Airline'       ", "inferred_question": "What are the abbreviations of airlines whose name is airline?", "score": 53.39606475830078, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3986807687573739, "beam_bleu_score": 0.5081954188095845}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT sum( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What is the total abbreviation of all airlines whose name is jetblue airways?", "score": 53.0046272277832, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5603767819259582, "beam_bleu_score": 0.5088376587314827}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING avg( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 52.08832550048828, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING max( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 45.261817932128906, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING min( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 43.148170471191406, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING sum( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 41.1089973449707, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "inferred_question": "What is the average abbreviation of all airlines whose name is jetblue?", "score": 30.657012939453125, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5939012540639474, "beam_bleu_score": 0.5044013366259691}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "inferred_question": "How many abbreviations of airlines whose name is jetblue are there?", "score": 29.317516326904297, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3136100080436235, "beam_bleu_score": 0.422744189036311}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 182, "beams": [{"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways?", "score": 104.62708282470703, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.561770487766034, "beam_bleu_score": 0.38823561928466255}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways?", "score": 100.25248718261719, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.561770487766034, "beam_bleu_score": 0.38823561928466255}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue?", "score": 78.9893569946289, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6495040774800576, "beam_bleu_score": 0.3518172704163466}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What is the average abbreviation of all airlines whose name is jetblue airways?", "score": 65.95686340332031, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44353665622754057, "beam_bleu_score": 0.35061498193657925}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "How many abbreviations of airlines whose name is jetblue airways are there?", "score": 65.03192138671875, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3761314684195777, "beam_bleu_score": 0.3410677838277268}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING count( T1.Airline) = 'Jetblue Airways'     ", "inferred_question": "", "score": 62.95350646972656, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What is the average abbreviation of all airlines whose name is jetblue airways?", "score": 61.57554244995117, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44353665622754057, "beam_bleu_score": 0.35061498193657925}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways with maximum abbreviation?", "score": 61.377197265625, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27099534130758474, "beam_bleu_score": 0.2768424304687367}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "How many abbreviations of airlines whose name is jetblue airways are there?", "score": 60.65475082397461, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3761314684195777, "beam_bleu_score": 0.3410677838277268}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways with minimum abbreviation?", "score": 60.563514709472656, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2625807938530227, "beam_bleu_score": 0.2768424304687367}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING count( T1.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 58.71162414550781, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Abbreviation HAVING avg( T1.Airline) = 'Jetblue Airways'     ", "inferred_question": "", "score": 58.611907958984375, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT sum( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'Jetblue Airways'       ", "inferred_question": "What is the total abbreviation of all airlines whose name is jetblue airways?", "score": 57.41470718383789, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4243317941681508, "beam_bleu_score": 0.36685066705112823}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways with maximum abbreviation?", "score": 56.995269775390625, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27099534130758474, "beam_bleu_score": 0.2768424304687367}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       ", "inferred_question": "What are the abbreviations of airlines whose name is jetblue airways with minimum abbreviation?", "score": 56.17902374267578, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2625807938530227, "beam_bleu_score": 0.2768424304687367}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 183, "beams": [{"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "What are the names and abbreviations of airlines whose country is usa?", "score": 84.62615966796875, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6311329106098058, "beam_bleu_score": 0.5123479516846369}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "What are the names and abbreviations of airlines whose country is united states?", "score": 70.40646362304688, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6019109316262903, "beam_bleu_score": 0.4523840557464885}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT max( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 45.485145568847656, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT avg( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 41.16987991333008, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT sum( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 38.223785400390625, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT min( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 37.949302673339844, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "inferred_question": "", "score": 37.61448287963867, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "inferred_question": "", "score": 37.00566482543945, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING count( T1.Country) = 'USA'     ", "inferred_question": "", "score": 36.79043960571289, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT count( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 36.687705993652344, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING avg( T1.Country) = 'USA'     ", "inferred_question": "", "score": 35.35941696166992, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "inferred_question": "", "score": 34.90988540649414, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING sum( T1.Country) = 'USA'     ", "inferred_question": "", "score": 33.42958450317383, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING max( T1.Country) = 'USA'     ", "inferred_question": "", "score": 33.281578063964844, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT T1.Airline, min( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "inferred_question": "", "score": 32.44511413574219, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 184, "beams": [{"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "What are the names and abbreviations of airlines whose country is usa?", "score": 89.02253723144531, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8189137587068551, "beam_bleu_score": 0.6851910432362833}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "What are the names and abbreviations of airlines whose country is united states?", "score": 71.22301483154297, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.80410854067773, "beam_bleu_score": 0.605223958904379}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT max( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 55.93461227416992, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT avg( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 52.07062530517578, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT sum( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 48.06358337402344, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING count( T1.Country) = 'USA'     ", "inferred_question": "", "score": 47.98383712768555, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT min( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 46.87472152709961, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT count( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 45.680564880371094, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, avg( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "inferred_question": "", "score": 45.06399917602539, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, max( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "inferred_question": "", "score": 41.595252990722656, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING avg( T1.Country) = 'USA'     ", "inferred_question": "", "score": 40.705509185791016, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, count( T1.Abbreviation) FROM airlines AS T1 WHERE T1.Country = 'USA' GROUP BY T1.Airline      ", "inferred_question": "", "score": 39.05769348144531, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING max( T1.Country) = 'USA'     ", "inferred_question": "", "score": 38.918582916259766, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1  GROUP BY T1.Airline, T1.Abbreviation HAVING sum( T1.Country) = 'USA'     ", "inferred_question": "", "score": 38.632530212402344, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT max( T1.Airline), T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States' GROUP BY T1.Abbreviation      ", "inferred_question": "", "score": 38.318843841552734, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 185, "beams": [{"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony'       ", "inferred_question": "What are the codes and names of airports whose city is anthony?", "score": 74.79289245605469, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6715067654071013, "beam_bleu_score": 0.5610945709196105}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING count( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 37.89442443847656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT avg( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 36.809959411621094, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 35.376590728759766, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT max( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 34.608558654785156, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING avg( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 32.87595748901367, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 31.841346740722656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT min( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 31.503578186035156, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT count( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 29.12285614013672, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 26.14116668701172, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING min( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 26.113075256347656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT sum( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 25.93686294555664, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING max( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 24.616039276123047, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING sum( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 23.918354034423828, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT T1.AirportCode, sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 22.799213409423828, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 186, "beams": [{"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony'       ", "inferred_question": "What are the codes and names of airports whose city is anthony?", "score": 56.280677795410156, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7130165140644769, "beam_bleu_score": 0.48078736527217386}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT avg( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 23.731491088867188, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT max( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 21.013545989990234, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING count( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 18.163787841796875, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT min( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 18.014400482177734, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT count( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 16.009235382080078, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 15.036209106445312, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING avg( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 13.852088928222656, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT sum( T1.AirportCode), T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportName      ", "inferred_question": "", "score": 13.647674560546875, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 12.195068359375, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 7.249134063720703, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING min( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 6.952342987060547, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, T1.AirportName FROM airports AS T1  GROUP BY T1.AirportCode, T1.AirportName HAVING max( T1.City) = 'Anthony'     ", "inferred_question": "", "score": 6.3348388671875, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 5.9938812255859375, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT T1.AirportCode, min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Anthony' GROUP BY T1.AirportCode      ", "inferred_question": "", "score": 4.547691345214844, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 187, "beams": [{"orig_question": "How many airlines do we have?", "inferred_code": "SELECT count( *) FROM airlines AS T1        ", "inferred_question": "How many airlines are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8952004219664498, "beam_bleu_score": 0.6628644313758412}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( *) FROM airlines AS T1        ", "inferred_question": "", "score": -33.18901443481445, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines AS T1        ", "inferred_question": "Show me everything about airlines.", "score": -33.46416473388672, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1028500400139074, "beam_bleu_score": 0.3606839375485004}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1        ", "inferred_question": "What is the average name of all airlines?", "score": -35.202816009521484, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1878354955326632, "beam_bleu_score": 0.27720757489078257}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1        ", "inferred_question": "What are the names of airlines?", "score": -35.60224151611328, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21087337234576675, "beam_bleu_score": 0.35217166158159746}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1        ", "inferred_question": "What are the names of airlines with minimum name?", "score": -37.183773040771484, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12471047675683222, "beam_bleu_score": 0.24402691125681478}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "inferred_question": "What are the ids of airlines?", "score": -40.064414978027344, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13661144619019527, "beam_bleu_score": 0.361195251549266}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1        ", "inferred_question": "What is the total name of all airlines?", "score": -41.24122619628906, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42829235184159065, "beam_bleu_score": 0.2708659073228943}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( T1.uid) FROM airlines AS T1        ", "inferred_question": "What are the ids of airlines with minimum id?", "score": -42.47889709472656, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11186926820047138, "beam_bleu_score": 0.26438689301861157}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT avg( T1.Airline) FROM flights AS T1        ", "inferred_question": "What is the average airline of all flights?", "score": -42.61581802368164, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2925582896508958, "beam_bleu_score": 0.2336021027784308}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT avg( T1.uid) FROM airlines AS T1        ", "inferred_question": "What is the average id of all airlines?", "score": -43.555206298828125, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10516246531657725, "beam_bleu_score": 0.2887777381776002}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT min( T1.Airline) FROM flights AS T1        ", "inferred_question": "What are the airlines of flights with minimum airline?", "score": -44.21582794189453, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21075752151970084, "beam_bleu_score": 0.22077514942975993}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT sum( *) FROM airlines AS T1        ", "inferred_question": "", "score": -44.99041748046875, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1        ", "inferred_question": "What are the names of airlines with maximum name?", "score": -45.31797790527344, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13800868258138832, "beam_bleu_score": 0.2556917169209352}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT sum( T1.uid) FROM airlines AS T1        ", "inferred_question": "What is the total id of all airlines?", "score": -46.97447967529297, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33405179015627917, "beam_bleu_score": 0.2797064755981881}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 188, "beams": [{"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT count( *) FROM airlines AS T1        ", "inferred_question": "How many airlines are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9353486967783995, "beam_bleu_score": 0.3355714735652192}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1        ", "inferred_question": "What are the names of airlines with minimum name?", "score": -32.50432586669922, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1082097882861307, "beam_bleu_score": 0.4214625319261486}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1        ", "inferred_question": "What is the average name of all airlines?", "score": -34.63814163208008, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1653322543690634, "beam_bleu_score": 0.605450124249919}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( T1.uid) FROM airlines AS T1        ", "inferred_question": "What are the ids of airlines with minimum id?", "score": -34.748016357421875, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11490395383575347, "beam_bleu_score": 0.46024225568611565}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines AS T1        ", "inferred_question": "Show me everything about airlines.", "score": -35.154354095458984, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09172911071127976, "beam_bleu_score": 0.30444044041611407}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "inferred_question": "What are the ids of airlines?", "score": -37.2714729309082, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2770214002473588, "beam_bleu_score": 0.5482348681979585}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT avg( T1.uid) FROM airlines AS T1        ", "inferred_question": "What is the average id of all airlines?", "score": -38.535667419433594, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15201345441173986, "beam_bleu_score": 0.621667972266911}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1        ", "inferred_question": "What is the total name of all airlines?", "score": -38.57856750488281, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4061793064189406, "beam_bleu_score": 0.7755082920446432}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( T1.Airline) FROM flights AS T1        ", "inferred_question": "What are the airlines of flights with minimum airline?", "score": -38.6582145690918, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21795766109846815, "beam_bleu_score": 0.36131768120299224}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1        ", "inferred_question": "What are the names of airlines?", "score": -38.925445556640625, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23817517497666973, "beam_bleu_score": 0.5597428618578807}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT min( *) FROM airlines AS T1        ", "inferred_question": "", "score": -39.840797424316406, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( T1.uid) FROM airlines AS T1        ", "inferred_question": "What is the total id of all airlines?", "score": -39.948204040527344, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5392653115192314, "beam_bleu_score": 0.7786116146265512}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT avg( T1.Airline) FROM flights AS T1        ", "inferred_question": "What is the average airline of all flights?", "score": -41.46485137939453, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24413041693503146, "beam_bleu_score": 0.5310720226783084}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( T1.Airline) FROM flights AS T1        ", "inferred_question": "What is the total airline of all flights?", "score": -44.22859573364258, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7101645317104871, "beam_bleu_score": 0.6657291762257344}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT sum( *) FROM airlines AS T1        ", "inferred_question": "", "score": -44.70463180541992, "correct_code": "SELECT count(*) FROM AIRLINES", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 189, "beams": [{"orig_question": "How many airports do we have?", "inferred_code": "SELECT count( *) FROM airports AS T1        ", "inferred_question": "How many airports are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9082367437862363, "beam_bleu_score": 0.6628644313758412}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT min( *) FROM airports AS T1        ", "inferred_question": "", "score": -36.79304504394531, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airports AS T1        ", "inferred_question": "Show me everything about airports.", "score": -36.80230712890625, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08166584231492069, "beam_bleu_score": 0.3606839375485004}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( *) FROM airports AS T1        ", "inferred_question": "", "score": -42.0267448425293, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT sum( *) FROM airports AS T1        ", "inferred_question": "", "score": -47.8317756652832, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1        ", "inferred_question": "What is the average name of all airports?", "score": -48.32355499267578, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1249390474250146, "beam_bleu_score": 0.27720757489078257}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT max( *) FROM airports AS T1        ", "inferred_question": "", "score": -52.0905876159668, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1        ", "inferred_question": "What are the names of airports?", "score": -53.36961364746094, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12196412003934465, "beam_bleu_score": 0.34060923559173223}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( T1.AirportCode) FROM airports AS T1        ", "inferred_question": "What is the average code of all airports?", "score": -54.067970275878906, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09399101695258605, "beam_bleu_score": 0.27720757489078257}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "inferred_question": "What are the codes of airports?", "score": -55.05418395996094, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08630472139306644, "beam_bleu_score": 0.34060923559173223}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1        ", "inferred_question": "What are the names of airports with maximum name?", "score": -55.81083679199219, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11191807229257122, "beam_bleu_score": 0.2556917169209352}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT max( T1.AirportCode) FROM airports AS T1        ", "inferred_question": "What are the codes of airports with maximum code?", "score": -61.432586669921875, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07822953439967284, "beam_bleu_score": 0.25842677672542763}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1        ", "inferred_question": "What is the total name of all airports?", "score": -72.65045166015625, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3028220220265285, "beam_bleu_score": 0.2708659073228943}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT avg( T1.SourceAirport) FROM flights AS T1        ", "inferred_question": "What is the average source airport of all flights?", "score": -74.13398742675781, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1151172852179212, "beam_bleu_score": 0.20629192308876956}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT count( *) FROM airports AS T1        ", "inferred_question": "How many airports are there?", "score": -75.17391967773438, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9082367437862363, "beam_bleu_score": 0.6628644313758412}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 190, "beams": [{"orig_question": "Return the number of  airports.", "inferred_code": "SELECT count( *) FROM airports AS T1        ", "inferred_question": "How many airports are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8642850583564693, "beam_bleu_score": 0.3931301082680342}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airports AS T1        ", "inferred_question": "Show me everything about airports.", "score": -36.243614196777344, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14302089126895423, "beam_bleu_score": 0.35051062574852637}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT min( *) FROM airports AS T1        ", "inferred_question": "", "score": -37.963592529296875, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT avg( *) FROM airports AS T1        ", "inferred_question": "", "score": -43.14937210083008, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT sum( *) FROM airports AS T1        ", "inferred_question": "", "score": -50.44321060180664, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT max( *) FROM airports AS T1        ", "inferred_question": "", "score": -54.71419906616211, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1        ", "inferred_question": "What are the names of airports?", "score": -61.909542083740234, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2380910740462524, "beam_bleu_score": 0.5070594718370837}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1        ", "inferred_question": "What is the average name of all airports?", "score": -62.29958724975586, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1524838283389699, "beam_bleu_score": 0.3743591851408307}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "inferred_question": "What are the codes of airports?", "score": -62.66116714477539, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17600756803582585, "beam_bleu_score": 0.46609525252645084}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT avg( T1.AirportCode) FROM airports AS T1        ", "inferred_question": "What is the average code of all airports?", "score": -66.65693664550781, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12375814120702888, "beam_bleu_score": 0.35364587098782535}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1        ", "inferred_question": "What are the names of airports with maximum name?", "score": -72.20406341552734, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11995025748529975, "beam_bleu_score": 0.326037949894568}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT max( T1.AirportCode) FROM airports AS T1        ", "inferred_question": "What are the codes of airports with maximum code?", "score": -76.5312728881836, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.106905652085857, "beam_bleu_score": 0.30051454248757375}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "inferred_question": "What are the ids of airlines?", "score": -85.0943603515625, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1067855616986384, "beam_bleu_score": 0.2901037075453369}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1        ", "inferred_question": "What are the abbreviations of airlines?", "score": -85.44544982910156, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06393833625809098, "beam_bleu_score": 0.2415484256116827}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT T1.CountryAbbrev FROM airports AS T1        ", "inferred_question": "What are the country abbreviations of airports?", "score": -88.71155548095703, "correct_code": "SELECT count(*) FROM AIRPORTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15512467353105308, "beam_bleu_score": 0.31793583066874076}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 191, "beams": [{"orig_question": "How many flights do we have?", "inferred_code": "SELECT count( *) FROM flights AS T1        ", "inferred_question": "How many flights are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8831685035074047, "beam_bleu_score": 0.6495279402461448}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT min( *) FROM flights AS T1        ", "inferred_question": "", "score": -32.923553466796875, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM flights AS T1        ", "inferred_question": "Show me everything about flights.", "score": -34.17420196533203, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08755973250090465, "beam_bleu_score": 0.3370346671329419}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1        ", "inferred_question": "What are the flight numbers of flights?", "score": -37.3176155090332, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8177109034593573, "beam_bleu_score": 0.23768240335710886}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What is the average flight number of all flights?", "score": -37.678592681884766, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4212580300972929, "beam_bleu_score": 0.2064641920681728}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What is the total flight number of all flights?", "score": -41.32768630981445, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7829803387964049, "beam_bleu_score": 0.19815533246210484}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What are the flight numbers of flights with minimum flight number?", "score": -44.453582763671875, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32633864776396837, "beam_bleu_score": 0.15911783110981517}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT sum( *) FROM flights AS T1        ", "inferred_question": "", "score": -45.203739166259766, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What are the flight numbers of flights with maximum flight number?", "score": -46.39610290527344, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3834536583762753, "beam_bleu_score": 0.16784459625186196}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT avg( *) FROM flights AS T1        ", "inferred_question": "", "score": -52.45975112915039, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "inferred_question": "What are the ids of airlines?", "score": -57.29022979736328, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.062443162728541446, "beam_bleu_score": 0.06471824245088333}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "inferred_question": "What are the codes of airports?", "score": -60.31056594848633, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.059082500589383136, "beam_bleu_score": 0.05955540150470551}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1        ", "inferred_question": "What are the names of airlines?", "score": -62.09071731567383, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06429629399993486, "beam_bleu_score": 0.06032401726201459}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.Country FROM airlines AS T1        ", "inferred_question": "What are the countries of airlines?", "score": -62.94337844848633, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04738251338745936, "beam_bleu_score": 0.05311256555131657}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1        ", "inferred_question": "What are the abbreviations of airlines?", "score": -63.45117950439453, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.064375452736395, "beam_bleu_score": 0.04802409811718416}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 192, "beams": [{"orig_question": "Return the number of flights.", "inferred_code": "SELECT count( *) FROM flights AS T1        ", "inferred_question": "How many flights are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7914340516315744, "beam_bleu_score": 0.38226839427174897}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT min( *) FROM flights AS T1        ", "inferred_question": "", "score": -32.53755187988281, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1        ", "inferred_question": "What are the flight numbers of flights?", "score": -32.57212829589844, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7278213605801798, "beam_bleu_score": 0.4955056754877292}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What is the average flight number of all flights?", "score": -39.29093933105469, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5888998452474427, "beam_bleu_score": 0.4086086114140708}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What is the total flight number of all flights?", "score": -45.780269622802734, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6986675266127661, "beam_bleu_score": 0.41777986359085406}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What are the flight numbers of flights with minimum flight number?", "score": -46.62660598754883, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4034655631166697, "beam_bleu_score": 0.2935947094141027}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM flights AS T1        ", "inferred_question": "Show me everything about flights.", "score": -48.33195495605469, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16771759048030965, "beam_bleu_score": 0.32596921576402016}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1        ", "inferred_question": "What are the flight numbers of flights with maximum flight number?", "score": -49.373172760009766, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47049641533602826, "beam_bleu_score": 0.2935947094141027}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT sum( *) FROM flights AS T1        ", "inferred_question": "", "score": -61.986412048339844, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.AirportCode FROM airports AS T1        ", "inferred_question": "What are the codes of airports?", "score": -71.38365936279297, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05950648273208636, "beam_bleu_score": 0.23126168909998393}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.uid FROM airlines AS T1        ", "inferred_question": "What are the ids of airlines?", "score": -72.53257751464844, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07156891909018614, "beam_bleu_score": 0.25148403877797576}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT avg( *) FROM flights AS T1        ", "inferred_question": "", "score": -76.03361511230469, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1        ", "inferred_question": "What are the names of airports?", "score": -79.51998138427734, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07838573620886835, "beam_bleu_score": 0.27501804610524816}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.Abbreviation FROM airlines AS T1        ", "inferred_question": "What are the abbreviations of airlines?", "score": -79.81822204589844, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07602679629798936, "beam_bleu_score": 0.1912330160465971}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T1.Country FROM airports AS T1        ", "inferred_question": "What are the countries of airports?", "score": -80.11483001708984, "correct_code": "SELECT count(*) FROM FLIGHTS", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06384156945883102, "beam_bleu_score": 0.20904996083879818}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 193, "beams": [{"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the names of airlines whose abbreviation is ual?", "score": 36.49359130859375, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8804860455614658, "beam_bleu_score": 0.38773635457162803}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the names of airlines whose abbreviation is ual with maximum name?", "score": -2.0150489807128906, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4172469938905693, "beam_bleu_score": 0.29575797405089516}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What is the average name of all airlines whose abbreviation is ual?", "score": -2.6810569763183594, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4665721182721664, "beam_bleu_score": 0.3285211531677471}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "How many names of airlines whose abbreviation is ual are there?", "score": -2.8257598876953125, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49026277134848095, "beam_bleu_score": 0.33670530617363675}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the names of airlines whose abbreviation is ual with minimum name?", "score": -7.129158020019531, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4093442193097574, "beam_bleu_score": 0.29575797405089516}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What is the total name of all airlines whose abbreviation is ual?", "score": -7.873210906982422, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4974346720316619, "beam_bleu_score": 0.3388714363186176}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING count( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -9.146602630615234, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING avg( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -13.61483383178711, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the ids of airlines whose abbreviation is ual?", "score": -15.933425903320312, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7854628091025025, "beam_bleu_score": 0.4022373920210322}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING max( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -18.63095474243164, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "How many airlines whose abbreviation is ual are there?", "score": -18.87004852294922, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5244273612198493, "beam_bleu_score": 0.3944504940314544}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING sum( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -19.67849349975586, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING min( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -22.76650619506836, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'UAL'       ", "inferred_question": "", "score": -29.80249786376953, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT count( T1.uid) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "How many ids of airlines whose abbreviation is ual are there?", "score": -44.358463287353516, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4747309998203937, "beam_bleu_score": 0.34802706496575947}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 194, "beams": [{"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the names of airlines whose abbreviation is ual?", "score": 36.87043380737305, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6589861268320817, "beam_bleu_score": 0.4467288104021288}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the names of airlines whose abbreviation is ual with maximum name?", "score": -0.7186279296875, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47294669533656386, "beam_bleu_score": 0.37990799636785544}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What is the average name of all airlines whose abbreviation is ual?", "score": -0.9765586853027344, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4169900950343838, "beam_bleu_score": 0.3835087616698195}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "How many names of airlines whose abbreviation is ual are there?", "score": -1.9619636535644531, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38614637643931415, "beam_bleu_score": 0.3865487078420162}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the names of airlines whose abbreviation is ual with minimum name?", "score": -6.691993713378906, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4755520776401626, "beam_bleu_score": 0.37990799636785544}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What is the total name of all airlines whose abbreviation is ual?", "score": -7.202186584472656, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4177357675309117, "beam_bleu_score": 0.3881620911700831}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING count( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -8.940380096435547, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING avg( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -12.972370147705078, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING max( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -18.33823013305664, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING sum( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -20.421306610107422, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T1  GROUP BY T1.Airline HAVING min( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -23.574905395507812, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "How many airlines whose abbreviation is ual are there?", "score": -25.23037338256836, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3118841358282217, "beam_bleu_score": 0.45284207281507355}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.uid FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       ", "inferred_question": "What are the ids of airlines whose abbreviation is ual?", "score": -28.241680145263672, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.689007614806587, "beam_bleu_score": 0.467015042766318}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT T1.Airline FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'UAL'       ", "inferred_question": "", "score": -33.64039993286133, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1   HAVING count( T1.Abbreviation) = 'UAL'     ", "inferred_question": "", "score": -46.26061248779297, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 195, "beams": [{"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "How many airlines whose country is usa are there?", "score": 99.77239990234375, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7275646421315947, "beam_bleu_score": 0.431544453864628}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "How many airlines whose country is united states are there?", "score": 82.15774536132812, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7088056032759344, "beam_bleu_score": 0.3712430549895268}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "inferred_question": "", "score": 68.28347778320312, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 63.17446517944336, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 60.8128662109375, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT sum( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 58.477928161621094, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "Show me everything about airlines whose country is usa.", "score": 58.455326080322266, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24725509372340937, "beam_bleu_score": 0.24604888314434498}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "What is the average name of all airlines whose country is usa?", "score": 56.06688690185547, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3635723210727565, "beam_bleu_score": 0.19006601036214057}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "inferred_question": "", "score": 54.87798309326172, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'United States'       ", "inferred_question": "", "score": 51.129337310791016, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1   HAVING count( T1.Country) = 'USA'     ", "inferred_question": "", "score": 50.34694290161133, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT count( *) FROM airlines AS T1   HAVING avg( T1.Country) = 'USA'     ", "inferred_question": "", "score": 48.533302307128906, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT avg( T1.uid) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "What is the average id of all airlines whose country is usa?", "score": 47.32826232910156, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23542675640480348, "beam_bleu_score": 0.19464837957397466}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT max( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 47.316837310791016, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "", "score": 45.866756439208984, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 196, "beams": [{"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "How many airlines whose country is usa are there?", "score": 97.99656677246094, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42775969694055216, "beam_bleu_score": 0.2995827032320307}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "How many airlines whose country is united states are there?", "score": 86.32369232177734, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41088121120242693, "beam_bleu_score": 0.25123867810998435}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "inferred_question": "", "score": 66.75382995605469, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 62.221405029296875, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 61.046669006347656, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = 'USA'       ", "inferred_question": "", "score": 55.536041259765625, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "Show me everything about airlines whose country is usa.", "score": 55.10109329223633, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21263997057210438, "beam_bleu_score": 0.2465395114690379}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT sum( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 55.069801330566406, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'United States'       ", "inferred_question": "", "score": 54.560203552246094, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Country = 'USA'       ", "inferred_question": "", "score": 52.38557052612305, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "What is the average name of all airlines whose country is usa?", "score": 51.52235412597656, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27046253970526524, "beam_bleu_score": 0.3025638359565797}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT avg( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "", "score": 50.933570861816406, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT min( *) FROM airlines AS T1 WHERE T1.Country = 'United States'       ", "inferred_question": "", "score": 49.66770935058594, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT count( *) FROM airlines AS T1   HAVING count( T1.Country) = 'USA'     ", "inferred_question": "", "score": 48.02107620239258, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT max( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       ", "inferred_question": "", "score": 47.91024398803711, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 197, "beams": [{"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton'       ", "inferred_question": "What are the cities and countries of airports whose name is alton?", "score": 66.14551544189453, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5464341106083335, "beam_bleu_score": 0.441616730054454}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Afton'       ", "inferred_question": "What are the cities and countries of airports whose name is afton?", "score": 32.959537506103516, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42063737514328214, "beam_bleu_score": 0.42521775911866}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, avg( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 25.753665924072266, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT max( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 24.65658950805664, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT avg( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 23.07767105102539, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING count( T1.AirportName) = 'Alton'     ", "inferred_question": "", "score": 22.970653533935547, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING avg( T1.AirportName) = 'Alton'     ", "inferred_question": "", "score": 22.639240264892578, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, max( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 21.40499496459961, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, min( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 15.794525146484375, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT min( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 15.609718322753906, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT sum( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 15.578983306884766, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, count( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 14.913177490234375, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING max( T1.AirportName) = 'Alton'     ", "inferred_question": "", "score": 13.861587524414062, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, sum( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 13.477336883544922, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING min( T1.AirportName) = 'Alton'     ", "inferred_question": "", "score": 12.901573181152344, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 198, "beams": [{"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton'       ", "inferred_question": "What are the cities and countries of airports whose name is alton?", "score": 78.36056518554688, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.558480671532018, "beam_bleu_score": 0.4287732445081094}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Afton'       ", "inferred_question": "What are the cities and countries of airports whose name is afton?", "score": 44.027305603027344, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3949711199645999, "beam_bleu_score": 0.41267805724142753}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT avg( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 40.86234664916992, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT max( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 39.64098358154297, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, avg( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 38.12493896484375, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING avg( T1.AirportName) = 'Alton'     ", "inferred_question": "", "score": 36.038169860839844, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING count( T1.AirportName) = 'Alton'     ", "inferred_question": "", "score": 34.58564376831055, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, max( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 34.29084014892578, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT min( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 33.02278518676758, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT sum( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 32.778621673583984, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT count( T1.City), T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.Country      ", "inferred_question": "", "score": 29.56641387939453, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, min( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 28.23487091064453, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, count( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 27.610057830810547, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, T1.Country FROM airports AS T1  GROUP BY T1.City, T1.Country HAVING max( T1.AirportName) = 'Alton'     ", "inferred_question": "", "score": 26.731674194335938, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT T1.City, sum( T1.Country) FROM airports AS T1 WHERE T1.AirportName = 'Alton' GROUP BY T1.City      ", "inferred_question": "", "score": 26.56822967529297, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 199, "beams": [{"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "What are the names of airports whose name is ako?", "score": 98.27906799316406, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6850517311507265, "beam_bleu_score": 0.4369301440873911}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "What are the names of airports whose code is ako?", "score": 85.4960708618164, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6254202733516686, "beam_bleu_score": 0.4221974301516401}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT count( *) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "How many airports whose name is ako are there?", "score": 65.6366195678711, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22167781910375994, "beam_bleu_score": 0.3858398338633977}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "What is the average name of all airports whose name is ako?", "score": 64.09403228759766, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4695539641549432, "beam_bleu_score": 0.4099300614722391}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.AirportName) = 'AKO'     ", "inferred_question": "", "score": 59.73439025878906, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.Country = 'AKO'       ", "inferred_question": "What are the names of airports whose country is ako?", "score": 59.40625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45855677273064843, "beam_bleu_score": 0.40298832314129157}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "How many names of airports whose name is ako are there?", "score": 56.04638671875, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2691066983253966, "beam_bleu_score": 0.3234581414199278}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "What are the names of airports whose name is ako with maximum name?", "score": 55.1349983215332, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4392650034220954, "beam_bleu_score": 0.32151094997333796}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.CountryAbbrev = 'AKO'       ", "inferred_question": "What are the names of airports whose country abbreviation is ako?", "score": 54.835357666015625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48356976050549527, "beam_bleu_score": 0.32494090889635413}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.AirportName) = 'AKO'     ", "inferred_question": "", "score": 54.045204162597656, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "What are the names of airports whose name is ako with minimum name?", "score": 53.68341827392578, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44520033435505446, "beam_bleu_score": 0.32151094997333796}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "What is the average name of all airports whose code is ako?", "score": 51.05088806152344, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45624642912279423, "beam_bleu_score": 0.4099300614722391}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airlines AS T2 JOIN airports AS T1 WHERE T2.Abbreviation = 'AKO'       ", "inferred_question": "", "score": 49.647705078125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "What is the total name of all airports whose name is ako?", "score": 49.57661437988281, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4392033489151015, "beam_bleu_score": 0.4136065768464666}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( *) = AKO     ", "inferred_question": "", "score": 46.5756950378418, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 200, "beams": [{"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "What are the names of airports whose code is ako?", "score": 96.09578704833984, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48360051699163475, "beam_bleu_score": 0.48311945811375423}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "What is the average name of all airports whose code is ako?", "score": 59.55951690673828, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23339808574332266, "beam_bleu_score": 0.4332660310056918}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "How many names of airports whose code is ako are there?", "score": 59.43994140625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20718559623426125, "beam_bleu_score": 0.38428252838183774}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.AirportCode) = 'AKO'     ", "inferred_question": "", "score": 55.316741943359375, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportName = 'AKO'       ", "inferred_question": "What are the names of airports whose name is ako?", "score": 52.06871032714844, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37195269105506257, "beam_bleu_score": 0.4259822980180278}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "What are the names of airports whose code is ako with minimum name?", "score": 51.81663513183594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3522777965883289, "beam_bleu_score": 0.40614269217915683}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "What are the names of airports whose code is ako with maximum name?", "score": 51.731224060058594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35493108585302535, "beam_bleu_score": 0.40614269217915683}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.AirportCode) = 'AKO'     ", "inferred_question": "", "score": 50.336830139160156, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "What is the total name of all airports whose code is ako?", "score": 45.76707077026367, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20478618354108746, "beam_bleu_score": 0.4294847964297299}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING max( T1.AirportCode) = 'AKO'     ", "inferred_question": "", "score": 39.56028747558594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT count( *) FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       ", "inferred_question": "How many airports whose code is ako are there?", "score": 39.206085205078125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14127882025600147, "beam_bleu_score": 0.35005678220675956}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING min( T1.AirportCode) = 'AKO'     ", "inferred_question": "", "score": 38.315486907958984, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING sum( T1.AirportCode) = 'AKO'     ", "inferred_question": "", "score": 36.14360809326172, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.CountryAbbrev = 'AKO'       ", "inferred_question": "What are the names of airports whose country abbreviation is ako?", "score": 35.937095642089844, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3266008921975504, "beam_bleu_score": 0.32761974556682777}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( *) = AKO     ", "inferred_question": "", "score": 34.28376007080078, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 201, "beams": [{"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What are the names of airports whose city is aberdeen?", "score": 103.29195404052734, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7123709089163892, "beam_bleu_score": 0.5329989717946927}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'City'       ", "inferred_question": "What are the names of airports whose city is city?", "score": 68.34689331054688, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4129094175142223, "beam_bleu_score": 0.4591996037899946}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What is the average name of all airports whose city is aberdeen?", "score": 62.130592346191406, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49902562797845584, "beam_bleu_score": 0.3784528042471659}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What are the names of airports whose city is aberdeen with minimum name?", "score": 57.71182632446289, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3908221175758675, "beam_bleu_score": 0.39687401480107826}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 57.51995086669922, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "How many names of airports whose city is aberdeen are there?", "score": 57.13363265991211, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40012354240894565, "beam_bleu_score": 0.4135001812808495}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 56.42448043823242, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What are the names of airports whose city is aberdeen with maximum name?", "score": 55.35051345825195, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41068974081569354, "beam_bleu_score": 0.39687401480107826}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What is the total name of all airports whose city is aberdeen?", "score": 51.006832122802734, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4975105062788622, "beam_bleu_score": 0.38366152617740845}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING min( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 50.00877380371094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING max( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 48.831024169921875, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING sum( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 45.37785720825195, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'City'       ", "inferred_question": "What is the average name of all airports whose city is city?", "score": 26.910079956054688, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3140086419346063, "beam_bleu_score": 0.31640837857968235}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'City'       ", "inferred_question": "What are the names of airports whose city is city with minimum name?", "score": 22.502559661865234, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2767869030121545, "beam_bleu_score": 0.3424499161421288}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'City'       ", "inferred_question": "How many names of airports whose city is city are there?", "score": 21.995426177978516, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2633247422291155, "beam_bleu_score": 0.3531382606761861}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 202, "beams": [{"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What are the names of airports whose city is aberdeen?", "score": 108.8056640625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5391244086458967, "beam_bleu_score": 0.6977929415937147}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What is the average name of all airports whose city is aberdeen?", "score": 68.75291442871094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38030087759612885, "beam_bleu_score": 0.48061600372631536}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What are the names of airports whose city is aberdeen with minimum name?", "score": 64.43136596679688, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30144282446682735, "beam_bleu_score": 0.5183238636347407}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT max( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What are the names of airports whose city is aberdeen with maximum name?", "score": 63.51971435546875, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3078990271005576, "beam_bleu_score": 0.5149688403520717}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT count( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "How many names of airports whose city is aberdeen are there?", "score": 63.21041488647461, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39501126964972244, "beam_bleu_score": 0.5373579464758588}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING avg( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 60.883487701416016, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING count( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 58.02757263183594, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT sum( T1.AirportName) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "What is the total name of all airports whose city is aberdeen?", "score": 57.337059020996094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4380076252474686, "beam_bleu_score": 0.4874715252244576}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING max( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 54.21583557128906, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING min( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 53.08400344848633, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT T1.AirportName FROM airports AS T1  GROUP BY T1.AirportName HAVING sum( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 48.35533142089844, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT count( *) FROM airports AS T1 WHERE T1.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen are there?", "score": 42.97157287597656, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2521234735153912, "beam_bleu_score": 0.4761387310621006}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1   HAVING avg( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 21.405624389648438, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT avg( T1.AirportName) FROM airports AS T1   HAVING count( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 18.173049926757812, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT min( T1.AirportName) FROM airports AS T1   HAVING count( T1.City) = 'Aberdeen'     ", "inferred_question": "", "score": 13.715721130371094, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 203, "beams": [{"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "How many airports whose name is apg where flights arrive are there?", "score": 98.8140640258789, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28354553237312696, "beam_bleu_score": 0.2604695365640549}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "How many airports whose code is apg where flights arrive are there?", "score": 79.12850189208984, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2887046988700528, "beam_bleu_score": 0.2640141545688628}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "inferred_question": "How many airports whose country is apg where flights arrive are there?", "score": 67.93669128417969, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25177819515872324, "beam_bleu_score": 0.2468048422569423}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "inferred_question": "How many flights who    arrive at apg are there?", "score": 67.63906860351562, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33878878887591946, "beam_bleu_score": 0.38449131192523395}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "Show me everything about airports whose name is apg where flights arrive.", "score": 65.78199768066406, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.208878267072935, "beam_bleu_score": 0.17213038770467345}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "", "score": 65.61033630371094, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is apg?", "score": 63.27362060546875, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26294092537109104, "beam_bleu_score": 0.13637819309111876}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "inferred_question": "How many flights who    depart from apg are there?", "score": 61.21420669555664, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6408426992147447, "beam_bleu_score": 0.5549318786237539}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.CountryAbbrev = 'APG'       ", "inferred_question": "How many airports whose country abbreviation is apg where flights arrive are there?", "score": 60.58351135253906, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2855693011285926, "beam_bleu_score": 0.2074290842708043}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "", "score": 59.071659088134766, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg?", "score": 57.36408996582031, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4379306027057521, "beam_bleu_score": 0.1600310997372158}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'APG'       ", "inferred_question": "", "score": 56.90679168701172, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = APG       ", "inferred_question": "", "score": 52.25984573364258, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'APG'       ", "inferred_question": "", "score": 49.5192985534668, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE * = APG       ", "inferred_question": "", "score": 42.52915954589844, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 204, "beams": [{"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "How many airports whose name is apg where flights arrive are there?", "score": 103.08203887939453, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26456275990968847, "beam_bleu_score": 0.21656010453101437}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "How many airports whose code is apg where flights arrive are there?", "score": 82.91813659667969, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2678752409304831, "beam_bleu_score": 0.20936198894423438}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "inferred_question": "How many airports whose country is apg where flights arrive are there?", "score": 74.18716430664062, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2150423771406591, "beam_bleu_score": 0.2270875724857434}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "", "score": 69.74962615966797, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "inferred_question": "How many flights who    depart from apg are there?", "score": 69.23894500732422, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5542802665240745, "beam_bleu_score": 0.4480607551884892}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "inferred_question": "How many flights who    arrive at apg are there?", "score": 69.14323425292969, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.316245955489469, "beam_bleu_score": 0.2801111487459679}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is apg?", "score": 66.60098266601562, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3900464329834207, "beam_bleu_score": 0.3049875741714079}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg?", "score": 66.17076110839844, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46026132096838723, "beam_bleu_score": 0.34018736828168883}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the total flight number of all flights to airports whose name is apg?", "score": 62.641510009765625, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39544633196595613, "beam_bleu_score": 0.3130684646306632}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.CountryAbbrev = 'APG'       ", "inferred_question": "How many airports whose country abbreviation is apg where flights arrive are there?", "score": 61.84137725830078, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30015823598222613, "beam_bleu_score": 0.1960251795457435}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with minimum flight number?", "score": 60.76210021972656, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1834140348797897, "beam_bleu_score": 0.2531018251347732}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 55.02388000488281, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Abbreviation = 'APG'       ", "inferred_question": "", "score": 54.543521881103516, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'APG'       ", "inferred_question": "", "score": 51.909080505371094, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE * = APG       ", "inferred_question": "", "score": 40.92786407470703, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 205, "beams": [{"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "How many airports whose name is ato where flights arrive are there?", "score": 75.70899963378906, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4036190022055768, "beam_bleu_score": 0.2834823948065136}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'ATO'       ", "inferred_question": "How many airports whose code is ato where flights arrive are there?", "score": 68.87667083740234, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3992783220489422, "beam_bleu_score": 0.2834823948065136}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'ATO'       ", "inferred_question": "How many flights who    arrive at ato are there?", "score": 58.887176513671875, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5617527488763007, "beam_bleu_score": 0.40663369074268874}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is ato?", "score": 41.930572509765625, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3587182005115477, "beam_bleu_score": 0.1550337453114164}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is ato?", "score": 40.2007942199707, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5317796128558054, "beam_bleu_score": 0.16430234516504472}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'ATO'       ", "inferred_question": "How many airports whose country is ato where flights arrive are there?", "score": 39.84648513793945, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34147065731740367, "beam_bleu_score": 0.2676099765294967}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "", "score": 38.61985778808594, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = ATO       ", "inferred_question": "", "score": 38.25922775268555, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "Show me everything about airports whose name is ato where flights arrive.", "score": 37.8615608215332, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2464991099969075, "beam_bleu_score": 0.1859741661587925}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'ATO'       ", "inferred_question": "", "score": 36.587501525878906, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.CountryAbbrev = 'ATO'       ", "inferred_question": "How many airports whose country abbreviation is ato where flights arrive are there?", "score": 35.501163482666016, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36893859472870894, "beam_bleu_score": 0.2666221128114471}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "", "score": 34.70669174194336, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.Airline = ATO       ", "inferred_question": "", "score": 30.15526580810547, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE * = ATO       ", "inferred_question": "", "score": 20.38452911376953, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT count( *) FROM flights AS T1   HAVING count( *) = ATO     ", "inferred_question": "", "score": 9.832599639892578, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 206, "beams": [{"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "How many airports whose name is ato where flights arrive are there?", "score": 83.89895629882812, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23935578234558708, "beam_bleu_score": 0.20936198894423438}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'ATO'       ", "inferred_question": "How many airports whose code is ato where flights arrive are there?", "score": 61.05421829223633, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23216746121892495, "beam_bleu_score": 0.19946643486648025}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is ato with minimum flight number?", "score": 51.21205520629883, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08177575062413112, "beam_bleu_score": 0.23654280098266658}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is ato?", "score": 48.827064514160156, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23158296698211744, "beam_bleu_score": 0.29197923553833893}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is ato?", "score": 48.748958587646484, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37359273071513177, "beam_bleu_score": 0.32270184179071315}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'ATO'       ", "inferred_question": "", "score": 44.036712646484375, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "What is the total flight number of all flights to airports whose name is ato?", "score": 44.00387191772461, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23984992273243866, "beam_bleu_score": 0.29971545962934515}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = ATO       ", "inferred_question": "", "score": 43.35503005981445, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'ATO'     ", "inferred_question": "", "score": 38.474666595458984, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'ATO'     ", "inferred_question": "", "score": 37.96856689453125, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is ato with maximum flight number?", "score": 37.30492401123047, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08235594633340404, "beam_bleu_score": 0.23423479036528494}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'       ", "inferred_question": "", "score": 35.04642105102539, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'ATO'       ", "inferred_question": "How many airports whose city is ato where flights arrive are there?", "score": 33.20136260986328, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18922272198421142, "beam_bleu_score": 0.19946643486648025}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1 WHERE T1.Airline = ATO       ", "inferred_question": "", "score": 18.363876342773438, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT count( *) FROM flights AS T1   HAVING count( *) = ATO     ", "inferred_question": "", "score": 10.038997650146484, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 207, "beams": [{"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "How many airports whose city is city aberdeen where flights arrive are there?", "score": 110.33658599853516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24533585999255791, "beam_bleu_score": 0.32587764493800053}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen where flights arrive are there?", "score": 87.08592987060547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23815114856721975, "beam_bleu_score": 0.3489951569540777}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "", "score": 81.43124389648438, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is city aberdeen?", "score": 74.25570678710938, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36673881815027076, "beam_bleu_score": 0.22511119839207389}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "", "score": 72.1217269897461, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is city aberdeen?", "score": 69.86347198486328, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43900551850201597, "beam_bleu_score": 0.2570037626101365}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "Show me everything about airports whose city is city aberdeen where flights arrive.", "score": 69.24700164794922, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19039009854329036, "beam_bleu_score": 0.24764924319614354}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is city aberdeen?", "score": 68.48169708251953, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3844727112216543, "beam_bleu_score": 0.2303778477809887}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is city aberdeen with minimum flight number?", "score": 64.34944152832031, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10305458126378408, "beam_bleu_score": 0.1864694587825731}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'City Aberdeen'     ", "inferred_question": "", "score": 61.644222259521484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "How many airports whose city is city aberdeen where flights arrive are there?", "score": 61.61870193481445, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24533585999255791, "beam_bleu_score": 0.32587764493800053}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'City Aberdeen'     ", "inferred_question": "", "score": 60.69793701171875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "", "score": 58.100120544433594, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT avg( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "", "score": 56.58925247192383, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is city aberdeen with maximum flight number?", "score": 56.15658187866211, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11456446910265228, "beam_bleu_score": 0.19165965757690415}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 208, "beams": [{"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen where flights arrive are there?", "score": 105.15670776367188, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1646329796894579, "beam_bleu_score": 0.2721863578303704}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with minimum flight number?", "score": 75.4681396484375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1419482964559362, "beam_bleu_score": 0.2914084918054698}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "", "score": 70.46847534179688, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is aberdeen?", "score": 69.01866149902344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32304271282395347, "beam_bleu_score": 0.34393762583011167}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen where flights arrive are there?", "score": 68.92063903808594, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1646329796894579, "beam_bleu_score": 0.2721863578303704}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen?", "score": 67.03497314453125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3523581753495928, "beam_bleu_score": 0.3823115732790207}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is aberdeen?", "score": 63.801578521728516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34369887490027684, "beam_bleu_score": 0.34850077604992485}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "inferred_question": "How many airports whose name is aberdeen where flights arrive are there?", "score": 56.17382049560547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16258008221082643, "beam_bleu_score": 0.28175031824237307}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 54.70600509643555, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 53.39046859741211, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with maximum flight number?", "score": 52.77254867553711, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1433354834304582, "beam_bleu_score": 0.2876885002039639}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 50.24744415283203, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 47.81029510498047, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 47.50407791137695, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "", "score": 40.874229431152344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 209, "beams": [{"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen where flights arrive are there?", "score": 98.3028793334961, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3320371778748443, "beam_bleu_score": 0.4326158839866373}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "", "score": 67.63246154785156, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is aberdeen?", "score": 63.73005676269531, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4060077514838921, "beam_bleu_score": 0.23983467197834818}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "Show me everything about airports whose city is aberdeen where flights arrive.", "score": 59.65617370605469, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18660545482565016, "beam_bleu_score": 0.3650571415888702}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT sum( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "", "score": 58.93553924560547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen?", "score": 58.39414596557617, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4489025728506707, "beam_bleu_score": 0.27846927673203337}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT avg( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "", "score": 51.73827362060547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is aberdeen?", "score": 51.195491790771484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43902155282551036, "beam_bleu_score": 0.24416115712959924}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 48.98235321044922, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 46.79411315917969, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with minimum flight number?", "score": 45.768524169921875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12797052746893522, "beam_bleu_score": 0.21966428809109487}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with maximum flight number?", "score": 45.536197662353516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13906086869989753, "beam_bleu_score": 0.22121240562675187}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen where flights arrive are there?", "score": 43.97618865966797, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3320371778748443, "beam_bleu_score": 0.4326158839866373}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 43.543983459472656, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 42.49932098388672, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 210, "beams": [{"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen where flights arrive are there?", "score": 100.36146545410156, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19395308023767743, "beam_bleu_score": 0.33426691304784784}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with minimum flight number?", "score": 71.82283020019531, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17066991319848135, "beam_bleu_score": 0.28904693224081496}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is aberdeen?", "score": 66.87652587890625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3510835886737501, "beam_bleu_score": 0.3435388568978309}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen?", "score": 65.87662506103516, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3903314651479066, "beam_bleu_score": 0.3836892949660656}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is aberdeen?", "score": 58.968475341796875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37803287987571543, "beam_bleu_score": 0.3479083014286136}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT min( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "", "score": 58.49296569824219, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many airports whose city is aberdeen where flights arrive are there?", "score": 56.9103889465332, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19395308023767743, "beam_bleu_score": 0.33426691304784784}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 50.635555267333984, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "inferred_question": "How many airports whose name is aberdeen where flights arrive are there?", "score": 50.04296875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20686556473557915, "beam_bleu_score": 0.3439607913639407}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with maximum flight number?", "score": 49.737239837646484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1725035649100356, "beam_bleu_score": 0.28515522515941993}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 48.59965133666992, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 44.567405700683594, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 43.735267639160156, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 40.78985595703125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "Show me everything about airports whose city is aberdeen where flights arrive.", "score": 30.887496948242188, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17857841940299757, "beam_bleu_score": 0.321558483446112}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 213, "beams": [{"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 112.61542510986328, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 85.58715057373047, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 85.42288208007812, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 83.21530151367188, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 79.63536071777344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 76.56450653076172, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue'       ", "inferred_question": "", "score": 76.51104736328125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT min( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 74.8884506225586, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 73.06791687011719, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT sum( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 72.19314575195312, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING count( T2.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 64.9097671508789, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING avg( T2.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 63.811676025390625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING max( T2.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 58.412200927734375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT avg( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 58.15228271484375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING min( T2.Airline) = 'JetBlue Airways'     ", "inferred_question": "", "score": 56.76519775390625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 214, "beams": [{"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 100.26908874511719, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 96.32470703125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue'       ", "inferred_question": "", "score": 77.61180114746094, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 69.38036346435547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT min( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 68.97990417480469, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 68.34178924560547, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 65.25231170654297, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT min( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 65.01361083984375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 64.23365020751953, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 61.085594177246094, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT sum( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 57.08233642578125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       ", "inferred_question": "", "score": 57.03419494628906, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 56.8956298828125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT * FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'Jetblue Airways'       ", "inferred_question": "", "score": 55.74764633178711, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT count( *) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( *) HAVING count( T2.Airline) = 'Jetblue Airways'     ", "inferred_question": "", "score": 55.09186553955078, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 215, "beams": [{"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is united airlines are there?", "score": 89.32638549804688, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43028582404212745, "beam_bleu_score": 0.22966695401878479}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'ASY'       ", "inferred_question": "How many airlines whose name is asy and whose name is united airlines are there?", "score": 85.80302429199219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40775255004973976, "beam_bleu_score": 0.26306804077793167}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'United Airlines'       ", "inferred_question": "", "score": 79.69953155517578, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'ASY'       ", "inferred_question": "", "score": 76.5468978881836, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'United Airlines'       ", "inferred_question": "", "score": 68.47383880615234, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'ASY'       ", "inferred_question": "", "score": 68.37614440917969, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is airport are there?", "score": 68.25367736816406, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47950334972487807, "beam_bleu_score": 0.30671743497437776}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'ASY'       ", "inferred_question": "How many airlines whose name is asy and whose name is airport are there?", "score": 64.58180236816406, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41191664869381706, "beam_bleu_score": 0.30493540803305563}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 63.21412658691406, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 62.39011764526367, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 61.39933776855469, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 61.204261779785156, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 61.12476348876953, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'ASY'       ", "inferred_question": "", "score": 57.71305847167969, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'ASY'       ", "inferred_question": "", "score": 57.43635559082031, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 216, "beams": [{"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is united airlines are there?", "score": 79.14618682861328, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4121257950956688, "beam_bleu_score": 0.23441792800880268}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 72.72147369384766, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'ASY Airport' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is asy airport are there?", "score": 68.47606658935547, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4247613494794007, "beam_bleu_score": 0.28329365902867976}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'ASY Airport'       ", "inferred_question": "How many airlines whose name is asy airport and whose name is united airlines are there?", "score": 63.82032012939453, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44892168849109026, "beam_bleu_score": 0.289019656384951}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'United Airlines'       ", "inferred_question": "", "score": 63.61699676513672, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'ASY Airport' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 59.0478515625, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'ASY Airport'       ", "inferred_question": "", "score": 56.51815414428711, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'ASY Airport' and T1.Airline = 'ASY Airport'       ", "inferred_question": "How many airlines whose name is asy airport and whose name is asy airport are there?", "score": 54.00521469116211, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38256551539584926, "beam_bleu_score": 0.23818348646077103}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 52.62223815917969, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 52.2319450378418, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 51.367340087890625, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'ASY Airport' and T2.AirportName = 'United Airlines'       ", "inferred_question": "", "score": 50.8829345703125, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 50.52922058105469, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 49.88642883300781, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'United Airlines'       ", "inferred_question": "", "score": 47.480316162109375, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 217, "beams": [{"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'AHD'       ", "inferred_question": "How many airlines whose name is ahd and whose name is united airlines are there?", "score": 90.8319091796875, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4349839248477638, "beam_bleu_score": 0.2713246835158573}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is united airlines are there?", "score": 90.31327056884766, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3964039498579379, "beam_bleu_score": 0.2380320776009136}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'United Airlines'       ", "inferred_question": "", "score": 80.52226257324219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 78.41082763671875, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD' and T2.AirportName = 'United Airlines'       ", "inferred_question": "", "score": 74.29943084716797, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'AHD'       ", "inferred_question": "How many airlines whose name is ahd and whose name is airport are there?", "score": 74.01233673095703, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3860753365916273, "beam_bleu_score": 0.31427140954962013}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'Airport' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is airport are there?", "score": 73.92184448242188, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4386418125279752, "beam_bleu_score": 0.31566901663413344}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 72.26600646972656, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 70.62773132324219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'AHD'       ", "inferred_question": "", "score": 70.62287902832031, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' and T2.AirportCode = 'United Airlines'       ", "inferred_question": "", "score": 68.79457092285156, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Airline = 'United Airlines' and T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 64.90584564208984, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 64.67581176757812, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 63.328060150146484, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T2.Airline = 'AHD'       ", "inferred_question": "", "score": 62.93881607055664, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 218, "beams": [{"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'AHD Airport' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is ahd airport are there?", "score": 104.23329162597656, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4173115840155529, "beam_bleu_score": 0.26495485954179376}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD Airport' and T2.AirportName = 'United Airlines'       ", "inferred_question": "", "score": 97.82342529296875, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD Airport' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 94.20988464355469, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'AHD Airport' and T1.Airline = 'AHD Airport'       ", "inferred_question": "How many airlines whose name is ahd airport and whose name is ahd airport are there?", "score": 83.02269744873047, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4497554699585361, "beam_bleu_score": 0.2241983453304926}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD Airport' and T2.AirportCode = 'United Airlines'       ", "inferred_question": "", "score": 81.82164764404297, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "How many airlines whose name is united airlines and whose name is united airlines are there?", "score": 81.43087005615234, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.425783986731217, "beam_bleu_score": 0.21136717240885247}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 79.33782958984375, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 77.95472717285156, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 77.8121566772461, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'AHD Airport' and T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 73.94315338134766, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'AHD Airport' and T2.AirportName = 'AHD Airport'       ", "inferred_question": "", "score": 73.68633270263672, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD Airport' and T1.Airline = 'AHD Airport'       ", "inferred_question": "", "score": 73.68574523925781, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'United Airlines' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 70.5850601196289, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD Airport' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 70.31083679199219, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT count( *) FROM airlines AS T1 WHERE T1.Airline = 'AHD Airport' and T1.Airline = 'AHD'       ", "inferred_question": "How many airlines whose name is ahd and whose name is ahd airport are there?", "score": 69.84406280517578, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41717788500476227, "beam_bleu_score": 0.2444674654590578}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 219, "beams": [{"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 152.23721313476562, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'City' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 133.5395050048828, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT min( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 119.65550994873047, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 119.29307556152344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 118.97929382324219, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT sum( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 117.32365417480469, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 115.30970001220703, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT avg( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 114.06706237792969, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 112.36357116699219, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T2.City = 'United Airlines'       ", "inferred_question": "", "score": 112.35151672363281, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 109.79144287109375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 108.35159301757812, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 107.78485107421875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 107.29209899902344, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' GROUP BY count( *) HAVING count( T1.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 104.99223327636719, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 220, "beams": [{"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 156.70965576171875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT min( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 125.03350067138672, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 123.70789337158203, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 120.84614562988281, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 120.09436798095703, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT sum( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 118.57132720947266, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 116.86824035644531, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 114.49667358398438, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 113.39654541015625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode JOIN airlines AS T3 WHERE T2.City = 'Aberdeen' and T3.Airline = 'United Airlines'       ", "inferred_question": "", "score": 112.77059936523438, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T1.Airline = 'United Airlines' GROUP BY count( *) HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 112.54676055908203, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 110.96234130859375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 110.88221740722656, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       ", "inferred_question": "", "score": 109.02120971679688, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' GROUP BY count( *) HAVING count( T1.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 108.59228515625, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 233, "beams": [{"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 75.30360412597656, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 59.30323791503906, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 55.33338928222656, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'AHD'       ", "inferred_question": "What are the airlines of flights to airports whose name is ahd?", "score": 51.53490447998047, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.764461592071904, "beam_bleu_score": 0.5042101456075067}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 47.37739944458008, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 42.56108093261719, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 39.10601043701172, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 38.49404525756836, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 37.6494140625, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 36.31943130493164, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "What are the airlines of flights to airports whose code is ahd?", "score": 35.917327880859375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7662485323825962, "beam_bleu_score": 0.49312012446033365}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = 'AHD'       ", "inferred_question": "What are the names of airlines whose name is ahd?", "score": 35.21357727050781, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6301229000686213, "beam_bleu_score": 0.3044786819591867}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 32.023193359375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 31.742839813232422, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 29.16843032836914, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 234, "beams": [{"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 55.06476974487305, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 40.99213409423828, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 31.317718505859375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 WHERE T1.SourceAirport = 'AHD'       ", "inferred_question": "What are the airlines of flights who    depart from ahd?", "score": 20.959823608398438, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5480808452991748, "beam_bleu_score": 0.3887080105109755}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 18.02019500732422, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 17.501174926757812, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 16.937088012695312, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 16.852550506591797, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 15.473159790039062, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 11.908493041992188, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 8.674213409423828, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING count( T2.SourceAirport) = 'AHD'     ", "inferred_question": "", "score": 8.297470092773438, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT sum( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 7.274372100830078, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT count( T1.uid) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       ", "inferred_question": "", "score": 5.771266937255859, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING avg( T2.SourceAirport) = 'AHD'     ", "inferred_question": "", "score": 5.078189849853516, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 235, "beams": [{"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 72.65044403076172, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 59.861907958984375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 59.83007049560547, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'AHD'       ", "inferred_question": "What are the airlines of flights to airports whose name is ahd?", "score": 50.19316101074219, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.753717529080973, "beam_bleu_score": 0.5576415172831916}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 47.01399230957031, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = 'AHD'       ", "inferred_question": "What are the names of airlines whose name is ahd?", "score": 38.17637634277344, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5921306727436693, "beam_bleu_score": 0.3348539305001681}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "What are the airlines of flights to airports whose code is ahd?", "score": 37.90938949584961, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7608416110490912, "beam_bleu_score": 0.5517397182569321}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 35.57227325439453, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 34.08833312988281, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 33.78622055053711, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 33.101905822753906, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 32.879005432128906, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 WHERE T1.uid = AHD       ", "inferred_question": "", "score": 30.062580108642578, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 29.423450469970703, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.FlightNo = AHD       ", "inferred_question": "", "score": 24.68749237060547, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 236, "beams": [{"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 57.84288024902344, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 48.700958251953125, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 46.99942398071289, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportName = 'AHD'       ", "inferred_question": "", "score": 36.82213592529297, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 31.195316314697266, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 WHERE T1.DestAirport = 'AHD'       ", "inferred_question": "What are the airlines of flights who    arrive at ahd?", "score": 30.312088012695312, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5465885966734721, "beam_bleu_score": 0.3810835236969549}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.uid FROM airlines AS T1 JOIN airports AS T2 WHERE T2.AirportCode = 'AHD'       ", "inferred_question": "", "score": 20.73900604248047, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Airline = 'AHD'       ", "inferred_question": "What are the names of airlines whose name is ahd?", "score": 19.949005126953125, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4758219442688728, "beam_bleu_score": 0.2549634208930796}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT avg( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 19.58700180053711, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT max( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 18.676010131835938, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'AHD'       ", "inferred_question": "What are the airlines of flights to airports whose name is ahd?", "score": 17.823291778564453, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6898753350658404, "beam_bleu_score": 0.42941143665313175}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT count( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 17.433673858642578, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT min( T1.Airline) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 14.001426696777344, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT count( T1.uid) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 13.12618637084961, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT count( *) FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       ", "inferred_question": "", "score": 9.911880493164062, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 245, "beams": [{"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 96.0350570678711, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 61.72609329223633, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 57.284854888916016, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 55.98007583618164, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 53.72945785522461, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 53.297119140625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 46.163238525390625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING avg( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 42.14130401611328, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING max( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 40.11116409301758, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING sum( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 34.43098068237305, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING min( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 34.31962203979492, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY max( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 12.054634094238281, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY avg( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 7.62701416015625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY count( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 6.365043640136719, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY sum( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 3.93817138671875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 246, "beams": [{"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 86.48628234863281, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 48.58881759643555, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 45.52162551879883, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT count( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 41.161277770996094, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT min( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 40.57550048828125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT sum( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       ", "inferred_question": "", "score": 39.48851013183594, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING avg( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 36.71242904663086, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 35.352684020996094, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING max( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 34.687137603759766, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING sum( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 29.555145263671875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1  GROUP BY T1.FlightNo HAVING min( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": 27.07660675048828, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.uid = United Airlines       ", "inferred_question": "", "score": 9.195541381835938, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT max( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY max( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": -2.1647262573242188, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT avg( T1.FlightNo) FROM airlines AS T2 JOIN flights AS T1  GROUP BY avg( T1.FlightNo) HAVING count( T2.Airline) = 'United Airlines'     ", "inferred_question": "", "score": -5.122322082519531, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.Airline = United Airlines       ", "inferred_question": "", "score": -13.9952392578125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 247, "beams": [{"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg?", "score": 86.57062530517578, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6483609517123419, "beam_bleu_score": 0.5977788793956111}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose code is apg?", "score": 69.93832397460938, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6498208562512041, "beam_bleu_score": 0.5987698720584584}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "inferred_question": "What are the flight numbers of flights who    depart from apg?", "score": 54.79899597167969, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6951453112740024, "beam_bleu_score": 0.7151229936524415}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "inferred_question": "What are the flight numbers of flights who    arrive at apg?", "score": 54.75381851196289, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42231918719025074, "beam_bleu_score": 0.5862246288551454}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Airport'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is airport?", "score": 50.228694915771484, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.50401178908604, "beam_bleu_score": 0.570522654444516}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "How many flight numbers of flights to airports whose name is apg are there?", "score": 47.7794303894043, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.653537443152685, "beam_bleu_score": 0.49868232347061686}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is apg?", "score": 46.86559295654297, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6793413446176062, "beam_bleu_score": 0.440118751379117}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with maximum flight number?", "score": 46.482078552246094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.58293227494435, "beam_bleu_score": 0.441502198780326}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 44.87354278564453, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with minimum flight number?", "score": 43.15058135986328, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5698252876018466, "beam_bleu_score": 0.44404698541391424}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 38.65864181518555, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the total flight number of all flights to airports whose name is apg?", "score": 38.43721008300781, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6609923941918455, "beam_bleu_score": 0.44102858030297665}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'Airport'       ", "inferred_question": "What are the flight numbers of flights to airports whose code is airport?", "score": 32.987483978271484, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5406178134446995, "beam_bleu_score": 0.5714281461452351}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 31.645652770996094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "How many flight numbers of flights to airports whose code is apg are there?", "score": 30.945945739746094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6526721896868933, "beam_bleu_score": 0.5044185071946083}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 248, "beams": [{"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg?", "score": 91.59876251220703, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45496619096306945, "beam_bleu_score": 0.4862315832452212}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose code is apg?", "score": 72.32241821289062, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48210912914004, "beam_bleu_score": 0.48047634964343805}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is apg?", "score": 50.80115509033203, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4236512166327576, "beam_bleu_score": 0.3805168965334467}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose country is apg?", "score": 50.75390625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39223988185784986, "beam_bleu_score": 0.4628050244575447}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with maximum flight number?", "score": 49.539886474609375, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40425956354012826, "beam_bleu_score": 0.35946057173744295}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "inferred_question": "What are the flight numbers of flights who    arrive at apg?", "score": 49.15342330932617, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33305747610596437, "beam_bleu_score": 0.5771859217519406}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "How many flight numbers of flights to airports whose name is apg are there?", "score": 49.15299987792969, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4073911565947357, "beam_bleu_score": 0.4304774122836874}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       ", "inferred_question": "What are the flight numbers of flights who    depart from apg?", "score": 48.19340133666992, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6263416632957721, "beam_bleu_score": 0.5885015575198796}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with minimum flight number?", "score": 45.58418273925781, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3980455252885384, "beam_bleu_score": 0.3620750026791372}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 45.30118942260742, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 44.8763313293457, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the total flight number of all flights to airports whose name is apg?", "score": 40.469696044921875, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4590710602614666, "beam_bleu_score": 0.37756059231882844}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 38.532474517822266, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is apg?", "score": 38.22706604003906, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41250452954185735, "beam_bleu_score": 0.48047634964343805}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 35.551353454589844, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 249, "beams": [{"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg?", "score": 80.42694854736328, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7222166247553927, "beam_bleu_score": 0.6007032079094315}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose code is apg?", "score": 63.52994155883789, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7131020312963863, "beam_bleu_score": 0.5977366816595613}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Airport'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is airport?", "score": 46.38127517700195, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5400053515709412, "beam_bleu_score": 0.5725687269617629}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "How many flight numbers of flights to airports whose name is apg are there?", "score": 42.618927001953125, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7068787141988873, "beam_bleu_score": 0.5059068816635364}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is apg?", "score": 41.15235137939453, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7307116265462128, "beam_bleu_score": 0.44780762870315133}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with maximum flight number?", "score": 39.869789123535156, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6007587559953462, "beam_bleu_score": 0.43837956319885907}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 38.856712341308594, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with minimum flight number?", "score": 37.14877700805664, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5767532998670619, "beam_bleu_score": 0.440906351187568}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "inferred_question": "What are the flight numbers of flights who    arrive at apg?", "score": 36.147220611572266, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7280159622312871, "beam_bleu_score": 0.6918679571344232}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the total flight number of all flights to airports whose name is apg?", "score": 32.2880859375, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7183050153272292, "beam_bleu_score": 0.44665333032671356}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 31.59634017944336, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'Airport'       ", "inferred_question": "What are the flight numbers of flights to airports whose code is airport?", "score": 27.969581604003906, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5719685863057928, "beam_bleu_score": 0.569848608583957}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "How many flight numbers of flights to airports whose code is apg are there?", "score": 25.563385009765625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7087825370464377, "beam_bleu_score": 0.5059068816635364}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 25.366291046142578, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "What is the average flight number of all flights to airports whose code is apg?", "score": 23.88528060913086, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7266086450286801, "beam_bleu_score": 0.44568021638878924}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 250, "beams": [{"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg?", "score": 72.8860855102539, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5758177930959516, "beam_bleu_score": 0.4957485252612374}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose code is apg?", "score": 53.845115661621094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5892934101717344, "beam_bleu_score": 0.4957485252612374}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the average flight number of all flights to airports whose name is apg?", "score": 31.63207244873047, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4553589961377603, "beam_bleu_score": 0.3857256334930994}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "How many flight numbers of flights to airports whose name is apg are there?", "score": 30.62076187133789, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4484901734757222, "beam_bleu_score": 0.4383164837026312}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with maximum flight number?", "score": 29.543582916259766, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4437639936308774, "beam_bleu_score": 0.3609297143454334}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 28.06041717529297, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is apg with minimum flight number?", "score": 27.447486877441406, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4287726242110851, "beam_bleu_score": 0.3634806130776549}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is apg?", "score": 27.012893676757812, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5081633548221992, "beam_bleu_score": 0.49269762023270186}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 24.520431518554688, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       ", "inferred_question": "What are the flight numbers of flights who    arrive at apg?", "score": 20.740253448486328, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6174049727696351, "beam_bleu_score": 0.6001008583100281}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'APG'       ", "inferred_question": "What is the total flight number of all flights to airports whose name is apg?", "score": 20.60887908935547, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5081398034740695, "beam_bleu_score": 0.3859600183103908}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.Country = 'APG'       ", "inferred_question": "What are the flight numbers of flights to airports whose country is apg?", "score": 18.04611587524414, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4607424029248447, "beam_bleu_score": 0.47464741763874396}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 17.430320739746094, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 14.818561553955078, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.AirportName) = 'APG'     ", "inferred_question": "", "score": 11.237335205078125, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 251, "beams": [{"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen?", "score": 95.54925537109375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.530913424275736, "beam_bleu_score": 0.6039826097032811}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is aberdeen?", "score": 58.465606689453125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5645302411086982, "beam_bleu_score": 0.45658930682722}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with minimum flight number?", "score": 53.80459213256836, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4852516564584253, "beam_bleu_score": 0.4632964430169172}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with maximum flight number?", "score": 53.6099853515625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5339108015455512, "beam_bleu_score": 0.46086435669644354}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many flight numbers of flights to airports whose city is aberdeen are there?", "score": 52.55493927001953, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.555314354305094, "beam_bleu_score": 0.5205308639482338}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is city?", "score": 51.98731231689453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2428954853205494, "beam_bleu_score": 0.563142791351219}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 49.34785079956055, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 48.215858459472656, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is aberdeen?", "score": 46.78302764892578, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5792254611231282, "beam_bleu_score": 0.4557599054360307}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 41.482872009277344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 40.161712646484375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 39.58094787597656, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is city?", "score": 14.460163116455078, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31790781134941726, "beam_bleu_score": 0.4176332567282999}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 13.154212951660156, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 11.330093383789062, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 252, "beams": [{"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen?", "score": 97.65375518798828, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4209655692031826, "beam_bleu_score": 0.5193187885395825}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is aberdeen?", "score": 59.989585876464844, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34260497273454926, "beam_bleu_score": 0.41883180519911195}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with maximum flight number?", "score": 56.44867706298828, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3907866231330648, "beam_bleu_score": 0.3932030000162632}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with minimum flight number?", "score": 55.043800354003906, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36635579746559965, "beam_bleu_score": 0.3956996524152723}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many flight numbers of flights to airports whose city is aberdeen are there?", "score": 53.14470672607422, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38149742604463643, "beam_bleu_score": 0.4663185030194532}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 51.478355407714844, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 48.27510452270508, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is aberdeen?", "score": 48.2369384765625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38058065034098076, "beam_bleu_score": 0.4127425342275944}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is aberdeen?", "score": 46.31673049926758, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46769256263531833, "beam_bleu_score": 0.5247574232219421}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 45.301124572753906, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 43.31566619873047, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 41.27686309814453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'Aberdeen'     ", "inferred_question": "", "score": 16.368125915527344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 14.905258178710938, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 11.094940185546875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 253, "beams": [{"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen?", "score": 90.46619415283203, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5338104821878896, "beam_bleu_score": 0.6058085080379149}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is city?", "score": 57.41797637939453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31796361613701385, "beam_bleu_score": 0.5576480583213359}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is aberdeen?", "score": 54.574981689453125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5475502019181724, "beam_bleu_score": 0.4609216209532207}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with minimum flight number?", "score": 49.70039749145508, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48193470099101454, "beam_bleu_score": 0.4501501417402144}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many flight numbers of flights to airports whose city is aberdeen are there?", "score": 48.86272048950195, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5379687931368329, "beam_bleu_score": 0.5097220464341787}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with maximum flight number?", "score": 48.679100036621094, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5215682158836923, "beam_bleu_score": 0.44773638107671626}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 45.27791976928711, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 44.57619094848633, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is aberdeen?", "score": 42.833187103271484, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5712582479381532, "beam_bleu_score": 0.4580590882819503}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 36.44476318359375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 35.71775436401367, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 33.515830993652344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is city?", "score": 20.944469451904297, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34984156713342485, "beam_bleu_score": 0.42050375730659945}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is aberdeen?", "score": 17.706268310546875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5114615482775443, "beam_bleu_score": 0.5812993021242348}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'City'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is city with minimum flight number?", "score": 16.186084747314453, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2831727341884853, "beam_bleu_score": 0.4248629326906264}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 254, "beams": [{"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen?", "score": 93.10429382324219, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4787829304312694, "beam_bleu_score": 0.5369477440410497}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the average flight number of all flights to airports whose city is aberdeen?", "score": 56.28180694580078, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37773574013432865, "beam_bleu_score": 0.42503042179883044}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT max( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with maximum flight number?", "score": 51.71676254272461, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3852444917041863, "beam_bleu_score": 0.39978060440057295}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT min( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose city is aberdeen with minimum flight number?", "score": 50.94768524169922, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36812361796824433, "beam_bleu_score": 0.4041923798442764}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT count( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "How many flight numbers of flights to airports whose city is aberdeen are there?", "score": 49.1485595703125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4162588948419932, "beam_bleu_score": 0.48303432880242697}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING avg( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 46.717315673828125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 44.90732955932617, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose name is aberdeen?", "score": 43.96318435668945, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5037995517067104, "beam_bleu_score": 0.5369477440410497}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT sum( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       ", "inferred_question": "What is the total flight number of all flights to airports whose city is aberdeen?", "score": 43.50728988647461, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4348254703066996, "beam_bleu_score": 0.4240288977921143}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING max( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 40.013832092285156, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING min( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 37.058082580566406, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING sum( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 35.91954040527344, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'Aberdeen'       ", "inferred_question": "What are the flight numbers of flights to airports whose code is aberdeen?", "score": 15.19281005859375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5059170870537062, "beam_bleu_score": 0.534068563912593}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.AirportName) = 'Aberdeen'     ", "inferred_question": "", "score": 15.148818969726562, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT avg( T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport HAVING count( T2.City) = 'Aberdeen'     ", "inferred_question": "", "score": 8.56268310546875, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 259, "beams": [{"orig_question": "How many employees are there?", "inferred_code": "SELECT count( *) FROM employee AS T1        ", "inferred_question": "How many employees are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT min( *) FROM employee AS T1        ", "inferred_question": "", "score": -31.02474594116211, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee AS T1        ", "inferred_question": "Show me everything about employees.", "score": -31.087291717529297, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12181486921776374, "beam_bleu_score": 0.3994705565880698}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT avg( *) FROM employee AS T1        ", "inferred_question": "", "score": -33.46269607543945, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT sum( *) FROM employee AS T1        ", "inferred_question": "", "score": -34.17698669433594, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT avg( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What is the average id of all employees?", "score": -42.995086669921875, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14275933704993737, "beam_bleu_score": 0.3403744649463628}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT max( *) FROM employee AS T1        ", "inferred_question": "", "score": -43.64680099487305, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT min( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What are the ids of employees with minimum id?", "score": -43.68710708618164, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06594016690354199, "beam_bleu_score": 0.38689125369813415}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1        ", "inferred_question": "What is the average name of all employees?", "score": -45.197547912597656, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23815963929363548, "beam_bleu_score": 0.3303680639142199}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT min( T1.Name) FROM employee AS T1        ", "inferred_question": "What are the names of employees with minimum name?", "score": -47.026153564453125, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1085341500357937, "beam_bleu_score": 0.36334073898717717}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT sum( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What is the total id of all employees?", "score": -48.02101135253906, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35214159589316363, "beam_bleu_score": 0.34939124256882104}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT T1.Name FROM employee AS T1        ", "inferred_question": "What are the names of employees?", "score": -49.946372985839844, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1646004586268317, "beam_bleu_score": 0.5456417932910934}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1        ", "inferred_question": "What is the total name of all employees?", "score": -51.37738800048828, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44085775650143955, "beam_bleu_score": 0.34300303437665575}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT T1.Employee_ID FROM employee AS T1        ", "inferred_question": "What are the ids of employees?", "score": -52.276824951171875, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16920638704564772, "beam_bleu_score": 0.5559490071188216}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT max( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What are the ids of employees with maximum id?", "score": -52.6893196105957, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08614344444226063, "beam_bleu_score": 0.39448834349896583}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 260, "beams": [{"orig_question": "Count the number of employees", "inferred_code": "SELECT count( *) FROM employee AS T1        ", "inferred_question": "How many employees are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8573739113063443, "beam_bleu_score": 0.4506984287461695}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT min( *) FROM employee AS T1        ", "inferred_question": "", "score": -33.88320541381836, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee AS T1        ", "inferred_question": "Show me everything about employees.", "score": -34.01378631591797, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1304124502149958, "beam_bleu_score": 0.35339573017922915}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT avg( *) FROM employee AS T1        ", "inferred_question": "", "score": -37.43619155883789, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT sum( *) FROM employee AS T1        ", "inferred_question": "", "score": -40.55998611450195, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT count( *) FROM employee AS T1        ", "inferred_question": "How many employees are there?", "score": -43.73259353637695, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8573739113063443, "beam_bleu_score": 0.4506984287461695}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT avg( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What is the average id of all employees?", "score": -43.83112716674805, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11447868006777151, "beam_bleu_score": 0.3868844800657579}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT max( *) FROM employee AS T1        ", "inferred_question": "", "score": -46.961273193359375, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT T1.Employee_ID FROM employee AS T1        ", "inferred_question": "What are the ids of employees?", "score": -48.96287536621094, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2064724636763754, "beam_bleu_score": 0.5495207706557382}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT T1.Name FROM employee AS T1        ", "inferred_question": "What are the names of employees?", "score": -51.894264221191406, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20140122823390327, "beam_bleu_score": 0.5530329491770615}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT min( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What are the ids of employees with minimum id?", "score": -52.0238037109375, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09379623031791584, "beam_bleu_score": 0.3689566885418471}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT sum( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What is the total id of all employees?", "score": -52.62751007080078, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.335312255390392, "beam_bleu_score": 0.3974354487874025}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT max( T1.Employee_ID) FROM employee AS T1        ", "inferred_question": "What are the ids of employees with maximum id?", "score": -52.701419830322266, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12217673341499546, "beam_bleu_score": 0.36505183541007724}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1        ", "inferred_question": "What is the average name of all employees?", "score": -53.74608612060547, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1386182295475572, "beam_bleu_score": 0.38847487158096566}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1        ", "inferred_question": "What are the names of employees with maximum name?", "score": -61.73313522338867, "correct_code": "SELECT count(*) FROM employee", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1361471865288132, "beam_bleu_score": 0.3597955273813877}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 269, "beams": [{"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": 0.0, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1    ORDER BY T1.Number_products DESC LIMIT 1    ", "inferred_question": "What are the manager names and districts of shops with maximum number of products?", "score": -24.370582580566406, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8208337576466599, "beam_bleu_score": 0.6506388694721906}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -26.923019409179688, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -29.49072265625, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY sum( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -32.6273193359375, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY avg( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -33.132896423339844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT max( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -38.26402282714844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, max( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -42.69245910644531, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, avg( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -42.71002197265625, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY min( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -43.13303756713867, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT avg( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -43.9907341003418, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT min( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -46.27986145019531, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY max( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -47.6376953125, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT sum( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -48.22306823730469, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT count( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -48.24488067626953, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 270, "beams": [{"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": 0.0, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1    ORDER BY T1.Number_products DESC LIMIT 1    ", "inferred_question": "What are the manager names and districts of shops with maximum number of products?", "score": -16.91912841796875, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8728251885087598, "beam_bleu_score": 0.667563857675544}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY sum( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -18.588985443115234, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY avg( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -23.755151748657227, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -26.954620361328125, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -32.614646911621094, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY max( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -36.59021759033203, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT max( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -38.49216079711914, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, T1.District FROM shop AS T1  GROUP BY T1.Manager_name, T1.District  ORDER BY min( T1.Number_products) DESC LIMIT 1    ", "inferred_question": "", "score": -39.622398376464844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, avg( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -41.7469367980957, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT T1.Manager_name, max( T1.District) FROM shop AS T1  GROUP BY T1.Manager_name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -43.233238220214844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT avg( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -44.190189361572266, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT min( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -48.54124450683594, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT sum( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -49.561683654785156, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT count( T1.Manager_name), T1.District FROM shop AS T1  GROUP BY T1.District  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -50.515708923339844, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 271, "beams": [{"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and maximum number of products of shops?", "score": 0.0, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8247803495246612, "beam_bleu_score": 0.6098961734831503}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), sum( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and total number of products of shops?", "score": -28.719463348388672, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.711427667390027, "beam_bleu_score": 0.5531541780649543}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), avg( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and average number of products of shops?", "score": -32.64739990234375, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5570768290636077, "beam_bleu_score": 0.5200325350598859}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT count( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the number of numbers of products and maximum number of products of shops?", "score": -34.33038330078125, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.647058806874006, "beam_bleu_score": 0.5031895482123688}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT avg( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the average number of products and maximum number of products of shops?", "score": -35.756919860839844, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5825357978709664, "beam_bleu_score": 0.5176080749342413}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT sum( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the total number of products and maximum number of products of shops?", "score": -36.00626754760742, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6305522703962433, "beam_bleu_score": 0.5429150452329512}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), T1.Number_products FROM shop AS T1  GROUP BY T1.Number_products      ", "inferred_question": "", "score": -43.69732666015625, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT min( T1.Number_products), count( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and number of numbers of products of shops?", "score": -45.5647087097168, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7027779654247245, "beam_bleu_score": 0.5031895482123688}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT T1.Number_products, max( T1.Number_products) FROM shop AS T1  GROUP BY T1.Number_products      ", "inferred_question": "", "score": -49.255096435546875, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT max( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the maximum number of products and minimum number of products of shops?", "score": -57.23103332519531, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7916710294178855, "beam_bleu_score": 0.6025021261470789}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT count( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the number of numbers of products and minimum number of products of shops?", "score": -58.901329040527344, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.587806534677368, "beam_bleu_score": 0.499448102474082}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT avg( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the average number of products and minimum number of products of shops?", "score": -58.97707748413086, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.549477826839385, "beam_bleu_score": 0.5161658539672787}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT sum( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the total number of products and minimum number of products of shops?", "score": -59.72705078125, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6120754457665203, "beam_bleu_score": 0.5413558884936202}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 272, "beams": [{"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and maximum number of products of shops?", "score": 0.0, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8992177278555928, "beam_bleu_score": 0.738750198072517}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), sum( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and total number of products of shops?", "score": -29.312986373901367, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.737009449566558, "beam_bleu_score": 0.6790601633465791}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), avg( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and average number of products of shops?", "score": -34.49830627441406, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5368400315377275, "beam_bleu_score": 0.6587270011950109}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT count( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the number of numbers of products and maximum number of products of shops?", "score": -34.90652084350586, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7018525288649058, "beam_bleu_score": 0.6309574476564681}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT sum( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the total number of products and maximum number of products of shops?", "score": -35.751495361328125, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6682277332802002, "beam_bleu_score": 0.6816973398147962}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT avg( T1.Number_products), max( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the average number of products and maximum number of products of shops?", "score": -35.962337493896484, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5958365866174622, "beam_bleu_score": 0.6612852124409327}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), T1.Number_products FROM shop AS T1  GROUP BY T1.Number_products      ", "inferred_question": "", "score": -44.01402282714844, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT T1.Number_products, max( T1.Number_products) FROM shop AS T1  GROUP BY T1.Number_products      ", "inferred_question": "", "score": -47.61671829223633, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT min( T1.Number_products), count( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the minimum number of products and number of numbers of products of shops?", "score": -50.613582611083984, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7039177062860802, "beam_bleu_score": 0.6285165607170267}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT max( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the maximum number of products and minimum number of products of shops?", "score": -58.826210021972656, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8350508022368547, "beam_bleu_score": 0.7315420171696912}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT avg( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the average number of products and minimum number of products of shops?", "score": -61.540977478027344, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5101712419619855, "beam_bleu_score": 0.6549519059395794}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT sum( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the total number of products and minimum number of products of shops?", "score": -61.819190979003906, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.582160601426516, "beam_bleu_score": 0.6751685408745206}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT count( T1.Number_products), min( T1.Number_products) FROM shop AS T1        ", "inferred_question": "What are the number of numbers of products and minimum number of products of shops?", "score": -61.82701873779297, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.591975360980707, "beam_bleu_score": 0.6249145983228654}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 279, "beams": [{"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum amount?", "score": 0.0, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7433060868284485, "beam_bleu_score": 0.39818698672061864}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Year_awarded DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum year?", "score": -36.85107421875, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47450625450481176, "beam_bleu_score": 0.4032212456165685}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -36.987613677978516, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum amount with maximum name?", "score": -37.627323150634766, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.628074645572887, "beam_bleu_score": 0.33411292431726713}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY sum( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -38.40587615966797, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY count( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -42.57756423950195, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT count( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "How many names of employees who were awarded bonuses with maximum amount are there?", "score": -44.2390022277832, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4436645621123969, "beam_bleu_score": 0.34235755531086226}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY max( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -44.34762191772461, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT min( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum amount with minimum name?", "score": -45.25810623168945, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4782706774276344, "beam_bleu_score": 0.3362896708547056}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What is the average name of all employees who were awarded bonuses with maximum amount?", "score": -46.507789611816406, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42152005134513915, "beam_bleu_score": 0.3706262318013196}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY avg( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -46.528358459472656, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What is the total name of all employees who were awarded bonuses with maximum amount?", "score": -47.2504997253418, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42818602550540186, "beam_bleu_score": 0.3789178009458803}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1    ORDER BY T1.Name DESC LIMIT 1    ", "inferred_question": "What are the names of employees with maximum name?", "score": -48.36579132080078, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21931001383963655, "beam_bleu_score": 0.3324244184620003}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY min( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -50.9731559753418, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Is_full_time DESC LIMIT 1    ", "inferred_question": "What are the names of employees who was hired by shops with maximum full time status?", "score": -63.793304443359375, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18229542465218196, "beam_bleu_score": 0.3712786090816703}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 280, "beams": [{"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum amount?", "score": 0.0, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7150499833385907, "beam_bleu_score": 0.34866711174911136}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY sum( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -36.84628677368164, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY count( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -41.45653533935547, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum amount with maximum name?", "score": -41.78241729736328, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6722428266121685, "beam_bleu_score": 0.2878705299813067}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Year_awarded DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum year?", "score": -45.760398864746094, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5200391316333326, "beam_bleu_score": 0.364479032552221}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY max( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -46.11035919189453, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY avg( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -48.58999252319336, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT avg( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What is the average name of all employees who were awarded bonuses with maximum amount?", "score": -49.484046936035156, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43893800402616034, "beam_bleu_score": 0.3169335479215374}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT count( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "How many names of employees who were awarded bonuses with maximum amount are there?", "score": -50.452632904052734, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47943475715359885, "beam_bleu_score": 0.29868268135942005}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT min( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What are the names of employees who were awarded bonuses with maximum amount with minimum name?", "score": -50.76755905151367, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5054264478748711, "beam_bleu_score": 0.2878705299813067}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    ", "inferred_question": "What is the total name of all employees who were awarded bonuses with maximum amount?", "score": -50.77458953857422, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48218068266129566, "beam_bleu_score": 0.3080468887798749}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY min( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -55.6001091003418, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1    ORDER BY T1.Name DESC LIMIT 1    ", "inferred_question": "What are the names of employees with maximum name?", "score": -67.16345977783203, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1947961914256643, "beam_bleu_score": 0.2923081299819926}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT T1.Name FROM employee AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -69.03840637207031, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT max( T1.Name) FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY sum( T2.Bonus) DESC LIMIT 1    ", "inferred_question": "", "score": -77.81196594238281, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 289, "beams": [{"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What is the total amount of all bonuses?", "score": 0.0, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.516621141497156}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT max( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What are the amounts of bonuses with maximum amount?", "score": -33.00049591064453, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4419457485662276, "beam_bleu_score": 0.22250253290431032}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT avg( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What is the average amount of all bonuses?", "score": -37.97594451904297, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.379741095406388, "beam_bleu_score": 0.4307960186043056}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT count( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "How many amounts of bonuses are there?", "score": -38.5546760559082, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42819643031752685, "beam_bleu_score": 0.16753528869799345}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT min( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What are the amounts of bonuses with minimum amount?", "score": -38.93553924560547, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3118111620342412, "beam_bleu_score": 0.22826521980339143}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT T1.Bonus FROM evaluation AS T1        ", "inferred_question": "What are the amounts of bonuses?", "score": -43.51073455810547, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6992241525796763, "beam_bleu_score": 0.2300932750682585}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1        ", "inferred_question": "What is the total name of all employees?", "score": -115.0324478149414, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07852312641763481, "beam_bleu_score": 0.4290227945505075}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Year_awarded) FROM evaluation AS T1        ", "inferred_question": "What is the total year of all bonuses?", "score": -119.14765930175781, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38790759062013846, "beam_bleu_score": 0.5061244956630566}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT count( *) FROM evaluation AS T1        ", "inferred_question": "How many bonuses are there?", "score": -123.72738647460938, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5439182256248103, "beam_bleu_score": 0.13170566735920164}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Employee_ID) FROM evaluation AS T1        ", "inferred_question": "What is the total employee_id of all bonuses?", "score": -125.36076354980469, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34031273041527377, "beam_bleu_score": 0.5262130629147526}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Name) FROM shop AS T1        ", "inferred_question": "What is the total name of all shops?", "score": -125.76799011230469, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06209762764396465, "beam_bleu_score": 0.40207975352410835}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Is_full_time) FROM hiring AS T1        ", "inferred_question": "", "score": -125.93606567382812, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.City) FROM employee AS T1        ", "inferred_question": "What is the total city of all employees?", "score": -128.53660583496094, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08682398886744258, "beam_bleu_score": 0.42552027468473985}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Age) FROM employee AS T1        ", "inferred_question": "What is the total age of all employees?", "score": -129.3476104736328, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07750461856712643, "beam_bleu_score": 0.4279489987725605}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT sum( T1.Location) FROM shop AS T1        ", "inferred_question": "What is the total location of all shops?", "score": -129.80181884765625, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06264244527372353, "beam_bleu_score": 0.47588859722120497}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 290, "beams": [{"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What is the total amount of all bonuses?", "score": 0.0, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7321324084097605, "beam_bleu_score": 0.4571813449091093}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT max( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What are the amounts of bonuses with maximum amount?", "score": -34.017234802246094, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38225593724962925, "beam_bleu_score": 0.3518792670920072}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT avg( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What is the average amount of all bonuses?", "score": -39.41832733154297, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3633908583072778, "beam_bleu_score": 0.37759912486547736}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT count( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "How many amounts of bonuses are there?", "score": -39.85771179199219, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3401938517004881, "beam_bleu_score": 0.2725123474340201}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT min( T1.Bonus) FROM evaluation AS T1        ", "inferred_question": "What are the amounts of bonuses with minimum amount?", "score": -40.32814407348633, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23773170993466808, "beam_bleu_score": 0.3576900314190525}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT T1.Bonus FROM evaluation AS T1        ", "inferred_question": "What are the amounts of bonuses?", "score": -46.1363410949707, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45621891910281065, "beam_bleu_score": 0.2564669288095133}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Year_awarded) FROM evaluation AS T1        ", "inferred_question": "What is the total year of all bonuses?", "score": -106.71745300292969, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27382729989168997, "beam_bleu_score": 0.3312831471731554}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Name) FROM employee AS T1        ", "inferred_question": "What is the total name of all employees?", "score": -122.49663543701172, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06053190817631249, "beam_bleu_score": 0.2967413028844526}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT count( *) FROM evaluation AS T1        ", "inferred_question": "How many bonuses are there?", "score": -127.2782211303711, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3558759495195313, "beam_bleu_score": 0.10369696494122106}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Employee_ID) FROM evaluation AS T1        ", "inferred_question": "What is the total employee_id of all bonuses?", "score": -128.4822540283203, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2310042937137744, "beam_bleu_score": 0.37495140113013126}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.City) FROM employee AS T1        ", "inferred_question": "What is the total city of all employees?", "score": -132.04428100585938, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0672651926753789, "beam_bleu_score": 0.29035603618012223}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Location) FROM shop AS T1        ", "inferred_question": "What is the total location of all shops?", "score": -132.3531494140625, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.047545367335415034, "beam_bleu_score": 0.3281165066708278}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Age) FROM employee AS T1        ", "inferred_question": "What is the total age of all employees?", "score": -133.44320678710938, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.057436706177605434, "beam_bleu_score": 0.30482577312824927}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.Start_from) FROM hiring AS T1        ", "inferred_question": "", "score": -133.6265411376953, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT sum( T1.District) FROM shop AS T1        ", "inferred_question": "What is the total district of all shops?", "score": -134.0788116455078, "correct_code": "SELECT sum(bonus) FROM evaluation", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04985900361572482, "beam_bleu_score": 0.2939244565120513}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 295, "beams": [{"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "How many distinct locations of shops are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7898033387887059, "beam_bleu_score": 0.6773122443056879}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT T1.Location FROM shop AS T1        ", "inferred_question": "What are the distinct locations of shops?", "score": -36.40984344482422, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2995016812647543, "beam_bleu_score": 0.4544039323511829}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "What are the distinct locations of shops with minimum location?", "score": -39.532569885253906, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17790413616600675, "beam_bleu_score": 0.3324928604081888}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "", "score": -46.79465103149414, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "", "score": -47.950904846191406, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "What are the distinct locations of shops with maximum location?", "score": -54.80107116699219, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2561677113950559, "beam_bleu_score": 0.34103327101842745}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "inferred_question": "How many distinct ids of shops are there?", "score": -55.513343811035156, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43414260100881263, "beam_bleu_score": 0.5258503359733124}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM shop AS T1        ", "inferred_question": "How many distinct names of shops are there?", "score": -60.98157501220703, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3231133217046752, "beam_bleu_score": 0.537954967195134}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM employee AS T1        ", "inferred_question": "How many employees are there?", "score": -80.44541931152344, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08060089706092766, "beam_bleu_score": 0.3999924989022232}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM hiring AS T1        ", "inferred_question": "", "score": -103.12713623046875, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "inferred_question": "What are the distinct ids of shops with minimum id?", "score": -110.2715835571289, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05763265888786817, "beam_bleu_score": 0.23356898886410005}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM shop AS T1        ", "inferred_question": "What are the distinct names of shops with minimum name?", "score": -110.84912109375, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06728076853682641, "beam_bleu_score": 0.22617570410381801}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT T1.Name FROM shop AS T1        ", "inferred_question": "What are the distinct names of shops?", "score": -111.5365982055664, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07646873204226035, "beam_bleu_score": 0.26059922753773507}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Employee_ID) FROM evaluation AS T1        ", "inferred_question": "How many distinct employee_ids of bonuses are there?", "score": -115.9521484375, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04844757254947463, "beam_bleu_score": 0.4768415207695085}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Employee_ID) FROM hiring AS T1        ", "inferred_question": "", "score": -116.9378662109375, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 296, "beams": [{"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "How many distinct locations of shops are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7450482106694913, "beam_bleu_score": 0.5340040345164269}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT T1.Location FROM shop AS T1        ", "inferred_question": "What are the distinct locations of shops?", "score": -37.276241302490234, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4882672923138899, "beam_bleu_score": 0.5618917799140688}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "What are the distinct locations of shops with minimum location?", "score": -39.51845932006836, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34973374295532433, "beam_bleu_score": 0.418274159218732}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "", "score": -46.274776458740234, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "", "score": -48.44465255737305, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Location) FROM shop AS T1        ", "inferred_question": "What are the distinct locations of shops with maximum location?", "score": -55.97931671142578, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39690278449512795, "beam_bleu_score": 0.415566740862809}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM shop AS T1        ", "inferred_question": "How many distinct names of shops are there?", "score": -78.10992431640625, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5097030541765117, "beam_bleu_score": 0.37761935488028425}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "inferred_question": "How many distinct ids of shops are there?", "score": -86.75601196289062, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.540158680092075, "beam_bleu_score": 0.3722048971078123}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM employee AS T1        ", "inferred_question": "How many employees are there?", "score": -112.14970397949219, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.030998782108553002, "beam_bleu_score": 0.09242488438438574}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM shop AS T1        ", "inferred_question": "What are the distinct names of shops with minimum name?", "score": -124.71138000488281, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1801607836602629, "beam_bleu_score": 0.3400750585842912}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT T1.Name FROM shop AS T1        ", "inferred_question": "What are the distinct names of shops?", "score": -126.99421691894531, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17744677074181614, "beam_bleu_score": 0.39248482731499196}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Shop_ID) FROM hiring AS T1        ", "inferred_question": "", "score": -134.06947326660156, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM shop AS T1        ", "inferred_question": "", "score": -136.58416748046875, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Employee_ID) FROM evaluation AS T1        ", "inferred_question": "How many distinct employee_ids of bonuses are there?", "score": -136.8141632080078, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.054734124562784814, "beam_bleu_score": 0.3415796689491188}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Shop_ID) FROM shop AS T1        ", "inferred_question": "What are the distinct ids of shops with minimum id?", "score": -137.2174835205078, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15070520354757988, "beam_bleu_score": 0.3552088094900004}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 297, "beams": [{"orig_question": "How many documents do we have?", "inferred_code": "SELECT count( *) FROM Documents AS T1        ", "inferred_question": "How many documents are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9253788278945004, "beam_bleu_score": 0.6752051870497195}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT min( *) FROM Documents AS T1        ", "inferred_question": "", "score": -32.96337127685547, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT sum( *) FROM Documents AS T1        ", "inferred_question": "", "score": -35.00455093383789, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Documents AS T1        ", "inferred_question": "Show me everything about documents.", "score": -36.3584098815918, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08257156428365298, "beam_bleu_score": 0.3824323271187023}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( *) FROM Documents AS T1        ", "inferred_question": "", "score": -36.38351058959961, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What is the average id of all documents?", "score": -41.72291946411133, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10874815551128059, "beam_bleu_score": 0.3101141804859016}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( *) FROM Documents AS T1        ", "inferred_question": "", "score": -46.97821807861328, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT min( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What are the ids of documents with minimum id?", "score": -47.16482925415039, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10113694671697548, "beam_bleu_score": 0.2832221829532684}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "What is the average description of all documents?", "score": -47.91761779785156, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10255744822258028, "beam_bleu_score": 0.2610776545986652}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT avg( T1.Document_Name) FROM Documents AS T1        ", "inferred_question": "What is the average name of all documents?", "score": -48.33715057373047, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15077989490088628, "beam_bleu_score": 0.29794117099932727}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT sum( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What is the total id of all documents?", "score": -48.84125518798828, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24380442527465962, "beam_bleu_score": 0.30224492825084953}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What are the ids of documents with maximum id?", "score": -50.35752868652344, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13294384852405805, "beam_bleu_score": 0.29283653038397195}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "What are the descriptions of documents with maximum description?", "score": -55.45265197753906, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10120941305117537, "beam_bleu_score": 0.2161400847481868}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT min( T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "What are the descriptions of documents with minimum description?", "score": -55.609771728515625, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08893972639299441, "beam_bleu_score": 0.20715182505158836}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT max( T1.Document_Name) FROM Documents AS T1        ", "inferred_question": "What are the names of documents with maximum name?", "score": -55.89555740356445, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08893247233886103, "beam_bleu_score": 0.27304171801674604}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 298, "beams": [{"orig_question": "Count the number of documents.", "inferred_code": "SELECT count( *) FROM Documents AS T1        ", "inferred_question": "How many documents are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8767978747130881, "beam_bleu_score": 0.4354220039379098}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT min( *) FROM Documents AS T1        ", "inferred_question": "", "score": -33.76697540283203, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Documents AS T1        ", "inferred_question": "Show me everything about documents.", "score": -36.9778938293457, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09842322359120603, "beam_bleu_score": 0.3866308960448497}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( *) FROM Documents AS T1        ", "inferred_question": "", "score": -38.67886734008789, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT sum( *) FROM Documents AS T1        ", "inferred_question": "", "score": -40.14540481567383, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What is the average id of all documents?", "score": -43.62388229370117, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10360998006948252, "beam_bleu_score": 0.3868844800657579}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT max( *) FROM Documents AS T1        ", "inferred_question": "", "score": -49.44784164428711, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Document_Name) FROM Documents AS T1        ", "inferred_question": "What is the average name of all documents?", "score": -51.22480392456055, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1144097531125261, "beam_bleu_score": 0.38847487158096566}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT max( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What are the ids of documents with maximum id?", "score": -52.70292282104492, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12580981395931334, "beam_bleu_score": 0.36505183541007724}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "What is the average description of all documents?", "score": -54.34386444091797, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0892498328801773, "beam_bleu_score": 0.32074705063782744}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT min( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What are the ids of documents with minimum id?", "score": -54.50032043457031, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11919593437821507, "beam_bleu_score": 0.3689566885418471}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT sum( T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "What is the total id of all documents?", "score": -54.87185287475586, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24145489564818412, "beam_bleu_score": 0.3974354487874025}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT max( T1.Document_Name) FROM Documents AS T1        ", "inferred_question": "What are the names of documents with maximum name?", "score": -59.284400939941406, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09728545703772495, "beam_bleu_score": 0.3597955273813877}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT avg( T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "What is the average version number of all templates?", "score": -59.37474060058594, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07722327247579097, "beam_bleu_score": 0.2794080378274197}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT T1.Document_ID FROM Documents AS T1        ", "inferred_question": "What are the ids of documents?", "score": -59.415489196777344, "correct_code": "SELECT count(*) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11860109213936665, "beam_bleu_score": 0.5495207706557382}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 299, "beams": [{"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, T1.Document_Description FROM Documents AS T1        ", "inferred_question": "What are the ids, names, and descriptions of documents?", "score": 0.0, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8288389643010444, "beam_bleu_score": 0.43361140785054164}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT count( *), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -34.76664733886719, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, count( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -36.23771667480469, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT avg( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -37.99885177612305, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT min( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -39.46587371826172, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, avg( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -39.649234771728516, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, min( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -40.2900390625, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, max( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -40.33299255371094, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT max( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -40.72177505493164, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, sum( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -41.826576232910156, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, avg( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -42.42197036743164, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT sum( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -43.01826858520508, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, max( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -43.57106018066406, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT T1.Document_ID, count( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -43.66152572631836, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT count( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -44.64497375488281, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 300, "beams": [{"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, T1.Document_Description FROM Documents AS T1        ", "inferred_question": "What are the ids, names, and descriptions of documents?", "score": 0.0, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9804361546882999, "beam_bleu_score": 0.8606299761928231}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, avg( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -35.59866714477539, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT max( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -36.200401306152344, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, max( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -37.60257339477539, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT min( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -37.6646728515625, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT count( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -38.4770622253418, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT count( *), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -39.92244338989258, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT avg( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -40.129215240478516, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, count( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -40.7239990234375, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, count( T1.Document_Name), T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -40.918922424316406, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, min( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -41.80670166015625, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, max( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -42.76423645019531, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, count( *) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -42.94782257080078, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Name, avg( T1.Document_Description) FROM Documents AS T1  GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -43.101165771484375, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT sum( T1.Document_ID), T1.Document_Name, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_Description      ", "inferred_question": "", "score": -43.46266174316406, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 301, "beams": [{"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "inferred_question": "What are the names and templates of documents whose description is %w%?", "score": 37.4109001159668, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6620526581392749, "beam_bleu_score": 0.45148722313833795}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "inferred_question": "What are the names and ids of documents whose description is %w%?", "score": 36.23459243774414, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.632430678838674, "beam_bleu_score": 0.3680305114063418}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T2.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description like '%w%'       ", "inferred_question": "What are the names of documents whose description is %w% that use templates? Also show the ids of the templates.", "score": 18.176652908325195, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.634090221554965, "beam_bleu_score": 0.4585145247861611}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "inferred_question": "What are the names and descriptions of documents whose description is %w%?", "score": 2.2967071533203125, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5264937495847147, "beam_bleu_score": 0.39306937533356123}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Template_ID HAVING count( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": 0.5985946655273438, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING count( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": -0.8004798889160156, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT max( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": -1.7616958618164062, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Template_ID HAVING avg( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": -2.7842636108398438, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT max( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "inferred_question": "", "score": -2.833606719970703, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT avg( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": -4.133403778076172, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING avg( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": -4.143436431884766, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT count( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": -4.342411041259766, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT T1.Document_Name, count( *) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -4.747093200683594, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT avg( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "inferred_question": "", "score": -5.2169036865234375, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT count( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "inferred_question": "", "score": -5.374126434326172, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 302, "beams": [{"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "inferred_question": "What are the names and ids of documents whose description is %w%?", "score": 30.817153930664062, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6421590957294175, "beam_bleu_score": 0.42079385500665206}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%'       ", "inferred_question": "What are the names and templates of documents whose description is %w%?", "score": 26.904516220092773, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.626549574710178, "beam_bleu_score": 0.492687659591178}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING count( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": -4.6779327392578125, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT max( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "inferred_question": "", "score": -7.622493743896484, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT count( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "inferred_question": "", "score": -8.186822891235352, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT avg( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "inferred_question": "", "score": -8.461715698242188, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING avg( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": -9.188566207885742, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Template_ID HAVING count( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": -9.654949188232422, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT max( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": -11.514640808105469, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, count( T1.Template_ID) FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -11.782634735107422, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT count( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": -12.255332946777344, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, T1.Document_ID FROM Documents AS T1  GROUP BY T1.Document_Name, T1.Document_ID HAVING sum( T1.Document_Description) like '%w%'     ", "inferred_question": "", "score": -12.266716003417969, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT avg( T1.Document_Name), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": -12.365060806274414, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT sum( T1.Document_Name), T1.Document_ID FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_ID      ", "inferred_question": "", "score": -12.530984878540039, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT T1.Document_Name, count( T1.Document_ID) FROM Documents AS T1 WHERE T1.Document_Description like '%w%' GROUP BY T1.Document_Name      ", "inferred_question": "", "score": -13.051733016967773, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 303, "beams": [{"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids, templates, and descriptions of documents whose name is robbin cv?", "score": 118.3628158569336, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.6155962239189111}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T2.Template_ID, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids and descriptions of documents whose name is robbin cv that use templates? Also show the ids of the templates.", "score": 108.96923828125, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6908974945997, "beam_bleu_score": 0.41433085310444157}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids, descriptions, and templates of documents whose name is robbin cv?", "score": 100.80245971679688, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.5960585975750053}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the names, templates, and descriptions of documents whose name is robbin cv?", "score": 94.27323913574219, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.5979215986036488}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids and descriptions of documents whose name is robbin cv that use templates? Also show the ids of the templates.", "score": 89.27346801757812, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6908974945997, "beam_bleu_score": 0.41433085310444157}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT count( *), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 84.65354919433594, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_Name, T2.Template_ID, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the names and descriptions of documents whose name is robbin cv that use templates? Also show the ids of the templates.", "score": 84.5959701538086, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6145261845196336, "beam_bleu_score": 0.4024019977519703}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, count( *) FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": 83.43792724609375, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT count( *), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 82.49627685546875, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT avg( T1.Document_ID), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 80.69691467285156, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, avg( T1.Template_ID), T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 80.22382354736328, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, max( T1.Template_ID), T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 80.20881652832031, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT max( T1.Document_ID), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 79.69945526123047, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, count( T1.Template_ID), T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 79.20135498046875, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_ID, T1.Template_ID, T1.Document_Description HAVING count( T1.Document_Name) = 'Robbin CV'     ", "inferred_question": "", "score": 78.52725219726562, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 304, "beams": [{"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids, descriptions, and templates of documents whose name is robbin cv?", "score": 107.27832794189453, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7262748805013509, "beam_bleu_score": 0.5217227541756532}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids, templates, and descriptions of documents whose name is robbin cv?", "score": 104.85978698730469, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7374188011866127, "beam_bleu_score": 0.5391024760793159}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T2.Template_ID, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids and descriptions of documents whose name is robbin cv that use templates? Also show the ids of the templates.", "score": 93.27479553222656, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6898044145419039, "beam_bleu_score": 0.4511605079770223}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_ID FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids and descriptions of documents whose name is robbin cv that use templates? Also show the ids of the templates.", "score": 92.33291625976562, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6898044145419039, "beam_bleu_score": 0.4511605079770223}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_Details FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids and descriptions of documents whose name is robbin cv that use templates? Also show the detailses of the templates.", "score": 72.39865112304688, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5666870183486584, "beam_bleu_score": 0.43488497602676246}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T13 ON T1.Template_ID = T13.Template_ID JOIN Ref_Template_Types AS T2 ON T13.Template_Type_Code = T2.Template_Type_Code WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids and descriptions of documents whose name is robbin cv that use templates with template types? Also show the descriptions of the template types.", "score": 72.02008056640625, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4448611117775457, "beam_bleu_score": 0.38367050155625465}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_Name, T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the names, templates, and descriptions of documents whose name is robbin cv?", "score": 71.7594223022461, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7044999962674349, "beam_bleu_score": 0.5366431208749879}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, count( T1.Document_Description), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": 71.54690551757812, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, avg( T1.Document_Description), T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": 71.28150939941406, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T2.Template_Details, T1.Document_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the ids and descriptions of documents whose name is robbin cv that use templates? Also show the detailses of the templates.", "score": 71.227783203125, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5666870183486584, "beam_bleu_score": 0.43488497602676246}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_Name, T1.Document_Description, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       ", "inferred_question": "What are the names, descriptions, and templates of documents whose name is robbin cv?", "score": 70.799072265625, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6666777340383638, "beam_bleu_score": 0.5191988419556522}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT count( *), T1.Template_ID, T1.Document_Description FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Document_Description      ", "inferred_question": "", "score": 70.73723602294922, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, count( *) FROM Documents AS T1 WHERE T1.Document_Name = 'Robbin CV' GROUP BY T1.Template_ID      ", "inferred_question": "", "score": 70.60871887207031, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Document_Description, T1.Template_ID FROM Documents AS T1  GROUP BY T1.Document_ID, T1.Document_Description, T1.Template_ID HAVING count( T1.Document_Name) = 'Robbin CV'     ", "inferred_question": "", "score": 67.2996826171875, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM Documents AS T1  GROUP BY T1.Document_ID, T1.Template_ID, T1.Document_Description HAVING count( T1.Document_Name) = 'Robbin CV'     ", "inferred_question": "", "score": 66.31966400146484, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 305, "beams": [{"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "How many distinct ids of templates are there?", "score": -0.5012632608413696, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.421383502907964, "beam_bleu_score": 0.49093032761651983}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "How many distinct templates of documents are there?", "score": -0.9308153390884399, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.806925132925643, "beam_bleu_score": 0.622687545900707}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "inferred_question": "How many templates are there?", "score": -12.719606399536133, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7419796921129771, "beam_bleu_score": 0.3540822280473589}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "How many distinct template type codes of templates are there?", "score": -25.4459228515625, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39311308852408255, "beam_bleu_score": 0.41331538612098917}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "How many distinct ids of documents are there?", "score": -29.891475677490234, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25412550036163584, "beam_bleu_score": 0.4617912558645992}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "inferred_question": "How many templates are there?", "score": -38.87559509277344, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7419796921129771, "beam_bleu_score": 0.3540822280473589}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Documents AS T1        ", "inferred_question": "What are the distinct templates of documents?", "score": -41.33436584472656, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4198774181885164, "beam_bleu_score": 0.4624019838247846}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What are the distinct ids of templates with minimum id?", "score": -42.10253143310547, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09674017209071029, "beam_bleu_score": 0.2859417735405307}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "What are the distinct templates of documents with minimum template?", "score": -42.31195831298828, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21246296324751734, "beam_bleu_score": 0.3579096225286622}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Templates AS T1        ", "inferred_question": "What are the distinct ids of templates?", "score": -44.00879669189453, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13170355264408218, "beam_bleu_score": 0.27447948481846157}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "How many distinct version numbers of templates are there?", "score": -45.730770111083984, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4289275108010948, "beam_bleu_score": 0.43513499669365585}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many distinct descriptions of template types are there?", "score": -46.26777648925781, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3708148327513964, "beam_bleu_score": 0.3984006816511517}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "", "score": -46.69887924194336, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What is the average id of all distinct templates?", "score": -46.75202560424805, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1963911976698467, "beam_bleu_score": 0.37671450256884054}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Details) FROM Templates AS T1        ", "inferred_question": "How many distinct detailses of templates are there?", "score": -47.52106475830078, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2989296834479248, "beam_bleu_score": 0.48669952978898834}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 306, "beams": [{"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "How many distinct templates of documents are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7306167408654605, "beam_bleu_score": 0.48726132370318637}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "How many distinct ids of templates are there?", "score": -27.28322410583496, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37338980131525223, "beam_bleu_score": 0.3149338505375296}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "inferred_question": "How many templates are there?", "score": -31.669225692749023, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6846768117412998, "beam_bleu_score": 0.182630982083396}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_ID) FROM Documents AS T1        ", "inferred_question": "How many distinct ids of documents are there?", "score": -32.319305419921875, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23339951825067617, "beam_bleu_score": 0.3149338505375296}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "How many distinct template type codes of templates are there?", "score": -36.036338806152344, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3690830476852458, "beam_bleu_score": 0.3415126016979587}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Templates AS T1        ", "inferred_question": "How many templates are there?", "score": -38.719032287597656, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6846768117412998, "beam_bleu_score": 0.182630982083396}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Documents AS T1        ", "inferred_question": "What are the distinct templates of documents?", "score": -40.730770111083984, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2939524312282392, "beam_bleu_score": 0.4636324048610202}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "What are the distinct templates of documents with minimum template?", "score": -41.291961669921875, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21231693193751422, "beam_bleu_score": 0.4422981751733606}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_Name) FROM Documents AS T1        ", "inferred_question": "How many distinct names of documents are there?", "score": -46.82045364379883, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24453218044750336, "beam_bleu_score": 0.33503103606431406}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "", "score": -47.197349548339844, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "", "score": -49.76914978027344, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "How many distinct version numbers of templates are there?", "score": -51.650089263916016, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4247533126067924, "beam_bleu_score": 0.4264078955935674}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many distinct descriptions of template types are there?", "score": -52.880313873291016, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35384967828694924, "beam_bleu_score": 0.31916400917657156}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Details) FROM Templates AS T1        ", "inferred_question": "How many distinct detailses of templates are there?", "score": -53.062625885009766, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27410421496038473, "beam_bleu_score": 0.33648958301165544}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_ID) FROM Documents AS T1        ", "inferred_question": "What are the distinct templates of documents with maximum template?", "score": -56.009765625, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21013331790593548, "beam_bleu_score": 0.43976341078757725}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 317, "beams": [{"orig_question": "How many templates do we have?", "inferred_code": "SELECT count( *) FROM Templates AS T1        ", "inferred_question": "How many templates are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9589443843070234, "beam_bleu_score": 0.6752051870497195}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT min( *) FROM Templates AS T1        ", "inferred_question": "", "score": -36.36024475097656, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( *) FROM Templates AS T1        ", "inferred_question": "", "score": -38.49262237548828, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Templates AS T1        ", "inferred_question": "Show me everything about templates.", "score": -38.53068542480469, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09213089185822876, "beam_bleu_score": 0.3824323271187023}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT sum( *) FROM Templates AS T1        ", "inferred_question": "", "score": -42.60356903076172, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What is the average id of all templates?", "score": -51.002906799316406, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12915476554863758, "beam_bleu_score": 0.3101141804859016}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT max( *) FROM Templates AS T1        ", "inferred_question": "", "score": -51.04133605957031, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What are the ids of templates with maximum id?", "score": -60.97336196899414, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1435745769275062, "beam_bleu_score": 0.29283653038397195}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT min( T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What are the ids of templates with minimum id?", "score": -63.73240661621094, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1350916414639428, "beam_bleu_score": 0.2832221829532684}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "What is the average version number of all templates?", "score": -63.95198059082031, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2723235302163931, "beam_bleu_score": 0.24136108386305014}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT sum( T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What is the total id of all templates?", "score": -64.22501373291016, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26984256297232556, "beam_bleu_score": 0.30224492825084953}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_Details) FROM Templates AS T1        ", "inferred_question": "What is the average details of all templates?", "score": -64.45787048339844, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14531687046749153, "beam_bleu_score": 0.27921849189803566}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "What is the average description of all template types?", "score": -64.47737884521484, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10645219478598766, "beam_bleu_score": 0.2228515575580073}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1        ", "inferred_question": "What are the ids of templates?", "score": -66.03925323486328, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1408285299932136, "beam_bleu_score": 0.38720211996182885}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What is the average template type code of all templates?", "score": -69.61041259765625, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13549341444089946, "beam_bleu_score": 0.22584235654496165}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 318, "beams": [{"orig_question": "Count the number of templates.", "inferred_code": "SELECT count( *) FROM Templates AS T1        ", "inferred_question": "How many templates are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.874676275291445, "beam_bleu_score": 0.4354220039379098}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT min( *) FROM Templates AS T1        ", "inferred_question": "", "score": -36.95094299316406, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Templates AS T1        ", "inferred_question": "Show me everything about templates.", "score": -38.37953186035156, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10526567605657378, "beam_bleu_score": 0.39695011180791506}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( *) FROM Templates AS T1        ", "inferred_question": "", "score": -40.02825164794922, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT sum( *) FROM Templates AS T1        ", "inferred_question": "", "score": -47.61117935180664, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT max( *) FROM Templates AS T1        ", "inferred_question": "", "score": -52.31627655029297, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What is the average id of all templates?", "score": -55.13572692871094, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13524051056279696, "beam_bleu_score": 0.3868844800657579}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "What is the average version number of all templates?", "score": -58.562599182128906, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27224089957954767, "beam_bleu_score": 0.42911982563498163}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1        ", "inferred_question": "What are the ids of templates?", "score": -64.94084167480469, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15331495075800738, "beam_bleu_score": 0.5495207706557382}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "What are the ids of templates with maximum id?", "score": -64.94427490234375, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14448607846025963, "beam_bleu_score": 0.36505183541007724}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT T1.Version_Number FROM Templates AS T1        ", "inferred_question": "What are the version numbers of templates?", "score": -65.8615951538086, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27064157468788685, "beam_bleu_score": 0.5148750647470813}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT max( T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "What are the version numbers of templates with maximum version number?", "score": -68.33734130859375, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3093961689067135, "beam_bleu_score": 0.30711932966950667}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT min( T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "What are the version numbers of templates with minimum version number?", "score": -70.76826477050781, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29335015109468854, "beam_bleu_score": 0.30711932966950667}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT sum( T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "What is the total version number of all templates?", "score": -72.15137481689453, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43021409263533394, "beam_bleu_score": 0.4468247137448434}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "What is the average description of all template types?", "score": -73.07585906982422, "correct_code": "SELECT count(*) FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09437968379413042, "beam_bleu_score": 0.2770417595613777}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 319, "beams": [{"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "inferred_question": "What are the ids, version numbers, and template type codes of templates?", "score": 0.0, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7956734758318074, "beam_bleu_score": 0.7589249848981845}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the ids and version numbers of templates with template types? Also show the codes of the template types.", "score": -17.48932647705078, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8046395380448274, "beam_bleu_score": 0.5453675017994896}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -31.75724220275879, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( *) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -32.33583068847656, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, min( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -33.81503677368164, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT max( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -34.96145248413086, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -35.47807312011719, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -37.43621063232422, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT count( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -37.90370178222656, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -38.419700622558594, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT min( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -38.86140823364258, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, sum( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -39.685333251953125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT avg( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -39.7763671875, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -39.94212341308594, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( *) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -41.16545486450195, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 320, "beams": [{"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "inferred_question": "What are the ids, version numbers, and template type codes of templates?", "score": 0.0, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9163249438023415, "beam_bleu_score": 0.8093829795090309}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the ids and version numbers of templates with template types? Also show the codes of the template types.", "score": -28.962749481201172, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6657314811864025, "beam_bleu_score": 0.4608005967830243}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -33.22747039794922, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( *) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -33.23418045043945, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT max( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -33.84250259399414, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, min( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -35.3530387878418, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT count( *), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -35.360069274902344, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -35.55078887939453, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT min( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -35.85869216918945, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -37.5669059753418, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT avg( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -38.01622772216797, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT count( T1.Template_ID), T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -38.57925796508789, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, count( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -39.30206298828125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -40.31919860839844, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT T1.Template_ID, T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1  GROUP BY T1.Version_Number      ", "inferred_question": "", "score": -40.572181701660156, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 321, "beams": [{"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Templates AS T1        ", "inferred_question": "What are the distinct template type codes of templates?", "score": 0.0, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6383904533968761, "beam_bleu_score": 0.7142769518282278}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "How many distinct template type codes of templates are there?", "score": -28.907320022583008, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4945234816834594, "beam_bleu_score": 0.6736252424139685}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct codes of template types?", "score": -29.497989654541016, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5992668658458018, "beam_bleu_score": 0.537590465912081}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "", "score": -32.337310791015625, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the distinct template type codes of templates with minimum template type code?", "score": -35.29502868652344, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.502370274844242, "beam_bleu_score": 0.46203520843107293}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the distinct template type codes of templates with maximum template type code?", "score": -36.53215408325195, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4852316177994248, "beam_bleu_score": 0.46203520843107293}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "", "score": -41.887481689453125, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many distinct codes of template types are there?", "score": -51.532073974609375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4500687819247592, "beam_bleu_score": 0.5640479504819448}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "", "score": -57.84907150268555, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct codes of template types with minimum code?", "score": -59.338836669921875, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44411210783849475, "beam_bleu_score": 0.48633229488429736}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct codes of template types with maximum code?", "score": -61.0771598815918, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43866527730076155, "beam_bleu_score": 0.4888987813231081}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "", "score": -65.6197509765625, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct descriptions of template types?", "score": -150.4371795654297, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5580949661046593, "beam_bleu_score": 0.48778549052865233}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many distinct descriptions of template types are there?", "score": -151.6624755859375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48838654462965325, "beam_bleu_score": 0.4873209656474947}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "How many distinct ids of templates are there?", "score": -156.24029541015625, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39238967438541184, "beam_bleu_score": 0.40483831631908457}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 322, "beams": [{"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Templates AS T1        ", "inferred_question": "What are the distinct template type codes of templates?", "score": 0.0, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9131614903123707, "beam_bleu_score": 0.6454503762183497}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct codes of template types?", "score": -19.846586227416992, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9213443044544432, "beam_bleu_score": 0.716863820233768}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "How many distinct template type codes of templates are there?", "score": -25.66266632080078, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6847758671136606, "beam_bleu_score": 0.5019207147544984}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "", "score": -31.10525131225586, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the distinct template type codes of templates with maximum template type code?", "score": -32.85508728027344, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.342101479611708, "beam_bleu_score": 0.39783640591408376}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the distinct template type codes of templates with minimum template type code?", "score": -33.464027404785156, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3718462432927119, "beam_bleu_score": 0.39783640591408376}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "", "score": -39.154300689697266, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many distinct codes of template types are there?", "score": -40.364994049072266, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6615356148267036, "beam_bleu_score": 0.5353068182656282}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "", "score": -48.24711227416992, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct codes of template types with maximum code?", "score": -49.67010498046875, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41972134033303043, "beam_bleu_score": 0.5054472142385831}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct codes of template types with minimum code?", "score": -49.960296630859375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4403229908280949, "beam_bleu_score": 0.5054472142385831}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Code) FROM Ref_Template_Types AS T1        ", "inferred_question": "", "score": -55.407928466796875, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many template types are there?", "score": -120.64892578125, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3869818806961792, "beam_bleu_score": 0.5056432712027211}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many template types are there?", "score": -124.08229064941406, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3869818806961792, "beam_bleu_score": 0.5056432712027211}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM Templates AS T1        ", "inferred_question": "How many distinct ids of templates are there?", "score": -139.646484375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4037305857487984, "beam_bleu_score": 0.429138112572266}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 327, "beams": [{"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5       ", "inferred_question": "What are the version numbers and template type codes of templates with a version number of more than 5  ?", "score": 55.484092712402344, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7771273732702592, "beam_bleu_score": 0.7479067852723408}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 24.901729583740234, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Version_Number > 5       ", "inferred_question": "What are the version numbers of templates with a version number of more than 5   with template types? Also show the codes of the template types.", "score": 19.27349853515625, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6632824181741213, "beam_bleu_score": 0.5559110972238852}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT count( *), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 18.633377075195312, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "inferred_question": "", "score": 17.34064483642578, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 16.75501251220703, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 16.467243194580078, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING max( T1.Version_Number) > 5     ", "inferred_question": "", "score": 15.961463928222656, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, count( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "inferred_question": "", "score": 15.418479919433594, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 14.722084045410156, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "inferred_question": "", "score": 11.021194458007812, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING sum( T1.Version_Number) > 5     ", "inferred_question": "", "score": 10.773788452148438, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Template_Type_Code > '5'       ", "inferred_question": "", "score": 10.16982650756836, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING avg( T1.Version_Number) > 5     ", "inferred_question": "", "score": 8.072837829589844, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING count( *) > 5     ", "inferred_question": "", "score": -7.095485687255859, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 328, "beams": [{"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5       ", "inferred_question": "What are the version numbers and template type codes of templates with a version number of more than 5  ?", "score": 68.83296203613281, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7941927970971281, "beam_bleu_score": 0.8298055198059607}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 38.32734680175781, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT count( *), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 35.84956741333008, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, count( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "inferred_question": "", "score": 33.96868133544922, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 33.62097930908203, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 32.80996322631836, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, max( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "inferred_question": "", "score": 32.32966232299805, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": 31.453575134277344, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING max( T1.Version_Number) > 5     ", "inferred_question": "", "score": 31.329654693603516, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Version_Number > 5       ", "inferred_question": "What are the version numbers of templates with a version number of more than 5   with template types? Also show the codes of the template types.", "score": 29.90966796875, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6823794457528678, "beam_bleu_score": 0.5763543348200708}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, avg( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "inferred_question": "", "score": 27.884685516357422, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING sum( T1.Version_Number) > 5     ", "inferred_question": "", "score": 27.482872009277344, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, min( T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Version_Number > 5 GROUP BY T1.Version_Number      ", "inferred_question": "", "score": 27.034408569335938, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING avg( T1.Version_Number) > 5     ", "inferred_question": "", "score": 22.612743377685547, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Version_Number, T1.Template_Type_Code HAVING count( *) > 5     ", "inferred_question": "", "score": 4.7282257080078125, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 335, "beams": [{"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -1.1920928244535389e-07, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "inferred_question": "", "score": -16.48457908630371, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), min( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and minimum template type code of templates?", "score": -32.475154876708984, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9696154477198675, "beam_bleu_score": 0.5689563718069324}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -33.22405242919922, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "inferred_question": "What are the version numbers and template type codes of templates?", "score": -33.37181091308594, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.778112156193904, "beam_bleu_score": 0.6724931785531444}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -34.01687240600586, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), avg( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and average template type code of templates?", "score": -34.9085578918457, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.686006057253228, "beam_bleu_score": 0.5689563718069324}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -35.529518127441406, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), max( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and maximum template type code of templates?", "score": -37.248783111572266, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5335847679113643, "beam_bleu_score": 0.5720236331856295}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -38.12868881225586, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), count( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and number of template type codes of templates?", "score": -43.821556091308594, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8572285792972651, "beam_bleu_score": 0.5533642783134399}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), sum( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and total template type code of templates?", "score": -44.218631744384766, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6596414209717474, "beam_bleu_score": 0.5895393688994276}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT min( T1.Version_Number), min( T2.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the minimum version number of templates with template types? Also show the minimum code of the template types.", "score": -49.56597137451172, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.664948866071083, "beam_bleu_score": 0.34968868561473704}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT max( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "inferred_question": "", "score": -49.642879486083984, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the version numbers of templates with template types? Also show the codes of the template types.", "score": -50.01832580566406, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7140771049411682, "beam_bleu_score": 0.39313566353889257}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 336, "beams": [{"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -2.3841830625315197e-06, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "inferred_question": "", "score": -12.937031745910645, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), min( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and minimum template type code of templates?", "score": -31.34494972229004, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7003371917960806, "beam_bleu_score": 0.5018606573968502}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT max( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -31.703502655029297, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT avg( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -32.597557067871094, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), max( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and maximum template type code of templates?", "score": -33.06047439575195, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43627425921005136, "beam_bleu_score": 0.4998886716907249}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), avg( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and average template type code of templates?", "score": -33.643341064453125, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5534336239186888, "beam_bleu_score": 0.5018606573968502}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1        ", "inferred_question": "What are the version numbers and template type codes of templates?", "score": -34.486289978027344, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4638961302191059, "beam_bleu_score": 0.4844076027867484}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT count( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -35.701515197753906, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT sum( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -37.466373443603516, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), sum( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and total template type code of templates?", "score": -40.31879425048828, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5526340322384242, "beam_bleu_score": 0.5065446046574867}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), count( T1.Template_Type_Code) FROM Templates AS T1        ", "inferred_question": "What are the minimum version number and number of template type codes of templates?", "score": -40.646732330322266, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5782670157578026, "beam_bleu_score": 0.5052905941053092}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), min( T2.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the minimum version number of templates with template types? Also show the minimum code of the template types.", "score": -42.24605178833008, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6878513506593736, "beam_bleu_score": 0.3733887802729034}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT max( T1.Version_Number), T2.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code      ", "inferred_question": "", "score": -44.66535186767578, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT min( T1.Version_Number), max( T2.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the minimum version number of templates with template types? Also show the maximum code of the template types.", "score": -45.20603942871094, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4371092135505562, "beam_bleu_score": 0.3720854836705563}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 337, "beams": [{"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the template type codes of templates used for documents whose name is data base?", "score": 93.23644256591797, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8668030078078859, "beam_bleu_score": 0.7072298666013586}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the codes of template types for templates used for documents whose name is data base?", "score": 67.12337493896484, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8096711738610831, "beam_bleu_score": 0.6562771907692063}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What is the average template type code of all templates used for documents whose name is data base?", "score": 56.236568450927734, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.657200466396314, "beam_bleu_score": 0.6697914644112809}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the template type codes of templates used for documents whose name is data base with maximum template type code?", "score": 56.11701583862305, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.646374137731557, "beam_bleu_score": 0.5725628871324392}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "How many template type codes of templates used for documents whose name is data base are there?", "score": 54.5825309753418, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4463786689601409, "beam_bleu_score": 0.6281047400131986}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING count( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 51.77739715576172, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What is the total template type code of all templates used for documents whose name is data base?", "score": 49.25006866455078, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6454771018928918, "beam_bleu_score": 0.6859474083152298}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the template type codes of templates used for documents whose name is data base with minimum template type code?", "score": 48.25749588012695, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6226896696967104, "beam_bleu_score": 0.5725628871324392}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING avg( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 48.016361236572266, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING max( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 40.18745422363281, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING sum( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 39.305519104003906, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING min( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 35.27056884765625, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What is the average code of all template types for templates used for documents whose name is data base?", "score": 29.275863647460938, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5764747471245057, "beam_bleu_score": 0.6205935313422538}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "How many codes of template types for templates used for documents whose name is data base are there?", "score": 29.025245666503906, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40434675627938377, "beam_bleu_score": 0.5780377790893956}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code HAVING count( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 27.672691345214844, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 338, "beams": [{"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the template type codes of templates used for documents whose name is data base?", "score": 81.8880386352539, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6850199928891669, "beam_bleu_score": 0.7028275531782967}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the codes of template types for templates used for documents whose name is data base?", "score": 56.53788757324219, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6536359367021842, "beam_bleu_score": 0.6443718991942011}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What is the average template type code of all templates used for documents whose name is data base?", "score": 48.39125442504883, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5706152148320541, "beam_bleu_score": 0.6420205267092365}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the template type codes of templates used for documents whose name is data base with maximum template type code?", "score": 47.678653717041016, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5693476579581306, "beam_bleu_score": 0.5400711013459027}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "How many template type codes of templates used for documents whose name is data base are there?", "score": 46.620079040527344, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2919571170084845, "beam_bleu_score": 0.6291970674554241}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING count( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 43.363807678222656, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What is the total template type code of all templates used for documents whose name is data base?", "score": 42.8687744140625, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5236164759077662, "beam_bleu_score": 0.6599721630789174}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING avg( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 41.95038604736328, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       ", "inferred_question": "What are the template type codes of templates used for documents whose name is data base with minimum template type code?", "score": 39.54384994506836, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.568053453193884, "beam_bleu_score": 0.5416713295515443}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING max( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 34.72013473510742, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING sum( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 34.05496597290039, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data'       ", "inferred_question": "What are the template type codes of templates used for documents whose name is data?", "score": 30.021076202392578, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6318177029649295, "beam_bleu_score": 0.6490020859398182}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID HAVING min( T2.Document_Name) = 'Data base'     ", "inferred_question": "", "score": 27.485912322998047, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code HAVING count( *) = Data base     ", "inferred_question": "", "score": 16.445693969726562, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code HAVING count( *) = Data base     ", "inferred_question": "", "score": 4.937995910644531, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 347, "beams": [{"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the codes and descriptions of template types?", "score": -8.344646857949556e-07, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7818292619375122, "beam_bleu_score": 0.6828775444665229}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the template type codes of templates with template types? Also show the descriptions of the template types.", "score": -13.954049110412598, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3642639752415202, "beam_bleu_score": 0.30445264950727197}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT max( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -35.3309440612793, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -38.581459045410156, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, max( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -39.96116638183594, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT avg( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -40.0304069519043, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT min( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -42.58939743041992, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT count( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -42.8721809387207, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, count( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -44.26716613769531, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT sum( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -45.26962661743164, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, sum( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -45.9206428527832, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT max( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "inferred_question": "", "score": -49.446929931640625, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, min( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -49.96367645263672, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, avg( T2.Template_Type_Description) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -52.821956634521484, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT T1.Template_Type_Code, max( T2.Template_Type_Description) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -53.929012298583984, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 348, "beams": [{"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the codes and descriptions of template types?", "score": 0.0, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.987637369214212, "beam_bleu_score": 0.7779804568315335}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the template type codes of templates with template types? Also show the descriptions of the template types.", "score": -19.811052322387695, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6206082219438582, "beam_bleu_score": 0.4446862074944535}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT max( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -30.858234405517578, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT avg( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -32.97631072998047, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT count( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -36.4215202331543, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT min( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -38.09794235229492, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, avg( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -38.26361083984375, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT sum( T1.Template_Type_Code), T1.Template_Type_Description FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Description      ", "inferred_question": "", "score": -40.852569580078125, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, max( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -40.86986541748047, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, count( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -44.540565490722656, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, sum( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -47.680274963378906, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT max( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "inferred_question": "", "score": -51.1217041015625, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT T1.Template_Type_Code, min( T1.Template_Type_Description) FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code      ", "inferred_question": "", "score": -51.67749786376953, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT avg( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "inferred_question": "", "score": -53.421669006347656, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT count( T1.Template_Type_Code), T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Description      ", "inferred_question": "", "score": -56.20832824707031, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 351, "beams": [{"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What are the codes of template types whose description is book?", "score": 58.51336669921875, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7478836770256729, "beam_bleu_score": 0.6122219653847234}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What are the template type codes of templates with template types whose description is book?", "score": 55.16735076904297, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8782189664882483, "beam_bleu_score": 0.5970108588019931}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "How many codes of template types whose description is book are there?", "score": 22.16423797607422, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26045034496431463, "beam_bleu_score": 0.5482022264661676}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What is the average code of all template types whose description is book?", "score": 21.962203979492188, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5905077959407152, "beam_bleu_score": 0.6089069274069534}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING count( T1.Template_Type_Description) = 'Book'     ", "inferred_question": "", "score": 20.519203186035156, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "How many template type codes of templates with template types whose description is book are there?", "score": 19.827960968017578, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4438238573316292, "beam_bleu_score": 0.5211645626620418}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What are the codes of template types whose description is book with maximum code?", "score": 19.468040466308594, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5999754754195612, "beam_bleu_score": 0.5195438464971793}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What is the average template type code of all templates with template types whose description is book?", "score": 18.840377807617188, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7706347354016658, "beam_bleu_score": 0.5570706360543761}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What are the codes of template types whose description is book with minimum code?", "score": 17.11020278930664, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6049334805246132, "beam_bleu_score": 0.5195438464971793}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What are the template type codes of templates with template types whose description is book with maximum template type code?", "score": 16.48004913330078, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5214483430280712, "beam_bleu_score": 0.445629862789412}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING avg( T1.Template_Type_Description) = 'Book'     ", "inferred_question": "", "score": 15.938095092773438, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What is the total code of all template types whose description is book?", "score": 15.666885375976562, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6528074429512265, "beam_bleu_score": 0.6236681217995426}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Book'     ", "inferred_question": "", "score": 15.216842651367188, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What are the template type codes of templates with template types whose description is book with minimum template type code?", "score": 14.150135040283203, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5197363198608225, "beam_bleu_score": 0.445629862789412}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What is the total template type code of all templates with template types whose description is book?", "score": 12.600475311279297, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7421151122285583, "beam_bleu_score": 0.5661497822027839}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 352, "beams": [{"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What are the codes of template types whose description is book?", "score": 59.12301254272461, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5080964253315707, "beam_bleu_score": 0.5647832168834166}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What are the template type codes of templates with template types whose description is book?", "score": 56.646820068359375, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5838521419841027, "beam_bleu_score": 0.550165213175896}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What is the average code of all template types whose description is book?", "score": 25.55362319946289, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3326392758675383, "beam_bleu_score": 0.5604877270174378}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "How many codes of template types whose description is book are there?", "score": 23.342510223388672, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16231598445211337, "beam_bleu_score": 0.5505262506074425}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT avg( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What is the average template type code of all templates with template types whose description is book?", "score": 23.10710906982422, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5314247359547998, "beam_bleu_score": 0.5035177917909592}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What are the codes of template types whose description is book with maximum code?", "score": 22.598217010498047, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47538510496508524, "beam_bleu_score": 0.5378218525106214}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT count( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "How many template type codes of templates with template types whose description is book are there?", "score": 21.074913024902344, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33004180665131944, "beam_bleu_score": 0.5008311937915146}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What are the codes of template types whose description is book with minimum code?", "score": 20.698684692382812, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4850540312812366, "beam_bleu_score": 0.5401252107847578}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT max( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What are the template type codes of templates with template types whose description is book with maximum template type code?", "score": 20.223957061767578, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.510032242525313, "beam_bleu_score": 0.4166180627428069}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING count( T1.Template_Type_Description) = 'Book'     ", "inferred_question": "", "score": 18.889278411865234, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT min( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What are the template type codes of templates with template types whose description is book with minimum template type code?", "score": 18.33428955078125, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5123126692087903, "beam_bleu_score": 0.4182360274101567}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Ref_Template_Types AS T1 WHERE T1.Template_Type_Description = 'Book'       ", "inferred_question": "What is the total code of all template types whose description is book?", "score": 18.181068420410156, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40825011648457155, "beam_bleu_score": 0.5739819206587622}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1  GROUP BY T1.Template_Type_Code HAVING avg( T1.Template_Type_Description) = 'Book'     ", "inferred_question": "", "score": 17.113998413085938, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT sum( T1.Template_Type_Code) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Book'       ", "inferred_question": "What is the total template type code of all templates with template types whose description is book?", "score": 15.765129089355469, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5064001756380363, "beam_bleu_score": 0.5093063222451365}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Book'     ", "inferred_question": "", "score": 15.280082702636719, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 353, "beams": [{"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "inferred_question": "What are the distinct descriptions of template types for templates used for documents?", "score": -1.2755313036905136e-05, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9735234334774275, "beam_bleu_score": 0.7765684958910057}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the distinct descriptions of template types for templates?", "score": -11.273626327514648, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6863587755000509, "beam_bleu_score": 0.6114572133291682}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T13 ON T1.Template_Type_Code = T13.Template_Type_Code JOIN Documents AS T2 ON T13.Template_ID = T2.Template_ID        ", "inferred_question": "What are the distinct descriptions of template types for templates used for documents?", "score": -18.621837615966797, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9735234334774275, "beam_bleu_score": 0.7765684958910057}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct descriptions of template types?", "score": -21.01013946533203, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6417044158156799, "beam_bleu_score": 0.42263371695077223}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the distinct descriptions of template types for templates?", "score": -24.675416946411133, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6863587755000509, "beam_bleu_score": 0.6114572133291682}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the distinct descriptions of template types for templates?", "score": -28.124204635620117, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6863587755000509, "beam_bleu_score": 0.6114572133291682}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the distinct descriptions of template types for templates?", "score": -31.584518432617188, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6863587755000509, "beam_bleu_score": 0.6114572133291682}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the distinct descriptions of template types for templates?", "score": -31.768888473510742, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6863587755000509, "beam_bleu_score": 0.6114572133291682}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        ", "inferred_question": "What are the distinct descriptions of template types for templates?", "score": -35.155513763427734, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6863587755000509, "beam_bleu_score": 0.6114572133291682}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "inferred_question": "What are the distinct descriptions of template types for templates used for documents?", "score": -35.439388275146484, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9735234334774275, "beam_bleu_score": 0.7765684958910057}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "inferred_question": "", "score": -37.3525276184082, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct descriptions of template types?", "score": -39.018436431884766, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6417044158156799, "beam_bleu_score": 0.42263371695077223}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "inferred_question": "What are the distinct descriptions of template types for templates used for documents?", "score": -40.51251983642578, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9735234334774275, "beam_bleu_score": 0.7765684958910057}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "inferred_question": "What are the distinct descriptions of template types for templates used for documents?", "score": -41.53017807006836, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9735234334774275, "beam_bleu_score": 0.7765684958910057}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID        ", "inferred_question": "How many distinct descriptions of template types for templates used for documents are there?", "score": -41.725372314453125, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8400813612917538, "beam_bleu_score": 0.753265117338105}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 354, "beams": [{"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct descriptions of template types?", "score": -0.004003130830824375, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49639113604861296, "beam_bleu_score": 0.3660451634752772}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Document_Description FROM Documents AS T1        ", "inferred_question": "What are the distinct descriptions of documents?", "score": -5.522672176361084, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3164428369914588, "beam_bleu_score": 0.333150463151855}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "", "score": -29.205678939819336, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "What are the distinct descriptions of documents with maximum description?", "score": -31.254047393798828, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2735586202152921, "beam_bleu_score": 0.42475227189818693}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "What are the distinct descriptions of documents with minimum description?", "score": -31.75772476196289, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2116333530128478, "beam_bleu_score": 0.42475227189818693}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "How many distinct descriptions of template types are there?", "score": -32.56777572631836, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3667180945003836, "beam_bleu_score": 0.36343858615270397}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "", "score": -32.654205322265625, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct descriptions of template types with maximum description?", "score": -33.45354080200195, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38984150009285357, "beam_bleu_score": 0.44425139029911387}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "What are the distinct descriptions of template types with minimum description?", "score": -34.64600372314453, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3212967088133142, "beam_bleu_score": 0.44425139029911387}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "", "score": -36.0270881652832, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Template_Type_Description) FROM Ref_Template_Types AS T1        ", "inferred_question": "", "score": -37.43427276611328, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Document_Description) FROM Documents AS T1        ", "inferred_question": "How many distinct descriptions of documents are there?", "score": -42.94265365600586, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27421383802328436, "beam_bleu_score": 0.3306964146006338}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Template_Details FROM Templates AS T1        ", "inferred_question": "What are the distinct detailses of templates?", "score": -48.745819091796875, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17729564171378265, "beam_bleu_score": 0.23548556610872873}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Other_Details FROM Documents AS T1        ", "inferred_question": "What are the distinct detailses of documents?", "score": -56.33685302734375, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08740780728942676, "beam_bleu_score": 0.22695609330850358}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT T1.Template_ID FROM Templates AS T1        ", "inferred_question": "What are the distinct ids of templates?", "score": -66.08451843261719, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19825409672138272, "beam_bleu_score": 0.1806909001716676}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 355, "beams": [{"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the ids of templates with template types whose description is presentation?", "score": 65.20024108886719, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9170837174191019, "beam_bleu_score": 0.752254225736535}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "How many ids of templates with template types whose description is presentation are there?", "score": 26.753826141357422, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7197476492815581, "beam_bleu_score": 0.6458845241261109}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 23.279884338378906, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the ids of templates with template types whose description is presentation with maximum id?", "score": 23.25201416015625, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6080126874595726, "beam_bleu_score": 0.630043372199728}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT min( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the ids of templates with template types whose description is presentation with minimum id?", "score": 20.08126449584961, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5805048587255222, "beam_bleu_score": 0.630043372199728}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What is the average id of all templates with template types whose description is presentation?", "score": 19.088214874267578, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7156250086136876, "beam_bleu_score": 0.6183552459000087}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING avg( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 17.27715301513672, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT sum( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What is the total id of all templates with template types whose description is presentation?", "score": 14.341068267822266, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.74409306295977, "beam_bleu_score": 0.6271315210240795}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING max( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 13.230899810791016, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING sum( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 10.249832153320312, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING min( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 10.033447265625, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT T1.Template_ID FROM Documents AS T1 JOIN Templates AS T13 ON T1.Template_ID = T13.Template_ID JOIN Ref_Template_Types AS T2 ON T13.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the templates of documents that use templates with template types whose description is presentation?", "score": -9.149532318115234, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6947618750352547, "beam_bleu_score": 0.5652527526350614}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": -15.542045593261719, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": -18.586807250976562, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING avg( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": -20.93048095703125, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 356, "beams": [{"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the ids of templates with template types whose description is presentation?", "score": 70.68612670898438, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6311543067049215, "beam_bleu_score": 0.5811615075574789}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT count( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "How many ids of templates with template types whose description is presentation are there?", "score": 32.78194046020508, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4219647711455585, "beam_bleu_score": 0.5335087014129181}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT max( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the ids of templates with template types whose description is presentation with maximum id?", "score": 29.139842987060547, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5057480654694646, "beam_bleu_score": 0.4953979322927909}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT min( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the ids of templates with template types whose description is presentation with minimum id?", "score": 28.678447723388672, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4985311477787443, "beam_bleu_score": 0.4996661922703318}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT avg( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What is the average id of all templates with template types whose description is presentation?", "score": 24.82518768310547, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48352483644915634, "beam_bleu_score": 0.49890388605941377}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING avg( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 24.62548828125, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING count( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 23.854385375976562, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT sum( T1.Template_ID) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What is the total id of all templates with template types whose description is presentation?", "score": 20.87713623046875, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5112485211773616, "beam_bleu_score": 0.5069693439843833}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Description = 'Presentation'       ", "inferred_question": "What are the ids of templates used for documents whose description is presentation?", "score": 18.147079467773438, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6573273577741883, "beam_bleu_score": 0.536051850374078}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING max( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 17.127601623535156, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING min( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 15.604202270507812, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code HAVING sum( T2.Template_Type_Description) = 'Presentation'     ", "inferred_question": "", "score": 15.04119873046875, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1 WHERE T1.Template_ID = Presentation       ", "inferred_question": "", "score": -5.175910949707031, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Documents AS T1 JOIN Templates AS T13 ON T1.Template_ID = T13.Template_ID JOIN Ref_Template_Types AS T2 ON T13.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       ", "inferred_question": "What are the templates of documents that use templates with template types whose description is presentation?", "score": -5.308723449707031, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4469158442417229, "beam_bleu_score": 0.42912324344801506}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT T1.Template_ID FROM Templates AS T1  GROUP BY T1.Template_ID HAVING count( *) = Presentation     ", "inferred_question": "", "score": -14.089916229248047, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 357, "beams": [{"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1        ", "inferred_question": "How many paragraphs are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.99536571811756, "beam_bleu_score": 0.6874330434749188}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What is the total text of all paragraphs?", "score": -26.38824462890625, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7293656629687768, "beam_bleu_score": 0.3894531185368381}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What are the texts of paragraphs with minimum text?", "score": -32.238502502441406, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18184484058330797, "beam_bleu_score": 0.26647168751984257}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1        ", "inferred_question": "What are the texts of paragraphs?", "score": -35.35844802856445, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21328764341234974, "beam_bleu_score": 0.3642077792766302}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What is the average text of all paragraphs?", "score": -37.5344123840332, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2730320986303185, "beam_bleu_score": 0.2941578243382457}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What are the texts of paragraphs with maximum text?", "score": -47.2153205871582, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2274651279701564, "beam_bleu_score": 0.2700090943230636}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "How many texts of paragraphs are there?", "score": -57.97925567626953, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7414175752799252, "beam_bleu_score": 0.5090937600088227}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Paragraphs AS T1        ", "inferred_question": "Show me everything about paragraphs.", "score": -83.67115020751953, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12116771014588856, "beam_bleu_score": 0.3916541813506835}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT count( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "inferred_question": "How many ids of paragraphs are there?", "score": -94.08901977539062, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5854652935313391, "beam_bleu_score": 0.5444028739655123}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT T1.Paragraph_ID FROM Paragraphs AS T1        ", "inferred_question": "What are the ids of paragraphs?", "score": -96.03105163574219, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16775763077985417, "beam_bleu_score": 0.40166504743049475}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT sum( *) FROM Paragraphs AS T1        ", "inferred_question": "", "score": -98.62655639648438, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT sum( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "inferred_question": "What is the total id of all paragraphs?", "score": -100.79022979736328, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3269143542876992, "beam_bleu_score": 0.4102419724436311}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT min( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "inferred_question": "What are the ids of paragraphs with minimum id?", "score": -108.1261978149414, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13488865195929367, "beam_bleu_score": 0.2949551833512056}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT min( *) FROM Paragraphs AS T1        ", "inferred_question": "", "score": -111.28707122802734, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT avg( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "inferred_question": "What is the average id of all paragraphs?", "score": -114.06986999511719, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1585589225937578, "beam_bleu_score": 0.3090635511214783}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 358, "beams": [{"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1        ", "inferred_question": "How many paragraphs are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.872734932206784, "beam_bleu_score": 0.45661538345323555}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What are the texts of paragraphs with minimum text?", "score": -33.147857666015625, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1296317542094383, "beam_bleu_score": 0.3525231813690007}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1        ", "inferred_question": "What are the texts of paragraphs?", "score": -33.83799743652344, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1465784525013485, "beam_bleu_score": 0.529536295181678}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What is the average text of all paragraphs?", "score": -39.82124710083008, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22063859782573203, "beam_bleu_score": 0.3839581161135605}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What is the total text of all paragraphs?", "score": -42.5721321105957, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40964491423951366, "beam_bleu_score": 0.39799806789226055}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "What are the texts of paragraphs with maximum text?", "score": -50.25198745727539, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14760631323175855, "beam_bleu_score": 0.34894380226537364}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1        ", "inferred_question": "How many texts of paragraphs are there?", "score": -57.05277633666992, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6044967403183821, "beam_bleu_score": 0.4423767989743813}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Paragraphs AS T1        ", "inferred_question": "Show me everything about paragraphs.", "score": -76.39300537109375, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11875858022046426, "beam_bleu_score": 0.40723089009410207}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT min( *) FROM Paragraphs AS T1        ", "inferred_question": "", "score": -83.50648498535156, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "inferred_question": "How many ids of paragraphs are there?", "score": -89.65621948242188, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5823978385428096, "beam_bleu_score": 0.4625785181852349}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT T1.Paragraph_ID FROM Paragraphs AS T1        ", "inferred_question": "What are the ids of paragraphs?", "score": -90.13449096679688, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15101850889638035, "beam_bleu_score": 0.5654871035255585}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT count( T1.Version_Number) FROM Templates AS T1        ", "inferred_question": "How many version numbers of templates are there?", "score": -95.45635986328125, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09604623102478949, "beam_bleu_score": 0.2522249768533851}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT min( T1.Paragraph_ID) FROM Paragraphs AS T1        ", "inferred_question": "What are the ids of paragraphs with minimum id?", "score": -99.60640716552734, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13092775028719383, "beam_bleu_score": 0.3835322032151863}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT sum( *) FROM Paragraphs AS T1        ", "inferred_question": "", "score": -105.8985595703125, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT T1.Version_Number FROM Templates AS T1        ", "inferred_question": "What are the version numbers of templates?", "score": -107.36875915527344, "correct_code": "SELECT count(*) FROM Paragraphs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08555029742297715, "beam_bleu_score": 0.3175054799813524}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 359, "beams": [{"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "How many documents whose name is summer show that contain paragraphs are there?", "score": 108.12104034423828, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6367982277409813, "beam_bleu_score": 0.5143828504248518}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "How many texts of paragraphs in documents whose name is summer show are there?", "score": 78.84562683105469, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6411212939573614, "beam_bleu_score": 0.5176346692628242}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What is the total text of all paragraphs in documents whose name is summer show?", "score": 78.2624740600586, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7374649164984994, "beam_bleu_score": 0.4288023174943769}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is summer show?", "score": 77.57620239257812, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6119481445385695, "beam_bleu_score": 0.4797515239025437}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is summer show with minimum text?", "score": 77.31874084472656, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5726480816788779, "beam_bleu_score": 0.4296969215514118}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What is the average text of all paragraphs in documents whose name is summer show?", "score": 77.05915832519531, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.68075357315369, "beam_bleu_score": 0.4201427459067099}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is summer show with maximum text?", "score": 64.46212768554688, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5933430949018067, "beam_bleu_score": 0.4353169516914643}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 61.13475799560547, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 57.877567291259766, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 53.42019271850586, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 51.78354263305664, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 51.020137786865234, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "How many documents whose name is summer show that contain paragraphs are there?", "score": 43.3036994934082, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6367982277409813, "beam_bleu_score": 0.5143828504248518}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 33.26795196533203, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 32.918846130371094, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 360, "beams": [{"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "How many documents whose name is summer show that contain paragraphs are there?", "score": 108.25013732910156, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43055612141890864, "beam_bleu_score": 0.4528900247832709}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is summer show with minimum text?", "score": 78.10798645019531, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4045412116448742, "beam_bleu_score": 0.4499556930377282}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is summer show?", "score": 76.08200073242188, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45471504192836476, "beam_bleu_score": 0.5509822127033548}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What is the total text of all paragraphs in documents whose name is summer show?", "score": 74.79017639160156, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.627237863159875, "beam_bleu_score": 0.48274701964561656}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "How many texts of paragraphs in documents whose name is summer show are there?", "score": 74.78073120117188, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.549774337891594, "beam_bleu_score": 0.504091930212193}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What is the average text of all paragraphs in documents whose name is summer show?", "score": 73.79729461669922, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5121942921228647, "beam_bleu_score": 0.4756205899492728}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 63.642940521240234, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is summer show with maximum text?", "score": 62.910701751708984, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4289925648016444, "beam_bleu_score": 0.44796908517397993}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 58.21445083618164, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 54.56366729736328, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 52.317623138427734, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 52.287391662597656, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       ", "inferred_question": "How many documents whose name is summer show that contain paragraphs are there?", "score": 45.513389587402344, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43055612141890864, "beam_bleu_score": 0.4528900247832709}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 33.86927032470703, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Summer Show'     ", "inferred_question": "", "score": 32.22413635253906, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 361, "beams": [{"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea%?", "score": 72.91624450683594, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6756119244993612, "beam_bleu_score": 0.44218540153462504}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT max( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea% with maximum details?", "score": 37.35614013671875, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6001046707122601, "beam_bleu_score": 0.3666296364678797}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT count( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "How many detailses of paragraphs whose text is %korea% are there?", "score": 36.970401763916016, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5422824877544777, "beam_bleu_score": 0.4143890857172417}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT avg( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What is the average details of all paragraphs whose text is %korea%?", "score": 34.918731689453125, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47978412908120505, "beam_bleu_score": 0.40528676977389094}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT min( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea% with minimum details?", "score": 33.53811264038086, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5418871236516447, "beam_bleu_score": 0.3666296364678797}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT sum( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What is the total details of all paragraphs whose text is %korea%?", "score": 33.4345817565918, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5311191120026575, "beam_bleu_score": 0.4015736762307876}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING count( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 31.785762786865234, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING avg( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 25.76495361328125, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T13 ON T1.Template_ID = T13.Template_ID JOIN Paragraphs AS T2 ON T13.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of templates used for documents that contain paragraphs whose text is %korea%?", "score": 24.112213134765625, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5092150009777285, "beam_bleu_score": 0.2860179032461604}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "How many paragraphs whose text is %korea% are there?", "score": 23.793224334716797, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46904317059134104, "beam_bleu_score": 0.35665306648548006}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea %'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea %?", "score": 23.11033058166504, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6473769800418285, "beam_bleu_score": 0.45047839638937814}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING sum( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 21.616870880126953, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING max( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 19.437511444091797, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING min( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 16.722225189208984, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the texts of paragraphs whose text is %korea%?", "score": 5.75592041015625, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6251642357668232, "beam_bleu_score": 0.3480409715749124}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 362, "beams": [{"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea%?", "score": 67.06619262695312, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5381463177951902, "beam_bleu_score": 0.5326320459200298}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT count( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "How many detailses of paragraphs whose text is %korea% are there?", "score": 33.9562873840332, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3418636994595048, "beam_bleu_score": 0.46752524170003557}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT max( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea% with maximum details?", "score": 33.34663772583008, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47249521160683283, "beam_bleu_score": 0.5196991428368932}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT count( *) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "How many paragraphs whose text is %korea% are there?", "score": 32.3795280456543, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1840470128212658, "beam_bleu_score": 0.34721500955047424}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT avg( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What is the average details of all paragraphs whose text is %korea%?", "score": 31.648361206054688, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28464002334847494, "beam_bleu_score": 0.5058887376420844}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT sum( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What is the total details of all paragraphs whose text is %korea%?", "score": 30.53656768798828, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3372727922625357, "beam_bleu_score": 0.5027985242085642}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT min( T1.Other_Details) FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea% with minimum details?", "score": 29.16900634765625, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42061986533455176, "beam_bleu_score": 0.5247218811167259}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea %'       ", "inferred_question": "What are the detailses of paragraphs whose text is %korea %?", "score": 28.36855125427246, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5303965757357075, "beam_bleu_score": 0.5485720460296479}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING count( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 25.573040008544922, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING avg( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 21.750816345214844, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING sum( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 19.457122802734375, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING max( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 16.22502899169922, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T13 ON T1.Template_ID = T13.Template_ID JOIN Paragraphs AS T2 ON T13.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the detailses of templates used for documents that contain paragraphs whose text is %korea%?", "score": 14.946525573730469, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40567518477471043, "beam_bleu_score": 0.48274360360488233}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Other_Details FROM Paragraphs AS T1  GROUP BY T1.Other_Details HAVING min( T1.Paragraph_Text) like '%Korea%'     ", "inferred_question": "", "score": 12.932838439941406, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 WHERE T1.Paragraph_Text like '%Korea%'       ", "inferred_question": "What are the texts of paragraphs whose text is %korea%?", "score": -3.1260757446289062, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4915179699262985, "beam_bleu_score": 0.4331832964968478}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 363, "beams": [{"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'       ", "inferred_question": "What are the ids and texts of paragraphs in documents whose name is welcome to ny?", "score": 131.79510498046875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8125476836131373, "beam_bleu_score": 0.6079386476956392}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Document_ID, T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Welcome to NY'       ", "inferred_question": "What are the ids of documents whose name is welcome to ny that contain paragraphs? Also show the texts of the paragraphs.", "score": 97.14630889892578, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8454374214127773, "beam_bleu_score": 0.387406323017488}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT max( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 91.53671264648438, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Document_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'       ", "inferred_question": "What are the documents and texts of paragraphs in documents whose name is welcome to ny?", "score": 90.9316177368164, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6993098110399405, "beam_bleu_score": 0.5499352220934298}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Welcome to NY'     ", "inferred_question": "", "score": 88.38983154296875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT count( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 88.20246887207031, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 88.04707336425781, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 87.46286010742188, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT avg( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 87.0978012084961, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT min( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 84.40830993652344, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 83.56770324707031, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT sum( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 83.4217529296875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Welcome to NY'     ", "inferred_question": "", "score": 82.17152404785156, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 81.22648620605469, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'NY'       ", "inferred_question": "What are the ids and texts of paragraphs in documents whose name is ny?", "score": 78.67884826660156, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6566694411231355, "beam_bleu_score": 0.5565174795804192}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 364, "beams": [{"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'       ", "inferred_question": "What are the ids and texts of paragraphs in documents whose name is welcome to ny?", "score": 119.23160552978516, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6947648628458181, "beam_bleu_score": 0.7480319282338447}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT max( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 82.62979125976562, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT count( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 81.46305084228516, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'NY'       ", "inferred_question": "What are the ids and texts of paragraphs in documents whose name is ny?", "score": 80.29022979736328, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5456444339487583, "beam_bleu_score": 0.6740941087624678}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT min( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 77.9974136352539, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT avg( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 77.48724365234375, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 77.3580322265625, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 76.24012756347656, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Welcome to NY'     ", "inferred_question": "", "score": 76.0224380493164, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 75.76432800292969, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT sum( T1.Paragraph_ID), T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_Text      ", "inferred_question": "", "score": 73.03126525878906, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 70.29840087890625, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' GROUP BY T1.Paragraph_ID      ", "inferred_question": "", "score": 69.62631225585938, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Welcome to NY'     ", "inferred_question": "", "score": 67.9159164428711, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Welcome to NY'     ", "inferred_question": "", "score": 64.76226806640625, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 365, "beams": [{"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer reviews?", "score": 77.21276092529297, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5861698562869777, "beam_bleu_score": 0.5345376900744929}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer reviews with maximum text?", "score": 35.65618133544922, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4778609618850065, "beam_bleu_score": 0.43404729932546054}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "How many texts of paragraphs in documents whose name is customer reviews are there?", "score": 35.50562286376953, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48142232448919, "beam_bleu_score": 0.49390198273934316}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer?", "score": 33.47441864013672, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44632558854610527, "beam_bleu_score": 0.49194919750273985}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 33.40304946899414, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer reviews with minimum text?", "score": 33.166744232177734, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47992710161617913, "beam_bleu_score": 0.43404729932546054}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What is the average text of all paragraphs in documents whose name is customer reviews?", "score": 32.84004592895508, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.535301024283199, "beam_bleu_score": 0.50180747813008}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What is the total text of all paragraphs in documents whose name is customer reviews?", "score": 32.52823257446289, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7123952688840032, "beam_bleu_score": 0.5115195471549457}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 28.6082763671875, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 23.908016204833984, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 22.90032958984375, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 22.604923248291016, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": -7.7989959716796875, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": -8.182518005371094, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer'       ", "inferred_question": "How many texts of paragraphs in documents whose name is customer are there?", "score": -8.418441772460938, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3814643030685062, "beam_bleu_score": 0.4662614315164692}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 366, "beams": [{"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer reviews?", "score": 89.36842346191406, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8324966918772538, "beam_bleu_score": 0.6894387860382942}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "How many texts of paragraphs in documents whose name is customer reviews are there?", "score": 49.69783020019531, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6649873248734028, "beam_bleu_score": 0.6021602770179534}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer reviews with maximum text?", "score": 48.76924514770508, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5643725142854008, "beam_bleu_score": 0.6160532532133483}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What is the average text of all paragraphs in documents whose name is customer reviews?", "score": 47.219383239746094, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6421057874533195, "beam_bleu_score": 0.5771867910413315}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT min( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer reviews with minimum text?", "score": 46.094661712646484, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5754819919140411, "beam_bleu_score": 0.6160532532133483}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 45.00908660888672, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT sum( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       ", "inferred_question": "What is the total text of all paragraphs in documents whose name is customer reviews?", "score": 44.4476203918457, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7634831401336353, "beam_bleu_score": 0.5888919072400723}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING avg( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 41.645511627197266, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer'       ", "inferred_question": "What are the texts of paragraphs in documents whose name is customer?", "score": 39.31670379638672, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5474242814890322, "beam_bleu_score": 0.5850230898756513}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING max( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 34.800567626953125, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING sum( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 34.7691535949707, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING min( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 33.68178939819336, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT count( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 5.6343994140625, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT max( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 4.830543518066406, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT avg( T1.Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID HAVING count( T2.Document_Name) = 'Customer reviews'     ", "inferred_question": "", "score": 3.2046279907226562, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 381, "beams": [{"orig_question": "How many teachers are there?", "inferred_code": "SELECT count( *) FROM teacher AS T1        ", "inferred_question": "How many teachers are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM teacher AS T1        ", "inferred_question": "Show me everything about teachers.", "score": -32.96710205078125, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08273173585532445, "beam_bleu_score": 0.3778197273545977}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT min( *) FROM teacher AS T1        ", "inferred_question": "", "score": -33.13970947265625, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT avg( *) FROM teacher AS T1        ", "inferred_question": "", "score": -37.614315032958984, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT sum( *) FROM teacher AS T1        ", "inferred_question": "", "score": -42.12934875488281, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT avg( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What is the average id of all teachers?", "score": -43.91702651977539, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12530734506372176, "beam_bleu_score": 0.3203505804334102}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT T1.Name FROM teacher AS T1        ", "inferred_question": "What are the names of teachers?", "score": -46.47530746459961, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21170133822866422, "beam_bleu_score": 0.5192865462882861}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1        ", "inferred_question": "What is the average name of all teachers?", "score": -46.93164825439453, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21502270081054342, "beam_bleu_score": 0.3108048231190018}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT max( *) FROM teacher AS T1        ", "inferred_question": "", "score": -47.03912353515625, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT max( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What are the ids of teachers with maximum id?", "score": -51.54105758666992, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08296856820303855, "beam_bleu_score": 0.37994652561206577}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT T1.Teacher_ID FROM teacher AS T1        ", "inferred_question": "What are the ids of teachers?", "score": -52.01848602294922, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11828065987823255, "beam_bleu_score": 0.5388222776610068}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1        ", "inferred_question": "What are the names of teachers with maximum name?", "score": -53.84516906738281, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15085616008101277, "beam_bleu_score": 0.3600959831984056}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT sum( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What is the total id of all teachers?", "score": -54.21728515625, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25487035447993733, "beam_bleu_score": 0.3292169010961852}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT min( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What are the ids of teachers with minimum id?", "score": -54.55470657348633, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.061310284416632554, "beam_bleu_score": 0.3720888251359649}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1        ", "inferred_question": "What is the total name of all teachers?", "score": -57.74817657470703, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44309658123601503, "beam_bleu_score": 0.3232764601772692}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 382, "beams": [{"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT count( *) FROM teacher AS T1        ", "inferred_question": "How many teachers are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9295702929774221, "beam_bleu_score": 0.32966657891342255}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT min( *) FROM teacher AS T1        ", "inferred_question": "", "score": -33.9725456237793, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM teacher AS T1        ", "inferred_question": "Show me everything about teachers.", "score": -35.41377258300781, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.070956286591918, "beam_bleu_score": 0.3012081554928387}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT avg( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What is the average id of all teachers?", "score": -38.418357849121094, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1406198241183383, "beam_bleu_score": 0.589258874814237}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT avg( *) FROM teacher AS T1        ", "inferred_question": "", "score": -39.39743423461914, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT sum( *) FROM teacher AS T1        ", "inferred_question": "", "score": -41.458919525146484, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1        ", "inferred_question": "What is the average name of all teachers?", "score": -42.5496940612793, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17456200122672194, "beam_bleu_score": 0.5643275049088793}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT min( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What are the ids of teachers with minimum id?", "score": -44.52393341064453, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07593791284335938, "beam_bleu_score": 0.4442091209993898}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT T1.Name FROM teacher AS T1        ", "inferred_question": "What are the names of teachers?", "score": -46.232872009277344, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23288889078548547, "beam_bleu_score": 0.5560208205814124}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT max( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What are the ids of teachers with maximum id?", "score": -47.055137634277344, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10448676766567533, "beam_bleu_score": 0.4404601856635869}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT sum( T1.Teacher_ID) FROM teacher AS T1        ", "inferred_question": "What is the total id of all teachers?", "score": -47.675010681152344, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35991429451605406, "beam_bleu_score": 0.763136845258087}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT max( *) FROM teacher AS T1        ", "inferred_question": "", "score": -49.94507598876953, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1        ", "inferred_question": "What are the names of teachers with maximum name?", "score": -50.55946731567383, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12469815220511071, "beam_bleu_score": 0.40184875696030875}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT T1.Teacher_ID FROM teacher AS T1        ", "inferred_question": "What are the ids of teachers?", "score": -51.528663635253906, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25621208496816894, "beam_bleu_score": 0.5570525344762658}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1        ", "inferred_question": "What are the names of teachers with minimum name?", "score": -51.72827911376953, "correct_code": "SELECT count(*) FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10504124306538398, "beam_bleu_score": 0.40184875696030875}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 385, "beams": [{"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, T1.Hometown FROM teacher AS T1        ", "inferred_question": "What are the ages and home towns of teachers?", "score": 0.0, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9756162326249948, "beam_bleu_score": 0.8267663329190093}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT max( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -26.557559967041016, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, avg( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -33.218631744384766, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, max( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -34.77805709838867, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT avg( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -35.03179168701172, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT min( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -41.384521484375, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT sum( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -43.974735260009766, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, min( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -45.06290817260742, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, count( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -47.74357604980469, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT T1.Age, sum( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -50.04623031616211, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT count( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -51.7147216796875, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT max( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the maximum age and average home town of teachers?", "score": -59.15549850463867, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6161183516173285, "beam_bleu_score": 0.6487908528530686}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT max( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the maximum age and maximum home town of teachers?", "score": -61.1826057434082, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8414896201536866, "beam_bleu_score": 0.6487908528530686}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT avg( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the average age and average home town of teachers?", "score": -67.78788757324219, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9623504303894874, "beam_bleu_score": 0.6632263291116544}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT avg( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the average age and maximum home town of teachers?", "score": -69.70970153808594, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5305129007187391, "beam_bleu_score": 0.6632263291116544}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 386, "beams": [{"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, T1.Hometown FROM teacher AS T1        ", "inferred_question": "What are the ages and home towns of teachers?", "score": 0.0, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8998522422093682, "beam_bleu_score": 0.6602161827191482}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT max( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -26.264339447021484, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, avg( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -32.221927642822266, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, max( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -33.386314392089844, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT avg( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -34.994686126708984, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT min( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -41.98625564575195, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT sum( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -44.315223693847656, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, min( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -44.68234634399414, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, count( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -47.540000915527344, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT T1.Age, sum( T1.Hometown) FROM teacher AS T1  GROUP BY T1.Age      ", "inferred_question": "", "score": -49.330326080322266, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT count( T1.Age), T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown      ", "inferred_question": "", "score": -51.95252227783203, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT max( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the maximum age and average home town of teachers?", "score": -58.18307113647461, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5349853186970327, "beam_bleu_score": 0.5546234159491189}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT max( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the maximum age and maximum home town of teachers?", "score": -59.799503326416016, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.710081196222117, "beam_bleu_score": 0.5358537807182747}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT avg( T1.Age), avg( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the average age and average home town of teachers?", "score": -67.0483627319336, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8833631984355346, "beam_bleu_score": 0.5684420492862461}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT avg( T1.Age), max( T1.Hometown) FROM teacher AS T1        ", "inferred_question": "What are the average age and maximum home town of teachers?", "score": -68.56135559082031, "correct_code": "SELECT Age ,  Hometown FROM teacher", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48036209099622995, "beam_bleu_score": 0.571644666414812}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 387, "beams": [{"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What are the names of teachers whose home town is not little lever urban district?", "score": 55.800498962402344, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.7057487959300309}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What are the names of teachers whose home town is not little lever urban district with maximum name?", "score": 14.303802490234375, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8906043410666442, "beam_bleu_score": 0.5961735966959061}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 13.910655975341797, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What is the average name of all teachers whose home town is not little lever urban district?", "score": 13.411758422851562, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9546049207616462, "beam_bleu_score": 0.642448495379941}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "How many names of teachers whose home town is not little lever urban district are there?", "score": 13.069271087646484, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.874059761023884, "beam_bleu_score": 0.6544324424313223}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What are the names of teachers whose home town is not little lever urban district with minimum name?", "score": 12.42996597290039, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8905825259412732, "beam_bleu_score": 0.5961735966959061}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING avg( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 9.120208740234375, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What is the total name of all teachers whose home town is not little lever urban district?", "score": 7.903953552246094, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9033182445613593, "beam_bleu_score": 0.6503233354742194}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING sum( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 6.8789825439453125, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING min( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 4.932621002197266, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING max( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 3.9690818786621094, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Name != 'Little Lever Urban District'       ", "inferred_question": "What are the names of teachers whose name is not little lever urban district?", "score": -23.165771484375, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9932023634679654, "beam_bleu_score": 0.6190016580709401}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": -25.669139862060547, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": -26.408031463623047, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": -27.102989196777344, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 388, "beams": [{"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What are the names of teachers whose home town is not little lever urban district?", "score": 58.462032318115234, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.7427404881940473}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What are the names of teachers whose home town is not little lever urban district with maximum name?", "score": 18.83232879638672, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7038484600134953, "beam_bleu_score": 0.7091081593082972}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "How many names of teachers whose home town is not little lever urban district are there?", "score": 18.655628204345703, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8526755457506132, "beam_bleu_score": 0.7052818707013503}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What is the average name of all teachers whose home town is not little lever urban district?", "score": 18.496501922607422, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8363423039454269, "beam_bleu_score": 0.6769681378169556}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 17.636611938476562, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What are the names of teachers whose home town is not little lever urban district with minimum name?", "score": 17.376895904541016, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6875153464473955, "beam_bleu_score": 0.7091081593082972}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       ", "inferred_question": "What is the total name of all teachers whose home town is not little lever urban district?", "score": 13.125968933105469, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8138435387707216, "beam_bleu_score": 0.6728365604035942}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING avg( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 11.698535919189453, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING sum( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 9.89206314086914, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING min( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 7.66839599609375, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT T1.Name FROM teacher AS T1  GROUP BY T1.Name HAVING max( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": 6.404735565185547, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": -20.171340942382812, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": -20.4158935546875, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": -20.43798828125, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1   HAVING count( T1.Hometown) != 'Little Lever Urban District'     ", "inferred_question": "", "score": -21.708038330078125, "correct_code": "select name from teacher where hometown != \"little lever urban district\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 391, "beams": [{"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age?", "score": 0.0, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5544634359587531, "beam_bleu_score": 0.4954189416504559}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT min( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age with minimum home town?", "score": -38.49695587158203, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4871740715011965, "beam_bleu_score": 0.3464343469634048}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT max( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age with maximum home town?", "score": -39.860740661621094, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35977169693538547, "beam_bleu_score": 0.3464343469634048}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT avg( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What is the average home town of all teachers with minimum age?", "score": -42.07236862182617, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4063679190055973, "beam_bleu_score": 0.48527339701770517}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -43.21018981933594, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT count( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "How many home towns of teachers with minimum age are there?", "score": -45.16407775878906, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3849736860003582, "beam_bleu_score": 0.36201931822620764}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -47.255428314208984, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -47.65386962890625, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY min( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -49.35852813720703, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT sum( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What is the total home town of all teachers with minimum age?", "score": -50.36388397216797, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33770268363288114, "beam_bleu_score": 0.4938501068464491}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -52.97686767578125, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY max( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -55.85342788696289, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Hometown ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum home town?", "score": -77.90697479248047, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22369122864655455, "beam_bleu_score": 0.4425534296530268}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT min( T1.Hometown) FROM teacher AS T1    ORDER BY count( T1.Age) ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age with minimum home town?", "score": -81.73643493652344, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4871740715011965, "beam_bleu_score": 0.3464343469634048}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT max( T1.Hometown) FROM teacher AS T1    ORDER BY count( T1.Age) ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age with maximum home town?", "score": -82.96876525878906, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35977169693538547, "beam_bleu_score": 0.3464343469634048}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 392, "beams": [{"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age?", "score": 0.0, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43107609846792294, "beam_bleu_score": 0.27734240217359435}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT min( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age with minimum home town?", "score": -39.283172607421875, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1525891956094284, "beam_bleu_score": 0.19169631407379406}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -41.953128814697266, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT avg( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What is the average home town of all teachers with minimum age?", "score": -42.86204147338867, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2713820545156035, "beam_bleu_score": 0.2728211054442666}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT max( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum age with maximum home town?", "score": -42.889949798583984, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10401297456517533, "beam_bleu_score": 0.19169631407379406}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY avg( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -44.60776901245117, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY min( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -45.42164993286133, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY sum( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -45.97471237182617, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT count( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "How many home towns of teachers with minimum age are there?", "score": -46.3775634765625, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.269059164133055, "beam_bleu_score": 0.25264977681421114}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT sum( T1.Hometown) FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What is the total home town of all teachers with minimum age?", "score": -51.5108642578125, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21207225292189968, "beam_bleu_score": 0.2740841128213025}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -52.664005279541016, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY max( T1.Age) ASC LIMIT 1    ", "inferred_question": "", "score": -54.49430847167969, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Name FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    ", "inferred_question": "What are the names of teachers with minimum age?", "score": -55.87770080566406, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21061800786850726, "beam_bleu_score": 0.3048265358654792}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Hometown ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers with minimum home town?", "score": -76.14637756347656, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06726400287110879, "beam_bleu_score": 0.2429900626240242}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT T1.Hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID    ORDER BY T2.Grade ASC LIMIT 1    ", "inferred_question": "What are the home towns of teachers who arranged courses with minimum grade?", "score": -78.84230041503906, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.03852390308370024, "beam_bleu_score": 0.20556059938559498}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 399, "beams": [{"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID        ", "inferred_question": "What are the names of teachers who arranged courses? Also show the names of the courses.", "score": 0.0, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8515371022442826, "beam_bleu_score": 0.5459974256621847}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, avg( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -30.654085159301758, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, max( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -30.731618881225586, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, min( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -31.02036476135254, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -31.915420532226562, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, sum( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -32.62420654296875, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, min( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -33.702362060546875, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -36.00068664550781, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, avg( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -36.21147918701172, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT max( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "inferred_question": "", "score": -39.1888427734375, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT avg( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "inferred_question": "", "score": -40.3159065246582, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT min( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "inferred_question": "", "score": -42.4796028137207, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT T1.Name, sum( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -43.46363067626953, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT count( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "inferred_question": "", "score": -43.56488037109375, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 400, "beams": [{"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID        ", "inferred_question": "What are the names of teachers who arranged courses? Also show the names of the courses.", "score": 0.0, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5687067574001052, "beam_bleu_score": 0.38342517027064166}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, max( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -20.050817489624023, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, avg( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -23.065988540649414, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, sum( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -24.046072006225586, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -24.607074737548828, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, min( T2.Course) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -25.508779525756836, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -31.061981201171875, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -34.925533294677734, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, min( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -36.30152130126953, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, avg( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -36.68256378173828, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, count( *) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -38.35213851928711, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, T2.Course_ID FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID        ", "inferred_question": "What are the names of teachers who arranged courses? Also show the ids of the courses.", "score": -39.566314697265625, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45987289422588307, "beam_bleu_score": 0.3949323614431556}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT T1.Name, sum( T1.Name) FROM teacher AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -41.55938720703125, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT max( T1.Name), T2.Course FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T2.Course      ", "inferred_question": "", "score": -44.185333251953125, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 403, "beams": [{"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What are the names of teachers who arranged courses whose name is math?", "score": 58.114776611328125, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3786460359781024, "beam_bleu_score": 0.4233142232356247}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "How many names of teachers who arranged courses whose name is math are there?", "score": 16.704910278320312, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27020176564153653, "beam_bleu_score": 0.38982246133578874}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What are the names of teachers who arranged courses whose name is math with maximum name?", "score": 15.806449890136719, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28453644203404393, "beam_bleu_score": 0.35073762450552154}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What is the average name of all teachers who arranged courses whose name is math?", "score": 15.692024230957031, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24145274553412865, "beam_bleu_score": 0.3664451255997569}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What are the names of teachers who arranged courses whose name is math with minimum name?", "score": 15.03841781616211, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.287618115264048, "beam_bleu_score": 0.35073762450552154}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING count( T2.Course) = 'Math'     ", "inferred_question": "", "score": 11.447078704833984, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What is the total name of all teachers who arranged courses whose name is math?", "score": 10.616405487060547, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26844907786086736, "beam_bleu_score": 0.389367412144735}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING avg( T2.Course) = 'Math'     ", "inferred_question": "", "score": 6.710857391357422, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING max( T2.Course) = 'Math'     ", "inferred_question": "", "score": 1.8468132019042969, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING min( T2.Course) = 'Math'     ", "inferred_question": "", "score": 1.1512298583984375, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING sum( T2.Course) = 'Math'     ", "inferred_question": "", "score": -2.5799942016601562, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT count( *) FROM course_arrange AS T13 JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "How many courses whose name is math arranged by teachers are there?", "score": -27.677616119384766, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17941708036928639, "beam_bleu_score": 0.4072325135013247}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY count( T1.Name) HAVING count( T2.Course) = 'Math'     ", "inferred_question": "", "score": -29.24740982055664, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY max( T1.Name) HAVING count( T2.Course) = 'Math'     ", "inferred_question": "", "score": -29.95919418334961, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY avg( T1.Name) HAVING count( T2.Course) = 'Math'     ", "inferred_question": "", "score": -30.039520263671875, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 404, "beams": [{"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What are the names of teachers who arranged courses whose name is math?", "score": 54.87024688720703, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4870793323745837, "beam_bleu_score": 0.5838124235900233}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT count( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "How many names of teachers who arranged courses whose name is math are there?", "score": 18.320823669433594, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4779579106244267, "beam_bleu_score": 0.481541940692056}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT max( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What are the names of teachers who arranged courses whose name is math with maximum name?", "score": 14.743167877197266, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.360494414890008, "beam_bleu_score": 0.487255463232015}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT min( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What are the names of teachers who arranged courses whose name is math with minimum name?", "score": 14.652923583984375, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3561634073436588, "beam_bleu_score": 0.4836324947446072}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT avg( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What is the average name of all teachers who arranged courses whose name is math?", "score": 14.273422241210938, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4998222347162463, "beam_bleu_score": 0.42765635261367474}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT sum( T1.Name) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       ", "inferred_question": "What is the total name of all teachers who arranged courses whose name is math?", "score": 11.105304718017578, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5200596308407863, "beam_bleu_score": 0.4469994341513968}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING count( T2.Course) = 'Math'     ", "inferred_question": "", "score": 7.448493957519531, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING avg( T2.Course) = 'Math'     ", "inferred_question": "", "score": 4.8360748291015625, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING max( T2.Course) = 'Math'     ", "inferred_question": "", "score": 1.2493553161621094, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING min( T2.Course) = 'Math'     ", "inferred_question": "", "score": 0.3119621276855469, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID  GROUP BY T1.Name HAVING sum( T2.Course) = 'Math'     ", "inferred_question": "", "score": -2.865001678466797, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID JOIN course AS T2 ON T13.Course_ID = T2.Course_ID WHERE T2.Course_ID = Math       ", "inferred_question": "", "score": -7.815643310546875, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Name = 'Math'       ", "inferred_question": "What are the names of teachers whose name is math?", "score": -14.004852294921875, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6025476009447939, "beam_bleu_score": 0.6216286832653136}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID  GROUP BY T1.Name HAVING count( *) = Math     ", "inferred_question": "", "score": -20.390155792236328, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT count( *) FROM course AS T1 WHERE T1.Course = 'Math'       ", "inferred_question": "How many courses whose name is math are there?", "score": -25.232357025146484, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3041179043921237, "beam_bleu_score": 0.4633987678640332}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 411, "beams": [{"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "How many visitors with a age of less than 30   are there?", "score": 43.302001953125, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7702387382255389, "beam_bleu_score": 0.5783670524688501}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT min( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "", "score": 15.630495071411133, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT * FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "Show me everything about visitors with a age of less than 30  .", "score": 9.575874328613281, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.251615690633196, "beam_bleu_score": 0.32885597515517984}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT sum( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "", "score": 8.803035736083984, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING min( T1.Age) < 30     ", "inferred_question": "", "score": 5.236682891845703, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "What is the average age of all visitors with a age of less than 30  ?", "score": -3.3712196350097656, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2810549009220652, "beam_bleu_score": 0.2828627574520533}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT T1.Name FROM museum AS T1 JOIN visit AS T13 ON T1.Museum_ID = T13.Museum_ID JOIN visitor AS T2 ON T13.visitor_ID = T2.ID WHERE T2.Age < 30       ", "inferred_question": "What are the names of museums in which visits took place by visitors with a age of less than 30  ?", "score": -3.4811134338378906, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.2496872840061481}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING count( T1.Age) < 30     ", "inferred_question": "", "score": -3.95123291015625, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT T1.Age FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "What are the ages of visitors with a age of less than 30  ?", "score": -6.362312316894531, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44074949504105565, "beam_bleu_score": 0.3847647827768881}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT avg( *) FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "", "score": -6.761695861816406, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING max( T1.Age) < 30     ", "inferred_question": "", "score": -8.60409927368164, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING sum( T1.Age) < 30     ", "inferred_question": "", "score": -8.883663177490234, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT count( *) FROM visitor AS T1   HAVING avg( T1.Age) < 30     ", "inferred_question": "", "score": -9.106224060058594, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT avg( T1.Name) FROM museum AS T1 JOIN visit AS T13 ON T1.Museum_ID = T13.Museum_ID JOIN visitor AS T2 ON T13.visitor_ID = T2.ID WHERE T2.Age < 30       ", "inferred_question": "What is the average name of all museums in which visits took place by visitors with a age of less than 30  ?", "score": -11.484443664550781, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.1972464163623929}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT max( T1.Age) FROM visitor AS T1 WHERE T1.Age < 30       ", "inferred_question": "What are the ages of visitors with a age of less than 30   with maximum age?", "score": -18.73920440673828, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15535165221524194, "beam_bleu_score": 0.3140973894377768}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 413, "beams": [{"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "inferred_question": "What is the average age of all visitors with a membership level other than 4  ?", "score": 9.028138160705566, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7206989937956862, "beam_bleu_score": 0.7549546612911936}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT min( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "inferred_question": "What are the ages of visitors with a membership level other than 4   with minimum age?", "score": -24.41284942626953, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6114476747974982, "beam_bleu_score": 0.6208529945886901}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT count( *) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "inferred_question": "How many visitors with a membership level other than 4   are there?", "score": -26.307533264160156, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4959427626796993, "beam_bleu_score": 0.500416117921639}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT sum( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "inferred_question": "What is the total age of all visitors with a membership level other than 4  ?", "score": -26.414161682128906, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6055359976346087, "beam_bleu_score": 0.6612360713558152}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT max( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "inferred_question": "What are the ages of visitors with a membership level other than 4   with maximum age?", "score": -28.259326934814453, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4693462060369016, "beam_bleu_score": 0.6188005599114567}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT count( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "inferred_question": "How many ages of visitors with a membership level other than 4   are there?", "score": -32.357017517089844, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.618042628384473, "beam_bleu_score": 0.5622870922965217}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Num_of_Ticket != 4       ", "inferred_question": "What is the average age of all visitors who made visits with a ticket number other than 4  ?", "score": -34.44220733642578, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.559932118441985, "beam_bleu_score": 0.6120729687278906}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT T1.Age FROM visitor AS T1 WHERE T1.Level_of_membership != 4       ", "inferred_question": "What are the ages of visitors with a membership level other than 4  ?", "score": -35.34009552001953, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7039209154992947, "beam_bleu_score": 0.6017220734335792}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING max( T1.Level_of_membership) != 4     ", "inferred_question": "", "score": -40.2255744934082, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING avg( T1.Level_of_membership) != 4     ", "inferred_question": "", "score": -42.342628479003906, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING min( T1.Level_of_membership) != 4     ", "inferred_question": "", "score": -43.64814758300781, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING count( T1.Level_of_membership) != 4     ", "inferred_question": "", "score": -45.21520233154297, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1   HAVING sum( T1.Level_of_membership) != 4     ", "inferred_question": "", "score": -47.02111053466797, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Name != '4'       ", "inferred_question": "What is the average age of all visitors whose name is not 4?", "score": -68.97950744628906, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6387160398291742, "beam_bleu_score": 0.5681845630636979}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT avg( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.visitor_ID != '4'       ", "inferred_question": "What is the average age of all visitors who made visits whose visitor_id is not 4?", "score": -71.27173614501953, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7160137964259428, "beam_bleu_score": 0.6321589379945143}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 415, "beams": [{"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1    ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "What are the ids and names of museums with maximum staff count?", "score": -2.3841855067985307e-07, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7553856551213984, "beam_bleu_score": 0.4986668818749023}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -15.10600471496582, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY sum( T1.Num_of_Staff) DESC LIMIT 1    ", "inferred_question": "", "score": -29.25383758544922, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY avg( T1.Num_of_Staff) DESC LIMIT 1    ", "inferred_question": "", "score": -34.215885162353516, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY max( T1.Num_of_Staff) DESC LIMIT 1    ", "inferred_question": "", "score": -35.3071174621582, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT max( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -40.167381286621094, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Name, T1.Museum_ID FROM museum AS T1    ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "What are the names and ids of museums with maximum staff count?", "score": -42.9581184387207, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7530768019604583, "beam_bleu_score": 0.4629529460715569}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT avg( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -43.0423698425293, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, avg( T1.Name) FROM museum AS T1  GROUP BY T1.Museum_ID  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -43.822547912597656, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, max( T1.Name) FROM museum AS T1  GROUP BY T1.Museum_ID  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -44.451839447021484, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT count( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -45.358158111572266, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT min( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -46.062923431396484, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY min( T1.Num_of_Staff) DESC LIMIT 1    ", "inferred_question": "", "score": -46.59247589111328, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT T1.Museum_ID, count( T1.Name) FROM museum AS T1  GROUP BY T1.Museum_ID  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -48.31221389770508, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT sum( T1.Museum_ID), T1.Name FROM museum AS T1  GROUP BY T1.Name  ORDER BY T1.Num_of_Staff DESC LIMIT 1    ", "inferred_question": "", "score": -48.39101791381836, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 416, "beams": [{"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "inferred_question": "What is the average staff count of all museums who were opened before 2009?", "score": 44.00839614868164, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8921217352436537, "beam_bleu_score": 0.61140481564317}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT min( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "inferred_question": "What are the staff counts of museums who were opened before 2009 with minimum staff count?", "score": 12.289392471313477, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6101548391054868, "beam_bleu_score": 0.5077475103730635}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT sum( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "inferred_question": "What is the total staff count of all museums who were opened before 2009?", "score": 12.280445098876953, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6865282572269583, "beam_bleu_score": 0.5247434845243373}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT count( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "inferred_question": "How many staff counts of museums who were opened before 2009 are there?", "score": 10.105724334716797, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.653459332437641, "beam_bleu_score": 0.48759590885327353}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT max( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "inferred_question": "What are the staff counts of museums who were opened before 2009 with maximum staff count?", "score": 9.619449615478516, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46249113356001914, "beam_bleu_score": 0.5034765211937956}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": 3.0711898803710938, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING count( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": 1.1948623657226562, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT T1.Num_of_Staff FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "inferred_question": "What are the staff counts of museums who were opened before 2009?", "score": -2.4472084045410156, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.715214244559777, "beam_bleu_score": 0.4992516428110047}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING max( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": -4.737354278564453, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT count( *) FROM museum AS T1 WHERE T1.Open_Year < '2009'       ", "inferred_question": "How many museums who were opened before 2009 are there?", "score": -8.865474700927734, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3137204842685426, "beam_bleu_score": 0.3605707703126579}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING sum( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": -8.98514175415039, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT avg( T1.Num_of_Staff) FROM museum AS T1   HAVING avg( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": -9.814998626708984, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT sum( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": -28.374134063720703, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT min( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": -28.499038696289062, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT max( T1.Num_of_Staff) FROM museum AS T1   HAVING min( T1.Open_Year) < '2009'     ", "inferred_question": "", "score": -31.440628051757812, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 417, "beams": [{"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum'       ", "inferred_question": "What are the opening years and staff counts of museums whose name is plaza museum?", "score": 103.05240631103516, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8908896134683246, "beam_bleu_score": 0.6650443055223882}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT avg( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "inferred_question": "", "score": 64.13233947753906, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT max( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "inferred_question": "", "score": 63.512672424316406, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING count( T1.Name) = 'Plaza Museum'     ", "inferred_question": "", "score": 62.772090911865234, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, avg( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "inferred_question": "", "score": 61.68165969848633, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING avg( T1.Name) = 'Plaza Museum'     ", "inferred_question": "", "score": 59.8510627746582, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, max( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "inferred_question": "", "score": 55.383949279785156, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, count( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "inferred_question": "", "score": 54.8261604309082, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING max( T1.Name) = 'Plaza Museum'     ", "inferred_question": "", "score": 53.0053825378418, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT sum( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "inferred_question": "", "score": 52.85441589355469, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT count( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "inferred_question": "", "score": 51.762535095214844, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, sum( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "inferred_question": "", "score": 50.462982177734375, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT min( T1.Open_Year), T1.Num_of_Staff FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Num_of_Staff      ", "inferred_question": "", "score": 50.1458625793457, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, T1.Num_of_Staff FROM museum AS T1  GROUP BY T1.Open_Year, T1.Num_of_Staff HAVING sum( T1.Name) = 'Plaza Museum'     ", "inferred_question": "", "score": 48.90812683105469, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT T1.Open_Year, min( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Name = 'Plaza Museum' GROUP BY T1.Open_Year      ", "inferred_question": "", "score": 48.36762237548828, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 423, "beams": [{"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -1.5497195136049413e-06, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1  GROUP BY T1.Name, T1.Age  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -13.382488250732422, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY sum( T2.Total_spent) DESC LIMIT 1    ", "inferred_question": "", "score": -17.273786544799805, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID    ORDER BY T2.Num_of_Ticket DESC LIMIT 1    ", "inferred_question": "What are the names and ages of visitors who made visits with maximum ticket number?", "score": -17.89458656311035, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6419912495388633, "beam_bleu_score": 0.4731137919652517}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY max( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -29.34413719177246, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY avg( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -29.81882095336914, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID    ORDER BY T2.Total_spent DESC LIMIT 1    ", "inferred_question": "What are the names and ages of visitors who made visits with maximum amount spent?", "score": -31.6595458984375, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.50947637450499, "beam_bleu_score": 0.42562467353419975}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T2.visitor_ID  ORDER BY min( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -34.87591552734375, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT max( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -39.33202362060547, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT avg( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -41.83704376220703, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, avg( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Name  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -42.43387985229492, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT T1.Name, max( T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Name  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -42.52117156982422, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT sum( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -43.17891311645508, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT count( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -44.1197509765625, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT min( T1.Name), T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.Age  ORDER BY sum( T2.Num_of_Ticket) DESC LIMIT 1    ", "inferred_question": "", "score": -44.746524810791016, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 424, "beams": [{"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the average ticket number and maximum ticket number of visits?", "score": 0.0, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8832114413058323, "beam_bleu_score": 0.7561225808727557}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT sum( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the total ticket number and maximum ticket number of visits?", "score": -27.756446838378906, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.631313708196074, "beam_bleu_score": 0.6706005122001952}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), sum( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the average ticket number and total ticket number of visits?", "score": -28.345998764038086, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6588352518014835, "beam_bleu_score": 0.6652137265119704}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT min( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the minimum ticket number and maximum ticket number of visits?", "score": -30.103412628173828, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4243613970639526, "beam_bleu_score": 0.6593221187316384}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), min( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the average ticket number and minimum ticket number of visits?", "score": -31.321269989013672, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3548726138234476, "beam_bleu_score": 0.7068957919075607}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT count( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the number of ticket numbers and maximum ticket number of visits?", "score": -35.70608901977539, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6685672254802746, "beam_bleu_score": 0.661339629662478}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), max( T1.Total_spent) FROM visit AS T1        ", "inferred_question": "What are the average ticket number and maximum amount spent of visits?", "score": -39.01466369628906, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6475838787316701, "beam_bleu_score": 0.7532867807083021}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT T1.Num_of_Ticket, max( T1.Num_of_Ticket) FROM visit AS T1  GROUP BY T1.Num_of_Ticket      ", "inferred_question": "", "score": -40.942832946777344, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), count( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the average ticket number and number of ticket numbers of visits?", "score": -50.77490234375, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6317804548681252, "beam_bleu_score": 0.661339629662478}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Num_of_Ticket), T1.Num_of_Ticket FROM visit AS T1  GROUP BY T1.Num_of_Ticket      ", "inferred_question": "", "score": -50.85498046875, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT avg( T1.Total_spent), max( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the average amount spent and maximum ticket number of visits?", "score": -53.87582015991211, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6759329722047274, "beam_bleu_score": 0.7737955257115555}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT max( T1.Num_of_Ticket), sum( T1.Num_of_Ticket) FROM visit AS T1        ", "inferred_question": "What are the maximum ticket number and total ticket number of visits?", "score": -54.718345642089844, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.62650754729047, "beam_bleu_score": 0.6573763905026122}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 425, "beams": [{"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What is the total ticket number of all visits by visitors with a membership level of 1  ?", "score": 37.79291915893555, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6533657594903659, "beam_bleu_score": 0.6295476895683608}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What is the total amount spent of all visits by visitors with a membership level of 1  ?", "score": 36.75077819824219, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.724130982593324, "beam_bleu_score": 0.5792621656217316}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT max( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What are the ticket numbers of visits by visitors with a membership level of 1   with maximum ticket number?", "score": 5.682598114013672, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6365054562258514, "beam_bleu_score": 0.44605972544136324}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT max( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What are the amount spents of visits by visitors with a membership level of 1   with maximum amount spent?", "score": 4.333553314208984, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6469843780934249, "beam_bleu_score": 0.4069622619556803}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT count( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "How many amount spents of visits by visitors with a membership level of 1   are there?", "score": 2.4628334045410156, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5867078234754697, "beam_bleu_score": 0.4513852864667268}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT T1.Num_of_Ticket FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What are the ticket numbers of visits by visitors with a membership level of 1  ?", "score": 1.9530868530273438, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6008157562807916, "beam_bleu_score": 0.5840792756360684}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT T1.Total_spent FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What are the amount spents of visits by visitors with a membership level of 1  ?", "score": 0.6475868225097656, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6756673286331178, "beam_bleu_score": 0.5339788830096385}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT avg( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What is the average ticket number of all visits by visitors with a membership level of 1  ?", "score": -0.13658523559570312, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5867783163260064, "beam_bleu_score": 0.5608191930724734}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT min( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What are the ticket numbers of visits by visitors with a membership level of 1   with minimum ticket number?", "score": -0.22201156616210938, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6013924762109937, "beam_bleu_score": 0.44450277420092504}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID HAVING count( T2.Level_of_membership) = 1     ", "inferred_question": "", "score": -0.9161567687988281, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT min( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What are the amount spents of visits by visitors with a membership level of 1   with minimum amount spent?", "score": -1.2332954406738281, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6008106203166883, "beam_bleu_score": 0.4055216649727956}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT avg( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "What is the average amount spent of all visits by visitors with a membership level of 1  ?", "score": -1.6593017578125, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6540789456433502, "beam_bleu_score": 0.517929431478484}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID HAVING count( T2.Level_of_membership) = 1     ", "inferred_question": "", "score": -2.7147750854492188, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT count( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       ", "inferred_question": "How many ticket numbers of visits by visitors with a membership level of 1   are there?", "score": -3.338123321533203, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4173300792311976, "beam_bleu_score": 0.49773983760961055}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT sum( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID HAVING avg( T2.Level_of_membership) = 1     ", "inferred_question": "", "score": -14.161746978759766, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 429, "beams": [{"orig_question": "Find the total number of players.", "inferred_code": "SELECT count( *) FROM players AS T1        ", "inferred_question": "How many players are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9057920405076808, "beam_bleu_score": 0.3353661883657586}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT count( *) FROM players AS T1        ", "inferred_question": "How many players are there?", "score": -26.907852172851562, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9057920405076808, "beam_bleu_score": 0.3353661883657586}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with minimum match number?", "score": -33.15373992919922, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15898130966518353, "beam_bleu_score": 0.22018183572971195}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT T1.player_id FROM players AS T1        ", "inferred_question": "What are the ids of players?", "score": -35.007911682128906, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15097321568252775, "beam_bleu_score": 0.4518959321167146}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT min( T1.player_id) FROM players AS T1        ", "inferred_question": "What are the ids of players with minimum id?", "score": -37.943485260009766, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09951053644484897, "beam_bleu_score": 0.3623416060608696}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs?", "score": -38.34369659423828, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14758830555108982, "beam_bleu_score": 0.36142733285521994}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players AS T1        ", "inferred_question": "Show me everything about players.", "score": -40.33640670776367, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08838315404281438, "beam_bleu_score": 0.3398711135343772}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the total match number of all matchs?", "score": -40.9356689453125, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33944932694341523, "beam_bleu_score": 0.447965830905168}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the average match number of all matchs?", "score": -41.19169235229492, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1616494814049083, "beam_bleu_score": 0.33363427390316824}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT min( *) FROM players AS T1        ", "inferred_question": "", "score": -41.36275100708008, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT sum( T1.player_id) FROM players AS T1        ", "inferred_question": "What is the total id of all players?", "score": -48.950035095214844, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39510689161123924, "beam_bleu_score": 0.539710693336502}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with maximum match number?", "score": -49.225433349609375, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2117908426232732, "beam_bleu_score": 0.21665778925816742}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT avg( T1.player_id) FROM players AS T1        ", "inferred_question": "What is the average id of all players?", "score": -50.50149917602539, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12304683427079355, "beam_bleu_score": 0.38273892989940506}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "inferred_question": "What are the scores of matchs?", "score": -57.04169464111328, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05386789774696832, "beam_bleu_score": 0.22788080751281187}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT sum( *) FROM players AS T1        ", "inferred_question": "", "score": -57.55506134033203, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 430, "beams": [{"orig_question": "How many players are there?", "inferred_code": "SELECT count( *) FROM players AS T1        ", "inferred_question": "How many players are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many players are there?", "inferred_code": "SELECT count( *) FROM players AS T1        ", "inferred_question": "How many players are there?", "score": -24.667869567871094, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many players are there?", "inferred_code": "SELECT T1.player_id FROM players AS T1        ", "inferred_question": "What are the ids of players?", "score": -32.37055969238281, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11682957371358771, "beam_bleu_score": 0.5202556880807584}, {"orig_question": "How many players are there?", "inferred_code": "SELECT min( *) FROM players AS T1        ", "inferred_question": "", "score": -34.476898193359375, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many players are there?", "inferred_code": "SELECT min( T1.player_id) FROM players AS T1        ", "inferred_question": "What are the ids of players with minimum id?", "score": -34.670440673828125, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0790749143220073, "beam_bleu_score": 0.3564982433809235}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players AS T1        ", "inferred_question": "Show me everything about players.", "score": -36.72787094116211, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08373016998146132, "beam_bleu_score": 0.3541910318202236}, {"orig_question": "How many players are there?", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with minimum match number?", "score": -38.07398223876953, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07349701741260439, "beam_bleu_score": 0.18129532997327358}, {"orig_question": "How many players are there?", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the average match number of all matchs?", "score": -40.40400314331055, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0970468756351881, "beam_bleu_score": 0.11014249684948306}, {"orig_question": "How many players are there?", "inferred_code": "SELECT avg( T1.player_id) FROM players AS T1        ", "inferred_question": "What is the average id of all players?", "score": -41.356842041015625, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10848426564053504, "beam_bleu_score": 0.2987501799129883}, {"orig_question": "How many players are there?", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the total match number of all matchs?", "score": -42.272132873535156, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15806579438359758, "beam_bleu_score": 0.11602404900806981}, {"orig_question": "How many players are there?", "inferred_code": "SELECT sum( T1.player_id) FROM players AS T1        ", "inferred_question": "What is the total id of all players?", "score": -42.312767028808594, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23033315689876965, "beam_bleu_score": 0.3074762344614454}, {"orig_question": "How many players are there?", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs?", "score": -43.62473678588867, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09840570796571557, "beam_bleu_score": 0.2968720798840056}, {"orig_question": "How many players are there?", "inferred_code": "SELECT sum( *) FROM players AS T1        ", "inferred_question": "", "score": -48.20304870605469, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many players are there?", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with maximum match number?", "score": -49.71989822387695, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08784558948976673, "beam_bleu_score": 0.18129532997327358}, {"orig_question": "How many players are there?", "inferred_code": "SELECT max( T1.player_id) FROM players AS T1        ", "inferred_question": "What are the ids of players with maximum id?", "score": -51.4974479675293, "correct_code": "SELECT count(*) FROM players", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08974344322039762, "beam_bleu_score": 0.36463597249757107}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 431, "beams": [{"orig_question": "Find the total number of matches.", "inferred_code": "SELECT count( *) FROM matches AS T1        ", "inferred_question": "How many matchs are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7533525596320494, "beam_bleu_score": 0.270027789193344}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT min( *) FROM matches AS T1        ", "inferred_question": "", "score": -34.169960021972656, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs?", "score": -35.795562744140625, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.589047195484316, "beam_bleu_score": 0.4879484849564168}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with minimum match number?", "score": -36.13770294189453, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3088694532795707, "beam_bleu_score": 0.2907367183978512}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM matches AS T1        ", "inferred_question": "Show me everything about matchs.", "score": -41.51565170288086, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0836359630354041, "beam_bleu_score": 0.2376617084459085}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the total match number of all matchs?", "score": -44.11960983276367, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7981351673203108, "beam_bleu_score": 0.5348387269279254}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the average match number of all matchs?", "score": -44.17388916015625, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2996089194670717, "beam_bleu_score": 0.4111307356041691}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with maximum match number?", "score": -51.46516036987305, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.338362739008949, "beam_bleu_score": 0.2868333268983513}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT sum( *) FROM matches AS T1        ", "inferred_question": "", "score": -62.567291259765625, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "inferred_question": "What are the scores of matchs?", "score": -70.6814193725586, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1700830039070783, "beam_bleu_score": 0.40019574437585803}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.round FROM matches AS T1        ", "inferred_question": "What are the rounds of matchs?", "score": -73.85015869140625, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13502427489478508, "beam_bleu_score": 0.4089965139255314}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT avg( *) FROM matches AS T1        ", "inferred_question": "", "score": -73.91743469238281, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.surface FROM matches AS T1        ", "inferred_question": "What are the surfaces of matchs?", "score": -78.03726196289062, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07064182031861144, "beam_bleu_score": 0.40052787139023815}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.ranking FROM rankings AS T1        ", "inferred_question": "What are the rankings of rankings?", "score": -79.44227600097656, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.049093592948974085, "beam_bleu_score": 0.23227909232888339}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T1.best_of FROM matches AS T1        ", "inferred_question": "What are the best ofs of matchs?", "score": -80.35730743408203, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0880853745591832, "beam_bleu_score": 0.41699039704272384}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 432, "beams": [{"orig_question": "Count the number of matches.", "inferred_code": "SELECT count( *) FROM matches AS T1        ", "inferred_question": "How many matchs are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.719777837443456, "beam_bleu_score": 0.3109000803147345}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs?", "score": -34.35675811767578, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5579384393304243, "beam_bleu_score": 0.47198227465204823}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( *) FROM matches AS T1        ", "inferred_question": "", "score": -35.4749755859375, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM matches AS T1        ", "inferred_question": "Show me everything about matchs.", "score": -36.31098556518555, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07912967828040396, "beam_bleu_score": 0.2461436078821099}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the average match number of all matchs?", "score": -46.34912109375, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.314820430543048, "beam_bleu_score": 0.38665628301737853}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the total match number of all matchs?", "score": -50.195037841796875, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5193509880053068, "beam_bleu_score": 0.40444508086550035}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( *) FROM matches AS T1        ", "inferred_question": "", "score": -50.792720794677734, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with maximum match number?", "score": -53.01950454711914, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23538518588195456, "beam_bleu_score": 0.2780918092456105}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( *) FROM matches AS T1        ", "inferred_question": "", "score": -62.322105407714844, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with minimum match number?", "score": -64.62737274169922, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20837403717414293, "beam_bleu_score": 0.2780918092456105}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "inferred_question": "What are the scores of matchs?", "score": -69.43135070800781, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17946253462382455, "beam_bleu_score": 0.4295876054847123}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.round FROM matches AS T1        ", "inferred_question": "What are the rounds of matchs?", "score": -71.59492492675781, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15033524876245496, "beam_bleu_score": 0.45309372174398227}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( *) FROM matches AS T1        ", "inferred_question": "", "score": -72.12861633300781, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.surface FROM matches AS T1        ", "inferred_question": "What are the surfaces of matchs?", "score": -76.53256225585938, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1018567444133116, "beam_bleu_score": 0.40137865505775083}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.ranking FROM rankings AS T1        ", "inferred_question": "What are the rankings of rankings?", "score": -77.32627868652344, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0611769120931992, "beam_bleu_score": 0.2130931749764531}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 432, "beams": [{"orig_question": "Count the number of matches.", "inferred_code": "SELECT count( *) FROM matches AS T1        ", "inferred_question": "How many matchs are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.719777837443456, "beam_bleu_score": 0.3109000803147345}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.match_num FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs?", "score": -34.35675811767578, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5579384393304243, "beam_bleu_score": 0.47198227465204823}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( *) FROM matches AS T1        ", "inferred_question": "", "score": -35.4749755859375, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM matches AS T1        ", "inferred_question": "Show me everything about matchs.", "score": -36.31098556518555, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07912967828040396, "beam_bleu_score": 0.2461436078821099}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the average match number of all matchs?", "score": -46.34912109375, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.314820430543048, "beam_bleu_score": 0.38665628301737853}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( T1.match_num) FROM matches AS T1        ", "inferred_question": "What is the total match number of all matchs?", "score": -50.195037841796875, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5193509880053068, "beam_bleu_score": 0.40444508086550035}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT sum( *) FROM matches AS T1        ", "inferred_question": "", "score": -50.792720794677734, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with maximum match number?", "score": -53.01950454711914, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23538518588195456, "beam_bleu_score": 0.2780918092456105}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT avg( *) FROM matches AS T1        ", "inferred_question": "", "score": -62.322105407714844, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT min( T1.match_num) FROM matches AS T1        ", "inferred_question": "What are the match numbers of matchs with minimum match number?", "score": -64.62737274169922, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20837403717414293, "beam_bleu_score": 0.2780918092456105}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.score FROM matches AS T1        ", "inferred_question": "What are the scores of matchs?", "score": -69.43135070800781, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17946253462382455, "beam_bleu_score": 0.4295876054847123}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.round FROM matches AS T1        ", "inferred_question": "What are the rounds of matchs?", "score": -71.59492492675781, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15033524876245496, "beam_bleu_score": 0.45309372174398227}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT max( *) FROM matches AS T1        ", "inferred_question": "", "score": -72.12861633300781, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.surface FROM matches AS T1        ", "inferred_question": "What are the surfaces of matchs?", "score": -76.53256225585938, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1018567444133116, "beam_bleu_score": 0.40137865505775083}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T1.ranking FROM rankings AS T1        ", "inferred_question": "What are the rankings of rankings?", "score": -77.32627868652344, "correct_code": "SELECT count(*) FROM matches", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0611769120931992, "beam_bleu_score": 0.2130931749764531}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 491, "beams": [{"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "inferred_question": "How many ships whose disposition is captured are there?", "score": 67.27783966064453, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5239706418180259, "beam_bleu_score": 0.40053713673855545}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.result = 'Captured'       ", "inferred_question": "How many battles whose result is captured where ships were lost are there?", "score": 58.916412353515625, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30314716355539817, "beam_bleu_score": 0.2831111303460164}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE T1.name = 'Captured'       ", "inferred_question": "How many ships whose name is captured are there?", "score": 40.64748764038086, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6206056332375693, "beam_bleu_score": 0.45371828606489}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.name FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "inferred_question": "What are the names of ships whose disposition is captured?", "score": 33.86098098754883, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29750755573861454, "beam_bleu_score": 0.23251171541316135}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT min( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "inferred_question": "", "score": 32.312782287597656, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE T1.ship_type = 'Captured'       ", "inferred_question": "How many ships whose type is captured are there?", "score": 30.510868072509766, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5816016252178813, "beam_bleu_score": 0.45371828606489}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT avg( T1.name) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "inferred_question": "What is the average name of all ships whose disposition is captured?", "score": 28.23150634765625, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3274957695606232, "beam_bleu_score": 0.19911090711722287}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.disposition_of_ship FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "inferred_question": "What are the dispositions of ships whose disposition is captured?", "score": 28.227855682373047, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27119675248287023, "beam_bleu_score": 0.20687206010259407}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT sum( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "inferred_question": "", "score": 28.133655548095703, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.name = 'Captured'       ", "inferred_question": "How many battles whose name is captured where ships were lost are there?", "score": 27.868267059326172, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26852600667936344, "beam_bleu_score": 0.2911446446187946}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT min( *) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.result = 'Captured'       ", "inferred_question": "", "score": 23.692306518554688, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.result FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.disposition_of_ship = 'Captured'       ", "inferred_question": "What are the results of battles where ships whose disposition is captured were lost?", "score": 22.798500061035156, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15006260877076272, "beam_bleu_score": 0.16946461839229265}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.id FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       ", "inferred_question": "What are the ids of ships whose disposition is captured?", "score": 19.55147933959961, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2646413547117056, "beam_bleu_score": 0.23907988345715653}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT T1.name FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T2.result = 'Captured'       ", "inferred_question": "What are the names of ships that were lost in battles whose result is captured?", "score": 18.70301055908203, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22266106000346597, "beam_bleu_score": 0.17615234387882117}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT count( *) FROM ship AS T1 WHERE * = Captured       ", "inferred_question": "", "score": 16.495819091796875, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 493, "beams": [{"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, T1.result FROM battle AS T1        ", "inferred_question": "What are the names, dates, and results of battles?", "score": 0.0, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7884340111385255, "beam_bleu_score": 0.6258962768936461}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, max( T1.date), T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -34.96769332885742, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, max( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "inferred_question": "", "score": -36.55751037597656, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, avg( T1.date), T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -37.618350982666016, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT max( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -38.47445297241211, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, count( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "inferred_question": "", "score": -38.83690643310547, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, min( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "inferred_question": "", "score": -38.984947204589844, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, avg( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "inferred_question": "", "score": -40.9017333984375, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, sum( T1.result) FROM battle AS T1  GROUP BY T1.date      ", "inferred_question": "", "score": -41.376182556152344, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT min( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -42.75630569458008, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT avg( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -42.86758041381836, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, T1.date, count( *) FROM battle AS T1  GROUP BY T1.date      ", "inferred_question": "", "score": -43.620269775390625, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT T1.name, count( T1.date), T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -44.37888717651367, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT sum( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -46.08671569824219, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT count( T1.name), T1.date, T1.result FROM battle AS T1  GROUP BY T1.result      ", "inferred_question": "", "score": -46.10417175292969, "correct_code": "SELECT name ,  date FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 494, "beams": [{"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T1.killed FROM death AS T1  GROUP BY T1.killed      ", "inferred_question": "", "score": -0.1752028614282608, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "inferred_question": "", "score": -1.8888630867004395, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "inferred_question": "", "score": -5.281975269317627, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T1.id FROM death AS T1  GROUP BY T1.id      ", "inferred_question": "", "score": -5.433548450469971, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T1.injured FROM death AS T1  GROUP BY T1.injured      ", "inferred_question": "", "score": -13.746649742126465, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), sum( T1.killed) FROM death AS T1        ", "inferred_question": "What are the maximum number of killed, minimum number of killed, and total number of killed of casualty counts?", "score": -24.28136444091797, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5980301701646403, "beam_bleu_score": 0.2630455002250053}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), count( *) FROM death AS T1        ", "inferred_question": "", "score": -24.467967987060547, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.lost_in_battle FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T2.lost_in_battle      ", "inferred_question": "", "score": -27.752145767211914, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.result FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.result      ", "inferred_question": "", "score": -28.555803298950195, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), avg( T1.killed) FROM death AS T1        ", "inferred_question": "What are the maximum number of killed, minimum number of killed, and average number of killed of casualty counts?", "score": -29.464725494384766, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5402008472672302, "beam_bleu_score": 0.24963974436057695}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT sum( T1.killed), min( T1.killed), T1.killed FROM death AS T1  GROUP BY T1.killed      ", "inferred_question": "", "score": -30.687341690063477, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT sum( T1.killed), min( T1.killed), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "inferred_question": "", "score": -31.828208923339844, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT max( T1.killed), min( T1.killed), T2.ship_type FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T2.ship_type      ", "inferred_question": "", "score": -34.32011413574219, "correct_code": "SELECT max(killed) ,  min(killed) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 495, "beams": [{"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "inferred_question": "", "score": -1.8358125089434907e-05, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "inferred_question": "", "score": -11.196499824523926, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT count( *), T1.name FROM battle AS T1  GROUP BY T1.name      ", "inferred_question": "", "score": -12.58031940460205, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT sum( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "inferred_question": "", "score": -13.66067123413086, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT min( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "inferred_question": "", "score": -18.138221740722656, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT T1.injured, T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "inferred_question": "What are the numbers of injured of casualty counts caused by ships that were lost in battles? Also show the names of the battles.", "score": -20.069921493530273, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.264074550810364}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T2.name      ", "inferred_question": "", "score": -21.41771125793457, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT max( T1.injured), T2.name FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.name      ", "inferred_question": "", "score": -21.494808197021484, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT count( *), T1.id FROM battle AS T1  GROUP BY T1.id      ", "inferred_question": "", "score": -22.10940933227539, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT count( *), avg( T1.injured) FROM death AS T1        ", "inferred_question": "What are the number of entries of casualty counts? Also show the average number of injured of the casualty counts.", "score": -23.336963653564453, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2926948907907162, "beam_bleu_score": 0.34169022816900274}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT sum( T1.injured), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "inferred_question": "", "score": -24.77677345275879, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), avg( T2.name) FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "inferred_question": "What are the average number of injured of casualty counts caused by ships that were lost in battles? Also show the average name of the battles.", "score": -25.929473876953125, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.034884441402229016, "beam_bleu_score": 0.29718479617177224}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), min( T2.name) FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "inferred_question": "What are the average number of injured of casualty counts caused by ships that were lost in battles? Also show the minimum name of the battles.", "score": -28.013792037963867, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.02381466996832171, "beam_bleu_score": 0.3002084284682597}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT avg( T1.injured), sum( T2.name) FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id        ", "inferred_question": "What are the average number of injured of casualty counts caused by ships that were lost in battles? Also show the total name of the battles.", "score": -29.083580017089844, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.050819200087067196, "beam_bleu_score": 0.30144578187016874}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT min( T1.injured), T2.id FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id  GROUP BY T2.id      ", "inferred_question": "", "score": -29.198034286499023, "correct_code": "SELECT avg(injured) FROM death", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 496, "beams": [{"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'       ", "inferred_question": "What are the numbers of killed and numbers of injured of casualty counts caused by ships whose tonnage is t?", "score": 25.12889289855957, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.84963175584014, "beam_bleu_score": 0.42558789287368765}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, max( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "inferred_question": "", "score": -1.0421504974365234, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT max( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "inferred_question": "", "score": -1.5414714813232422, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, avg( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "inferred_question": "", "score": -9.610963821411133, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT avg( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "inferred_question": "", "score": -12.965028762817383, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, sum( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "inferred_question": "", "score": -13.501861572265625, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, min( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "inferred_question": "", "score": -14.171783447265625, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT sum( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "inferred_question": "", "score": -14.406139373779297, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT min( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "inferred_question": "", "score": -15.273674011230469, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, count( T1.injured) FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.killed      ", "inferred_question": "", "score": -15.909927368164062, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING count( T2.tonnage) = 't'     ", "inferred_question": "", "score": -18.749286651611328, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT count( T1.killed), T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't' GROUP BY T1.injured      ", "inferred_question": "", "score": -18.87899398803711, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING avg( T2.tonnage) = 't'     ", "inferred_question": "", "score": -22.879844665527344, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING max( T2.tonnage) = 't'     ", "inferred_question": "", "score": -23.76781463623047, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id  GROUP BY T1.caused_by_ship_id HAVING sum( T2.tonnage) = 't'     ", "inferred_question": "", "score": -26.311450958251953, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 497, "beams": [{"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril'       ", "inferred_question": "What are the names and results of battles whose bulgarian commander is not boril?", "score": 41.3860969543457, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9042000626242837, "beam_bleu_score": 0.796704643434701}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT max( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "inferred_question": "", "score": 1.7110481262207031, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT avg( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "inferred_question": "", "score": -0.005706787109375, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, avg( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "inferred_question": "", "score": -0.13628768920898438, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING count( T1.bulgarian_commander) != 'Boril'     ", "inferred_question": "", "score": -0.8336715698242188, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, max( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "inferred_question": "", "score": -3.3495101928710938, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING avg( T1.bulgarian_commander) != 'Boril'     ", "inferred_question": "", "score": -3.8465499877929688, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT count( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "inferred_question": "", "score": -4.409709930419922, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT min( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "inferred_question": "", "score": -6.12640380859375, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, count( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "inferred_question": "", "score": -6.883689880371094, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT sum( T1.name), T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.result      ", "inferred_question": "", "score": -7.369865417480469, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING max( T1.bulgarian_commander) != 'Boril'     ", "inferred_question": "", "score": -8.093891143798828, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, T1.result FROM battle AS T1  GROUP BY T1.name, T1.result HAVING sum( T1.bulgarian_commander) != 'Boril'     ", "inferred_question": "", "score": -9.448955535888672, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, sum( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "inferred_question": "", "score": -10.906997680664062, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT T1.name, min( T1.result) FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril' GROUP BY T1.name      ", "inferred_question": "", "score": -11.211891174316406, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 498, "beams": [{"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'       ", "inferred_question": "What are the ids and names of battles where ships whose type is brig were lost?", "score": 60.43635559082031, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8401063642441571, "beam_bleu_score": 0.6192574486042234}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "inferred_question": "", "score": 27.752403259277344, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, avg(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "inferred_question": "", "score": 26.086292266845703, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "inferred_question": "", "score": 26.056594848632812, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "inferred_question": "", "score": 25.425430297851562, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.lost_in_battle = Brig       ", "inferred_question": "", "score": 22.796485900878906, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle  GROUP BY T2.lost_in_battle HAVING count( T2.ship_type) = 'Brig'     ", "inferred_question": "", "score": 22.491050720214844, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "inferred_question": "", "score": 21.814197540283203, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, count(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "inferred_question": "", "score": 21.445331573486328, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, min(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "inferred_question": "", "score": 19.57390594482422, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, max(DISTINCT T1.name) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.id      ", "inferred_question": "", "score": 18.835681915283203, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.id), T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig' GROUP BY T1.name      ", "inferred_question": "", "score": 16.943340301513672, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle  GROUP BY T2.lost_in_battle HAVING min( T2.ship_type) = 'Brig'     ", "inferred_question": "", "score": 14.971366882324219, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle  GROUP BY T2.lost_in_battle HAVING avg( T2.ship_type) = 'Brig'     ", "inferred_question": "", "score": 14.221176147460938, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT T1.id, T1.name FROM battle AS T1 WHERE T1.name = 'Brig'       ", "inferred_question": "What are the ids and names of battles whose name is brig?", "score": 2.3656997680664062, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46779582305088463, "beam_bleu_score": 0.4367427696227516}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 501, "beams": [{"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "inferred_question": "What are the distinct names of battles whose latin commander is baldwin i and whose bulgarian commander is kaloyan?", "score": 119.82008361816406, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7996501059854331, "beam_bleu_score": 0.7398340894118003}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin'       ", "inferred_question": "What are the distinct names of battles whose latin commander is baldwin and whose bulgarian commander is kaloyan?", "score": 101.4808349609375, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7559665132140287, "beam_bleu_score": 0.7398939350651361}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Kaloyan' and T1.bulgarian_commander = 'Baldwin I'       ", "inferred_question": "What are the distinct names of battles whose bulgarian commander is baldwin i and whose latin commander is kaloyan?", "score": 85.11705017089844, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7916463472383836, "beam_bleu_score": 0.7398340894118003}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "inferred_question": "", "score": 82.258056640625, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' GROUP BY T1.name HAVING count( T1.latin_commander) = 'Baldwin I'     ", "inferred_question": "", "score": 80.72188568115234, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Kaloyan'       ", "inferred_question": "What are the distinct names of battles whose latin commander is kaloyan and whose bulgarian commander is kaloyan?", "score": 80.1563949584961, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6026018933822055, "beam_bleu_score": 0.7034494160584802}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "inferred_question": "How many distinct names of battles whose latin commander is baldwin i and whose bulgarian commander is kaloyan are there?", "score": 80.07581329345703, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7141323767170562, "beam_bleu_score": 0.6653067234918865}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING count( T1.bulgarian_commander) = 'Kaloyan'     ", "inferred_question": "", "score": 79.63674926757812, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "inferred_question": "What are the distinct names of battles whose latin commander is baldwin i and whose bulgarian commander is kaloyan with minimum name?", "score": 78.38487243652344, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5884986107065255, "beam_bleu_score": 0.6483789408300694}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING avg( T1.bulgarian_commander) = 'Kaloyan'     ", "inferred_question": "", "score": 77.36000061035156, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' GROUP BY T1.name HAVING avg( T1.latin_commander) = 'Baldwin I'     ", "inferred_question": "", "score": 76.44508361816406, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.name) FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       ", "inferred_question": "What are the distinct names of battles whose latin commander is baldwin i and whose bulgarian commander is kaloyan with maximum name?", "score": 76.30593872070312, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6108365641156831, "beam_bleu_score": 0.6483789408300694}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING max( T1.bulgarian_commander) = 'Kaloyan'     ", "inferred_question": "", "score": 74.04103088378906, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.bulgarian_commander = 'Baldwin I'       ", "inferred_question": "What are the distinct names of battles whose bulgarian commander is baldwin i and whose bulgarian commander is kaloyan?", "score": 72.11367797851562, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7546247303019868, "beam_bleu_score": 0.6839476135623719}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.latin_commander = 'Baldwin I' GROUP BY T1.name HAVING min( T1.bulgarian_commander) = 'Kaloyan'     ", "inferred_question": "", "score": 70.47594451904297, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 502, "beams": [{"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.result) FROM battle AS T1        ", "inferred_question": "How many distinct results of battles are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9658909897484963, "beam_bleu_score": 0.663185640095891}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT T1.result FROM battle AS T1        ", "inferred_question": "What are the distinct results of battles?", "score": -36.12775802612305, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6035803067374996, "beam_bleu_score": 0.4825066824755082}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.result) FROM battle AS T1        ", "inferred_question": "What are the distinct results of battles with minimum result?", "score": -37.5106201171875, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2693997557977733, "beam_bleu_score": 0.4456050840535454}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.result) FROM battle AS T1        ", "inferred_question": "", "score": -45.15676498413086, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.result) FROM battle AS T1        ", "inferred_question": "", "score": -47.35490798950195, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.result) FROM battle AS T1        ", "inferred_question": "What are the distinct results of battles with maximum result?", "score": -54.12778091430664, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3968931523420859, "beam_bleu_score": 0.4517544600325919}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.id) FROM battle AS T1        ", "inferred_question": "How many distinct ids of battles are there?", "score": -99.34323120117188, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35538046016302993, "beam_bleu_score": 0.5203243836744655}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM battle AS T1        ", "inferred_question": "How many distinct names of battles are there?", "score": -115.19902038574219, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24573615095903145, "beam_bleu_score": 0.5323147367443636}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.lost_in_battle) FROM ship AS T1        ", "inferred_question": "How many distinct lost_in_battles of ships are there?", "score": -116.6231918334961, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17958718294401255, "beam_bleu_score": 0.5219607820320076}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM battle AS T1        ", "inferred_question": "How many battles are there?", "score": -136.92388916015625, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49868009617968023, "beam_bleu_score": 0.3453730309586452}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.id) FROM battle AS T1        ", "inferred_question": "What are the distinct ids of battles with minimum id?", "score": -146.54946899414062, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09480329135544674, "beam_bleu_score": 0.36364368882753717}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT T1.id FROM battle AS T1        ", "inferred_question": "What are the distinct ids of battles?", "score": -149.03273010253906, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17466143497724662, "beam_bleu_score": 0.3369359133136054}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT T1.lost_in_battle FROM ship AS T1        ", "inferred_question": "What are the distinct lost_in_battles of ships?", "score": -155.3922576904297, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09965837157396007, "beam_bleu_score": 0.33179449849092374}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.lost_in_battle) FROM ship AS T1        ", "inferred_question": "What are the distinct lost_in_battles of ships with minimum lost_in_battle?", "score": -155.806396484375, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13566300136825227, "beam_bleu_score": 0.24586811761868488}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.id) FROM battle AS T1        ", "inferred_question": "What is the total id of all distinct battles?", "score": -156.6545867919922, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21120150696545392, "beam_bleu_score": 0.29971054391930474}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 506, "beams": [{"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 WHERE T1.note like '%East%'       ", "inferred_question": "What are the notes of casualty counts whose note is %east%?", "score": 49.75088119506836, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6133693838527616, "beam_bleu_score": 0.47681452043045036}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 WHERE T1.killed like %East%       ", "inferred_question": "", "score": 43.93731689453125, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id WHERE T2.name like '%East%'       ", "inferred_question": "What are the notes of casualty counts caused by ships that were lost in battles whose name is %east%?", "score": 24.10315704345703, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48207975181083607, "beam_bleu_score": 0.34073085791335445}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id WHERE T2.result like '%East%'       ", "inferred_question": "What are the notes of casualty counts caused by ships that were lost in battles whose result is %east%?", "score": 22.590648651123047, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4439266588737891, "beam_bleu_score": 0.3340161264130913}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.location like '%East%'       ", "inferred_question": "What are the notes of casualty counts caused by ships whose location is %east%?", "score": 21.01943588256836, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4140296351782434, "beam_bleu_score": 0.412049717341477}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 WHERE T1.id like %East%       ", "inferred_question": "", "score": 11.524711608886719, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT max( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "inferred_question": "What are the notes of casualty counts whose note is %east% with maximum note?", "score": 10.374420166015625, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5286323046649655, "beam_bleu_score": 0.42909886472732145}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1 JOIN ship AS T13 ON T1.caused_by_ship_id = T13.id JOIN battle AS T2 ON T13.lost_in_battle = T2.id WHERE T2.date like '%East%'       ", "inferred_question": "What are the notes of casualty counts caused by ships that were lost in battles who were fought in %east%?", "score": 9.61727523803711, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47974989168720483, "beam_bleu_score": 0.32714113154559965}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT min( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "inferred_question": "What are the notes of casualty counts whose note is %east% with minimum note?", "score": 9.599552154541016, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5045804597524585, "beam_bleu_score": 0.4321315542137376}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT count( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "inferred_question": "How many notes of casualty counts whose note is %east% are there?", "score": 9.562599182128906, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5156630713608359, "beam_bleu_score": 0.40480106756157624}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT avg( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "inferred_question": "What is the average note of all casualty counts whose note is %east%?", "score": 7.877330780029297, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44131452701081586, "beam_bleu_score": 0.35208482892462223}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT sum( T1.note) FROM death AS T1 WHERE T1.note like '%East%'       ", "inferred_question": "What is the total note of all casualty counts whose note is %east%?", "score": 4.308483123779297, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.501063729052712, "beam_bleu_score": 0.3611779659359572}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT max( T1.note) FROM death AS T1 WHERE T1.killed like %East%       ", "inferred_question": "", "score": 4.100711822509766, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT count( T1.note) FROM death AS T1 WHERE T1.killed like %East%       ", "inferred_question": "", "score": 3.9092254638671875, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT T1.note FROM death AS T1  GROUP BY T1.note HAVING count( T1.note) like '%East%'     ", "inferred_question": "", "score": 3.7389755249023438, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 507, "beams": [{"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose first line is %1%?", "score": 4.360437393188477, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46567115110285795, "beam_bleu_score": 0.4741172465952226}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%2%'       ", "inferred_question": "What are the first lines of addresses whose first line is %2%?", "score": -5.225649356842041, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4978116139473232, "beam_bleu_score": 0.4741172465952226}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose first line is %1%?", "score": -12.098738670349121, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46567115110285795, "beam_bleu_score": 0.4741172465952226}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose first line is %1%?", "score": -18.550189971923828, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46567115110285795, "beam_bleu_score": 0.4741172465952226}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%2%'       ", "inferred_question": "What are the first lines of addresses whose first line is %2%?", "score": -21.256181716918945, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4978116139473232, "beam_bleu_score": 0.4741172465952226}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_2 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose second line is %1%?", "score": -23.18069076538086, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43334531337373927, "beam_bleu_score": 0.5029484341361952}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose first line is %1%?", "score": -26.53589630126953, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46567115110285795, "beam_bleu_score": 0.4741172465952226}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_1 like '%2%'       ", "inferred_question": "What are the first lines of addresses whose first line is %2%?", "score": -26.962121963500977, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4978116139473232, "beam_bleu_score": 0.4741172465952226}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose first line is %1% of students?", "score": -29.369842529296875, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2997733105208198, "beam_bleu_score": 0.40568508690698024}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 WHERE T1.line_2 like '%2%'       ", "inferred_question": "What are the first lines of addresses whose second line is %2%?", "score": -30.703798294067383, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45418058428680896, "beam_bleu_score": 0.5029484341361952}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.address_id FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the ids of addresses whose first line is %1%?", "score": -31.542247772216797, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4049650870627002, "beam_bleu_score": 0.48689466519161867}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose first line is %1% of students?", "score": -32.771331787109375, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2997733105208198, "beam_bleu_score": 0.40568508690698024}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1  GROUP BY T1.line_1 HAVING count( T1.line_1) like '%1%'     ", "inferred_question": "", "score": -33.591251373291016, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT count( *) FROM Addresses AS T1 WHERE T1.line_1 like '%1%'       ", "inferred_question": "How many addresses whose first line is %1% are there?", "score": -33.93733596801758, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3063329243260059, "beam_bleu_score": 0.42173889514753127}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.line_1 like '%1%'       ", "inferred_question": "What are the first lines of addresses whose first line is %1% of students?", "score": -34.400001525878906, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2997733105208198, "beam_bleu_score": 0.40568508690698024}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 508, "beams": [{"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, T1.line_2 FROM Addresses AS T1        ", "inferred_question": "What are the first lines and second lines of addresses?", "score": 0.0, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9752176256022597, "beam_bleu_score": 0.7351263663830186}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.first_name, T2.line_2 FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id        ", "inferred_question": "What are the first names of students with addresses? Also show the second lines of the addresses.", "score": -33.19839859008789, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34648185616588745, "beam_bleu_score": 0.3791521516024523}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT max( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "inferred_question": "", "score": -37.00646209716797, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT avg( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "inferred_question": "", "score": -39.44704818725586, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, max( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "inferred_question": "", "score": -39.50814437866211, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, min( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "inferred_question": "", "score": -40.163360595703125, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, avg( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "inferred_question": "", "score": -40.649169921875, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT count( *), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "inferred_question": "", "score": -41.31272506713867, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT min( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "inferred_question": "", "score": -41.32410430908203, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, count( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "inferred_question": "", "score": -41.43017578125, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT sum( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "inferred_question": "", "score": -43.34702682495117, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, T1.line_3 FROM Addresses AS T1        ", "inferred_question": "What are the first lines and third lines of addresses?", "score": -44.4398193359375, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45529598425619144, "beam_bleu_score": 0.6274733950291544}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT count( T1.line_1), T1.line_2 FROM Addresses AS T1  GROUP BY T1.line_2      ", "inferred_question": "", "score": -45.31651306152344, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT T1.line_1, sum( T1.line_2) FROM Addresses AS T1  GROUP BY T1.line_1      ", "inferred_question": "", "score": -46.43270492553711, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT count( T1.first_name), T2.line_2 FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id  GROUP BY T2.line_2      ", "inferred_question": "", "score": -60.103973388671875, "correct_code": "SELECT line_1 ,  line_2 FROM addresses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 509, "beams": [{"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "inferred_question": "How many courses are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9805509897945711, "beam_bleu_score": 0.5290343326823188}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T1.course_id FROM Courses AS T1        ", "inferred_question": "What are the ids of courses?", "score": -32.3143310546875, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14981045993533426, "beam_bleu_score": 0.3303440689159954}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT min( T1.course_id) FROM Courses AS T1        ", "inferred_question": "What are the ids of courses with minimum id?", "score": -33.47010803222656, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08225149925085962, "beam_bleu_score": 0.3345233759651099}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT sum( T1.course_id) FROM Courses AS T1        ", "inferred_question": "What is the total id of all courses?", "score": -35.994773864746094, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4042076587513511, "beam_bleu_score": 0.4252769438114274}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT count( T1.course_id) FROM Courses AS T1        ", "inferred_question": "How many ids of courses are there?", "score": -41.15547180175781, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6690359123273877, "beam_bleu_score": 0.5611564893070567}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT avg( T1.course_id) FROM Courses AS T1        ", "inferred_question": "What is the average id of all courses?", "score": -42.06129455566406, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09881515103602145, "beam_bleu_score": 0.2929635984980054}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT sum( T1.course_name) FROM Courses AS T1        ", "inferred_question": "What is the total name of all courses?", "score": -43.582069396972656, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41517924646119797, "beam_bleu_score": 0.4167909421537975}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "inferred_question": "How many courses are there?", "score": -43.60375213623047, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9805509897945711, "beam_bleu_score": 0.5290343326823188}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1        ", "inferred_question": "What are the names of courses?", "score": -44.58243942260742, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18601896179290445, "beam_bleu_score": 0.34150707792574647}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT min( *) FROM Courses AS T1        ", "inferred_question": "", "score": -45.07509231567383, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT min( T1.course_name) FROM Courses AS T1        ", "inferred_question": "What are the names of courses with minimum name?", "score": -47.13796615600586, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13827621470302176, "beam_bleu_score": 0.2987503169985308}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Courses AS T1        ", "inferred_question": "Show me everything about courses.", "score": -48.177154541015625, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09194529280317454, "beam_bleu_score": 0.31129381060765887}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T1.course_id FROM Sections AS T1        ", "inferred_question": "What are the courses of sections?", "score": -48.39141082763672, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17994861824399733, "beam_bleu_score": 0.3608470836897734}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT avg( T1.course_name) FROM Courses AS T1        ", "inferred_question": "What is the average name of all courses?", "score": -49.386009216308594, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19780758476149307, "beam_bleu_score": 0.27773150538119995}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT sum( *) FROM Courses AS T1        ", "inferred_question": "", "score": -50.632869720458984, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 510, "beams": [{"orig_question": "How many courses are there?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "inferred_question": "How many courses are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT T1.course_id FROM Courses AS T1        ", "inferred_question": "What are the ids of courses?", "score": -32.46308517456055, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18393804931231827, "beam_bleu_score": 0.5202556880807584}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT min( T1.course_id) FROM Courses AS T1        ", "inferred_question": "What are the ids of courses with minimum id?", "score": -33.959537506103516, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08360781775464032, "beam_bleu_score": 0.3564982433809235}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT sum( T1.course_id) FROM Courses AS T1        ", "inferred_question": "What is the total id of all courses?", "score": -41.38105773925781, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2810379436431769, "beam_bleu_score": 0.3074762344614454}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT avg( T1.course_id) FROM Courses AS T1        ", "inferred_question": "What is the average id of all courses?", "score": -42.17540740966797, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11620191166079286, "beam_bleu_score": 0.2987501799129883}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT count( *) FROM Courses AS T1        ", "inferred_question": "How many courses are there?", "score": -44.41012954711914, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1        ", "inferred_question": "What are the names of courses?", "score": -45.950958251953125, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16663925326547668, "beam_bleu_score": 0.5110111188131532}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT min( *) FROM Courses AS T1        ", "inferred_question": "", "score": -46.727542877197266, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Courses AS T1        ", "inferred_question": "Show me everything about courses.", "score": -47.86710739135742, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10950287036025153, "beam_bleu_score": 0.3541910318202236}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT min( T1.course_name) FROM Courses AS T1        ", "inferred_question": "What are the names of courses with minimum name?", "score": -50.108734130859375, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12301567147971015, "beam_bleu_score": 0.33432718370768866}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT max( T1.course_id) FROM Courses AS T1        ", "inferred_question": "What are the ids of courses with maximum id?", "score": -50.58711624145508, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1042081225753213, "beam_bleu_score": 0.36463597249757107}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT count( T1.course_id) FROM Courses AS T1        ", "inferred_question": "How many ids of courses are there?", "score": -50.9597282409668, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6688863245628528, "beam_bleu_score": 0.7596553948130278}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT sum( T1.course_name) FROM Courses AS T1        ", "inferred_question": "What is the total name of all courses?", "score": -51.36229705810547, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31628919285738133, "beam_bleu_score": 0.3020300365911981}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT avg( T1.course_name) FROM Courses AS T1        ", "inferred_question": "What is the average name of all courses?", "score": -52.35333251953125, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17419655791536182, "beam_bleu_score": 0.28973222227404427}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT T1.course_id FROM Sections AS T1        ", "inferred_question": "What are the courses of sections?", "score": -55.770301818847656, "correct_code": "SELECT count(*) FROM Courses", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22297494966922382, "beam_bleu_score": 0.4681939286568287}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 511, "beams": [{"orig_question": "How is the math course described?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "What are the descriptions of courses whose name is math?", "score": 67.9975357055664, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6462953604604808, "beam_bleu_score": 0.388881734804849}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "How many descriptions of courses whose name is math are there?", "score": 59.53326416015625, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3188201100121052, "beam_bleu_score": 0.37156565783401985}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 54.29167175292969, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( *) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "How many courses whose name is math are there?", "score": 49.53333282470703, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13787692202121415, "beam_bleu_score": 0.40274354932242745}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT sum( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "What is the total description of all courses whose name is math?", "score": 47.65378189086914, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42091380243720367, "beam_bleu_score": 0.3449871555009671}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT min( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "What are the descriptions of courses whose name is math with minimum description?", "score": 46.2335319519043, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3598607274038276, "beam_bleu_score": 0.27962686205448006}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 45.735694885253906, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT avg( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "What is the average description of all courses whose name is math?", "score": 45.36817932128906, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37147601191983304, "beam_bleu_score": 0.3438931217657843}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT max( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "What are the descriptions of courses whose name is math with maximum description?", "score": 37.42440414428711, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3412534383303405, "beam_bleu_score": 0.27962686205448006}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( *) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 35.1021728515625, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT sum( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 32.94375991821289, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT min( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 31.668712615966797, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT avg( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 30.804550170898438, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1  GROUP BY T1.course_description HAVING count( T1.course_name) = 'math'     ", "inferred_question": "", "score": 26.269596099853516, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT count( *) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "How many courses whose name is math are there?", "score": 22.84796142578125, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13787692202121415, "beam_bleu_score": 0.40274354932242745}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 512, "beams": [{"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 73.63934326171875, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "What are the descriptions of courses whose name is math?", "score": 48.80177307128906, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6122835213482809, "beam_bleu_score": 0.6647810141087193}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 35.17739486694336, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT max( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 33.71197509765625, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT min( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 32.8929443359375, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT avg( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 32.26200485229492, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT sum( T1.course_description) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id WHERE T2.department_name = 'math'       ", "inferred_question": "", "score": 30.03253936767578, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING count( T2.department_name) = 'math'     ", "inferred_question": "", "score": 29.796283721923828, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING avg( T2.department_name) = 'math'     ", "inferred_question": "", "score": 24.438678741455078, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING min( T2.department_name) = 'math'     ", "inferred_question": "", "score": 20.203445434570312, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING max( T2.department_name) = 'math'     ", "inferred_question": "", "score": 20.198143005371094, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Degree_Programs AS T15 ON T14.degree_program_id = T15.degree_program_id JOIN Departments AS T2 ON T15.department_id = T2.department_id  GROUP BY T1.course_description HAVING sum( T2.department_name) = 'math'     ", "inferred_question": "", "score": 18.642620086669922, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name = 'math'       ", "inferred_question": "What are the descriptions of departments whose name is math?", "score": 18.564010620117188, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39041803157002697, "beam_bleu_score": 0.535524441275145}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT count( T1.course_description) FROM Courses AS T1 WHERE T1.course_name = 'math'       ", "inferred_question": "How many descriptions of courses whose name is math are there?", "score": 9.548900604248047, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49730356216441407, "beam_bleu_score": 0.5264219375780032}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT T1.course_description FROM Courses AS T1  GROUP BY T1.course_description HAVING count( T1.course_name) = 'math'     ", "inferred_question": "", "score": 9.103065490722656, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 513, "beams": [{"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What are the zip codes of addresses whose city is port chelsea?", "score": 116.0125503540039, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7219701258434329, "beam_bleu_score": 0.6439026719639702}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What is the average zip code of all addresses whose city is port chelsea?", "score": 79.87648010253906, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4110330703292877, "beam_bleu_score": 0.6171077785481528}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT max( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What are the zip codes of addresses whose city is port chelsea with maximum zip code?", "score": 79.87376403808594, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5468047242182936, "beam_bleu_score": 0.47519141382630725}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "How many zip codes of addresses whose city is port chelsea are there?", "score": 79.21056365966797, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2857105650480103, "beam_bleu_score": 0.5071747598151701}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 79.12100982666016, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What are the zip codes of addresses whose city is port chelsea with minimum zip code?", "score": 78.8884506225586, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5083753403439559, "beam_bleu_score": 0.47983494794496356}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT sum( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What is the total zip code of all addresses whose city is port chelsea?", "score": 75.22740936279297, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46891103038256554, "beam_bleu_score": 0.623368800245094}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING avg( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 69.81602478027344, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING max( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 65.04402923583984, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING min( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 64.5121078491211, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING sum( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 62.91631317138672, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT max( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 43.897918701171875, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 43.86647033691406, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 42.82183837890625, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 42.73658752441406, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 514, "beams": [{"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What are the zip codes of addresses whose city is port chelsea?", "score": 106.51285552978516, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4980373720606145, "beam_bleu_score": 0.41698638863003995}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "How many zip codes of addresses whose city is port chelsea are there?", "score": 70.45429992675781, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30799527328123344, "beam_bleu_score": 0.3014624177859579}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What is the average zip code of all addresses whose city is port chelsea?", "score": 69.91506958007812, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3847446486316488, "beam_bleu_score": 0.3888402337594346}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What are the zip codes of addresses whose city is port chelsea with minimum zip code?", "score": 68.84098815917969, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.264965772477724, "beam_bleu_score": 0.29678059039008586}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT max( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What are the zip codes of addresses whose city is port chelsea with maximum zip code?", "score": 68.82003784179688, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27275032284490464, "beam_bleu_score": 0.29678059039008586}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 67.67918395996094, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT sum( T1.zip_postcode) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "What is the total zip code of all addresses whose city is port chelsea?", "score": 64.72474670410156, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4490331433187984, "beam_bleu_score": 0.3915492103727698}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING avg( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 60.59491729736328, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING max( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 55.53755187988281, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING min( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 55.340911865234375, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT T1.zip_postcode FROM Addresses AS T1  GROUP BY T1.zip_postcode HAVING sum( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 54.293731689453125, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT count( *) FROM Addresses AS T1 WHERE T1.city = 'Port Chelsea'       ", "inferred_question": "How many addresses whose city is port chelsea are there?", "score": 37.74751281738281, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16036201363783975, "beam_bleu_score": 0.24858415419925964}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT count( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 31.7535400390625, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT avg( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 30.962799072265625, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT min( T1.zip_postcode) FROM Addresses AS T1   HAVING count( T1.city) = 'Port Chelsea'     ", "inferred_question": "", "score": 29.966995239257812, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 517, "beams": [{"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct departments of programs are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4933158702913747, "beam_bleu_score": 0.49529602415144186}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct departments of programs?", "score": -38.80914306640625, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16274623311586267, "beam_bleu_score": 0.38296291496169915}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct departments of programs with minimum department?", "score": -40.80115509033203, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1057049130993225, "beam_bleu_score": 0.26842430484775776}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "", "score": -46.680023193359375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Departments AS T1        ", "inferred_question": "How many distinct ids of departments are there?", "score": -48.133941650390625, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2670434215935964, "beam_bleu_score": 0.533584739508379}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "", "score": -51.21729278564453, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct departments of programs with maximum department?", "score": -57.48955535888672, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13045910614077205, "beam_bleu_score": 0.2764457818757598}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_name) FROM Departments AS T1        ", "inferred_question": "How many distinct names of departments are there?", "score": -65.3556137084961, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16512126333207766, "beam_bleu_score": 0.5148226554226022}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Departments AS T1        ", "inferred_question": "What are the distinct ids of departments?", "score": -82.47625732421875, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09319049468310148, "beam_bleu_score": 0.38435086776079763}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Departments AS T1        ", "inferred_question": "What are the distinct ids of departments with minimum id?", "score": -88.63316345214844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0658514481110356, "beam_bleu_score": 0.2978837429106527}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT T1.department_name FROM Departments AS T1        ", "inferred_question": "What are the distinct names of departments?", "score": -90.25724792480469, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08008223976872919, "beam_bleu_score": 0.37593836026648325}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_description) FROM Departments AS T1        ", "inferred_question": "How many distinct descriptions of departments are there?", "score": -93.70133972167969, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21272523348676897, "beam_bleu_score": 0.4580630166970078}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Departments AS T1        ", "inferred_question": "What is the total id of all distinct departments?", "score": -93.73423767089844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09554701958941747, "beam_bleu_score": 0.29706435578913915}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.department_id) FROM Departments AS T1        ", "inferred_question": "What is the average id of all distinct departments?", "score": -97.5531005859375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07966871000446663, "beam_bleu_score": 0.2977255884918054}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_name) FROM Departments AS T1        ", "inferred_question": "", "score": -101.79396057128906, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 518, "beams": [{"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct departments of programs are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6184583439564004, "beam_bleu_score": 0.5407146441543516}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct departments of programs?", "score": -37.409236907958984, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2643197222171457, "beam_bleu_score": 0.425766774398318}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct departments of programs with minimum department?", "score": -40.48644256591797, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12559758458928694, "beam_bleu_score": 0.3093599340375544}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "", "score": -44.634613037109375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "", "score": -49.26527786254883, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.department_id) FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct departments of programs with maximum department?", "score": -57.165122985839844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1402595478720826, "beam_bleu_score": 0.31703130919183153}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_id) FROM Departments AS T1        ", "inferred_question": "How many distinct ids of departments are there?", "score": -59.68695068359375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3501513255384425, "beam_bleu_score": 0.5702694126808183}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_name) FROM Departments AS T1        ", "inferred_question": "How many distinct names of departments are there?", "score": -68.10813903808594, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20962881684864976, "beam_bleu_score": 0.5510576527444411}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT T1.department_name FROM Departments AS T1        ", "inferred_question": "What are the distinct names of departments?", "score": -90.23854064941406, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08499553911693014, "beam_bleu_score": 0.3876980517438355}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.department_description) FROM Departments AS T1        ", "inferred_question": "How many distinct descriptions of departments are there?", "score": -94.18937683105469, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26822088791899823, "beam_bleu_score": 0.5117336665716291}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT T1.department_id FROM Departments AS T1        ", "inferred_question": "What are the distinct ids of departments?", "score": -96.30894470214844, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1029200537346937, "beam_bleu_score": 0.3758205566818817}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_id) FROM Departments AS T1        ", "inferred_question": "What are the distinct ids of departments with minimum id?", "score": -99.16911315917969, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06232916134573019, "beam_bleu_score": 0.3152472030010586}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_name) FROM Departments AS T1        ", "inferred_question": "", "score": -100.36446380615234, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.department_name) FROM Departments AS T1        ", "inferred_question": "What are the distinct names of departments with minimum name?", "score": -102.3823471069336, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.061465789907026225, "beam_bleu_score": 0.30014139135049667}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.department_id) FROM Departments AS T1        ", "inferred_question": "What is the total id of all distinct departments?", "score": -102.90472412109375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11141349438431036, "beam_bleu_score": 0.3369149018871956}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 519, "beams": [{"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_name) FROM Courses AS T1        ", "inferred_question": "How many distinct names of courses are there?", "score": -4.6491513785440475e-06, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5588812828270728, "beam_bleu_score": 0.5212610177697997}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct summary names of programs are there?", "score": -12.664227485656738, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2216021550842544, "beam_bleu_score": 0.4323471421948048}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct ids of programs are there?", "score": -13.46321964263916, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14764283104590303, "beam_bleu_score": 0.4378915568028666}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1        ", "inferred_question": "What are the distinct names of courses?", "score": -35.54861068725586, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2690032971040688, "beam_bleu_score": 0.29498114591911484}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.course_name) FROM Courses AS T1        ", "inferred_question": "What are the distinct names of courses with minimum name?", "score": -36.743263244628906, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1737679481062081, "beam_bleu_score": 0.23835568989352177}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.course_name) FROM Courses AS T1        ", "inferred_question": "", "score": -44.69029998779297, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct summary names of programs with minimum summary name?", "score": -47.71698760986328, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12153492697602641, "beam_bleu_score": 0.19459758229263008}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT T1.degree_summary_name FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct summary names of programs?", "score": -48.0876350402832, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10376797094078871, "beam_bleu_score": 0.292535897321001}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.course_name) FROM Courses AS T1        ", "inferred_question": "", "score": -48.5797004699707, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "inferred_question": "", "score": -54.04024124145508, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct ids of programs with minimum id?", "score": -54.72991180419922, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05119288684102974, "beam_bleu_score": 0.1560422993330864}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.course_name) FROM Courses AS T1        ", "inferred_question": "What are the distinct names of courses with maximum name?", "score": -56.46758270263672, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17418320650417707, "beam_bleu_score": 0.2476165058078653}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "inferred_question": "", "score": -58.04526901245117, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Courses AS T1        ", "inferred_question": "How many distinct ids of courses are there?", "score": -60.66954040527344, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36917482389076706, "beam_bleu_score": 0.4392079315790922}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_description) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct summary descriptions of programs are there?", "score": -61.500328063964844, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1634552324383982, "beam_bleu_score": 0.3329966830497227}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 520, "beams": [{"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct ids of programs are there?", "score": -0.38472071290016174, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15376667516879383, "beam_bleu_score": 0.42263703764113936}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Courses AS T1        ", "inferred_question": "How many distinct ids of courses are there?", "score": -1.141438364982605, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3702000646044531, "beam_bleu_score": 0.4457478240653252}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Student_Enrolment_Courses AS T1        ", "inferred_question": "How many distinct courses of students enrolleds are there?", "score": -32.44511032104492, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35725517539798834, "beam_bleu_score": 0.3534693340185433}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT T1.degree_program_id FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct ids of programs?", "score": -35.134864807128906, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06168598053151764, "beam_bleu_score": 0.19137412283214514}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT T1.course_id FROM Courses AS T1        ", "inferred_question": "What are the distinct ids of courses?", "score": -35.487091064453125, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08293200611411877, "beam_bleu_score": 0.1872689034702936}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.course_id) FROM Sections AS T1        ", "inferred_question": "How many distinct courses of sections are there?", "score": -35.72353744506836, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23554202416255687, "beam_bleu_score": 0.38922894573942207}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "inferred_question": "What are the distinct ids of programs with minimum id?", "score": -36.150474548339844, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04503293979648859, "beam_bleu_score": 0.14664457182404}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.course_id) FROM Courses AS T1        ", "inferred_question": "What are the distinct ids of courses with minimum id?", "score": -39.4023551940918, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.051794160805771705, "beam_bleu_score": 0.15499569583517858}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Degree_Programs AS T1        ", "inferred_question": "How many programs are there?", "score": -42.13630676269531, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5072761288966801, "beam_bleu_score": 0.36388509556805854}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "inferred_question": "What is the total id of all distinct programs?", "score": -44.49812698364258, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1007266250024279, "beam_bleu_score": 0.08432249109369563}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.course_id) FROM Courses AS T1        ", "inferred_question": "What is the total id of all distinct courses?", "score": -48.309120178222656, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1027475123291185, "beam_bleu_score": 0.08423108446494958}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_description) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct summary descriptions of programs are there?", "score": -48.931304931640625, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0794616202836127, "beam_bleu_score": 0.3197651487642093}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1        ", "inferred_question": "What is the average id of all distinct programs?", "score": -49.427734375, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07648693797782613, "beam_bleu_score": 0.08553771448125118}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1        ", "inferred_question": "How many distinct summary names of programs are there?", "score": -52.010398864746094, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09641045357109823, "beam_bleu_score": 0.35172510142975916}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.course_id) FROM Courses AS T1        ", "inferred_question": "What is the average id of all distinct courses?", "score": -53.45098114013672, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07355324713884637, "beam_bleu_score": 0.0865311728984811}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 523, "beams": [{"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, T1.section_description FROM Sections AS T1        ", "inferred_question": "What are the names and descriptions of sections?", "score": 0.0, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9771471945822982, "beam_bleu_score": 0.8323294134728284}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT max( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -37.45583724975586, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, avg( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -41.50774002075195, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, max( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -43.13279724121094, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT avg( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -43.94960021972656, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT sum( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -44.661766052246094, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT min( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -45.614036560058594, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, count( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -46.048397064208984, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT count( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -46.8033332824707, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, sum( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -49.048702239990234, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, min( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -51.90076446533203, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT T1.section_name, T2.course_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of sections with courses? Also show the descriptions of the courses.", "score": -59.979736328125, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.756129841358522, "beam_bleu_score": 0.5173044940753097}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT max( T1.section_name), avg( T1.section_description) FROM Sections AS T1        ", "inferred_question": "What are the maximum name and average description of sections?", "score": -78.89823150634766, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38182061111180876, "beam_bleu_score": 0.6626058828286071}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT max( T1.section_name), max( T1.section_description) FROM Sections AS T1        ", "inferred_question": "What are the maximum name and maximum description of sections?", "score": -80.49346923828125, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7226923015868517, "beam_bleu_score": 0.6555741899067907}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 524, "beams": [{"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, T1.section_description FROM Sections AS T1        ", "inferred_question": "What are the names and descriptions of sections?", "score": 0.0, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9829346583195644, "beam_bleu_score": 0.7740040325341989}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT max( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -37.44873046875, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, avg( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -41.60150146484375, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, max( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -43.31226348876953, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT avg( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -43.916114807128906, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT sum( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -45.07600784301758, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT min( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -46.08039093017578, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, count( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -46.359622955322266, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT count( T1.section_name), T1.section_description FROM Sections AS T1  GROUP BY T1.section_description      ", "inferred_question": "", "score": -46.912841796875, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, sum( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -49.06129455566406, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, min( T1.section_description) FROM Sections AS T1  GROUP BY T1.section_name      ", "inferred_question": "", "score": -51.893760681152344, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT T1.section_name, T2.course_description FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of sections with courses? Also show the descriptions of the courses.", "score": -56.86846923828125, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7524439189044222, "beam_bleu_score": 0.4917203578012963}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT max( T1.section_name), avg( T1.section_description) FROM Sections AS T1        ", "inferred_question": "What are the maximum name and average description of sections?", "score": -78.98599243164062, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4053232279219253, "beam_bleu_score": 0.6402078496361187}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT max( T1.section_name), max( T1.section_description) FROM Sections AS T1        ", "inferred_question": "What are the maximum name and maximum description of sections?", "score": -80.68397521972656, "correct_code": "SELECT section_name ,  section_description FROM Sections", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7543128915991603, "beam_bleu_score": 0.6300298297897073}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 532, "beams": [{"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%None%'       ", "inferred_question": "What are the descriptions of departments whose name is %none%?", "score": -30.071887969970703, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1351117391227422, "beam_bleu_score": 0.538016076541665}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%Ward%'       ", "inferred_question": "What are the descriptions of departments whose name is %ward%?", "score": -31.599180221557617, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18784949952838803, "beam_bleu_score": 0.5317275413655834}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%1%'       ", "inferred_question": "What are the descriptions of departments whose name is %1%?", "score": -33.72646713256836, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19306269862856962, "beam_bleu_score": 0.514267880542878}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_description like '%None%'       ", "inferred_question": "What are the descriptions of departments whose description is %none%?", "score": -44.204647064208984, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1539734718843747, "beam_bleu_score": 0.5153449972416796}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.other_details like '%None%'       ", "inferred_question": "What are the descriptions of departments whose details is %none%?", "score": -44.69626235961914, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10965466913486077, "beam_bleu_score": 0.4929594063726147}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T2 ON T14.student_id = T2.student_id WHERE T2.last_name like '%None%'       ", "inferred_question": "What are the descriptions of departments with programs for which students whose last name is %none% in the semesters enrolled?", "score": -45.23176956176758, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28264269418148613, "beam_bleu_score": 0.42635949089861397}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T2 ON T14.student_id = T2.student_id WHERE T2.last_name like '%1%'       ", "inferred_question": "What are the descriptions of departments with programs for which students whose last name is %1% in the semesters enrolled?", "score": -45.39015579223633, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32758213683223303, "beam_bleu_score": 0.43095035826238576}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_description like '%Ward%'       ", "inferred_question": "What are the descriptions of departments whose description is %ward%?", "score": -46.42713165283203, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18702323267199084, "beam_bleu_score": 0.511623851356251}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.other_details like '%Ward%'       ", "inferred_question": "What are the descriptions of departments whose details is %ward%?", "score": -46.593231201171875, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12586567095675238, "beam_bleu_score": 0.48224844218744045}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_description like '%1%'       ", "inferred_question": "What are the descriptions of departments whose description is %1%?", "score": -46.87739944458008, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21390809000637145, "beam_bleu_score": 0.49880617328037913}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T15 ON T14.student_id = T15.student_id JOIN Addresses AS T2 ON T15.permanent_address_id = T2.address_id WHERE T2.other_address_details like '%None%'       ", "inferred_question": "What are the descriptions of departments with programs for which students with addresses whose details is %none% in the semesters enrolled?", "score": -46.908355712890625, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20463716823049127, "beam_bleu_score": 0.3612639393796279}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T15 ON T14.student_id = T15.student_id JOIN Addresses AS T2 ON T15.permanent_address_id = T2.address_id WHERE T2.other_address_details like '%Ward%'       ", "inferred_question": "What are the descriptions of departments with programs for which students with addresses whose details is %ward% in the semesters enrolled?", "score": -47.12907791137695, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20260463841463772, "beam_bleu_score": 0.357482974196444}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.other_details like '%1%'       ", "inferred_question": "What are the descriptions of departments whose details is %1%?", "score": -47.903228759765625, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13464614788519047, "beam_bleu_score": 0.46982696408514074}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T2 ON T14.student_id = T2.student_id WHERE T2.last_name like '%Ward%'       ", "inferred_question": "What are the descriptions of departments with programs for which students whose last name is %ward% in the semesters enrolled?", "score": -47.97945785522461, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28709226106843755, "beam_bleu_score": 0.4222782962448883}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT T1.department_description FROM Departments AS T1 JOIN Degree_Programs AS T13 ON T1.department_id = T13.department_id JOIN Student_Enrolment AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Students AS T15 ON T14.student_id = T15.student_id JOIN Addresses AS T2 ON T15.permanent_address_id = T2.address_id WHERE T2.other_address_details like '%1%'       ", "inferred_question": "What are the descriptions of departments with programs for which students with addresses whose details is %1% in the semesters enrolled?", "score": -50.277381896972656, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21366129625469876, "beam_bleu_score": 0.363843580535714}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 535, "beams": [{"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor'       ", "inferred_question": "", "score": 58.91303634643555, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelor'       ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs whose summary name is bachelor in semesters?", "score": 47.26639938354492, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6566985197250121, "beam_bleu_score": 0.49067408959742054}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelor       ", "inferred_question": "", "score": 30.74207305908203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( T1.last_name) FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 22.371463775634766, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.course_id = Bachelor       ", "inferred_question": "", "score": 22.10610580444336, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 21.585376739501953, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id  GROUP BY T1.student_id HAVING count( T2.course_name) = 'Bachelor'     ", "inferred_question": "", "score": 20.693843841552734, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT count( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 19.930652618408203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, min( T1.last_name) FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 19.41756820678711, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT min( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 18.94301986694336, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT avg( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 18.88274383544922, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT max( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 17.62871551513672, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, sum( T1.last_name) FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 16.119022369384766, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 15.311756134033203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT sum( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 15.010063171386719, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 536, "beams": [{"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor'       ", "inferred_question": "", "score": 54.744056701660156, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelor'       ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs whose summary name is bachelor in semesters?", "score": 53.10844421386719, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5521164612227336, "beam_bleu_score": 0.5121815308600645}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelor       ", "inferred_question": "", "score": 49.5078239440918, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelors'       ", "inferred_question": "", "score": 49.16117858886719, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.department_id = Bachelor       ", "inferred_question": "", "score": 48.98692321777344, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelors       ", "inferred_question": "", "score": 47.16643142700195, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelors'       ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs whose summary name is bachelors in semesters?", "score": 47.13935852050781, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6841640515401026, "beam_bleu_score": 0.5171993089513404}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id WHERE T2.department_id = Bachelors       ", "inferred_question": "", "score": 42.72450256347656, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.course_id = Bachelor       ", "inferred_question": "", "score": 37.34998321533203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.course_id = Bachelors       ", "inferred_question": "", "score": 32.50373840332031, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id WHERE T2.department_name = 'Bachelor'       ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs for departments whose name is bachelor in semesters?", "score": 26.327136993408203, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46919831000841905, "beam_bleu_score": 0.48230743754164673}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T2 ON T13.student_enrolment_id = T2.student_enrolment_id WHERE T2.student_course_id = Bachelor       ", "inferred_question": "", "score": 22.93859100341797, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 21.421607971191406, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id WHERE T2.department_name = 'Bachelors'       ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs for departments whose name is bachelors in semesters?", "score": 20.841388702392578, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5638400494863633, "beam_bleu_score": 0.4870990499806104}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor' GROUP BY T1.student_id      ", "inferred_question": "", "score": 20.512187957763672, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 545, "beams": [{"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds?", "score": 0.0, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8204327966330557, "beam_bleu_score": 0.5811114514433372}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds?", "score": -18.15811538696289, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8204327966330557, "beam_bleu_score": 0.5811114514433372}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1        ", "inferred_question": "What are the names of courses?", "score": -36.68848419189453, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8116849270350219, "beam_bleu_score": 0.1598903611122414}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT max( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds with maximum name?", "score": -39.05623245239258, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47176277638522357, "beam_bleu_score": 0.6459765023309693}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT count( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "How many names of courses for which students enrolleds are there?", "score": -40.347312927246094, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5559433897841202, "beam_bleu_score": 0.5472476372095754}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds in sections?", "score": -42.77448654174805, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46868568992054926, "beam_bleu_score": 0.6376288529365768}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT min( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds with minimum name?", "score": -43.02294921875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4043177018696562, "beam_bleu_score": 0.6465824441048228}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT avg( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What is the average name of all courses for which students enrolleds?", "score": -43.507301330566406, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6635860903898954, "beam_bleu_score": 0.6164110126735531}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds?", "score": -43.945167541503906, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8204327966330557, "beam_bleu_score": 0.5811114514433372}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_id in (SELECT count( T22.course_id) FROM Student_Enrolment_Courses AS T22        )       ", "inferred_question": "", "score": -44.05652618408203, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds?", "score": -44.37189483642578, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8204327966330557, "beam_bleu_score": 0.5811114514433372}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_id in (SELECT avg( T22.course_id) FROM Student_Enrolment_Courses AS T22        )       ", "inferred_question": "", "score": -45.66518020629883, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_id in (SELECT max( T22.course_id) FROM Student_Enrolment_Courses AS T22        )       ", "inferred_question": "", "score": -46.07390594482422, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT sum( T1.course_name) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What is the total name of all courses for which students enrolleds?", "score": -46.241424560546875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8523059601057644, "beam_bleu_score": 0.5757046489391341}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds?", "score": -46.61151123046875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8204327966330557, "beam_bleu_score": 0.5811114514433372}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 546, "beams": [{"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T4 ON T2.student_enrolment_id = T4.student_enrolment_id JOIN Semesters AS T3 ON T4.semester_id = T3.semester_id        ", "inferred_question": "", "score": -0.5431610345840454, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T4 ON T2.student_enrolment_id = T4.student_enrolment_id JOIN Semesters AS T3 ON T4.semester_id = T3.semester_id JOIN Sections AS T5 ON T1.course_id = T5.course_id        ", "inferred_question": "", "score": -1.546286702156067, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id        ", "inferred_question": "", "score": -2.225161552429199, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id        ", "inferred_question": "What are the names of courses for which students enrolleds?", "score": -3.0654637813568115, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.783782843703248, "beam_bleu_score": 0.6905528154326247}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id        ", "inferred_question": "", "score": -3.195866584777832, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T4 ON T2.student_enrolment_id = T4.student_enrolment_id JOIN Semesters AS T3 ON T4.semester_id = T3.semester_id        ", "inferred_question": "", "score": -4.782853126525879, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Sections AS T4 ON T1.course_id = T4.course_id        ", "inferred_question": "", "score": -6.6511054039001465, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Students AS T4 ON T3.student_id = T4.student_id        ", "inferred_question": "", "score": -8.565353393554688, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id        ", "inferred_question": "", "score": -8.906746864318848, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id JOIN Sections AS T5 ON T1.course_id = T5.course_id        ", "inferred_question": "", "score": -8.94943618774414, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T14 ON T2.student_enrolment_id = T14.student_enrolment_id JOIN Semesters AS T3 ON T14.semester_id = T3.semester_id        ", "inferred_question": "", "score": -9.248092651367188, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Semesters AS T4 ON T3.semester_id = T4.semester_id        ", "inferred_question": "", "score": -9.3211669921875, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Degree_Programs AS T4 ON T3.degree_program_id = T4.degree_program_id        ", "inferred_question": "", "score": -10.17878532409668, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id        ", "inferred_question": "", "score": -10.435447692871094, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id        ", "inferred_question": "", "score": -11.142423629760742, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 553, "beams": [{"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What are the mobile numbers of students whose last name is ward and whose first name is timmothy?", "score": 147.57095336914062, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40008979808617195, "beam_bleu_score": 0.5719888426838335}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT max( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What are the mobile numbers of students whose last name is ward and whose first name is timmothy with maximum mobile number?", "score": 110.39601135253906, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4196821510342428, "beam_bleu_score": 0.4864979190191954}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = '1'       ", "inferred_question": "What are the mobile numbers of students whose last name is 1 and whose first name is timmothy?", "score": 108.0587158203125, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22333427218065582, "beam_bleu_score": 0.5831831181042145}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT avg( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What is the average mobile number of all students whose last name is ward and whose first name is timmothy?", "score": 107.30755615234375, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4367700585585286, "beam_bleu_score": 0.5443798062761742}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING max( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 107.07379150390625, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT sum( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What is the total mobile number of all students whose last name is ward and whose first name is timmothy?", "score": 105.54878997802734, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39459443666824146, "beam_bleu_score": 0.5538775766153743}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING avg( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 105.41316986083984, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING avg( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 105.34474182128906, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT min( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What are the mobile numbers of students whose last name is ward and whose first name is timmothy with minimum mobile number?", "score": 105.25064086914062, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39069985479665825, "beam_bleu_score": 0.482412772267181}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT count( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "How many mobile numbers of students whose last name is ward and whose first name is timmothy are there?", "score": 104.97522735595703, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27499238604264764, "beam_bleu_score": 0.5240489516482127}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING sum( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 104.35274505615234, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING count( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 104.17252349853516, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING count( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 103.96952819824219, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING max( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 101.75765228271484, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING sum( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 101.19623565673828, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 554, "beams": [{"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What are the mobile numbers of students whose last name is ward and whose first name is timmothy?", "score": 146.91249084472656, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7758142147810585, "beam_bleu_score": 0.48284435544248056}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT max( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What are the mobile numbers of students whose last name is ward and whose first name is timmothy with maximum mobile number?", "score": 109.01042175292969, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5146809314538738, "beam_bleu_score": 0.3851605690753526}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING max( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 109.00372314453125, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING avg( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 107.7782974243164, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT avg( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What is the average mobile number of all students whose last name is ward and whose first name is timmothy?", "score": 106.17816162109375, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6240478026233338, "beam_bleu_score": 0.4634600550960281}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING avg( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 105.93362426757812, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING sum( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 105.43508911132812, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING count( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 104.755126953125, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING count( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 103.68737030029297, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT sum( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What is the total mobile number of all students whose last name is ward and whose first name is timmothy?", "score": 102.88072204589844, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5840075770932915, "beam_bleu_score": 0.4665030736125206}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT count( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "How many mobile numbers of students whose last name is ward and whose first name is timmothy are there?", "score": 102.54646301269531, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5210937359709606, "beam_bleu_score": 0.42085057771068557}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING max( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 101.58627319335938, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT min( T1.cell_mobile_number) FROM Students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       ", "inferred_question": "What are the mobile numbers of students whose last name is ward and whose first name is timmothy with minimum mobile number?", "score": 100.97943115234375, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48240982170125535, "beam_bleu_score": 0.3851605690753526}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Timmothy' GROUP BY T1.cell_mobile_number HAVING sum( T1.last_name) = 'Ward'     ", "inferred_question": "", "score": 100.5923080444336, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.last_name = 'Ward' GROUP BY T1.cell_mobile_number HAVING min( T1.first_name) = 'Timmothy'     ", "inferred_question": "", "score": 99.6280746459961, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 555, "beams": [{"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum registration date?", "score": 0.0, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7486479381987037, "beam_bleu_score": 0.5753937583180341}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum last name?", "score": -29.983829498291016, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5743301513055017, "beam_bleu_score": 0.5731498177397348}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.middle_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum middle name?", "score": -32.12204360961914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5422398249310184, "beam_bleu_score": 0.5564359145466845}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum first name?", "score": -32.53156280517578, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5802617661475695, "beam_bleu_score": 0.6088738490382501}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -36.05574035644531, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -36.115901947021484, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.first_name, T1.middle_name, T1.last_name  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -36.92462158203125, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -39.13499069213867, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, min( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -40.9398078918457, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, max( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -43.367557525634766, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( *) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -43.63102722167969, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, count( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -43.69539260864258, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, avg( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -44.97572326660156, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, sum( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -44.97781753540039, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT count( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -47.6844596862793, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 556, "beams": [{"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum registration date?", "score": -2.9802276912960224e-06, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8032211539009295, "beam_bleu_score": 0.5263724613263256}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.date_first_registered, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "What are the registration dates, middle names, and last names of students with minimum registration date?", "score": -12.732287406921387, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5566933100485124, "beam_bleu_score": 0.44279761592548045}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -28.537857055664062, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -31.921768188476562, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, count( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -38.17667770385742, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.date_first_registered, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -38.84455871582031, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, min( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -39.00994873046875, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, min( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -39.020816802978516, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, count( T1.last_name) FROM Students AS T1  GROUP BY T1.middle_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -40.185455322265625, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.first_name, T1.middle_name, T1.last_name  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -40.404727935791016, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum first name?", "score": -41.370479583740234, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6225279140984306, "beam_bleu_score": 0.5526025356656117}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum last name?", "score": -42.288944244384766, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6061667228883032, "beam_bleu_score": 0.520002657466788}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT min( T1.first_name), T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -42.48352813720703, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.first_name, sum( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -42.60298538208008, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT T1.date_first_registered, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -42.82753372192383, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 557, "beams": [{"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum last name?", "score": -0.030459150671958923, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4655410420983228, "beam_bleu_score": 0.5415304699370619}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.middle_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum middle name?", "score": -3.50659441947937, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4469856863617696, "beam_bleu_score": 0.529531552770554}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id    ORDER BY T2.department_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs for departments in semesters with minimum name?", "score": -14.026629447937012, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2932574418228424, "beam_bleu_score": 0.38107904111974694}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id    ORDER BY T2.department_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum department?", "score": -15.17868423461914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3093468497431099, "beam_bleu_score": 0.41169017638738664}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -16.714351654052734, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Semesters AS T2 ON T13.semester_id = T2.semester_id    ORDER BY T2.semester_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum name?", "score": -17.550945281982422, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3278609733088782, "beam_bleu_score": 0.4325370597201522}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_left ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum exmatriculation date?", "score": -20.75973892211914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47915955995090453, "beam_bleu_score": 0.49324184623372835}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum first name?", "score": -20.782291412353516, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46263010645275093, "beam_bleu_score": 0.5414618429590818}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum registration date?", "score": -21.536102294921875, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.383976764085566, "beam_bleu_score": 0.5148800546557083}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id    ORDER BY T2.department_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs for departments in semesters with minimum id?", "score": -22.929397583007812, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.294218249898873, "beam_bleu_score": 0.38683158414195795}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.student_enrolment_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum id?", "score": -24.043987274169922, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32150806258949016, "beam_bleu_score": 0.4399632668613246}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.degree_program_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum degree program?", "score": -28.270763397216797, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3785869368794732, "beam_bleu_score": 0.40055343846556524}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id    ORDER BY T2.country ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with addresses with minimum country?", "score": -29.379806518554688, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29054729560123804, "beam_bleu_score": 0.4818677252465847}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id    ORDER BY T2.degree_summary_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum summary name?", "score": -30.06378936767578, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3351137187523281, "beam_bleu_score": 0.40518072820298073}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.current_address_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum current address?", "score": -31.15085220336914, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3501902124502224, "beam_bleu_score": 0.5127662484077298}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 558, "beams": [{"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.last_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum last name?", "score": -0.0004573014739435166, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5675518107252733, "beam_bleu_score": 0.4607562809569674}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.middle_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum middle name?", "score": -7.692197322845459, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5619801238936746, "beam_bleu_score": 0.4505722496977008}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.student_enrolment_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum id?", "score": -13.946981430053711, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35269291929931423, "beam_bleu_score": 0.3709944823326103}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.first_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum first name?", "score": -19.059682846069336, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5680171432269416, "beam_bleu_score": 0.4556073579750717}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -19.2844295501709, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_left ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum exmatriculation date?", "score": -21.47804069519043, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5381243166802643, "beam_bleu_score": 0.43098844995483027}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with minimum registration date?", "score": -24.632837295532227, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4467874275644883, "beam_bleu_score": 0.4449673333692838}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Semesters AS T2 ON T13.semester_id = T2.semester_id    ORDER BY T2.semester_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum name?", "score": -27.122079849243164, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36111659731913115, "beam_bleu_score": 0.36647342545768663}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T2 ON T13.degree_program_id = T2.degree_program_id    ORDER BY T2.department_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum department?", "score": -27.779199600219727, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3364504494056175, "beam_bleu_score": 0.34715349069903423}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, max( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.last_name ASC LIMIT 1    ", "inferred_question": "", "score": -28.10067367553711, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id    ORDER BY T2.country ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students with addresses with minimum country?", "score": -29.737924575805664, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.381289028173044, "beam_bleu_score": 0.4062248346875882}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Degree_Programs AS T14 ON T13.degree_program_id = T14.degree_program_id JOIN Departments AS T2 ON T14.department_id = T2.department_id    ORDER BY T2.department_name ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs for departments in semesters with minimum name?", "score": -30.7018985748291, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29211519534342334, "beam_bleu_score": 0.3228748576125247}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, avg( T1.middle_name), T1.last_name FROM Students AS T1  GROUP BY T1.last_name  ORDER BY T1.last_name ASC LIMIT 1    ", "inferred_question": "", "score": -31.378337860107422, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id    ORDER BY T2.semester_id ASC LIMIT 1    ", "inferred_question": "What are the first names, middle names, and last names of students enrolled for programs in semesters with minimum semester?", "score": -33.074188232421875, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36510239853139825, "beam_bleu_score": 0.3528217711841797}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1  GROUP BY T1.first_name, T1.middle_name, T1.last_name  ORDER BY min( T1.last_name) ASC LIMIT 1    ", "inferred_question": "", "score": -33.17280197143555, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 563, "beams": [{"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What is the average date of all transcripts?", "score": 0.0, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7176717701422837, "beam_bleu_score": 0.5033298128672596}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( *) FROM Transcripts AS T1        ", "inferred_question": "How many transcripts are there?", "score": -31.621837615966797, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33119314076519857, "beam_bleu_score": 0.3779139638615842}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts with minimum date?", "score": -31.950786590576172, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3931575660775667, "beam_bleu_score": 0.39775098034480855}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts?", "score": -33.699615478515625, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6189837242770844, "beam_bleu_score": 0.39323224429998427}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What is the total date of all transcripts?", "score": -33.97691345214844, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42561568355874746, "beam_bleu_score": 0.3882883969480427}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -35.35930633544922, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts with maximum date?", "score": -35.68402099609375, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29200208964390784, "beam_bleu_score": 0.39013904973667796}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "How many dates of transcripts are there?", "score": -39.55243682861328, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35121030890259075, "beam_bleu_score": 0.4272078016815239}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT avg( T1.date_left) FROM Students AS T1        ", "inferred_question": "What is the average exmatriculation date of all students?", "score": -77.70923614501953, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08532632976378762, "beam_bleu_score": 0.2592731430933984}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.date_left) FROM Students AS T1        ", "inferred_question": "How many exmatriculation dates of students are there?", "score": -84.64848327636719, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05999235622658616, "beam_bleu_score": 0.19320261610418263}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.date_first_registered) FROM Students AS T1        ", "inferred_question": "How many registration dates of students are there?", "score": -91.28064727783203, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05110505948303279, "beam_bleu_score": 0.21477094869056254}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -91.51529693603516, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcripts AS T1        ", "inferred_question": "How many ids of transcripts are there?", "score": -92.02423858642578, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19038811668816757, "beam_bleu_score": 0.41545622799151893}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT T1.date_left FROM Students AS T1        ", "inferred_question": "What are the exmatriculation dates of students?", "score": -95.45716857910156, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.057674683160948814, "beam_bleu_score": 0.21589397232341911}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT count( T1.ssn) FROM Students AS T1        ", "inferred_question": "How many ssns of students are there?", "score": -102.45897674560547, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.046508892153763304, "beam_bleu_score": 0.19400775704696221}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 564, "beams": [{"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What is the average date of all transcripts?", "score": 0.0, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9011884082291053, "beam_bleu_score": 0.7372024927972581}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( *) FROM Addresses AS T1        ", "inferred_question": "How many addresses are there?", "score": -36.42791748046875, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.01998561667100951, "beam_bleu_score": 0.1395059647654208}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What is the total date of all transcripts?", "score": -37.4434928894043, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5262680461726263, "beam_bleu_score": 0.6074524491035249}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts with maximum date?", "score": -38.11240005493164, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3518063800018989, "beam_bleu_score": 0.4494780405208269}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts with minimum date?", "score": -39.09416961669922, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4109224372516963, "beam_bleu_score": 0.4494780405208269}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts?", "score": -44.18386459350586, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7944589508069926, "beam_bleu_score": 0.6185473751598289}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "How many dates of transcripts are there?", "score": -47.444305419921875, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42161369822967554, "beam_bleu_score": 0.46805692593788784}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -47.6102180480957, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcripts AS T1        ", "inferred_question": "How many ids of transcripts are there?", "score": -100.36473083496094, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19805461234018018, "beam_bleu_score": 0.42052935174095557}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT count( T1.transcript_id) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -105.99723052978516, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.transcript_id) FROM Transcripts AS T1        ", "inferred_question": "What is the average id of all transcripts?", "score": -107.03815460205078, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23306121251761225, "beam_bleu_score": 0.7055141614674272}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.transcript_id) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -111.30208587646484, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT T1.date_left FROM Students AS T1        ", "inferred_question": "What are the exmatriculation dates of students?", "score": -112.4129638671875, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11158310679621342, "beam_bleu_score": 0.29549988591738935}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT avg( T1.date_left) FROM Students AS T1        ", "inferred_question": "What is the average exmatriculation date of all students?", "score": -112.80783081054688, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25810307426559653, "beam_bleu_score": 0.4349037198810837}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT T1.transcript_id FROM Transcripts AS T1        ", "inferred_question": "What are the ids of transcripts?", "score": -117.35896301269531, "correct_code": "SELECT avg(transcript_date) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13890567491823436, "beam_bleu_score": 0.5416714371439356}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 565, "beams": [{"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "What are the dates and detailses of transcripts with minimum date?", "score": -2.7656173188006505e-05, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3841080764051873, "beam_bleu_score": 0.5183384976990463}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.other_student_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -12.136261940002441, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.other_address_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -25.83138084411621, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.first_name FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -30.05405044555664, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.date_first_registered FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -31.219261169433594, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T2.date_left FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -38.180259704589844, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, avg( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -40.1622200012207, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, max( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -40.36466979980469, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, count( T1.other_details) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -40.399864196777344, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, count( *) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -40.73014831542969, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.date_first_registered ASC LIMIT 1    ", "inferred_question": "", "score": -42.947364807128906, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.date_first_registered, T2.transcript_date FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -43.934730529785156, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1  GROUP BY T1.transcript_date, T1.other_details  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -44.08654022216797, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, max( T1.other_details) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -44.93545913696289, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT T1.transcript_date, avg( T1.other_details) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -45.41171646118164, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 566, "beams": [{"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "What are the dates and detailses of transcripts with minimum date?", "score": 0.0, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3452711937013654, "beam_bleu_score": 0.44046733685218525}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, max( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -28.890501022338867, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.date_first_registered, T2.transcript_date FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -30.341686248779297, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT max( T1.transcript_date), T1.other_details FROM Transcripts AS T1  GROUP BY T1.other_details  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -30.498802185058594, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T2.other_student_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -31.727174758911133, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.date_left, T2.transcript_date FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -31.903799057006836, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, min( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -32.52178192138672, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, avg( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -34.622276306152344, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, sum( T1.transcript_date) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -35.422035217285156, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T2.other_address_details FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -36.811607360839844, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, count( *) FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -37.5369987487793, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.other_details, T1.transcript_date FROM Transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "What are the detailses and dates of transcripts with minimum date?", "score": -38.765724182128906, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33516263417908676, "beam_bleu_score": 0.44046733685218525}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT min( T1.transcript_date), T1.other_details FROM Transcripts AS T1  GROUP BY T1.other_details  ORDER BY T1.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -38.78168869018555, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.date_first_registered, T2.other_details FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date ASC LIMIT 1    ", "inferred_question": "", "score": -39.23395919799805, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1  GROUP BY T1.transcript_date, T1.other_details  ORDER BY sum( T1.transcript_date) ASC LIMIT 1    ", "inferred_question": "", "score": -47.24226760864258, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 567, "beams": [{"orig_question": "How many transcripts are released?", "inferred_code": "SELECT count( *) FROM Transcripts AS T1        ", "inferred_question": "How many transcripts are there?", "score": -0.1868520975112915, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.886740379986275, "beam_bleu_score": 0.7578511049569991}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -1.7694097757339478, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Transcripts AS T1        ", "inferred_question": "Show me everything about transcripts.", "score": -28.0372257232666, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11226978852951763, "beam_bleu_score": 0.41715505705879324}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -29.40458869934082, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts?", "score": -32.915653228759766, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24340789645957517, "beam_bleu_score": 0.48081854483746056}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT min( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -35.44198226928711, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT min( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -37.117042541503906, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT sum( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -42.545814514160156, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT sum( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -44.28974151611328, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT avg( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -48.394859313964844, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT T1.transcript_id FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -48.59202194213867, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts with maximum date?", "score": -48.760704040527344, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21027205523984538, "beam_bleu_score": 0.3467774518171045}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT max( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -49.347904205322266, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1        ", "inferred_question": "What is the average date of all transcripts?", "score": -49.395484924316406, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22035958964238989, "beam_bleu_score": 0.3225845582080583}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT avg( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -50.1115608215332, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 568, "beams": [{"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT count( *) FROM Transcripts AS T1        ", "inferred_question": "How many transcripts are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9651401939846148, "beam_bleu_score": 0.7931598164713731}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT count( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -27.071054458618164, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Transcripts AS T1        ", "inferred_question": "Show me everything about transcripts.", "score": -29.703969955444336, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1403689920640815, "beam_bleu_score": 0.4212654554299518}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT min( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -37.664573669433594, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT avg( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -43.23838424682617, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT sum( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -43.45997619628906, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT max( *) FROM Transcripts AS T1        ", "inferred_question": "", "score": -54.57928466796875, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -55.45973205566406, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT min( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -64.9696273803711, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT T1.transcript_id FROM Transcripts AS T1        ", "inferred_question": "What are the ids of transcripts?", "score": -69.65068817138672, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23101671763860965, "beam_bleu_score": 0.5123887795141121}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT avg( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -70.41057586669922, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1        ", "inferred_question": "What are the dates of transcripts?", "score": -70.57489776611328, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19355952930195508, "beam_bleu_score": 0.48339828981453214}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT sum( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -70.83724212646484, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT T1.transcript_id FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -81.08992004394531, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT max( *) FROM Transcript_Contents AS T1        ", "inferred_question": "", "score": -81.6239013671875, "correct_code": "SELECT count(*) FROM Transcripts", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 569, "beams": [{"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What are the dates of transcripts with maximum date?", "score": 0.0, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38673867688154984, "beam_bleu_score": 0.4665480317257385}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.date_left DESC LIMIT 1    ", "inferred_question": "", "score": -32.508094787597656, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.date_left FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date DESC LIMIT 1    ", "inferred_question": "", "score": -33.268348693847656, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What are the dates of transcripts with maximum date with maximum date?", "score": -34.497257232666016, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41237817974117597, "beam_bleu_score": 0.34621351654263527}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What is the average date of all transcripts with maximum date?", "score": -44.884544372558594, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26762390092412514, "beam_bleu_score": 0.4490372570740515}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What are the dates of transcripts with maximum date with minimum date?", "score": -48.2226676940918, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3361004808746323, "beam_bleu_score": 0.34621351654263527}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY sum( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -49.340232849121094, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY count( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -49.4705696105957, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY max( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -49.59482192993164, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY avg( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -50.2376823425293, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What is the total date of all transcripts with maximum date?", "score": -50.383827209472656, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35354906351189497, "beam_bleu_score": 0.4451478725745553}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.last_name DESC LIMIT 1    ", "inferred_question": "", "score": -52.16709899902344, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "How many dates of transcripts with maximum date are there?", "score": -52.808082580566406, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2208068397601688, "beam_bleu_score": 0.3368210138680669}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY min( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -57.45909118652344, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Transcript_Contents AS T15 ON T14.student_course_id = T15.student_course_id JOIN Transcripts AS T2 ON T15.transcript_id = T2.transcript_id    ORDER BY T2.transcript_date DESC LIMIT 1    ", "inferred_question": "", "score": -64.26689147949219, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 570, "beams": [{"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What are the dates of transcripts with maximum date?", "score": 0.0, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27570469793323826, "beam_bleu_score": 0.32804037198331326}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT max( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What are the dates of transcripts with maximum date with maximum date?", "score": -27.052223205566406, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2642966767883508, "beam_bleu_score": 0.24362437022827685}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT min( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What are the dates of transcripts with maximum date with minimum date?", "score": -39.130516052246094, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20245015211306117, "beam_bleu_score": 0.24539630056432724}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT avg( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What is the average date of all transcripts with maximum date?", "score": -41.89841842651367, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18976991926282738, "beam_bleu_score": 0.2884340739889855}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.last_name DESC LIMIT 1    ", "inferred_question": "", "score": -43.612823486328125, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT count( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "How many dates of transcripts with maximum date are there?", "score": -45.838993072509766, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13680376940863315, "beam_bleu_score": 0.2737961688097689}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY count( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -46.3491325378418, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT sum( T1.transcript_date) FROM Transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    ", "inferred_question": "What is the total date of all transcripts with maximum date?", "score": -46.76423263549805, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20424168914598628, "beam_bleu_score": 0.29187983548572505}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY max( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -46.76585388183594, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY sum( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -48.302757263183594, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY avg( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -48.97528076171875, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T2.date_left DESC LIMIT 1    ", "inferred_question": "", "score": -53.284366607666016, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1  GROUP BY T1.transcript_date  ORDER BY min( T1.transcript_date) DESC LIMIT 1    ", "inferred_question": "", "score": -53.7242431640625, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T2.country DESC LIMIT 1    ", "inferred_question": "", "score": -61.183258056640625, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T16 ON T15.student_id = T16.student_id JOIN Addresses AS T2 ON T16.permanent_address_id = T2.address_id    ORDER BY T2.state_province_county DESC LIMIT 1    ", "inferred_question": "", "score": -64.98302459716797, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 577, "beams": [{"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.address_id) FROM Addresses AS T1        ", "inferred_question": "How many distinct ids of addresses are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3403616854813779, "beam_bleu_score": 0.43277685845202407}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.address_id) FROM Addresses AS T1        ", "inferred_question": "What are the distinct ids of addresses with minimum id?", "score": -38.17841339111328, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08235935099958924, "beam_bleu_score": 0.3218946171663423}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1        ", "inferred_question": "What are the distinct ids of addresses?", "score": -38.36791229248047, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10587671774606289, "beam_bleu_score": 0.26005361470083355}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.current_address_id) FROM Students AS T1        ", "inferred_question": "How many distinct current addresses of students are there?", "score": -43.37584686279297, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8243186430565044, "beam_bleu_score": 0.6971576525612416}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.permanent_address_id) FROM Students AS T1        ", "inferred_question": "How many distinct permanent addresses of students are there?", "score": -45.54999542236328, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5747319307721167, "beam_bleu_score": 0.6289786050999783}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.address_id) FROM Addresses AS T1        ", "inferred_question": "What is the total id of all distinct addresses?", "score": -45.953243255615234, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1825650965773593, "beam_bleu_score": 0.28977832016676247}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.address_id) FROM Addresses AS T1        ", "inferred_question": "What is the average id of all distinct addresses?", "score": -49.74549865722656, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10998636156211061, "beam_bleu_score": 0.3039984503735561}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.address_id) FROM Addresses AS T1        ", "inferred_question": "What are the distinct ids of addresses with maximum id?", "score": -59.284175872802734, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08232518663970068, "beam_bleu_score": 0.32938254087310675}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.other_address_details) FROM Addresses AS T1        ", "inferred_question": "How many distinct detailses of addresses are there?", "score": -63.75651550292969, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2607898700680622, "beam_bleu_score": 0.46204622500181397}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.city) FROM Addresses AS T1        ", "inferred_question": "How many distinct cities of addresses are there?", "score": -65.27503967285156, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20669755853879734, "beam_bleu_score": 0.44608409313961306}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.ssn) FROM Students AS T1        ", "inferred_question": "How many distinct ssns of students are there?", "score": -73.58222198486328, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2631829821495467, "beam_bleu_score": 0.4235264381047504}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.email_address) FROM Students AS T1        ", "inferred_question": "How many distinct email addresses of students are there?", "score": -77.12630462646484, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3639656839937253, "beam_bleu_score": 0.5823239230557946}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT T1.current_address_id FROM Students AS T1        ", "inferred_question": "What are the distinct current addresses of students?", "score": -80.31697082519531, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44218517263828117, "beam_bleu_score": 0.5367530179422274}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.current_address_id) FROM Students AS T1        ", "inferred_question": "What are the distinct current addresses of students with minimum current address?", "score": -81.62686920166016, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39217658624694374, "beam_bleu_score": 0.443926276749924}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT DISTINCT T1.city FROM Addresses AS T1        ", "inferred_question": "What are the distinct cities of addresses?", "score": -82.0282974243164, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10623135717454069, "beam_bleu_score": 0.2792608898157211}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 578, "beams": [{"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1        ", "inferred_question": "What are the distinct ids of addresses?", "score": -0.0039817458018660545, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2476989498256904, "beam_bleu_score": 0.3441651044267812}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct ids of addresses of students?", "score": -5.73002815246582, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45295368643394085, "beam_bleu_score": 0.5069329356841514}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1        ", "inferred_question": "What are the distinct detailses of addresses?", "score": -7.230924129486084, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21062718324014262, "beam_bleu_score": 0.39545720793228895}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct detailses of addresses of students?", "score": -12.692634582519531, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4049517896741911, "beam_bleu_score": 0.5308158767153766}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.email_address FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id        ", "inferred_question": "What are the distinct email addresses of students with addresses?", "score": -20.027751922607422, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30380120804616095, "beam_bleu_score": 0.5617767137926991}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct ids of addresses of students?", "score": -23.804702758789062, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45295368643394085, "beam_bleu_score": 0.5069329356841514}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.email_address FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id        ", "inferred_question": "What are the distinct email addresses of students with addresses?", "score": -25.536609649658203, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30380120804616095, "beam_bleu_score": 0.5617767137926991}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct ids of addresses of students?", "score": -25.544858932495117, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45295368643394085, "beam_bleu_score": 0.5069329356841514}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.address_id) FROM Addresses AS T1        ", "inferred_question": "How many distinct ids of addresses are there?", "score": -29.834064483642578, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2357865823010994, "beam_bleu_score": 0.34517722124542005}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct detailses of addresses of students?", "score": -30.304899215698242, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4049517896741911, "beam_bleu_score": 0.5308158767153766}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct ids of addresses of students?", "score": -31.00358772277832, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45295368643394085, "beam_bleu_score": 0.5069329356841514}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct ids of addresses of students?", "score": -31.041105270385742, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45295368643394085, "beam_bleu_score": 0.5069329356841514}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "What are the distinct ids of addresses of students?", "score": -31.09461212158203, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45295368643394085, "beam_bleu_score": 0.5069329356841514}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.address_id) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id        ", "inferred_question": "How many distinct ids of addresses of students are there?", "score": -35.26429748535156, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44919564508536347, "beam_bleu_score": 0.4880141318631465}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT T1.other_address_details FROM Addresses AS T1        ", "inferred_question": "What are the distinct detailses of addresses?", "score": -35.70566940307617, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21062718324014262, "beam_bleu_score": 0.39545720793228895}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 587, "beams": [{"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the titles of cartoons whose director is ben jones?", "score": 60.507442474365234, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6413683819926955, "beam_bleu_score": 0.3082048380174885}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the titles of cartoons whose director is ben jones with maximum title?", "score": 26.259063720703125, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4163558359999586, "beam_bleu_score": 0.2344231336521446}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "How many titles of cartoons whose director is ben jones are there?", "score": 24.31732177734375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48740264439875014, "beam_bleu_score": 0.2768673284878216}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Directed_by FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the directors of cartoons whose director is ben jones?", "score": 24.023921966552734, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5467962422710574, "beam_bleu_score": 0.2931653566772689}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT min( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the titles of cartoons whose director is ben jones with minimum title?", "score": 22.79855728149414, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3847405665980249, "beam_bleu_score": 0.2344231336521446}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What is the average title of all cartoons whose director is ben jones?", "score": 21.725784301757812, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29615162295536646, "beam_bleu_score": 0.3117675504852178}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT sum( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What is the total title of all cartoons whose director is ben jones?", "score": 19.8123779296875, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5539838506570505, "beam_bleu_score": 0.321146631031356}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING count( T1.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 18.088058471679688, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING avg( T1.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 14.4075927734375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Written_by FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the writers of cartoons whose director is ben jones?", "score": 13.663318634033203, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37708098389294775, "beam_bleu_score": 0.30398693922204}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose director is ben jones?", "score": 11.11761474609375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3748154242678833, "beam_bleu_score": 0.20841844634145956}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING max( T1.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 10.871856689453125, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING sum( T1.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 9.94839859008789, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING min( T1.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 7.784797668457031, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "How many cartoons whose director is ben jones are there?", "score": 3.9216651916503906, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5404523679875826, "beam_bleu_score": 0.32517720004496914}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 588, "beams": [{"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose director is ben jones?", "score": 52.53392791748047, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44653116606383947, "beam_bleu_score": 0.45839526029087}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the titles of cartoons whose director is ben jones?", "score": 36.68903732299805, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7881546484124403, "beam_bleu_score": 0.603991413829455}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose director is ben jones with maximum series name?", "score": 16.63727569580078, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30219062286392806, "beam_bleu_score": 0.3481219662640724}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "inferred_question": "How many series names of tv channels which air cartoons whose director is ben jones are there?", "score": 15.286888122558594, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4143446061453574, "beam_bleu_score": 0.3805571787040788}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose director is ben jones with minimum series name?", "score": 14.063835144042969, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3718243072333358, "beam_bleu_score": 0.3481219662640724}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "inferred_question": "What is the average series name of all tv channels which air cartoons whose director is ben jones?", "score": 12.731143951416016, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44956189339090313, "beam_bleu_score": 0.3841981144936858}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 11.73263931274414, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'       ", "inferred_question": "What is the total series name of all tv channels which air cartoons whose director is ben jones?", "score": 11.164955139160156, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45921098912862734, "beam_bleu_score": 0.39526942813798754}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 10.807758331298828, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "How many titles of cartoons whose director is ben jones are there?", "score": 10.384613037109375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5398377335405886, "beam_bleu_score": 0.4789232204309912}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 6.503589630126953, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 4.8504486083984375, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": 3.435283660888672, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       ", "inferred_question": "What are the titles of cartoons whose director is ben jones with maximum title?", "score": -3.0448684692382812, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4508106150925053, "beam_bleu_score": 0.4517595747785763}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1  GROUP BY T1.Title HAVING count( T1.Directed_by) = 'Ben Jones'     ", "inferred_question": "", "score": -4.5431365966796875, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 589, "beams": [{"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "How many cartoons whose writer is joseph kuhr are there?", "score": 51.342166900634766, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9560548851289898, "beam_bleu_score": 0.5545165859512198}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT min( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "", "score": 11.164531707763672, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT T1.Written_by FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What are the writers of cartoons whose writer is joseph kuhr?", "score": 10.98177719116211, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4917016784584123, "beam_bleu_score": 0.3743825255649909}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT sum( T1.Title) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What is the total title of all cartoons whose writer is joseph kuhr?", "score": 10.260211944580078, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5360092672692892, "beam_bleu_score": 0.32487651586283667}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING count( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": 9.308391571044922, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What are the titles of cartoons whose writer is joseph kuhr?", "score": 7.389213562011719, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4177290555057097, "beam_bleu_score": 0.378185182284593}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT avg( T1.Written_by) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What is the average writer of all cartoons whose writer is joseph kuhr?", "score": 5.682037353515625, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4775423760324994, "beam_bleu_score": 0.31298590400305304}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING avg( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": 5.580657958984375, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING max( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": 4.542591094970703, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT sum( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "", "score": 4.416988372802734, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING sum( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": 3.8612518310546875, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What is the average title of all cartoons whose writer is joseph kuhr?", "score": 3.3445396423339844, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43123749745823303, "beam_bleu_score": 0.3153885041093246}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT min( T1.Title) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What are the titles of cartoons whose writer is joseph kuhr with minimum title?", "score": 1.5475845336914062, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29218655062582743, "beam_bleu_score": 0.29408535310575457}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING min( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": 1.0383415222167969, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT sum( T1.Written_by) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What is the total writer of all cartoons whose writer is joseph kuhr?", "score": 0.9256668090820312, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5409687892096591, "beam_bleu_score": 0.3222620691301207}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 590, "beams": [{"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "How many cartoons whose writer is joseph kuhr are there?", "score": 40.35041046142578, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.4378558596484999}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "How many cartoons whose writer is joseph kuhr are there?", "score": 13.873275756835938, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.4378558596484999}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT T1.Written_by FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What are the writers of cartoons whose writer is joseph kuhr?", "score": 8.288986206054688, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7068227202656379, "beam_bleu_score": 0.5185343417652406}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT min( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "", "score": 3.039318084716797, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT avg( T1.Written_by) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What is the average writer of all cartoons whose writer is joseph kuhr?", "score": 2.4764556884765625, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6129649078166752, "beam_bleu_score": 0.47372201027960975}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT sum( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "", "score": 0.6285781860351562, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING count( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": -1.5805015563964844, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT avg( T1.id) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What is the average id of all cartoons whose writer is joseph kuhr?", "score": -2.9713363647460938, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5158122915148815, "beam_bleu_score": 0.48454025708854215}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING avg( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": -3.3619308471679688, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT T1.id FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What are the ids of cartoons whose writer is joseph kuhr?", "score": -3.8787269592285156, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5556906942327466, "beam_bleu_score": 0.5528745953736489}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING max( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": -6.13629150390625, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING sum( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": -6.720485687255859, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT sum( T1.id) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "What is the total id of all cartoons whose writer is joseph kuhr?", "score": -8.123390197753906, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6560269561340981, "beam_bleu_score": 0.4998060285936763}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT count( *) FROM Cartoon AS T1   HAVING min( T1.Written_by) = 'Joseph Kuhr'     ", "inferred_question": "", "score": -10.360790252685547, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT * FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       ", "inferred_question": "Show me everything about cartoons whose writer is joseph kuhr.", "score": -12.728374481201172, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3332778546483687, "beam_bleu_score": 0.37350728190828014}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 597, "beams": [{"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the number of series names and number of contents of tv channels?", "score": -0.08198173344135284, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7600208431061083, "beam_bleu_score": 0.6052061209825838}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "inferred_question": "", "score": -2.7610418796539307, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT T1.series_name, count(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "inferred_question": "", "score": -4.167867660522461, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT T1.series_name, T1.Content FROM TV_Channel AS T1        ", "inferred_question": "What are the series names and contents of tv channels?", "score": -16.040800094604492, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5439513131458691, "beam_bleu_score": 0.456444878121411}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), sum(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the number of series names and total content of tv channels?", "score": -25.31552505493164, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7023513710750597, "beam_bleu_score": 0.589698755329205}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), avg(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the number of series names and average content of tv channels?", "score": -26.00261688232422, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.60929525724456, "beam_bleu_score": 0.5831956394061913}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the total series name and number of contents of tv channels?", "score": -26.34022331237793, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6489487841291499, "beam_bleu_score": 0.5543453381672161}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the minimum series name and number of contents of tv channels?", "score": -26.922382354736328, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46814468945136556, "beam_bleu_score": 0.5503898737577814}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the average series name and number of contents of tv channels?", "score": -28.87697982788086, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5806695811074564, "beam_bleu_score": 0.5481201764480448}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "inferred_question": "", "score": -30.530742645263672, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), min(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the number of series names and minimum content of tv channels?", "score": -30.666650772094727, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5611948123763407, "beam_bleu_score": 0.5856105798347451}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the maximum series name and number of contents of tv channels?", "score": -30.94147300720215, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5036969031954901, "beam_bleu_score": 0.5429566221037122}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT T1.series_name, sum(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "inferred_question": "", "score": -31.562273025512695, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "inferred_question": "", "score": -32.30095672607422, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), max(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the number of series names and maximum content of tv channels?", "score": -32.604434967041016, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6128383089741788, "beam_bleu_score": 0.5777643590682374}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 598, "beams": [{"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, T1.Content FROM TV_Channel AS T1        ", "inferred_question": "What are the series names and contents of tv channels?", "score": -0.062142737209796906, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6077862732085102, "beam_bleu_score": 0.43927848949407755}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, count(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "inferred_question": "", "score": -2.8150227069854736, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "inferred_question": "", "score": -7.968380928039551, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.Title, T2.Content FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id        ", "inferred_question": "What are the titles of cartoons aired by tv channels? Also show the contents of the tv channels.", "score": -13.634917259216309, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3850346048911528, "beam_bleu_score": 0.30594758649417997}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.Title, count(DISTINCT T2.Content) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Title      ", "inferred_question": "", "score": -14.89194393157959, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Title), T2.Content FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T2.Content      ", "inferred_question": "", "score": -17.457597732543945, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM TV_Channel AS T1        ", "inferred_question": "What are the number of series names and number of contents of tv channels?", "score": -22.351337432861328, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7555691620215831, "beam_bleu_score": 0.47176285029004245}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "inferred_question": "", "score": -23.661340713500977, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "inferred_question": "", "score": -23.90488052368164, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, sum(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "inferred_question": "", "score": -25.143505096435547, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, avg(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "inferred_question": "", "score": -25.590126037597656, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content      ", "inferred_question": "", "score": -26.44192886352539, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Title), count(DISTINCT T2.Content) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id        ", "inferred_question": "What are the number of titles of cartoons aired by tv channels? Also show the number of contents of the tv channels.", "score": -27.788021087646484, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5125145098459263, "beam_bleu_score": 0.2589314367081482}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, min(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "inferred_question": "", "score": -29.24485969543457, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT T1.series_name, max(DISTINCT T1.Content) FROM TV_Channel AS T1  GROUP BY T1.series_name      ", "inferred_question": "", "score": -29.728839874267578, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 599, "beams": [{"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels which air cartoons whose title is sky radio?", "score": 86.06129455566406, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5289176243963927, "beam_bleu_score": 0.3797361729659003}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels whose series name is sky radio?", "score": 81.23334503173828, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9116676520695788, "beam_bleu_score": 0.5272058806586093}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels which air cartoons whose title is sky radio with maximum content?", "score": 52.59690475463867, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5205491425132145, "beam_bleu_score": 0.33091844906319917}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "How many contents of tv channels which air cartoons whose title is sky radio are there?", "score": 50.49092102050781, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3489391584990077, "beam_bleu_score": 0.29889258044734773}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What is the total content of all tv channels which air cartoons whose title is sky radio?", "score": 50.317970275878906, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5229160223255747, "beam_bleu_score": 0.392382128697652}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels whose series name is sky radio with maximum content?", "score": 47.846588134765625, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6772891909567662, "beam_bleu_score": 0.4384531740901436}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels which air cartoons whose title is sky radio with minimum content?", "score": 46.90046310424805, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47769788027275073, "beam_bleu_score": 0.33091844906319917}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Content) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What is the average content of all tv channels which air cartoons whose title is sky radio?", "score": 46.79286575317383, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5122691992636605, "beam_bleu_score": 0.3878992663972832}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "How many contents of tv channels whose series name is sky radio are there?", "score": 45.60931396484375, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43387228729223426, "beam_bleu_score": 0.41688108082127145}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What is the total content of all tv channels whose series name is sky radio?", "score": 45.5147819519043, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7760429784187926, "beam_bleu_score": 0.5273521590889723}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels which air TV serieses whose channel is sky radio?", "score": 43.818634033203125, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6291252273593382, "beam_bleu_score": 0.4147605913743543}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'TV Channel'       ", "inferred_question": "What are the contents of tv channels which air cartoons whose title is tv channel?", "score": 43.25439453125, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2981689909146069, "beam_bleu_score": 0.346182549914069}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels whose series name is sky radio with minimum content?", "score": 42.07170104980469, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5661299397507, "beam_bleu_score": 0.4384531740901436}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'Sky Radio'     ", "inferred_question": "", "score": 39.589195251464844, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'Sky Radio'     ", "inferred_question": "", "score": 36.01688766479492, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 600, "beams": [{"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels whose series name is sky radio?", "score": 101.24468231201172, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4893825363493156, "beam_bleu_score": 0.47133844595733243}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels whose series name is sky radio with maximum content?", "score": 67.29685974121094, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39222996195331217, "beam_bleu_score": 0.35096166653895405}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "How many contents of tv channels whose series name is sky radio are there?", "score": 64.68550872802734, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26517135768303013, "beam_bleu_score": 0.36139163079287934}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What is the total content of all tv channels whose series name is sky radio?", "score": 64.29251098632812, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4762806754901402, "beam_bleu_score": 0.4490959671913638}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT avg( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What is the average content of all tv channels whose series name is sky radio?", "score": 62.39850616455078, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44537155065356815, "beam_bleu_score": 0.4450165303470292}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 62.14299011230469, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT min( T1.Content) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the contents of tv channels whose series name is sky radio with minimum content?", "score": 59.39311981201172, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37648156548574674, "beam_bleu_score": 0.35096166653895405}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING avg( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 57.14207458496094, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING max( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 56.123313903808594, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING sum( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 53.4625129699707, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content HAVING min( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 50.72414779663086, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT max( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 28.12713623046875, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT count( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 25.595130920410156, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT sum( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 24.906631469726562, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT avg( T1.Content) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 23.100013732910156, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 601, "beams": [{"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels which air cartoons whose title is sky radio?", "score": 72.76737976074219, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5703575357375856, "beam_bleu_score": 0.36189949978371877}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels whose series name is sky radio?", "score": 68.75825500488281, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9821662671893502, "beam_bleu_score": 0.4945172043399455}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.Package_Option = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels whose package option is sky radio?", "score": 64.07032012939453, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9315617813664223, "beam_bleu_score": 0.41339352655039807}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels which air cartoons whose title is sky radio with maximum package option?", "score": 38.53974914550781, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6106944047887857, "beam_bleu_score": 0.3010564248759437}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "How many package options of tv channels which air cartoons whose title is sky radio are there?", "score": 36.807777404785156, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4552489883680366, "beam_bleu_score": 0.3016608149077066}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels whose series name is sky radio with maximum package option?", "score": 34.65824508666992, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7936739938101824, "beam_bleu_score": 0.39132434320284215}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What is the total package option of all tv channels which air cartoons whose title is sky radio?", "score": 34.06713104248047, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5968955249012615, "beam_bleu_score": 0.3887870979661155}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels which air TV serieses whose channel is sky radio?", "score": 34.00386047363281, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7320346804836431, "beam_bleu_score": 0.3963786952528546}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels which air cartoons whose title is sky radio with minimum package option?", "score": 33.137115478515625, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5941304783791275, "beam_bleu_score": 0.3010564248759437}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "How many package options of tv channels whose series name is sky radio are there?", "score": 32.81192398071289, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6414608091334979, "beam_bleu_score": 0.4100581648345472}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Package_Option) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'       ", "inferred_question": "What is the average package option of all tv channels which air cartoons whose title is sky radio?", "score": 29.926597595214844, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5756265336802833, "beam_bleu_score": 0.37751505716957406}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'TV Channel'       ", "inferred_question": "What are the package options of tv channels which air cartoons whose title is tv channel?", "score": 29.75802993774414, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3589731951436549, "beam_bleu_score": 0.3321450635390799}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'Sky Radio'     ", "inferred_question": "", "score": 28.408878326416016, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'Sky Radio'     ", "inferred_question": "", "score": 22.56473159790039, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'TV Channel'       ", "inferred_question": "What are the package options of tv channels whose series name is tv channel?", "score": 21.237600326538086, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5565749047209316, "beam_bleu_score": 0.459770324854963}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 602, "beams": [{"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels whose series name is sky radio?", "score": 81.67386627197266, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9173622402447619, "beam_bleu_score": 0.7046277384082277}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels whose series name is sky radio with maximum package option?", "score": 47.149070739746094, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6938822486798952, "beam_bleu_score": 0.5570820353877053}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "How many package options of tv channels whose series name is sky radio are there?", "score": 42.73799514770508, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8587770061738608, "beam_bleu_score": 0.6443149098960761}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT sum( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What is the total package option of all tv channels whose series name is sky radio?", "score": 41.56062698364258, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8886991486725628, "beam_bleu_score": 0.6060699088566796}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 39.69434356689453, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT min( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What are the package options of tv channels whose series name is sky radio with minimum package option?", "score": 39.35258483886719, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6081611282651744, "beam_bleu_score": 0.5570820353877053}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT avg( T1.Package_Option) FROM TV_Channel AS T1 WHERE T1.series_name = 'Sky Radio'       ", "inferred_question": "What is the average package option of all tv channels whose series name is sky radio?", "score": 37.392147064208984, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7632841400246548, "beam_bleu_score": 0.5996898638935416}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING avg( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 32.385231018066406, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING max( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 31.188369750976562, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING sum( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 30.533130645751953, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1  GROUP BY T1.Package_Option HAVING min( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 26.182655334472656, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT max( T1.Package_Option) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 5.3342437744140625, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'TV'       ", "inferred_question": "What are the package options of tv channels whose series name is tv?", "score": 4.518277645111084, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.443390069300418, "beam_bleu_score": 0.6431613196633452}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = 'TV Channels'       ", "inferred_question": "What are the package options of tv channels whose series name is tv channels?", "score": 3.2659850120544434, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5231485823953312, "beam_bleu_score": 0.6611964933763841}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT count( T1.Package_Option) FROM TV_Channel AS T1   HAVING count( T1.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 0.6072463989257812, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 603, "beams": [{"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channel'       ", "inferred_question": "How many tv channels whose language is tv channel are there?", "score": 28.259044647216797, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5357887303208171, "beam_bleu_score": 0.395241940589715}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'English'       ", "inferred_question": "How many tv channels whose language is english are there?", "score": 12.566057205200195, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.4600786629515086}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV'       ", "inferred_question": "How many tv channels whose language is tv are there?", "score": -2.6749186515808105, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4803176526204924, "beam_bleu_score": 0.43077743745057473}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels whose language is tv channel with minimum channel?", "score": -6.702276229858398, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.18371666501324987}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT sum( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "inferred_question": "What is the total channel of all TV serieses aired on tv channels whose language is tv channel?", "score": -7.495395660400391, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13721965985853535, "beam_bleu_score": 0.20151718023157564}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels whose language is tv channel?", "score": -7.83880615234375, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2447093073949005, "beam_bleu_score": 0.2092457340259646}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT avg( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "inferred_question": "What is the average channel of all TV serieses aired on tv channels whose language is tv channel?", "score": -13.070402145385742, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10937570163688659, "beam_bleu_score": 0.19869074758877953}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING count( T1.Language) = 'TV Channel'     ", "inferred_question": "", "score": -16.12856674194336, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING min( T1.Language) = 'TV Channel'     ", "inferred_question": "", "score": -19.082916259765625, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING avg( T1.Language) = 'TV Channel'     ", "inferred_question": "", "score": -20.385862350463867, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT max( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV Channel'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels whose language is tv channel with maximum channel?", "score": -21.248939514160156, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.18670490774996684}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT T1.Language FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channel'       ", "inferred_question": "What are the languages of tv channels whose language is tv channel?", "score": -21.907596588134766, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4082865286880445, "beam_bleu_score": 0.24960112342732002}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT T1.id FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channel'       ", "inferred_question": "What are the ids of tv channels whose language is tv channel?", "score": -23.867347717285156, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37002581515587163, "beam_bleu_score": 0.2646503843836665}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING sum( T1.Language) = 'TV Channel'     ", "inferred_question": "", "score": -24.8249454498291, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels whose language is english with minimum channel?", "score": -25.100845336914062, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14648294506607462, "beam_bleu_score": 0.21373026676036666}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 604, "beams": [{"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'English'       ", "inferred_question": "How many tv channels whose language is english are there?", "score": 2.3395605087280273, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9264500237745215, "beam_bleu_score": 0.5676729690306258}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV'       ", "inferred_question": "How many tv channels whose language is tv are there?", "score": -5.034503936767578, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3106707439726831, "beam_bleu_score": 0.5362195356771843}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1 WHERE T1.Language = 'TV Channels'       ", "inferred_question": "How many tv channels whose language is tv channels are there?", "score": -30.75204849243164, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3629330389682841, "beam_bleu_score": 0.4609526958988559}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels whose language is english with minimum channel?", "score": -34.474365234375, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.019755592194073412, "beam_bleu_score": 0.2731229602305052}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What are the channels of cartoons aired by tv channels whose language is english with minimum channel?", "score": -35.00872802734375, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10457343144332398, "beam_bleu_score": 0.2658197089205718}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT sum( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What is the total channel of all TV serieses aired on tv channels whose language is english?", "score": -35.56769561767578, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19748308197909648, "beam_bleu_score": 0.2923108382473371}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT sum( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What is the total channel of all cartoons aired by tv channels whose language is english?", "score": -36.07670593261719, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.267311583736911, "beam_bleu_score": 0.2845894063954737}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels whose language is english?", "score": -37.363311767578125, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26387333904641763, "beam_bleu_score": 0.32527612364930203}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What are the channels of cartoons aired by tv channels whose language is english?", "score": -37.45768356323242, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16435494103618786, "beam_bleu_score": 0.31801630348484694}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT T1.Language FROM TV_Channel AS T1 WHERE T1.Language = 'English'       ", "inferred_question": "What are the languages of tv channels whose language is english?", "score": -37.694549560546875, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4396028781579735, "beam_bleu_score": 0.4008800845758244}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT avg( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What is the average channel of all TV serieses aired on tv channels whose language is english?", "score": -38.35396194458008, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1764103181120239, "beam_bleu_score": 0.2829628984527845}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT avg( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English'       ", "inferred_question": "What is the average channel of all cartoons aired by tv channels whose language is english?", "score": -39.156578063964844, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27317924154612083, "beam_bleu_score": 0.2750118032858062}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT count( *) FROM TV_Channel AS T1   HAVING avg( T1.Language) = 'English'     ", "inferred_question": "", "score": -40.35838317871094, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels whose language is tv with minimum channel?", "score": -40.538543701171875, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.2459560640459272}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT min( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'TV'       ", "inferred_question": "What are the channels of cartoons aired by tv channels whose language is tv with minimum channel?", "score": -40.96720886230469, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05374811873640328, "beam_bleu_score": 0.23693807923159113}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 609, "beams": [{"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle!?", "score": 120.57738494873047, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6959421113873956, "beam_bleu_score": 0.5110466595305723}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the channels of TV serieses aired on tv channels which air cartoons whose title is the rise of the blue beetle!?", "score": 82.51820373535156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5480159429937019, "beam_bleu_score": 0.4990965678464597}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Fall of the Blue Beetle!'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is fall of the blue beetle!?", "score": 82.4697494506836, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4267870651639538, "beam_bleu_score": 0.4524603561367179}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'The Rise of the Blue Beetle!'     ", "inferred_question": "", "score": 80.65332794189453, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.Channel FROM Cartoon AS T1 WHERE T1.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the channels of cartoons whose title is the rise of the blue beetle!?", "score": 80.0125732421875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5248803885292973, "beam_bleu_score": 0.3861049836998486}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle! with maximum series name?", "score": 77.35986328125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6073142598786511, "beam_bleu_score": 0.451997588342454}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "How many series names of tv channels which air cartoons whose title is the rise of the blue beetle! are there?", "score": 76.81510925292969, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42419068490029455, "beam_bleu_score": 0.48525974841663094}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What is the total series name of all tv channels which air cartoons whose title is the rise of the blue beetle!?", "score": 73.7374267578125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5176744638180255, "beam_bleu_score": 0.5355175586401217}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What is the average series name of all tv channels which air cartoons whose title is the rise of the blue beetle!?", "score": 72.87466430664062, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5132034847560188, "beam_bleu_score": 0.5259962975438163}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'The Rise of the Blue Beetle!'     ", "inferred_question": "", "score": 71.42882537841797, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Title) = 'The Rise of the Blue Beetle!'     ", "inferred_question": "", "score": 70.32791137695312, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Title) = 'The Rise of the Blue Beetle!'     ", "inferred_question": "", "score": 69.99232482910156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle! with minimum series name?", "score": 69.614990234375, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5877643640702206, "beam_bleu_score": 0.45318238903796115}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Blue Beetle'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is blue beetle?", "score": 69.32843017578125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5698447736403132, "beam_bleu_score": 0.39560133299885103}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Title) = 'The Rise of the Blue Beetle!'     ", "inferred_question": "", "score": 64.09445190429688, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 610, "beams": [{"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle!?", "score": 114.94400787353516, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7326879419147125, "beam_bleu_score": 0.5660092236306365}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle?", "score": 108.92156219482422, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8033012062459532, "beam_bleu_score": 0.5715863426215354}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle! with maximum series name?", "score": 76.82552337646484, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5726575397418422, "beam_bleu_score": 0.4598204607158401}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "How many series names of tv channels which air cartoons whose title is the rise of the blue beetle! are there?", "score": 74.5948257446289, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4113678070269967, "beam_bleu_score": 0.4917654309770045}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'The Rise of the Blue Beetle!'     ", "inferred_question": "", "score": 74.17619323730469, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What is the total series name of all tv channels which air cartoons whose title is the rise of the blue beetle!?", "score": 71.94926452636719, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5352754417074319, "beam_bleu_score": 0.544293071040613}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What is the average series name of all tv channels which air cartoons whose title is the rise of the blue beetle!?", "score": 71.33119201660156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5251506182454999, "beam_bleu_score": 0.5401460563810886}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle with maximum series name?", "score": 70.77354431152344, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6230200374134919, "beam_bleu_score": 0.4634556879319733}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Blue Beetle'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is blue beetle?", "score": 69.48255920410156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5515043057277587, "beam_bleu_score": 0.4841612869996106}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "inferred_question": "How many series names of tv channels which air cartoons whose title is the rise of the blue beetle are there?", "score": 68.54401397705078, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4043998603426324, "beam_bleu_score": 0.49836228110039865}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Title) = 'The Rise of the Blue Beetle'     ", "inferred_question": "", "score": 68.49681091308594, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is the rise of the blue beetle! with minimum series name?", "score": 68.15330505371094, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5508274172953017, "beam_bleu_score": 0.4598204607158401}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Title) = 'The Rise of the Blue Beetle!'     ", "inferred_question": "", "score": 66.01264190673828, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "inferred_question": "What is the total series name of all tv channels which air cartoons whose title is the rise of the blue beetle?", "score": 65.92567443847656, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5643286924551877, "beam_bleu_score": 0.5492642999646435}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'       ", "inferred_question": "What is the average series name of all tv channels which air cartoons whose title is the rise of the blue beetle?", "score": 65.28787231445312, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5594288320287462, "beam_bleu_score": 0.5449909006217188}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 611, "beams": [{"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio and whose series name is tv channel?", "score": 67.11114501953125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9482582184243943, "beam_bleu_score": 0.3637262418770845}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio' and T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio and whose series name is sky radio?", "score": 62.81636047363281, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9411860379435995, "beam_bleu_score": 0.3655235579309802}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'TV Channel'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is tv channel and whose series name is tv channel?", "score": 60.40196990966797, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8287732939239765, "beam_bleu_score": 0.34627369739884545}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio and whose series name is cartoons?", "score": 59.930686950683594, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.915276358998428, "beam_bleu_score": 0.3704910282181837}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T2.series_name = 'TV Channel'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is tv channel and whose series name is cartoons?", "score": 56.80158996582031, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7969785183481403, "beam_bleu_score": 0.35402671918841105}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio' and T2.series_name = 'TV Channel'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is tv channel and whose series name is sky radio?", "score": 56.1697998046875, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9400408130942517, "beam_bleu_score": 0.3714052607030496}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV' and T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio and whose series name is tv?", "score": 51.27693557739258, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8355789913796587, "beam_bleu_score": 0.38868119668464957}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV' and T2.series_name = 'TV Channel'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is tv channel and whose series name is tv?", "score": 47.250999450683594, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7619347803539026, "beam_bleu_score": 0.3697882698325783}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T1.Channel = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons whose channel is sky radio aired by tv channels whose series name is tv channel?", "score": 39.138343811035156, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.794528239825337, "beam_bleu_score": 0.3996920967091387}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T1.Channel = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons whose channel is sky radio aired by tv channels whose series name is cartoons?", "score": 37.82427215576172, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7832585993239791, "beam_bleu_score": 0.4076136160410957}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'TV'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is tv and whose series name is tv channel?", "score": 35.20694351196289, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.76260926237897, "beam_bleu_score": 0.3615592939646782}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio' and T1.Channel = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons whose channel is sky radio aired by tv channels whose series name is sky radio?", "score": 33.35734939575195, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8431799860276877, "beam_bleu_score": 0.4019347825574965}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'Sky Radio'       ", "inferred_question": "How many titles of cartoons aired by tv channels whose series name is sky radio and whose series name is tv channel are there?", "score": 30.839683532714844, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7305579024938329, "beam_bleu_score": 0.34128399341701426}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel' and T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio and whose series name is tv channel with maximum title?", "score": 29.778059005737305, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8095890286657724, "beam_bleu_score": 0.35202723420955645}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Cartoons' and T1.Channel = 'TV Channel'       ", "inferred_question": "What are the titles of cartoons whose channel is tv channel aired by tv channels whose series name is cartoons?", "score": 29.641521453857422, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7055882308331616, "beam_bleu_score": 0.37989429006272935}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 612, "beams": [{"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio?", "score": 92.56351470947266, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6883359491952394, "beam_bleu_score": 0.514782927974108}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is tv channel?", "score": 68.76251220703125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45007005031734737, "beam_bleu_score": 0.5069532836393675}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio with maximum title?", "score": 55.76446533203125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5547150881686657, "beam_bleu_score": 0.5439083276636048}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "How many titles of cartoons aired by tv channels whose series name is sky radio are there?", "score": 54.4463996887207, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5304059042289072, "beam_bleu_score": 0.46291006120971545}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What is the average title of all cartoons aired by tv channels whose series name is sky radio?", "score": 53.16121292114258, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6450830004022503, "beam_bleu_score": 0.5714443157107866}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What is the total title of all cartoons aired by tv channels whose series name is sky radio?", "score": 52.635772705078125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6836699521134497, "beam_bleu_score": 0.5780899906714211}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is sky radio with minimum title?", "score": 50.961055755615234, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5189230994235835, "beam_bleu_score": 0.5422625952534426}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 44.405433654785156, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING avg( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 43.275177001953125, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING max( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 40.27958297729492, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING min( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 38.088008880615234, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING sum( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 34.53688430786133, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "What are the titles of cartoons aired by tv channels whose series name is tv channel with maximum title?", "score": 31.99492645263672, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41468153349735215, "beam_bleu_score": 0.5486495453881137}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "How many titles of cartoons aired by tv channels whose series name is tv channel are there?", "score": 30.748111724853516, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3786752697382689, "beam_bleu_score": 0.46384250661167764}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Title) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "What is the average title of all cartoons aired by tv channels whose series name is tv channel?", "score": 29.454143524169922, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48312648209810394, "beam_bleu_score": 0.5590439965629579}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 617, "beams": [{"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the minimum share and maximum share of TV serieses?", "score": 0.0, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9374912797925532, "beam_bleu_score": 0.702377623102126}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), sum( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the minimum share and total share of TV serieses?", "score": -29.761520385742188, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5736911451290501, "beam_bleu_score": 0.5924417005900787}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT sum( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the total share and maximum share of TV serieses?", "score": -35.902374267578125, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.486496098337854, "beam_bleu_score": 0.6035712851302528}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT count( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the number of shares and maximum share of TV serieses?", "score": -35.93584060668945, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5661994229138437, "beam_bleu_score": 0.5727541190636098}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), avg( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the minimum share and average share of TV serieses?", "score": -37.23077392578125, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3851096782592316, "beam_bleu_score": 0.5721797498475734}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT avg( T1.Share), max( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the average share and maximum share of TV serieses?", "score": -37.91364288330078, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4575624221116703, "beam_bleu_score": 0.5829286942445688}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), T1.Share FROM TV_series AS T1  GROUP BY T1.Share      ", "inferred_question": "", "score": -42.43024826049805, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), max( T1.18_49_Rating_Share) FROM TV_series AS T1        ", "inferred_question": "What are the minimum share and maximum share of 18 to 49 years old of TV serieses?", "score": -45.51678466796875, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42419740345678325, "beam_bleu_score": 0.5133212730766696}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT T1.Share, max( T1.Share) FROM TV_series AS T1  GROUP BY T1.Share      ", "inferred_question": "", "score": -47.41030502319336, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.Share), count( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the minimum share and number of shares of TV serieses?", "score": -53.9736213684082, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5874637004168373, "beam_bleu_score": 0.5440554723466462}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share and minimum share of TV serieses?", "score": -58.15907669067383, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8394010185508756, "beam_bleu_score": 0.6974483528086121}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT min( T1.18_49_Rating_Share), max( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the minimum share of 18 to 49 years old and maximum share of TV serieses?", "score": -60.50600814819336, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3871324147349894, "beam_bleu_score": 0.5133212730766696}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share and total share of TV serieses?", "score": -61.58612060546875, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4553954718265606, "beam_bleu_score": 0.5887037114763077}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 618, "beams": [{"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share and minimum share of TV serieses?", "score": 0.0, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7967243348549811, "beam_bleu_score": 0.7342721385297863}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT sum( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the total share and minimum share of TV serieses?", "score": -29.98868179321289, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6319058461501457, "beam_bleu_score": 0.63046352136581}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share and total share of TV serieses?", "score": -36.18540954589844, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4181020128991423, "beam_bleu_score": 0.6272219562844655}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT avg( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the average share and minimum share of TV serieses?", "score": -36.37509536743164, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.328621617852779, "beam_bleu_score": 0.6017452186824676}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), count( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share and number of shares of TV serieses?", "score": -36.97554397583008, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5166456122778187, "beam_bleu_score": 0.5896341156766414}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), avg( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share and average share of TV serieses?", "score": -39.40604782104492, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3708407254044275, "beam_bleu_score": 0.5985863420348551}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT T1.Share, min( T1.Share) FROM TV_series AS T1  GROUP BY T1.Share      ", "inferred_question": "", "score": -41.91545104980469, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT count( T1.Share), min( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the number of shares and minimum share of TV serieses?", "score": -45.293922424316406, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5781038213536482, "beam_bleu_score": 0.5896341156766414}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), T1.Share FROM TV_series AS T1  GROUP BY T1.Share      ", "inferred_question": "", "score": -50.88550567626953, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT T1.series_name, max( T2.Share) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T1.series_name      ", "inferred_question": "", "score": -55.08631896972656, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.18_49_Rating_Share), min( T1.Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share of 18 to 49 years old and minimum share of TV serieses?", "score": -55.6171989440918, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36443019385722897, "beam_bleu_score": 0.5418675681347689}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.Share), min( T1.18_49_Rating_Share) FROM TV_series AS T1        ", "inferred_question": "What are the maximum share and minimum share of 18 to 49 years old of TV serieses?", "score": -63.72013854980469, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44210964051113977, "beam_bleu_score": 0.5418675681347689}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT max( T1.series_name), max( T2.Share) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel        ", "inferred_question": "What are the maximum series name of tv channels which air TV serieses? Also show the maximum share of the TV serieses.", "score": -64.77245330810547, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11915182948492997, "beam_bleu_score": 0.3499483295699237}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 619, "beams": [{"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode a love of a lifetime?", "score": 106.94985961914062, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7413517979840556, "beam_bleu_score": 0.5535260546945264}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode a love of a lifetime with maximum airdate?", "score": 68.11743927001953, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5997439940840665, "beam_bleu_score": 0.4700100868310772}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "How many airdates of TV serieses who contain   the episode a love of a lifetime are there?", "score": 62.205039978027344, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5385376650789437, "beam_bleu_score": 0.4783647562134895}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 62.01142883300781, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the average airdate of all TV serieses who contain   the episode a love of a lifetime?", "score": 61.535831451416016, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6665909262330619, "beam_bleu_score": 0.5369817984833037}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the total airdate of all TV serieses who contain   the episode a love of a lifetime?", "score": 58.848777770996094, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.635859631256657, "beam_bleu_score": 0.5416745309061706}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode a love of a lifetime with minimum airdate?", "score": 57.69340515136719, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5853053142672895, "beam_bleu_score": 0.4700100868310772}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 56.44214630126953, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 53.756935119628906, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 53.00717544555664, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 48.8631591796875, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'Episode'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode episode?", "score": 45.251041412353516, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45602334268695843, "beam_bleu_score": 0.5053433699583654}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Air_Date) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 23.28607940673828, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Air_Date) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 17.609107971191406, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode lifetime?", "score": 15.746343612670898, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47153540056760046, "beam_bleu_score": 0.562881684370359}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 620, "beams": [{"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode a love of a lifetime?", "score": 111.53504943847656, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26849864037989735, "beam_bleu_score": 0.35133836879239655}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT max( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode a love of a lifetime with maximum airdate?", "score": 75.07617950439453, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.03012472562859536, "beam_bleu_score": 0.28169518625795936}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT count( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "How many airdates of TV serieses who contain   the episode a love of a lifetime are there?", "score": 72.9065170288086, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18079169147047514, "beam_bleu_score": 0.3229740305216624}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT avg( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the average airdate of all TV serieses who contain   the episode a love of a lifetime?", "score": 71.827392578125, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14895398614616273, "beam_bleu_score": 0.3133499556556025}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT min( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode a love of a lifetime with minimum airdate?", "score": 70.30451965332031, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.030392743576609926, "beam_bleu_score": 0.28169518625795936}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT sum( T1.Air_Date) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the total airdate of all TV serieses who contain   the episode a love of a lifetime?", "score": 65.86740112304688, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1592538388502006, "beam_bleu_score": 0.3202758622619284}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 62.50336456298828, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 58.56953430175781, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 57.52322769165039, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 53.64472961425781, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1  GROUP BY T1.Air_Date HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 50.97547912597656, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of TV serieses aired on tv channels which air cartoons whose title is a love of a lifetime?", "score": 48.833160400390625, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.032869051354323164, "beam_bleu_score": 0.19759881557950865}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Original_air_date FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the airdates of cartoons aired by tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 46.82787322998047, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.2398376859722217}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the episodes of TV serieses who contain   the episode a love of a lifetime?", "score": 44.55714416503906, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2166514087074427, "beam_bleu_score": 0.3372315056540673}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = 'Lifetime'       ", "inferred_question": "What are the airdates of TV serieses who contain   the episode lifetime?", "score": 30.497692108154297, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27150545596062303, "beam_bleu_score": 0.35232905928291847}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 621, "beams": [{"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode a love of a lifetime?", "score": 86.520263671875, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8208782021712461, "beam_bleu_score": 0.48956308684660726}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode a love of a lifetime with maximum weekly rank?", "score": 46.158477783203125, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6457917336210086, "beam_bleu_score": 0.4066892893421957}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the average weekly rank of all TV serieses who contain   the episode a love of a lifetime?", "score": 45.58210372924805, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8001305340828486, "beam_bleu_score": 0.47343335218915517}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "How many weekly ranks of TV serieses who contain   the episode a love of a lifetime are there?", "score": 45.514801025390625, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7126483301694475, "beam_bleu_score": 0.42931556104197627}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode a love of a lifetime with minimum weekly rank?", "score": 44.81795120239258, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5823349301807594, "beam_bleu_score": 0.4066892893421957}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the total weekly rank of all TV serieses who contain   the episode a love of a lifetime?", "score": 44.60032653808594, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.741177792826901, "beam_bleu_score": 0.483454493956912}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'Episode'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode episode?", "score": 41.826377868652344, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5256509158178864, "beam_bleu_score": 0.4334410587804096}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 39.39822006225586, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 34.06282043457031, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 32.59998321533203, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 29.241989135742188, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 27.586589813232422, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 19.66571807861328, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.512717713157886, "beam_bleu_score": 0.3477710875697177}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses aired on tv channels which air cartoons whose title is a love of a lifetime?", "score": 9.024307250976562, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6261229428089834, "beam_bleu_score": 0.3446878562086472}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'TV'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode tv?", "score": 4.495519161224365, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4484695092747233, "beam_bleu_score": 0.461823265530962}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 622, "beams": [{"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode a love of a lifetime?", "score": 119.36257934570312, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5195328459251392, "beam_bleu_score": 0.5082748721599146}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 77.90302276611328, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the average weekly rank of all TV serieses who contain   the episode a love of a lifetime?", "score": 77.47554779052734, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5221428048474122, "beam_bleu_score": 0.49286273488878335}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode a love of a lifetime with maximum weekly rank?", "score": 76.44866943359375, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3061055820125882, "beam_bleu_score": 0.394298779438442}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "How many weekly ranks of TV serieses who contain   the episode a love of a lifetime are there?", "score": 76.26602935791016, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47635658326999175, "beam_bleu_score": 0.4304952420044431}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING avg( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 73.04214477539062, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the total weekly rank of all TV serieses who contain   the episode a love of a lifetime?", "score": 71.7138671875, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5058210799185383, "beam_bleu_score": 0.4973177145466882}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.Weekly_Rank) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses who contain   the episode a love of a lifetime with minimum weekly rank?", "score": 70.60589599609375, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2809324692159786, "beam_bleu_score": 0.394298779438442}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING max( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 68.57296752929688, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "inferred_question": "What are the weekly ranks of TV serieses aired on tv channels which air cartoons whose title is a love of a lifetime?", "score": 68.43344116210938, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3752232641682415, "beam_bleu_score": 0.3187908418091338}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING sum( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 65.1837158203125, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1  GROUP BY T1.Weekly_Rank HAVING min( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 63.28968048095703, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel  GROUP BY T1.Weekly_Rank HAVING count( T2.Title) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 37.33202362060547, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.Weekly_Rank) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 36.059913635253906, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.Weekly_Rank) FROM TV_series AS T1   HAVING count( T1.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 35.09972381591797, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 623, "beams": [{"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 103.48668670654297, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7088639744845766, "beam_bleu_score": 0.5507638371922398}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.Channel FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the channels of TV serieses who contain   the episode a love of a lifetime?", "score": 64.09500885009766, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.632541454386893, "beam_bleu_score": 0.45923069230698077}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode a love of a lifetime with maximum series name?", "score": 61.835994720458984, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6468533507142518, "beam_bleu_score": 0.4720177011720089}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "How many series names of tv channels which air TV serieses who contain   the episode a love of a lifetime are there?", "score": 58.572322845458984, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5139413202971853, "beam_bleu_score": 0.4933214247805873}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 57.978939056396484, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the total series name of all tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 57.11627960205078, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.588106087484877, "beam_bleu_score": 0.5438820490030898}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the average series name of all tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 55.832069396972656, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5787863715290265, "beam_bleu_score": 0.5347017808750797}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode a love of a lifetime with minimum series name?", "score": 53.619422912597656, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6337570617947168, "beam_bleu_score": 0.4720177011720089}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 53.22919464111328, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 51.38304901123047, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 50.851593017578125, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 46.12807846069336, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'Episode'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode episode?", "score": 41.053306579589844, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4410597362072992, "beam_bleu_score": 0.46002077914543565}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT count( T1.Channel) FROM TV_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       ", "inferred_question": "How many channels of TV serieses who contain   the episode a love of a lifetime are there?", "score": 24.83612060546875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49104212973791306, "beam_bleu_score": 0.4416438341758343}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air cartoons whose title is a love of a lifetime?", "score": 20.47374725341797, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5540050997521854, "beam_bleu_score": 0.4383194900501781}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 624, "beams": [{"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 119.35983276367188, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4768265207261151, "beam_bleu_score": 0.44381696039060564}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode a love of a lifetime with maximum series name?", "score": 77.26750946044922, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19336345929160803, "beam_bleu_score": 0.36752194192869025}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 75.82725524902344, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "How many series names of tv channels which air TV serieses who contain   the episode a love of a lifetime are there?", "score": 73.92497253417969, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3235320685524803, "beam_bleu_score": 0.38415735490908437}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 73.7118911743164, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the average series name of all tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 72.05111694335938, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41233568082764216, "beam_bleu_score": 0.44083969066543155}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 71.53857421875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT sum( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What is the total series name of all tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 70.32830810546875, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4169765363338924, "beam_bleu_score": 0.4448566098328066}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 68.78996276855469, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT min( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the series names of tv channels which air TV serieses who contain   the episode a love of a lifetime with minimum series name?", "score": 67.82112884521484, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20670472441489185, "beam_bleu_score": 0.36752194192869025}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 63.01499557495117, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       ", "inferred_question": "What are the titles of cartoons aired by tv channels which air TV serieses who contain   the episode a love of a lifetime?", "score": 37.641761779785156, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38076320697482435, "beam_bleu_score": 0.36402930971504793}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT max( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 33.64021301269531, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT count( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 30.36888885498047, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT avg( T1.series_name) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Episode) = 'A Love of a Lifetime'     ", "inferred_question": "", "score": 28.406051635742188, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 625, "beams": [{"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is sky radio?", "score": 76.46550750732422, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.881082756499713, "beam_bleu_score": 0.5393663063667749}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is tv channel?", "score": 61.120140075683594, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7205827988029715, "beam_bleu_score": 0.4938681847006897}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is sky radio with maximum episode?", "score": 43.17952346801758, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.740572991374536, "beam_bleu_score": 0.46547189326726546}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What is the total episode of all TV serieses aired on tv channels whose series name is sky radio?", "score": 39.5933952331543, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8809975491553786, "beam_bleu_score": 0.5520101095253096}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "How many episodes of TV serieses aired on tv channels whose series name is sky radio are there?", "score": 39.51968002319336, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7070327516849644, "beam_bleu_score": 0.49567330772309415}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT min( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is sky radio with minimum episode?", "score": 35.496177673339844, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7338203130084902, "beam_bleu_score": 0.46547189326726546}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT avg( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What is the average episode of all TV serieses aired on tv channels whose series name is sky radio?", "score": 34.81976318359375, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8445101215968549, "beam_bleu_score": 0.5384182460517752}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 30.812881469726562, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is tv channel with maximum episode?", "score": 27.850196838378906, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.686034978473939, "beam_bleu_score": 0.4512491970367145}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING avg( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 25.625244140625, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING max( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 25.482563018798828, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING sum( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 24.88547134399414, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "What is the total episode of all TV serieses aired on tv channels whose series name is tv channel?", "score": 24.32333755493164, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7304675228224375, "beam_bleu_score": 0.5115140935376427}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'TV Channel'       ", "inferred_question": "How many episodes of TV serieses aired on tv channels whose series name is tv channel are there?", "score": 24.30893325805664, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6056655730925957, "beam_bleu_score": 0.4721325507035544}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING min( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 22.342811584472656, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 626, "beams": [{"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is sky radio?", "score": 108.33183288574219, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6413432207574885, "beam_bleu_score": 0.415540214468173}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is sky radio with maximum episode?", "score": 73.69981384277344, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37611226935520625, "beam_bleu_score": 0.3370806071361637}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "How many episodes of TV serieses aired on tv channels whose series name is sky radio are there?", "score": 71.7867431640625, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3042704366843122, "beam_bleu_score": 0.3426309055765112}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What is the total episode of all TV serieses aired on tv channels whose series name is sky radio?", "score": 68.64987182617188, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5482055559676136, "beam_bleu_score": 0.39764798771022686}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What is the average episode of all TV serieses aired on tv channels whose series name is sky radio?", "score": 67.74211883544922, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5772052114139288, "beam_bleu_score": 0.39577978629961835}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT min( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       ", "inferred_question": "What are the episodes of TV serieses aired on tv channels whose series name is sky radio with minimum episode?", "score": 66.1152572631836, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3581573709018716, "beam_bleu_score": 0.3370806071361637}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 60.228599548339844, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING avg( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 59.63927459716797, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING max( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 57.726783752441406, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING sum( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 55.57234573364258, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING min( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 53.08473587036133, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT max( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 25.785842895507812, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT count( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 24.033119201660156, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT sum( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 20.634864807128906, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT avg( T1.Episode) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id  GROUP BY T1.Channel HAVING count( T2.series_name) = 'Sky Radio'     ", "inferred_question": "", "score": 19.81146240234375, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 629, "beams": [{"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels which air TV serieses with maximum airdate?", "score": 0.0, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5976435411871983, "beam_bleu_score": 0.41171516299525}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Original_air_date DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum airdate?", "score": -36.73932647705078, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6659561193337052, "beam_bleu_score": 0.5876378936109142}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT max( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -40.01031494140625, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT avg( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -42.371604919433594, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1  GROUP BY T1.Production_code, T1.Channel  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -42.749393463134766, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, max( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -43.53338623046875, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.id  ORDER BY avg( T2.Air_Date) DESC LIMIT 1    ", "inferred_question": "", "score": -43.65489959716797, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, avg( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -44.29783630371094, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.id  ORDER BY max( T2.Air_Date) DESC LIMIT 1    ", "inferred_question": "", "score": -45.97311782836914, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT min( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -46.50229263305664, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT count( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -47.4137077331543, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, count( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -47.988319396972656, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT sum( T1.Production_code), T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Channel  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -48.86858367919922, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.id  ORDER BY sum( T2.Air_Date) DESC LIMIT 1    ", "inferred_question": "", "score": -51.64234161376953, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT T1.Production_code, sum( T1.Channel) FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel  GROUP BY T1.Production_code  ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "", "score": -51.81208801269531, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 630, "beams": [{"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Channel DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum channel?", "score": -0.0001134808044298552, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6450429599278309, "beam_bleu_score": 0.57933390014657}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Rating DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels which air TV serieses with maximum rating?", "score": -9.083945274353027, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.653840183445674, "beam_bleu_score": 0.3814649667498701}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Original_air_date DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum airdate?", "score": -18.85485076904297, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7225616738605884, "beam_bleu_score": 0.57933390014657}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Air_Date DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels which air TV serieses with maximum airdate?", "score": -20.27547836303711, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6936890785984541, "beam_bleu_score": 0.37631271938692773}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Directed_by DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum director?", "score": -22.75330352783203, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48643125294110234, "beam_bleu_score": 0.5829943644378986}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Production_code DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum production code?", "score": -28.778221130371094, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7376627664544362, "beam_bleu_score": 0.5375761354213208}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id    ORDER BY T2.Country DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels with maximum country?", "score": -28.950164794921875, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5970994302354617, "beam_bleu_score": 0.4670592974194094}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.18_49_Rating_Share DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels which air TV serieses with maximum share of 18 to 49 years old?", "score": -29.559349060058594, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3071119692983094, "beam_bleu_score": 0.3243824037452397}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id    ORDER BY T2.Content DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels with maximum content?", "score": -29.68062973022461, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6893482844433361, "beam_bleu_score": 0.4725171031421664}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Written_by DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum writer?", "score": -30.235641479492188, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48570960842702626, "beam_bleu_score": 0.5848735766149058}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT max( T1.Production_code), T1.Channel FROM Cartoon AS T1  GROUP BY T1.Channel  ORDER BY T1.Channel DESC LIMIT 1    ", "inferred_question": "", "score": -30.496749877929688, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Share DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels which air TV serieses with maximum share?", "score": -31.632644653320312, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6391309903471607, "beam_bleu_score": 0.38141427180042176}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Title DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum title?", "score": -31.88409423828125, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.602648364278391, "beam_bleu_score": 0.5983959638817694}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.id DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons with maximum id?", "score": -34.038124084472656, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5549989336098164, "beam_bleu_score": 0.6192182322061819}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id    ORDER BY T2.Language DESC LIMIT 1    ", "inferred_question": "What are the production codes and channels of cartoons aired by tv channels with maximum language?", "score": -34.70817565917969, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6163131143501098, "beam_bleu_score": 0.4565206354278435}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 631, "beams": [{"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV'       ", "inferred_question": "What are the package options and series names of tv channels whose high definition status is tv?", "score": 7.054508209228516, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7343439703349262, "beam_bleu_score": 0.6078071329455047}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT max( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "inferred_question": "", "score": -31.708072662353516, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.series_name = 'TV'       ", "inferred_question": "What are the package options and series names of tv channels whose series name is tv?", "score": -36.935264587402344, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5897757204677122, "beam_bleu_score": 0.5407731021049851}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT avg( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "inferred_question": "", "score": -36.95106887817383, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, max( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "inferred_question": "", "score": -38.086788177490234, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING avg( T1.Hight_definition_TV) = 'TV'     ", "inferred_question": "", "score": -39.64634704589844, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING count( T1.Hight_definition_TV) = 'TV'     ", "inferred_question": "", "score": -39.94047927856445, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, avg( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "inferred_question": "", "score": -40.26260757446289, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT min( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "inferred_question": "", "score": -40.27423095703125, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT sum( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "inferred_question": "", "score": -40.27456283569336, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT count( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.series_name      ", "inferred_question": "", "score": -40.35559844970703, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING max( T1.Hight_definition_TV) = 'TV'     ", "inferred_question": "", "score": -40.59458923339844, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, count( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "inferred_question": "", "score": -41.67508316040039, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING sum( T1.Hight_definition_TV) = 'TV'     ", "inferred_question": "", "score": -42.24736785888672, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT T1.Package_Option, sum( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV' GROUP BY T1.Package_Option      ", "inferred_question": "", "score": -43.85255432128906, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 632, "beams": [{"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel'       ", "inferred_question": "What are the package options and series names of tv channels whose high definition status is tv channel?", "score": 25.614337921142578, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6834663339486907, "beam_bleu_score": 0.6510462250930913}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Package_Option = 'TV Channel'       ", "inferred_question": "What are the package options and series names of tv channels whose package option is tv channel?", "score": 13.93502426147461, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5117837073387255, "beam_bleu_score": 0.5422124365557177}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Channel = 'TV Channel'       ", "inferred_question": "What are the package options and series names of tv channels which air TV serieses whose channel is tv channel?", "score": 8.990089416503906, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4507721470214562, "beam_bleu_score": 0.5449037688343947}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV'       ", "inferred_question": "What are the package options and series names of tv channels whose high definition status is tv?", "score": 4.1558051109313965, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6593186655958956, "beam_bleu_score": 0.6399812302920823}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.series_name = 'TV Channel'       ", "inferred_question": "What are the package options and series names of tv channels whose series name is tv channel?", "score": -5.3209686279296875, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5143911547313507, "beam_bleu_score": 0.5214825660034832}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT max( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "inferred_question": "", "score": -8.961732864379883, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'TV Channel'       ", "inferred_question": "What are the package options of tv channels whose high definition status is tv channel which air cartoons? Also show the titles of the cartoons.", "score": -9.247869491577148, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47112133374696263, "beam_bleu_score": 0.4787068899828887}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT avg( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "inferred_question": "", "score": -14.33323860168457, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT count( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "inferred_question": "", "score": -15.460193634033203, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, max( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.Package_Option      ", "inferred_question": "", "score": -16.087324142456055, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING max( T1.Hight_definition_TV) = 'TV Channel'     ", "inferred_question": "", "score": -16.16397476196289, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT min( T1.Package_Option), T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.series_name      ", "inferred_question": "", "score": -16.220550537109375, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, avg( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.Package_Option      ", "inferred_question": "", "score": -17.8983211517334, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, count( T1.series_name) FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = 'TV Channel' GROUP BY T1.Package_Option      ", "inferred_question": "", "score": -17.96507453918457, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1  GROUP BY T1.Package_Option, T1.series_name HAVING avg( T1.Hight_definition_TV) = 'TV Channel'     ", "inferred_question": "", "score": -18.53489112854004, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 633, "beams": [{"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is todd casey?", "score": 67.02054595947266, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8054010390902442, "beam_bleu_score": 0.49606056796538045}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is todd casey with maximum country?", "score": 29.808502197265625, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6909385319739481, "beam_bleu_score": 0.40420675329951256}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "How many distinct countries of tv channels which air cartoons whose writer is todd casey are there?", "score": 24.770263671875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7245222142395571, "beam_bleu_score": 0.46414137875880385}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "", "score": 24.063785552978516, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "", "score": 23.517375946044922, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is todd casey with minimum country?", "score": 22.539588928222656, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6773899513345398, "beam_bleu_score": 0.40420675329951256}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 21.933536529541016, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 20.202362060546875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 19.740013122558594, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 16.294071197509766, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 14.666210174560547, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Channel FROM Cartoon AS T1 WHERE T1.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct channels of cartoons whose writer is todd casey?", "score": 4.366233825683594, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5482289125726045, "beam_bleu_score": 0.4329759790789496}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct channels of TV serieses aired on tv channels which air cartoons whose writer is todd casey?", "score": -12.95523452758789, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6317958183808507, "beam_bleu_score": 0.3755204998535678}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": -14.99658203125, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": -16.66314697265625, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 634, "beams": [{"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is todd casey?", "score": 53.594966888427734, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.623694023403266, "beam_bleu_score": 0.49994823212644823}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is todd casey with maximum country?", "score": 16.551227569580078, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49425864436333455, "beam_bleu_score": 0.40876343128717896}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'TV'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is tv?", "score": 13.333272933959961, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41270077940830285, "beam_bleu_score": 0.4929847977555863}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 12.547607421875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "How many distinct countries of tv channels which air cartoons whose writer is todd casey are there?", "score": 12.412822723388672, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5829147350859495, "beam_bleu_score": 0.42093760302122146}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 11.340827941894531, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "", "score": 11.149154663085938, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING avg( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 10.614044189453125, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is todd casey with minimum country?", "score": 10.583831787109375, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48818890539179816, "beam_bleu_score": 0.40737541997048105}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       ", "inferred_question": "", "score": 10.368457794189453, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING min( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 8.137199401855469, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING sum( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": 6.318271636962891, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'TV'       ", "inferred_question": "What are the distinct countries of tv channels which air cartoons whose writer is tv with maximum country?", "score": -23.784177780151367, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.362927345641059, "beam_bleu_score": 0.4025935192002696}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING count( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": -24.623779296875, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Country) FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel  GROUP BY T2.Channel HAVING max( T2.Written_by) = 'Todd Casey'     ", "inferred_question": "", "score": -25.809520721435547, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 639, "beams": [{"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English'       ", "inferred_question": "What are the aspect ratios and countries of tv channels whose language is not english?", "score": -14.154329299926758, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6470972609355952, "beam_bleu_score": 0.5511859509602344}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT max( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "inferred_question": "", "score": -48.78950119018555, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT avg( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "inferred_question": "", "score": -50.92251205444336, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT count( *), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "inferred_question": "", "score": -55.82378005981445, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT sum( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "inferred_question": "", "score": -57.158203125, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING avg( T1.Language) != 'English'     ", "inferred_question": "", "score": -57.36552047729492, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT min( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "inferred_question": "", "score": -57.410621643066406, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Content, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English'       ", "inferred_question": "What are the contents and countries of tv channels whose language is not english?", "score": -57.61260986328125, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4452860282060097, "beam_bleu_score": 0.4585666686516156}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING count( T1.Language) != 'English'     ", "inferred_question": "", "score": -59.61486053466797, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT count( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Country      ", "inferred_question": "", "score": -60.013267517089844, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, avg( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "inferred_question": "", "score": -60.02001190185547, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, max( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'English' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "inferred_question": "", "score": -60.20521926879883, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING sum( T1.Language) != 'English'     ", "inferred_question": "", "score": -60.76359558105469, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING max( T1.Language) != 'English'     ", "inferred_question": "", "score": -61.631256103515625, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING min( T1.Language) != 'English'     ", "inferred_question": "", "score": -62.2713737487793, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 640, "beams": [{"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV'       ", "inferred_question": "What are the aspect ratios and countries of tv channels whose language is not tv?", "score": 18.337743759155273, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.390861479644366, "beam_bleu_score": 0.5031861404623226}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'English'       ", "inferred_question": "What are the aspect ratios and countries of tv channels whose language is not english?", "score": -12.749923706054688, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5542087546082239, "beam_bleu_score": 0.55445640703961}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT max( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "inferred_question": "", "score": -15.03335952758789, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT avg( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "inferred_question": "", "score": -17.183326721191406, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT count( *), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "inferred_question": "", "score": -22.88151741027832, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT sum( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "inferred_question": "", "score": -23.059555053710938, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT min( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "inferred_question": "", "score": -23.730667114257812, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING avg( T1.Language) != 'TV'     ", "inferred_question": "", "score": -25.152448654174805, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING count( T1.Language) != 'TV'     ", "inferred_question": "", "score": -25.631057739257812, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING sum( T1.Language) != 'TV'     ", "inferred_question": "", "score": -28.686969757080078, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT count( T1.Pixel_aspect_ratio_PAR), T1.Country FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Country      ", "inferred_question": "", "score": -28.977863311767578, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING max( T1.Language) != 'TV'     ", "inferred_question": "", "score": -28.982463836669922, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, avg( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "inferred_question": "", "score": -29.042129516601562, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, max( T1.Country) FROM TV_Channel AS T1 WHERE T1.Language != 'TV' GROUP BY T1.Pixel_aspect_ratio_PAR      ", "inferred_question": "", "score": -29.072736740112305, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1  GROUP BY T1.Pixel_aspect_ratio_PAR, T1.Country HAVING min( T1.Language) != 'TV'     ", "inferred_question": "", "score": -29.2608585357666, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 647, "beams": [{"orig_question": "How many poker players are there?", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT min( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -33.86963653564453, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player AS T1        ", "inferred_question": "Show me everything about poker players.", "score": -34.504150390625, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09759049315801005, "beam_bleu_score": 0.47135293069222467}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -37.31830978393555, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT sum( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -39.01707458496094, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What is the average id of all poker players?", "score": -40.21552658081055, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14926160790623277, "beam_bleu_score": 0.40849541901379294}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT min( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players with minimum id?", "score": -45.871238708496094, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10598684387700807, "beam_bleu_score": 0.43941968188490366}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT max( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -47.64110565185547, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( T1.People_ID) FROM poker_player AS T1        ", "inferred_question": "What is the average persons of all poker players?", "score": -49.14673614501953, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12933218122810652, "beam_bleu_score": 0.372058359711552}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT max( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players with maximum id?", "score": -49.449588775634766, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14129892125974586, "beam_bleu_score": 0.4461335674941002}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT sum( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What is the total id of all poker players?", "score": -50.47673416137695, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3534474026806307, "beam_bleu_score": 0.41809011598738766}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1        ", "inferred_question": "What is the average name of all people?", "score": -53.06525421142578, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05329767154545484, "beam_bleu_score": 0.12615497851482765}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players?", "score": -53.17477035522461, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14171521611342175, "beam_bleu_score": 0.6130842373046569}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "inferred_question": "What are the personses of poker players?", "score": -55.0035285949707, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08400127930992363, "beam_bleu_score": 0.5379919927564877}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT min( T1.People_ID) FROM poker_player AS T1        ", "inferred_question": "What are the personses of poker players with minimum persons?", "score": -55.471168518066406, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13277623406430084, "beam_bleu_score": 0.3682415080086732}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 648, "beams": [{"orig_question": "Count the number of poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8932087248858315, "beam_bleu_score": 0.5110145823155815}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT min( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -36.47047805786133, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player AS T1        ", "inferred_question": "Show me everything about poker players.", "score": -37.32857894897461, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08422679889202023, "beam_bleu_score": 0.46069315166280084}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -41.17972183227539, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What is the average id of all poker players?", "score": -42.69221115112305, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1297012518768017, "beam_bleu_score": 0.4477095330043835}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT sum( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -46.01670837402344, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "inferred_question": "What are the personses of poker players?", "score": -46.9436149597168, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11717158514834236, "beam_bleu_score": 0.5284662459906101}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( T1.People_ID) FROM poker_player AS T1        ", "inferred_question": "What is the average persons of all poker players?", "score": -47.41230773925781, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12811353562192762, "beam_bleu_score": 0.40833593284286646}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players?", "score": -49.27434158325195, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18055814517384772, "beam_bleu_score": 0.6071022123892076}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT max( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players with maximum id?", "score": -49.78553771972656, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15799597537808086, "beam_bleu_score": 0.4194386416681269}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT max( *) FROM poker_player AS T1        ", "inferred_question": "", "score": -49.787925720214844, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT max( T1.People_ID) FROM poker_player AS T1        ", "inferred_question": "What are the personses of poker players with maximum persons?", "score": -54.40742111206055, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22873844800248255, "beam_bleu_score": 0.35491154102090466}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "inferred_question": "What are the names of people?", "score": -56.66178512573242, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07329877054533973, "beam_bleu_score": 0.2971293118218396}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1        ", "inferred_question": "What is the average name of all people?", "score": -59.83238220214844, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06059429957581597, "beam_bleu_score": 0.22397899399425858}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT sum( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What is the total id of all poker players?", "score": -62.02373504638672, "correct_code": "SELECT count(*) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3434315084498585, "beam_bleu_score": 0.45968722754986224}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 651, "beams": [{"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1        ", "inferred_question": "What are the final table earnings and best finishes of poker players?", "score": -0.0007974305190145969, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6111659216595836, "beam_bleu_score": 0.7420260743427887}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, max( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -7.1345062255859375, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, avg( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -20.963594436645508, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, min( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -22.450836181640625, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, sum( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -24.679279327392578, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT max( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -26.523466110229492, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT max( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the maximum final table earning and maximum best finish of poker players?", "score": -32.84635543823242, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5555731756012527, "beam_bleu_score": 0.571325361132559}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT T1.Final_Table_Made, count( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -33.797420501708984, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT avg( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -37.031097412109375, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT sum( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -37.215641021728516, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT min( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -38.42886734008789, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT avg( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the average final table earning and maximum best finish of poker players?", "score": -43.45955276489258, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49334370207480505, "beam_bleu_score": 0.5844739503499681}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT sum( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the total final table earning and maximum best finish of poker players?", "score": -43.583892822265625, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5400000589329765, "beam_bleu_score": 0.5912568497073515}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT min( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the minimum final table earning and maximum best finish of poker players?", "score": -44.807029724121094, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38904592743123256, "beam_bleu_score": 0.571325361132559}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT count( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -45.3653564453125, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 652, "beams": [{"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1        ", "inferred_question": "What are the final table earnings and best finishes of poker players?", "score": 0.0, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.603324019769022, "beam_bleu_score": 0.7978375597702146}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -20.67791748046875, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, max( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -22.171249389648438, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, avg( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -29.09101104736328, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT avg( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -33.53297805786133, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT sum( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -34.442543029785156, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, min( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -34.68696212768555, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT min( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -35.93189239501953, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, sum( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -37.44742202758789, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), max( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the maximum final table earning and maximum best finish of poker players?", "score": -41.679969787597656, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.64360995337163, "beam_bleu_score": 0.643706146549428}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT T1.Final_Table_Made, count( T1.Best_Finish) FROM poker_player AS T1  GROUP BY T1.Final_Table_Made      ", "inferred_question": "", "score": -42.77908706665039, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT count( T1.Final_Table_Made), T1.Best_Finish FROM poker_player AS T1  GROUP BY T1.Best_Finish      ", "inferred_question": "", "score": -43.83280563354492, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), avg( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the maximum final table earning and average best finish of poker players?", "score": -47.6288948059082, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5203892554334798, "beam_bleu_score": 0.6490850930454212}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), min( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the maximum final table earning and minimum best finish of poker players?", "score": -53.834537506103516, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44434753324144904, "beam_bleu_score": 0.643706146549428}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT max( T1.Final_Table_Made), sum( T1.Best_Finish) FROM poker_player AS T1        ", "inferred_question": "What are the maximum final table earning and total best finish of poker players?", "score": -54.652557373046875, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5446179888332534, "beam_bleu_score": 0.6685774557484777}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 653, "beams": [{"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What is the average earning of all poker players?", "score": 0.0, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9703044453696142, "beam_bleu_score": 0.8662882412156655}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What are the earnings of poker players with maximum earning?", "score": -33.49436569213867, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3147402307001701, "beam_bleu_score": 0.5854532184141883}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What are the earnings of poker players with minimum earning?", "score": -35.292945861816406, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3020917495532084, "beam_bleu_score": 0.5854532184141883}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What is the total earning of all poker players?", "score": -35.32916259765625, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6497201543504345, "beam_bleu_score": 0.7284366149817604}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "How many earnings of poker players are there?", "score": -40.58029556274414, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32355236202871374, "beam_bleu_score": 0.6637932297933169}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1        ", "inferred_question": "What are the earnings of poker players?", "score": -45.464900970458984, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8558354961115567, "beam_bleu_score": 0.7532521366632763}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -59.8586540222168, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12247696318714851, "beam_bleu_score": 0.38314152359015874}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -91.34288024902344, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12247696318714851, "beam_bleu_score": 0.38314152359015874}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT count( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "How many ids of poker players are there?", "score": -109.74217224121094, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08649147750911368, "beam_bleu_score": 0.5023883225349958}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players?", "score": -113.39710998535156, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19355086832223256, "beam_bleu_score": 0.5619422925480245}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What is the average id of all poker players?", "score": -116.09443664550781, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28195596535243717, "beam_bleu_score": 0.7771774547646677}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "inferred_question": "What are the personses of poker players?", "score": -122.28189086914062, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14276559278151757, "beam_bleu_score": 0.5978586960368394}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "inferred_question": "What are the names of people?", "score": -123.27537536621094, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.026820882106834865, "beam_bleu_score": 0.27360028309552753}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1        ", "inferred_question": "What are the money ranks of poker players?", "score": -125.30937194824219, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31967477974957514, "beam_bleu_score": 0.6043170607094893}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT T1.Height FROM people AS T1        ", "inferred_question": "What are the heights of people?", "score": -127.84979248046875, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.02905219705907991, "beam_bleu_score": 0.28250361691208414}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 654, "beams": [{"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What is the average earning of all poker players?", "score": 0.0, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.7039614971083282}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What is the total earning of all poker players?", "score": -33.5794677734375, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6655566513414867, "beam_bleu_score": 0.5363132592522885}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What are the earnings of poker players with maximum earning?", "score": -34.71087646484375, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3110578865254122, "beam_bleu_score": 0.4854880381460628}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "What are the earnings of poker players with minimum earning?", "score": -35.72679138183594, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3680674928137997, "beam_bleu_score": 0.48264047816455025}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1        ", "inferred_question": "How many earnings of poker players are there?", "score": -41.640968322753906, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33057871604805156, "beam_bleu_score": 0.507121608087262}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1        ", "inferred_question": "What are the earnings of poker players?", "score": -45.6845588684082, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8809526058884137, "beam_bleu_score": 0.4939414390376048}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -60.623111724853516, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2207061811184079, "beam_bleu_score": 0.3125481727247552}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -91.61353302001953, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2207061811184079, "beam_bleu_score": 0.3125481727247552}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "How many ids of poker players are there?", "score": -111.32128143310547, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11075820709677497, "beam_bleu_score": 0.35423225571470424}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players?", "score": -116.69760131835938, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13769570537775333, "beam_bleu_score": 0.3268457698490935}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT avg( T1.Poker_Player_ID) FROM poker_player AS T1        ", "inferred_question": "What is the average id of all poker players?", "score": -119.94762420654297, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29455450029126806, "beam_bleu_score": 0.5643975968479794}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1        ", "inferred_question": "How many money ranks of poker players are there?", "score": -125.46273040771484, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14414592456504383, "beam_bleu_score": 0.3808547195590802}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "inferred_question": "What are the names of people?", "score": -125.587890625, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05508259003061999, "beam_bleu_score": 0.09799439020061054}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1        ", "inferred_question": "What are the money ranks of poker players?", "score": -126.47903442382812, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29827833161371664, "beam_bleu_score": 0.3714931610252018}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1        ", "inferred_question": "What is the average money rank of all poker players?", "score": -127.18557739257812, "correct_code": "SELECT avg(Earnings) FROM poker_player", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.511367288122463, "beam_bleu_score": 0.5900405531821725}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 655, "beams": [{"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning?", "score": 0.0, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8564509368708889, "beam_bleu_score": 0.631458862986117}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -37.32566452026367, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8345471393510125, "beam_bleu_score": 0.515357292567552}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -43.1790657043457, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What is the average money rank of all poker players with maximum earning?", "score": -43.27153015136719, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5758580119097055, "beam_bleu_score": 0.674288113080084}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -44.221073150634766, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with minimum money rank?", "score": -45.728485107421875, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47680081767784654, "beam_bleu_score": 0.515357292567552}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -47.5821533203125, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -48.036537170410156, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What is the total money rank of all poker players with maximum earning?", "score": -50.598838806152344, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.683796485738357, "beam_bleu_score": 0.6825841929683818}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "How many money ranks of poker players with maximum earning are there?", "score": -51.618263244628906, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3769240064978441, "beam_bleu_score": 0.5679705456316149}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY min( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -56.96358108520508, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -80.00309753417969, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8345471393510125, "beam_bleu_score": 0.515357292567552}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -81.12498474121094, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8345471393510125, "beam_bleu_score": 0.515357292567552}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -84.40440368652344, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8345471393510125, "beam_bleu_score": 0.515357292567552}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -85.13566589355469, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8345471393510125, "beam_bleu_score": 0.515357292567552}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 656, "beams": [{"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning?", "score": 0.0, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5332733702280358, "beam_bleu_score": 0.5766730243065741}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -37.09211730957031, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5554454259741795, "beam_bleu_score": 0.42528795545537645}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -41.140899658203125, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -42.022789001464844, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What is the average money rank of all poker players with maximum earning?", "score": -43.2181396484375, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47012670829062064, "beam_bleu_score": 0.5185617208749849}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -44.35519027709961, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with minimum money rank?", "score": -45.79447555541992, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41638564699531966, "beam_bleu_score": 0.42528795545537645}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -46.58192443847656, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What is the total money rank of all poker players with maximum earning?", "score": -49.17902374267578, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5145305672735896, "beam_bleu_score": 0.5194093645819676}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "How many money ranks of poker players with maximum earning are there?", "score": -51.08737564086914, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21189203593293415, "beam_bleu_score": 0.49079932786263386}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY min( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "", "score": -56.653831481933594, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY sum( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -77.76083374023438, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5554454259741795, "beam_bleu_score": 0.42528795545537645}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY avg( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -78.62474060058594, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5554454259741795, "beam_bleu_score": 0.42528795545537645}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY max( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -80.89320373535156, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5554454259741795, "beam_bleu_score": 0.42528795545537645}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1    ORDER BY count( T1.Earnings) DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning with maximum money rank?", "score": -83.38357543945312, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5554454259741795, "beam_bleu_score": 0.42528795545537645}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 657, "beams": [{"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What are the final table earnings of poker players with a earning of less than 200000.0   with maximum final table earning?", "score": 33.4185791015625, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7812226091374971, "beam_bleu_score": 0.5981201271390224}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT count( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "How many final table earnings of poker players with a earning of less than 200000.0   are there?", "score": 19.754898071289062, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7664366834570365, "beam_bleu_score": 0.6486738895233859}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What are the final table earnings of poker players with a earning of less than 200000.0   with minimum final table earning?", "score": 16.747520446777344, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.719481793639357, "beam_bleu_score": 0.5713488421721342}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What is the total final table earning of all poker players with a earning of less than 200000.0  ?", "score": 16.479663848876953, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7279154446263117, "beam_bleu_score": 0.6909206532072117}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What is the average final table earning of all poker players with a earning of less than 200000.0  ?", "score": 12.581743240356445, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5796955659456011, "beam_bleu_score": 0.6909956215709383}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT T1.Final_Table_Made FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What are the final table earnings of poker players with a earning of less than 200000.0  ?", "score": -1.0365104675292969, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8089809404596611, "beam_bleu_score": 0.6711658202560579}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -9.09188461303711, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING sum( T1.Earnings) < 200000     ", "inferred_question": "", "score": -17.58295440673828, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING count( T1.Earnings) < 200000     ", "inferred_question": "", "score": -19.13352394104004, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING avg( T1.Earnings) < 200000     ", "inferred_question": "", "score": -20.086044311523438, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING max( T1.Earnings) < 200000     ", "inferred_question": "", "score": -22.94190216064453, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT count( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -24.171985626220703, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -25.94019317626953, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -26.588729858398438, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -30.137454986572266, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 658, "beams": [{"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What are the final table earnings of poker players with a earning of less than 200000.0   with maximum final table earning?", "score": 41.477718353271484, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8304554865416428, "beam_bleu_score": 0.49543512090530967}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What are the final table earnings of poker players with a earning of less than 200000.0   with minimum final table earning?", "score": 21.627967834472656, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7210409497638159, "beam_bleu_score": 0.46757721813604286}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT T1.Final_Table_Made FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What are the final table earnings of poker players with a earning of less than 200000.0  ?", "score": 19.165828704833984, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8519825378267585, "beam_bleu_score": 0.5589086483641398}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What is the total final table earning of all poker players with a earning of less than 200000.0  ?", "score": 18.071346282958984, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8866055850388643, "beam_bleu_score": 0.5471791741274465}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "What is the average final table earning of all poker players with a earning of less than 200000.0  ?", "score": 17.26910400390625, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8098409951889144, "beam_bleu_score": 0.5541314448018253}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT count( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       ", "inferred_question": "How many final table earnings of poker players with a earning of less than 200000.0   are there?", "score": 10.074527740478516, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.619255032189562, "beam_bleu_score": 0.554749755186836}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": 3.8984413146972656, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING count( T1.Earnings) < 200000     ", "inferred_question": "", "score": -6.480384826660156, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING sum( T1.Earnings) < 200000     ", "inferred_question": "", "score": -6.938407897949219, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING max( T1.Earnings) < 200000     ", "inferred_question": "", "score": -10.280532836914062, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT max( T1.Final_Table_Made) FROM poker_player AS T1   HAVING avg( T1.Earnings) < 200000     ", "inferred_question": "", "score": -10.627155303955078, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -16.09778594970703, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT sum( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -20.23143768310547, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT avg( T1.Final_Table_Made) FROM poker_player AS T1   HAVING min( T1.Earnings) < 200000     ", "inferred_question": "", "score": -21.5648193359375, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT min( T1.Final_Table_Made) FROM poker_player AS T1   HAVING avg( T1.Earnings) < 200000     ", "inferred_question": "", "score": -30.740982055664062, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 659, "beams": [{"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players?", "score": -4.768370445162873e-07, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9438185185220014, "beam_bleu_score": 0.6777428726372352}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players?", "score": -14.56010627746582, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9438185185220014, "beam_bleu_score": 0.6777428726372352}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players?", "score": -18.154705047607422, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9438185185220014, "beam_bleu_score": 0.6777428726372352}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "inferred_question": "What are the names of people?", "score": -20.708370208740234, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33614922107663014, "beam_bleu_score": 0.657719613946539}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "inferred_question": "What are the names of people?", "score": -24.318477630615234, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33614922107663014, "beam_bleu_score": 0.657719613946539}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players?", "score": -34.068058013916016, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9438185185220014, "beam_bleu_score": 0.6777428726372352}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players?", "score": -34.27112579345703, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9438185185220014, "beam_bleu_score": 0.6777428726372352}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "How many names of people that are poker players are there?", "score": -37.70253372192383, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6273991953080358, "beam_bleu_score": 0.5505583571321896}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players with maximum name?", "score": -38.56325149536133, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3411029289681563, "beam_bleu_score": 0.48840663066018064}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players?", "score": -38.84308624267578, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9438185185220014, "beam_bleu_score": 0.6777428726372352}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What is the average name of all people that are poker players?", "score": -41.303924560546875, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6495936777039315, "beam_bleu_score": 0.5117165623264305}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.People_ID in (SELECT count( T22.People_ID) FROM poker_player AS T22        )       ", "inferred_question": "", "score": -41.66212844848633, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What are the names of people that are poker players?", "score": -43.3235969543457, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9438185185220014, "beam_bleu_score": 0.6777428726372352}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.People_ID in (SELECT avg( T22.People_ID) FROM poker_player AS T22        )       ", "inferred_question": "", "score": -44.22435760498047, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        ", "inferred_question": "What is the total name of all people that are poker players?", "score": -44.53880310058594, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6292399830568004, "beam_bleu_score": 0.5194229525219809}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 660, "beams": [{"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Name FROM people AS T1        ", "inferred_question": "What are the names of people?", "score": 0.0, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16129936982709414, "beam_bleu_score": 0.36470325175752133}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT max( T1.Name) FROM people AS T1        ", "inferred_question": "What are the names of people with maximum name?", "score": -36.61045837402344, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11799981693049277, "beam_bleu_score": 0.36788313102637793}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT count( T1.Name) FROM people AS T1        ", "inferred_question": "How many names of people are there?", "score": -36.68285369873047, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15494252112129425, "beam_bleu_score": 0.3525407470173404}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1        ", "inferred_question": "What is the average name of all people?", "score": -39.63445281982422, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11127593383782097, "beam_bleu_score": 0.4195516724161508}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1        ", "inferred_question": "What is the total name of all people?", "score": -42.29854202270508, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13405112739663083, "beam_bleu_score": 0.39281902323447093}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT min( T1.Name) FROM people AS T1        ", "inferred_question": "What are the names of people with minimum name?", "score": -43.687557220458984, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11800184840827332, "beam_bleu_score": 0.36788313102637793}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -52.91259765625, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28694842852045066, "beam_bleu_score": 0.4181427414014072}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT count( *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -67.0190200805664, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28694842852045066, "beam_bleu_score": 0.4181427414014072}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.People_ID FROM poker_player AS T1        ", "inferred_question": "What are the personses of poker players?", "score": -88.54393005371094, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1806207245719238, "beam_bleu_score": 0.5630653737505681}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player AS T1        ", "inferred_question": "Show me everything about poker players.", "score": -100.9307632446289, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13960941019359463, "beam_bleu_score": 0.42432080309859516}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.People_ID FROM people AS T1        ", "inferred_question": "What are the ids of people?", "score": -101.24771118164062, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.053762061797845595, "beam_bleu_score": 0.2031810864000592}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Poker_Player_ID FROM poker_player AS T1        ", "inferred_question": "What are the ids of poker players?", "score": -103.58089447021484, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29047390149504004, "beam_bleu_score": 0.5055220977482706}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1        ", "inferred_question": "What are the birth dates of people?", "score": -105.81535339355469, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0450432030452379, "beam_bleu_score": 0.26465305497980907}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Height FROM people AS T1        ", "inferred_question": "What are the heights of people?", "score": -108.03902435302734, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04101412232663171, "beam_bleu_score": 0.22356788208105727}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1        ", "inferred_question": "What are the earnings of poker players?", "score": -108.31011199951172, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12009013622672737, "beam_bleu_score": 0.5312229894315912}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 661, "beams": [{"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What are the names of people that are poker players with a earning of more than 300000.0  ?", "score": 59.65087127685547, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8696818166259002, "beam_bleu_score": 0.6091682173184741}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What are the names of people that are poker players with a earning of more than 300000.0   with maximum name?", "score": 22.863895416259766, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5147927041855112, "beam_bleu_score": 0.5108989139450464}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "How many names of people that are poker players with a earning of more than 300000.0   are there?", "score": 21.495899200439453, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.771938626726807, "beam_bleu_score": 0.5486072452715886}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "inferred_question": "How many poker players with a earning of more than 300000.0   are there?", "score": 18.562702178955078, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7126225564690627, "beam_bleu_score": 0.6090168739857005}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What is the average name of all people that are poker players with a earning of more than 300000.0  ?", "score": 17.487777709960938, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6486411246442498, "beam_bleu_score": 0.5361010627906049}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What is the total name of all people that are poker players with a earning of more than 300000.0  ?", "score": 17.190231323242188, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6567428764422717, "beam_bleu_score": 0.5366664538024406}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What are the names of people that are poker players with a earning of more than 300000.0   with minimum name?", "score": 16.71051025390625, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4477412383860685, "beam_bleu_score": 0.5108989139450464}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( T2.Earnings) > 300000     ", "inferred_question": "", "score": 16.39441680908203, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING sum( T2.Earnings) > 300000     ", "inferred_question": "", "score": 13.969169616699219, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING max( T2.Earnings) > 300000     ", "inferred_question": "", "score": 11.22146987915039, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING avg( T2.Earnings) > 300000     ", "inferred_question": "", "score": 7.8808746337890625, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "inferred_question": "How many poker players with a earning of more than 300000.0   are there?", "score": 7.620872497558594, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7126225564690627, "beam_bleu_score": 0.6090168739857005}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING min( T2.Earnings) > 300000     ", "inferred_question": "", "score": 3.4600753784179688, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "inferred_question": "", "score": -29.493934631347656, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "inferred_question": "", "score": -33.19306564331055, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 662, "beams": [{"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What are the names of people that are poker players with a earning of more than 300000.0  ?", "score": 56.56620407104492, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7409638780258475, "beam_bleu_score": 0.49521598673826706}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What are the names of people that are poker players with a earning of more than 300000.0   with maximum name?", "score": 21.13387680053711, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2526900909188037, "beam_bleu_score": 0.41228622747886773}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "How many names of people that are poker players with a earning of more than 300000.0   are there?", "score": 16.74306869506836, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43994376530361456, "beam_bleu_score": 0.4483260310911104}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What is the average name of all people that are poker players with a earning of more than 300000.0  ?", "score": 16.06789779663086, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39751620415087074, "beam_bleu_score": 0.4214076268374275}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What is the total name of all people that are poker players with a earning of more than 300000.0  ?", "score": 14.673377990722656, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4899768055153205, "beam_bleu_score": 0.4142844409054072}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       ", "inferred_question": "What are the names of people that are poker players with a earning of more than 300000.0   with minimum name?", "score": 12.382713317871094, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20866511595342008, "beam_bleu_score": 0.41228622747886773}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( T2.Earnings) > 300000     ", "inferred_question": "", "score": 12.194576263427734, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING sum( T2.Earnings) > 300000     ", "inferred_question": "", "score": 10.549911499023438, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "inferred_question": "How many poker players with a earning of more than 300000.0   are there?", "score": 7.994621276855469, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6080503560276627, "beam_bleu_score": 0.5144060770802938}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING max( T2.Earnings) > 300000     ", "inferred_question": "", "score": 7.686065673828125, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING avg( T2.Earnings) > 300000     ", "inferred_question": "", "score": 6.174533843994141, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING min( T2.Earnings) > 300000     ", "inferred_question": "", "score": -0.7987556457519531, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT count( *) FROM poker_player AS T1 WHERE T1.Earnings > 300000       ", "inferred_question": "How many poker players with a earning of more than 300000.0   are there?", "score": -1.6260795593261719, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6080503560276627, "beam_bleu_score": 0.5144060770802938}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "inferred_question": "", "score": -31.42287826538086, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID HAVING count( *) > 300000     ", "inferred_question": "", "score": -34.021888732910156, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 665, "beams": [{"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What are the birth dates of people that are poker players with minimum earning?", "score": 0.0, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8312624277422237, "beam_bleu_score": 0.6017597719294043}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What are the birth dates of people that are poker players with minimum earning with maximum birth date?", "score": -43.19719314575195, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4219401949151954, "beam_bleu_score": 0.46692071458929013}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT min( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What are the birth dates of people that are poker players with minimum earning with minimum birth date?", "score": -45.451255798339844, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7430398314754669, "beam_bleu_score": 0.46692071458929013}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT avg( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What is the average birth date of all people that are poker players with minimum earning?", "score": -45.888912200927734, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5284581865160072, "beam_bleu_score": 0.5806190307522178}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -47.407325744628906, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -47.42045211791992, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -48.99672317504883, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT count( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "How many birth dates of people that are poker players with minimum earning are there?", "score": -50.8385009765625, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44254868272948533, "beam_bleu_score": 0.5218781811341862}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT sum( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What is the total birth date of all people that are poker players with minimum earning?", "score": -52.972206115722656, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5017474255210371, "beam_bleu_score": 0.5923719537589296}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY min( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -54.02742385864258, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY max( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -54.74055862426758, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -83.33502197265625, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -90.33618927001953, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -90.41434478759766, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -92.3067626953125, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 666, "beams": [{"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What are the birth dates of people that are poker players with minimum earning?", "score": 0.0, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6900743025514242, "beam_bleu_score": 0.5650961358472995}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What are the birth dates of people that are poker players with minimum earning with maximum birth date?", "score": -43.01869201660156, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4411889901429288, "beam_bleu_score": 0.4370901910004146}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT min( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What are the birth dates of people that are poker players with minimum earning with minimum birth date?", "score": -45.22166442871094, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6274823666811487, "beam_bleu_score": 0.4370901910004146}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT avg( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What is the average birth date of all people that are poker players with minimum earning?", "score": -45.7577018737793, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45242041556337675, "beam_bleu_score": 0.5120020894101855}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -46.576778411865234, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -47.68730926513672, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -49.54669952392578, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT count( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "How many birth dates of people that are poker players with minimum earning are there?", "score": -51.0190315246582, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3248601174188078, "beam_bleu_score": 0.5028469464988675}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT sum( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    ", "inferred_question": "What is the total birth date of all people that are poker players with minimum earning?", "score": -52.874141693115234, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42049520277852814, "beam_bleu_score": 0.5195305667759507}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY max( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -53.89014434814453, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY min( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -54.67721176147461, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -78.27921295166016, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -89.21581268310547, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT max( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY sum( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -90.45314025878906, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT min( T1.Birth_Date) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID  ORDER BY avg( T2.Earnings) ASC LIMIT 1    ", "inferred_question": "", "score": -91.43292236328125, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 667, "beams": [{"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players that are people with maximum height?", "score": 0.0, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7053105860553206, "beam_bleu_score": 0.4695407448995622}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players that are people with maximum height with maximum money rank?", "score": -34.857269287109375, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6070423784678006, "beam_bleu_score": 0.3573955538950213}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What is the average money rank of all poker players that are people with maximum height?", "score": -41.04267501831055, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.549776822718503, "beam_bleu_score": 0.4694115514099163}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY avg( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -45.36227798461914, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY count( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -45.90755081176758, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players that are people with maximum height with minimum money rank?", "score": -45.967987060546875, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4261770088383413, "beam_bleu_score": 0.3573955538950213}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY sum( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -46.11787796020508, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What is the total money rank of all poker players that are people with maximum height?", "score": -50.493988037109375, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.565755470716737, "beam_bleu_score": 0.48902573376491126}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY max( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -51.29043197631836, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "How many money ranks of poker players that are people with maximum height are there?", "score": -52.827335357666016, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.538419453252925, "beam_bleu_score": 0.40281559788202503}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY min( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -54.029632568359375, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Money_Rank DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum money rank?", "score": -55.203277587890625, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5244701425103439, "beam_bleu_score": 0.5204403396406476}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -62.53041076660156, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY avg( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -79.78227233886719, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY count( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -80.52949523925781, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 668, "beams": [{"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players that are people with maximum height?", "score": 0.0, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7367430604998852, "beam_bleu_score": 0.5498927273107371}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players that are people with maximum height with maximum money rank?", "score": -34.464111328125, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7225360037688142, "beam_bleu_score": 0.4259287996469911}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT avg( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What is the average money rank of all poker players that are people with maximum height?", "score": -41.96422576904297, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6123347703092453, "beam_bleu_score": 0.5075537637525698}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY sum( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -43.106239318847656, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY avg( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -44.31214141845703, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT min( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players that are people with maximum height with minimum money rank?", "score": -44.52078628540039, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5403540200474324, "beam_bleu_score": 0.4259287996469911}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY count( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -44.6807975769043, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT sum( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "What is the total money rank of all poker players that are people with maximum height?", "score": -47.94044494628906, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6458475915721534, "beam_bleu_score": 0.5105690281807476}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY max( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -48.81706619262695, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT count( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    ", "inferred_question": "How many money ranks of poker players that are people with maximum height are there?", "score": -51.20481491088867, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41259603871124684, "beam_bleu_score": 0.489785774051994}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY min( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -52.499176025390625, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1  GROUP BY T1.Money_Rank  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -61.782493591308594, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum earning?", "score": -71.72429656982422, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46730122211405234, "beam_bleu_score": 0.5420677982628646}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Money_Rank DESC LIMIT 1    ", "inferred_question": "What are the money ranks of poker players with maximum money rank?", "score": -72.19061279296875, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5385929396190363, "beam_bleu_score": 0.5355344586904937}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT max( T1.Money_Rank) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID  ORDER BY sum( T2.Height) DESC LIMIT 1    ", "inferred_question": "", "score": -77.61595153808594, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 669, "beams": [{"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What is the average earning of all poker players that are people with a height of more than 200.0  ?", "score": 46.57027816772461, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7149344970068512, "beam_bleu_score": 0.6075229017802984}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "How many people with a height of more than 200.0   that are poker players are there?", "score": 21.988744735717773, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35888465692880245, "beam_bleu_score": 0.510362358997782}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What is the total earning of all poker players that are people with a height of more than 200.0  ?", "score": 15.251304626464844, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7114030715814834, "beam_bleu_score": 0.5446331270309496}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What are the earnings of poker players that are people with a height of more than 200.0   with minimum earning?", "score": 15.149499893188477, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4766663647775299, "beam_bleu_score": 0.49667898483662914}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What are the earnings of poker players that are people with a height of more than 200.0   with maximum earning?", "score": 13.492511749267578, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5470738828386789, "beam_bleu_score": 0.49667898483662914}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What are the earnings of poker players that are people with a height of more than 200.0  ?", "score": 10.750572204589844, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8214879559486493, "beam_bleu_score": 0.6057072436487221}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING max( T2.Height) > 200     ", "inferred_question": "", "score": 5.791252136230469, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING avg( T2.Height) > 200     ", "inferred_question": "", "score": -0.2675056457519531, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING count( T2.Height) > 200     ", "inferred_question": "", "score": -1.2952880859375, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING sum( T2.Height) > 200     ", "inferred_question": "", "score": -2.5812225341796875, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "How many earnings of poker players that are people with a height of more than 200.0   are there?", "score": -5.203712463378906, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6192792948129243, "beam_bleu_score": 0.5474950655302884}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING min( T2.Height) > 200     ", "inferred_question": "", "score": -6.291393280029297, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT count( *) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "How many people with a height of more than 200.0   that are poker players are there?", "score": -10.114368438720703, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35888465692880245, "beam_bleu_score": 0.510362358997782}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "inferred_question": "", "score": -27.977474212646484, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "inferred_question": "", "score": -43.52923583984375, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 670, "beams": [{"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What is the average earning of all poker players that are people with a height of more than 200.0  ?", "score": 52.3311767578125, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6290857502614147, "beam_bleu_score": 0.48121880293523145}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT count( *) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "How many people with a height of more than 200.0   that are poker players are there?", "score": 29.387279510498047, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41379524236018606, "beam_bleu_score": 0.4110093895833017}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT sum( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What is the total earning of all poker players that are people with a height of more than 200.0  ?", "score": 21.920167922973633, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6101538269698163, "beam_bleu_score": 0.4207710233708016}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT min( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What are the earnings of poker players that are people with a height of more than 200.0   with minimum earning?", "score": 21.057939529418945, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4213403986605805, "beam_bleu_score": 0.39590187834348745}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT max( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What are the earnings of poker players that are people with a height of more than 200.0   with maximum earning?", "score": 15.259712219238281, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5038900792808918, "beam_bleu_score": 0.39590187834348745}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT T1.Earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "What are the earnings of poker players that are people with a height of more than 200.0  ?", "score": 14.21780776977539, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8756173540509019, "beam_bleu_score": 0.48985825532333627}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT count( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       ", "inferred_question": "How many earnings of poker players that are people with a height of more than 200.0   are there?", "score": 12.499626159667969, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5965763836841305, "beam_bleu_score": 0.4549055244287918}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING max( T2.Height) > 200     ", "inferred_question": "", "score": 10.754253387451172, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING avg( T2.Height) > 200     ", "inferred_question": "", "score": 6.285400390625, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING sum( T2.Height) > 200     ", "inferred_question": "", "score": 3.2622909545898438, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING min( T2.Height) > 200     ", "inferred_question": "", "score": -1.0658493041992188, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.People_ID HAVING count( T2.Height) > 200     ", "inferred_question": "", "score": -2.1933860778808594, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1 WHERE T1.Earnings > 200       ", "inferred_question": "What is the average earning of all poker players with a earning of more than 200.0  ?", "score": -4.904945373535156, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7135069584867162, "beam_bleu_score": 0.557783176782248}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "inferred_question": "", "score": -21.75946807861328, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT avg( T1.Earnings) FROM poker_player AS T1   HAVING count( *) > 200     ", "inferred_question": "", "score": -33.01411437988281, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 681, "beams": [{"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What are the names of people whose nationality is not russia?", "score": 44.80862808227539, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8186325046233055, "beam_bleu_score": 0.7425680226960364}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What are the names of people whose nationality is not russia with maximum name?", "score": 4.043731689453125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.506869539436783, "beam_bleu_score": 0.5730054117314728}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "How many names of people whose nationality is not russia are there?", "score": 2.551483154296875, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6607903582726151, "beam_bleu_score": 0.6928641354685728}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What is the average name of all people whose nationality is not russia?", "score": 1.5105361938476562, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5661844171966327, "beam_bleu_score": 0.592963612193129}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": 1.3079986572265625, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What are the names of people whose nationality is not russia with minimum name?", "score": 1.0716438293457031, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4706988664461291, "beam_bleu_score": 0.5730054117314728}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What is the total name of all people whose nationality is not russia?", "score": -0.5591621398925781, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5690206607684201, "beam_bleu_score": 0.6136929956986101}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -3.2308006286621094, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -3.919597625732422, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -7.1409149169921875, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -7.141796112060547, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT max( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -38.46480941772461, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.Name != 'Russia'       ", "inferred_question": "What are the names of people whose name is not russia?", "score": -38.493682861328125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.659319023828616, "beam_bleu_score": 0.643682443921154}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT count( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -40.009132385253906, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -40.85245132446289, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 682, "beams": [{"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What are the names of people whose nationality is not russia?", "score": 62.88130187988281, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9060412175311656, "beam_bleu_score": 0.6747149605765472}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What are the names of people whose nationality is not russia with maximum name?", "score": 21.886749267578125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5218036448768881, "beam_bleu_score": 0.5132877249122104}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": 20.062034606933594, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "How many names of people whose nationality is not russia are there?", "score": 19.59664535522461, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.754970639247295, "beam_bleu_score": 0.5359234965812694}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What is the average name of all people whose nationality is not russia?", "score": 19.060646057128906, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.664398995081005, "beam_bleu_score": 0.4726513436902178}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT min( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What are the names of people whose nationality is not russia with minimum name?", "score": 18.881866455078125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5116666924036931, "beam_bleu_score": 0.5132877249122104}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT sum( T1.Name) FROM people AS T1 WHERE T1.Nationality != 'Russia'       ", "inferred_question": "What is the total name of all people whose nationality is not russia?", "score": 17.07093048095703, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6962305761806031, "beam_bleu_score": 0.4784984126162175}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": 13.830078125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": 13.21923828125, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": 10.485603332519531, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT T1.Name FROM people AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": 10.155067443847656, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT max( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -20.35272979736328, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT count( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -22.36132049560547, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT avg( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -23.198204040527344, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT min( T1.Name) FROM people AS T1   HAVING count( T1.Nationality) != 'Russia'     ", "inferred_question": "", "score": -23.447723388671875, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 685, "beams": [{"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "How many distinct nationalities of people are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8766293077173709, "beam_bleu_score": 0.7863935966684718}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT T1.Nationality FROM people AS T1        ", "inferred_question": "What are the distinct nationalities of people?", "score": -34.94276809692383, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7121445469828445, "beam_bleu_score": 0.6748791702412212}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "What are the distinct nationalities of people with minimum nationality?", "score": -35.86188888549805, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3776319442747118, "beam_bleu_score": 0.4435674489342029}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "", "score": -45.314640045166016, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "", "score": -46.11310958862305, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "What are the distinct nationalities of people with maximum nationality?", "score": -53.99617004394531, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41576727902448374, "beam_bleu_score": 0.451041736791828}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "How many distinct names of people are there?", "score": -118.45022583007812, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2456175925736861, "beam_bleu_score": 0.6948537005406485}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM poker_player AS T1        ", "inferred_question": "How many distinct personses of poker players are there?", "score": -125.21122741699219, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05183446778734313, "beam_bleu_score": 0.5369479153339557}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM people AS T1        ", "inferred_question": "How many distinct ids of people are there?", "score": -143.5699462890625, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37767595487072236, "beam_bleu_score": 0.6718723395519137}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT T1.Name FROM people AS T1        ", "inferred_question": "What are the distinct names of people?", "score": -145.51004028320312, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08654153922532914, "beam_bleu_score": 0.495206296268704}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -146.29855346679688, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05033652136734612, "beam_bleu_score": 0.45560251841115595}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "What are the distinct names of people with minimum name?", "score": -151.32522583007812, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05521231404909788, "beam_bleu_score": 0.40280078356117993}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "", "score": -153.8533935546875, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "", "score": -154.0703582763672, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "What are the distinct names of people with maximum name?", "score": -161.11752319335938, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05396618338194703, "beam_bleu_score": 0.407229111470945}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 686, "beams": [{"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "How many distinct nationalities of people are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8256477002422209, "beam_bleu_score": 0.4381230834301708}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT T1.Nationality FROM people AS T1        ", "inferred_question": "What are the distinct nationalities of people?", "score": -37.374267578125, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5623263414691104, "beam_bleu_score": 0.4949961633176216}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "What are the distinct nationalities of people with minimum nationality?", "score": -39.7388801574707, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31654391058503006, "beam_bleu_score": 0.3324099301044212}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "", "score": -47.67961883544922, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "", "score": -48.2894401550293, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM people AS T1        ", "inferred_question": "What are the distinct nationalities of people with maximum nationality?", "score": -53.99293899536133, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3381890398776921, "beam_bleu_score": 0.3324099301044212}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "How many distinct names of people are there?", "score": -122.39471435546875, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11126068489839913, "beam_bleu_score": 0.24585817851883296}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM poker_player AS T1        ", "inferred_question": "How many distinct personses of poker players are there?", "score": -124.52684020996094, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.049230823774961685, "beam_bleu_score": 0.17327094623281963}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.People_ID) FROM people AS T1        ", "inferred_question": "How many distinct ids of people are there?", "score": -138.50839233398438, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2787490504215224, "beam_bleu_score": 0.19640450587395594}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT T1.Name FROM people AS T1        ", "inferred_question": "What are the distinct names of people?", "score": -154.98255920410156, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.050821756342715796, "beam_bleu_score": 0.26232364908944084}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "What are the distinct names of people with minimum name?", "score": -161.04388427734375, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.045827500432472634, "beam_bleu_score": 0.22727634830301674}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "", "score": -163.27609252929688, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM poker_player AS T1        ", "inferred_question": "How many poker players are there?", "score": -163.93719482421875, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.047620205440111585, "beam_bleu_score": 0.11724426834553761}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "", "score": -165.38502502441406, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM people AS T1        ", "inferred_question": "What are the distinct names of people with maximum name?", "score": -169.93597412109375, "correct_code": "SELECT count(DISTINCT Nationality) FROM people", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04424125487714514, "beam_bleu_score": 0.2256352565045717}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 687, "beams": [{"orig_question": "How many states are there?", "inferred_code": "SELECT count( *) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "How many states are there?", "score": -0.02295353077352047, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.state) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "How many state codes of states are there?", "score": -3.785740375518799, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43437742293558534, "beam_bleu_score": 0.6198549813336537}, {"orig_question": "How many states are there?", "inferred_code": "SELECT T1.state FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the state codes of states?", "score": -33.580894470214844, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08905958410096027, "beam_bleu_score": 0.393860771083521}, {"orig_question": "How many states are there?", "inferred_code": "SELECT min( T1.state) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the state codes of states with minimum state code?", "score": -34.15266799926758, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09044661599107873, "beam_bleu_score": 0.25215729920306756}, {"orig_question": "How many states are there?", "inferred_code": "SELECT sum( T1.state) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What is the total state code of all states?", "score": -42.7253303527832, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18700244412597045, "beam_bleu_score": 0.23556366957615357}, {"orig_question": "How many states are there?", "inferred_code": "SELECT avg( T1.state) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What is the average state code of all states?", "score": -44.857154846191406, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10243096586451583, "beam_bleu_score": 0.22460251449814192}, {"orig_question": "How many states are there?", "inferred_code": "SELECT max( T1.state) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the state codes of states with maximum state code?", "score": -48.626853942871094, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1154254668130884, "beam_bleu_score": 0.25829619981307483}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "How many area codes of states are there?", "score": -91.65514373779297, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25814159754056365, "beam_bleu_score": 0.6150885492511058}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.created) FROM VOTES AS T1        ", "inferred_question": "How many creation dates of votes are there?", "score": -93.8112564086914, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08953429034313809, "beam_bleu_score": 0.5134926527005734}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.state) FROM VOTES AS T1        ", "inferred_question": "How many state codes of votes are there?", "score": -104.12617492675781, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2151484326437325, "beam_bleu_score": 0.6289401791436202}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.contestant_number) FROM VOTES AS T1        ", "inferred_question": "How many contestant_numbers of votes are there?", "score": -118.17166137695312, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08669604504788608, "beam_bleu_score": 0.46683650098020935}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.contestant_number) FROM CONTESTANTS AS T1        ", "inferred_question": "How many ids of contestants are there?", "score": -124.4061508178711, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06254904189449817, "beam_bleu_score": 0.5569260656808981}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.phone_number) FROM VOTES AS T1        ", "inferred_question": "How many phone numbers of votes are there?", "score": -125.31968688964844, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0805088922379994, "beam_bleu_score": 0.49615666340750453}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.vote_id) FROM VOTES AS T1        ", "inferred_question": "How many ids of votes are there?", "score": -126.37018585205078, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11150698080680843, "beam_bleu_score": 0.6590229418828029}, {"orig_question": "How many states are there?", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1        ", "inferred_question": "How many names of contestants are there?", "score": -126.97265625, "correct_code": "SELECT count(*) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08375959959299728, "beam_bleu_score": 0.5347836609076411}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 689, "beams": [{"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, T1.state FROM VOTES AS T1        ", "inferred_question": "What are the ids, phone numbers, and state codes of votes?", "score": 0.0, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7933314558229714, "beam_bleu_score": 0.7123315684461309}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, avg( T1.phone_number), T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -38.80149841308594, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, max( T1.phone_number), T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -39.09769821166992, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT max( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -39.40574645996094, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT min( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -39.59804916381836, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, min( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "inferred_question": "", "score": -39.8789176940918, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, count( *) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "inferred_question": "", "score": -41.124755859375, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, count( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "inferred_question": "", "score": -41.79969787597656, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, max( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "inferred_question": "", "score": -43.477874755859375, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, count( T1.phone_number), T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -43.515132904052734, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT count( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -43.59403610229492, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT avg( T1.vote_id), T1.phone_number, T1.state FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -44.315162658691406, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, T2.state FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state        ", "inferred_question": "What are the ids and phone numbers of votes cast in states? Also show the state codes of the states.", "score": -44.464927673339844, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5827204665937862, "beam_bleu_score": 0.420684731065463}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, sum( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "inferred_question": "", "score": -44.85509490966797, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT T1.vote_id, T1.phone_number, avg( T1.state) FROM VOTES AS T1  GROUP BY T1.phone_number      ", "inferred_question": "", "score": -46.19854736328125, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 690, "beams": [{"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the maximum area code and minimum area code of states?", "score": 0.0, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4271061400625482, "beam_bleu_score": 0.7106265420967098}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the total area code and minimum area code of states?", "score": -28.21799087524414, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31708063652233287, "beam_bleu_score": 0.6130340053646077}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT avg( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the average area code and minimum area code of states?", "score": -34.53247833251953, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2630908680222819, "beam_bleu_score": 0.5892522570748392}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), sum( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the maximum area code and total area code of states?", "score": -36.270362854003906, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2779842278229293, "beam_bleu_score": 0.6096747885008248}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), count( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the maximum area code and number of area codes of states?", "score": -37.75191879272461, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32569850326226113, "beam_bleu_score": 0.6159445306008263}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), avg( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the maximum area code and average area code of states?", "score": -38.46939468383789, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2755887228945617, "beam_bleu_score": 0.5860233560649993}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT T1.area_code, min( T1.area_code) FROM AREA_CODE_STATE AS T1  GROUP BY T1.area_code      ", "inferred_question": "", "score": -41.35640335083008, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT count( T1.area_code), min( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the number of area codes and minimum area code of states?", "score": -43.822715759277344, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31828692430963457, "beam_bleu_score": 0.602648250807326}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT max( T1.area_code), T1.area_code FROM AREA_CODE_STATE AS T1  GROUP BY T1.area_code      ", "inferred_question": "", "score": -53.603755950927734, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), max( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the total area code and maximum area code of states?", "score": -65.85832214355469, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25734268640206703, "beam_bleu_score": 0.6043496078601456}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), count( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the total area code and number of area codes of states?", "score": -66.42662048339844, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2519252860796236, "beam_bleu_score": 0.5104533302189553}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT sum( T1.area_code), avg( T1.area_code) FROM AREA_CODE_STATE AS T1        ", "inferred_question": "What are the total area code and average area code of states?", "score": -66.91024780273438, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18888170574922514, "beam_bleu_score": 0.4716910650183902}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 691, "beams": [{"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "inferred_question": "What are the creation dates of votes whose state code is ca with maximum creation date?", "score": 79.62474822998047, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6776422083606344, "beam_bleu_score": 0.40129077314213146}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT T1.created FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "inferred_question": "What are the creation dates of votes whose state code is ca?", "score": 60.90735626220703, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8048924111446756, "beam_bleu_score": 0.5680109211420131}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT min( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "inferred_question": "What are the creation dates of votes whose state code is ca with minimum creation date?", "score": 60.322975158691406, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7021671295036409, "beam_bleu_score": 0.40129077314213146}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT sum( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "inferred_question": "What is the total creation date of all votes whose state code is ca?", "score": 57.62702941894531, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8088249683949141, "beam_bleu_score": 0.5064294075419276}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT avg( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "inferred_question": "What is the average creation date of all votes whose state code is ca?", "score": 56.07057189941406, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5781160528248263, "beam_bleu_score": 0.4966822600528197}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT count( T1.created) FROM VOTES AS T1 WHERE T1.state = 'CA'       ", "inferred_question": "How many creation dates of votes whose state code is ca are there?", "score": 42.96363067626953, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4780327236988825, "beam_bleu_score": 0.4586520452736181}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING count( T1.state) = 'CA'     ", "inferred_question": "", "score": 30.0224609375, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING avg( T1.state) = 'CA'     ", "inferred_question": "", "score": 27.604259490966797, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING sum( T1.state) = 'CA'     ", "inferred_question": "", "score": 23.121463775634766, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING max( T1.state) = 'CA'     ", "inferred_question": "", "score": 22.931262969970703, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT max( T1.created) FROM VOTES AS T1   HAVING min( T1.state) = 'CA'     ", "inferred_question": "", "score": 18.937789916992188, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT min( T1.created) FROM VOTES AS T1   HAVING count( T1.state) = 'CA'     ", "inferred_question": "", "score": 10.921859741210938, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT T1.created FROM VOTES AS T1  GROUP BY T1.created HAVING count( T1.state) = 'CA'     ", "inferred_question": "", "score": 10.632865905761719, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT T1.created FROM VOTES AS T1  GROUP BY T1.created HAVING avg( T1.state) = 'CA'     ", "inferred_question": "", "score": 8.734062194824219, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT sum( T1.created) FROM VOTES AS T1   HAVING count( T1.state) = 'CA'     ", "inferred_question": "", "score": 8.1761474609375, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 692, "beams": [{"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "inferred_question": "What are the names of contestants whose name is not jessie alloway?", "score": 55.65989303588867, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9254972555923198, "beam_bleu_score": 0.7613003665887333}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "inferred_question": "How many names of contestants whose name is not jessie alloway are there?", "score": 21.5125732421875, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7118359731631805, "beam_bleu_score": 0.6991885058509412}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT min( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "inferred_question": "What are the names of contestants whose name is not jessie alloway with minimum name?", "score": 19.481224060058594, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.541106220485047, "beam_bleu_score": 0.6758299720658776}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT max( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "inferred_question": "What are the names of contestants whose name is not jessie alloway with maximum name?", "score": 19.317096710205078, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5267304171308564, "beam_bleu_score": 0.6758299720658776}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT avg( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "inferred_question": "What is the average name of all contestants whose name is not jessie alloway?", "score": 18.52359390258789, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6610883802664942, "beam_bleu_score": 0.6573284832200835}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT sum( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name != 'Jessie Alloway'       ", "inferred_question": "What is the total name of all contestants whose name is not jessie alloway?", "score": 14.195777893066406, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7048837945414281, "beam_bleu_score": 0.6653422264916247}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING count( T1.contestant_name) != 'Jessie Alloway'     ", "inferred_question": "", "score": 10.5439453125, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING avg( T1.contestant_name) != 'Jessie Alloway'     ", "inferred_question": "", "score": 7.1746978759765625, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING sum( T1.contestant_name) != 'Jessie Alloway'     ", "inferred_question": "", "score": 4.130542755126953, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING min( T1.contestant_name) != 'Jessie Alloway'     ", "inferred_question": "", "score": 3.121379852294922, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING max( T1.contestant_name) != 'Jessie Alloway'     ", "inferred_question": "", "score": 2.054584503173828, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_number != Jessie Alloway       ", "inferred_question": "", "score": 1.1788444519042969, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T13 ON T1.contestant_number = T13.contestant_number JOIN AREA_CODE_STATE AS T2 ON T13.state = T2.state WHERE T2.area_code != Jessie Alloway       ", "inferred_question": "", "score": -10.340816497802734, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.state != 'Jessie Alloway'       ", "inferred_question": "What are the names of contestants who received votes whose state code is not jessie alloway?", "score": -14.088584899902344, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47303252229127746, "beam_bleu_score": 0.6023244148050977}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING count( *) != Jessie Alloway     ", "inferred_question": "", "score": -24.421096801757812, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 693, "beams": [{"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, T1.created FROM VOTES AS T1        ", "inferred_question": "What are the state codes and creation dates of votes?", "score": 0.0, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5946856333194763, "beam_bleu_score": 0.6769549435462966}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, max(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -24.53476333618164, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "inferred_question": "", "score": -28.425071716308594, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, sum(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -29.701778411865234, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, count(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -30.0452823638916, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, avg(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -31.845666885375977, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, min(DISTINCT T1.created) FROM VOTES AS T1  GROUP BY T1.state      ", "inferred_question": "", "score": -31.872291564941406, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "inferred_question": "", "score": -33.49344253540039, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "inferred_question": "", "score": -33.92436218261719, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "inferred_question": "", "score": -34.105712890625, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.state), T1.created FROM VOTES AS T1  GROUP BY T1.created      ", "inferred_question": "", "score": -35.73207473754883, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT T1.state, T2.created FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state        ", "inferred_question": "What are the state codes of states in which votes were cast? Also show the creation dates of the votes.", "score": -53.71934509277344, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6484169874898198, "beam_bleu_score": 0.3444718762141162}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.state), max(DISTINCT T1.created) FROM VOTES AS T1        ", "inferred_question": "What are the minimum state code and maximum creation date of votes?", "score": -53.863773345947266, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36720928291608235, "beam_bleu_score": 0.5551465408416308}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.state), sum(DISTINCT T1.created) FROM VOTES AS T1        ", "inferred_question": "What are the minimum state code and total creation date of votes?", "score": -57.43830108642578, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4259219904687559, "beam_bleu_score": 0.5908264169244078}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.state), max(DISTINCT T1.created) FROM VOTES AS T1        ", "inferred_question": "What are the average state code and maximum creation date of votes?", "score": -58.21781921386719, "correct_code": "SELECT DISTINCT state ,  created FROM votes", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40426079043231944, "beam_bleu_score": 0.5524581008678069}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 699, "beams": [{"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling'       ", "inferred_question": "What are the creation dates, state codes, and phone numbers of votes cast for contestants whose name is tabatha gehling?", "score": 63.70224380493164, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8606759789629848, "beam_bleu_score": 0.7408247376614565}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT avg( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 30.075462341308594, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, avg( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 26.726173400878906, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT max( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 25.868270874023438, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, count( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 24.964252471923828, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, max( T1.state), T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 24.457725524902344, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, avg( T1.state), T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 24.090641021728516, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT min( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 22.971019744873047, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, count( T1.state), T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 22.402164459228516, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT count( *), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 21.442317962646484, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, max( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 21.414501190185547, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, sum( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 20.700111389160156, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, min( T1.phone_number) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 20.605850219726562, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT sum( T1.created), T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' GROUP BY T1.contestant_number      ", "inferred_question": "", "score": 19.966903686523438, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number  GROUP BY T1.contestant_number HAVING avg( T2.contestant_name) = 'Tabatha Gehling'     ", "inferred_question": "", "score": 19.84332275390625, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 701, "beams": [{"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "inferred_question": "What are the names of contestants whose name is %al%?", "score": 48.9935417175293, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4401058416291186, "beam_bleu_score": 0.4626653835587112}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "inferred_question": "What are the names of contestants whose name is %al%?", "score": 45.83856964111328, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4401058416291186, "beam_bleu_score": 0.4626653835587112}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "inferred_question": "How many names of contestants whose name is %al% are there?", "score": 10.832256317138672, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29227071562009443, "beam_bleu_score": 0.4641960528541719}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.state like '%Al%'       ", "inferred_question": "What are the names of contestants who received votes whose state code is %al%?", "score": 9.57126235961914, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24702006549590516, "beam_bleu_score": 0.5044937117450634}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT min( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "inferred_question": "What are the names of contestants whose name is %al% with minimum name?", "score": 8.090167999267578, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38170123138257295, "beam_bleu_score": 0.5241310683748003}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT max( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "inferred_question": "What are the names of contestants whose name is %al% with maximum name?", "score": 7.837104797363281, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3811990253775499, "beam_bleu_score": 0.5185245824548125}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT avg( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "inferred_question": "What is the average name of all contestants whose name is %al%?", "score": 7.656230926513672, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3221935858855459, "beam_bleu_score": 0.4630791898722174}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT count( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "inferred_question": "How many names of contestants whose name is %al% are there?", "score": 7.246299743652344, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29227071562009443, "beam_bleu_score": 0.4641960528541719}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.state like '%AL%'       ", "inferred_question": "What are the names of contestants who received votes whose state code is %al%?", "score": 5.8617706298828125, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24702006549590516, "beam_bleu_score": 0.5044937117450634}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT min( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "inferred_question": "What are the names of contestants whose name is %al% with minimum name?", "score": 4.4450225830078125, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38170123138257295, "beam_bleu_score": 0.5241310683748003}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT sum( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%Al%'       ", "inferred_question": "What is the total name of all contestants whose name is %al%?", "score": 4.195823669433594, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36909365825025875, "beam_bleu_score": 0.4555218354411027}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT max( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "inferred_question": "What are the names of contestants whose name is %al% with maximum name?", "score": 4.120914459228516, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3811990253775499, "beam_bleu_score": 0.5185245824548125}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT avg( T1.contestant_name) FROM CONTESTANTS AS T1 WHERE T1.contestant_name like '%AL%'       ", "inferred_question": "What is the average name of all contestants whose name is %al%?", "score": 3.8194122314453125, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3221935858855459, "beam_bleu_score": 0.4630791898722174}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING count( T1.contestant_name) like '%Al%'     ", "inferred_question": "", "score": 3.631488800048828, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT T1.contestant_name FROM CONTESTANTS AS T1  GROUP BY T1.contestant_name HAVING avg( T1.contestant_name) like '%Al%'     ", "inferred_question": "", "score": 2.4572715759277344, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 702, "beams": [{"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 46.48005676269531, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.IndepYear > 1950       ", "inferred_question": "What are the names of countries with a year of independence of more than 1950  ?", "score": 35.77061462402344, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5863483614506804, "beam_bleu_score": 0.6252807801857834}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 1950       ", "inferred_question": "What are the names of countries with a population of more than 1950  ?", "score": 29.88310432434082, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47465886694092996, "beam_bleu_score": 0.5443101491156503}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region > '1950'       ", "inferred_question": "", "score": 18.348411560058594, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.ID > 1950       ", "inferred_question": "", "score": 16.69101333618164, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode > '1950'       ", "inferred_question": "", "score": 13.394533157348633, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.District > '1950'       ", "inferred_question": "", "score": 12.528221130371094, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent > '1950'       ", "inferred_question": "", "score": 9.778301239013672, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Code > '1950'       ", "inferred_question": "", "score": 6.636631011962891, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.HeadOfState > '1950'       ", "inferred_question": "", "score": 5.820182800292969, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.GovernmentForm > '1950'       ", "inferred_question": "", "score": 4.301319122314453, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 4.045783996582031, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 3.1915550231933594, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial > '1950'       ", "inferred_question": "", "score": -5.401174545288086, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language > '1950'       ", "inferred_question": "", "score": -6.636592864990234, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 703, "beams": [{"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 54.94530487060547, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 1950       ", "inferred_question": "What are the names of countries with a population of more than 1950  ?", "score": 49.798011779785156, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5258590838426114, "beam_bleu_score": 0.43494057980078704}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.IndepYear > 1950       ", "inferred_question": "What are the names of countries with a year of independence of more than 1950  ?", "score": 46.40437316894531, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5018344392839593, "beam_bleu_score": 0.3696102755832501}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.LifeExpectancy > 1950       ", "inferred_question": "", "score": 21.64044189453125, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode > '1950'       ", "inferred_question": "", "score": 18.956256866455078, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.ID > 1950       ", "inferred_question": "", "score": 18.6856689453125, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 17.75446319580078, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region > '1950'       ", "inferred_question": "", "score": 15.756702423095703, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 14.644184112548828, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 12.858955383300781, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.District > '1950'       ", "inferred_question": "", "score": 12.063045501708984, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 10.660160064697266, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent > '1950'       ", "inferred_question": "", "score": 10.570636749267578, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Name > '1950'       ", "inferred_question": "", "score": 9.223136901855469, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Code > '1950'       ", "inferred_question": "", "score": 7.603755950927734, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 720, "beams": [{"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 86.93153381347656, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Apia'       )       ", "inferred_question": "", "score": 74.95774841308594, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 70.18623352050781, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "inferred_question": "", "score": 66.58523559570312, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "inferred_question": "", "score": 63.82219314575195, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Apia'       )       ", "inferred_question": "", "score": 58.181400299072266, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Apia'       )       ", "inferred_question": "", "score": 57.43437957763672, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 56.46428680419922, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Apia'       )       ", "inferred_question": "", "score": 54.677589416503906, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT avg( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 52.20648956298828, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 51.52569580078125, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 50.34013748168945, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 49.47925567626953, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22   HAVING min( T22.Continent) = 'Asia'     )       ", "inferred_question": "", "score": 48.25168228149414, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.LifeExpectancy = (SELECT min( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Name HAVING min( T1.Region) = 'Asia'     ", "inferred_question": "", "score": 47.87755584716797, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 721, "beams": [{"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "What are the names of countries whose continent is asia with minimum life expectancy?", "score": 56.558563232421875, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5113553679235188, "beam_bleu_score": 0.5154837529887258}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "", "score": 42.55325698852539, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Apia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "What are the names of countries whose continent is apia with minimum life expectancy?", "score": 21.46381950378418, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4964694331052757, "beam_bleu_score": 0.5051342023301741}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": 18.617992401123047, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "What are the names of countries whose continent is asia with minimum life expectancy with maximum name?", "score": 17.3375244140625, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3526850238384336, "beam_bleu_score": 0.42859162439893483}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "What are the names of countries whose continent is asia with minimum life expectancy with minimum name?", "score": 17.176109313964844, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45614941033457657, "beam_bleu_score": 0.42859162439893483}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "How many names of countries whose continent is asia with minimum life expectancy are there?", "score": 15.162185668945312, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3316092061646819, "beam_bleu_score": 0.46339330219328434}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY count( T1.LifeExpectancy) ASC LIMIT 1    ", "inferred_question": "", "score": 14.647098541259766, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "What is the average name of all countries whose continent is asia with minimum life expectancy?", "score": 14.35903549194336, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35139847822430126, "beam_bleu_score": 0.4756992579203712}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY sum( T1.LifeExpectancy) ASC LIMIT 1    ", "inferred_question": "", "score": 13.050216674804688, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1  GROUP BY T1.Name HAVING count( T1.Continent) = 'Asia' ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "", "score": 12.910812377929688, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "What is the total name of all countries whose continent is asia with minimum life expectancy?", "score": 11.528980255126953, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3389271734145949, "beam_bleu_score": 0.4761067362324108}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Name  ORDER BY avg( T1.LifeExpectancy) ASC LIMIT 1    ", "inferred_question": "", "score": 8.300579071044922, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1  GROUP BY T1.Name HAVING min( T1.Continent) = 'Asia' ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "", "score": 7.363300323486328, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Apia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    ", "inferred_question": "", "score": 7.2220964431762695, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 722, "beams": [{"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the total population and maximum gnp of countries whose continent is asia?", "score": 41.55908203125, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.41370734356874483, "beam_bleu_score": 0.5150935058963304}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.Population) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the total population and maximum population of countries whose continent is asia?", "score": 20.092266082763672, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40614198371105015, "beam_bleu_score": 0.47701733445095873}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT max( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the maximum population and maximum gnp of countries whose continent is asia?", "score": 17.578195571899414, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40005046444229686, "beam_bleu_score": 0.4347783464091072}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T2.GNP) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What are the total population of cities that lies in countries whose continent is asia? Also show the maximum gnp of the countries.", "score": 17.025238037109375, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10283231077102906, "beam_bleu_score": 0.3107363076453501}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Apia'       ", "inferred_question": "What are the total population and maximum gnp of countries whose continent is apia?", "score": 15.691393852233887, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3830643686049927, "beam_bleu_score": 0.5053387003565525}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), sum( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the total population and total gnp of countries whose continent is asia?", "score": 14.457893371582031, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40858652829678654, "beam_bleu_score": 0.4366481063827418}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia'       ", "inferred_question": "", "score": 6.226829528808594, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), min( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the total population and minimum gnp of countries whose continent is asia?", "score": 5.355278015136719, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33369296540296545, "beam_bleu_score": 0.47239531792295736}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT avg( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the average population and maximum gnp of countries whose continent is asia?", "score": 5.17877197265625, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3832954347981823, "beam_bleu_score": 0.4347783464091072}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), avg( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the total population and average gnp of countries whose continent is asia?", "score": 3.7138595581054688, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32400619740100445, "beam_bleu_score": 0.42593077291969844}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), max( T2.Population) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the total population of countries whose continent is asia where cities are located? Also show the maximum population of the cities.", "score": 3.5748329162597656, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0917549568253816, "beam_bleu_score": 0.27389772817608576}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.Population      ", "inferred_question": "", "score": 3.2134857177734375, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT count( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the number of populations and maximum gnp of countries whose continent is asia?", "score": 2.623516082763672, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3980460825646678, "beam_bleu_score": 0.39916588018977067}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT min( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the minimum population and maximum gnp of countries whose continent is asia?", "score": 1.8161125183105469, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3073483398602612, "beam_bleu_score": 0.4347783464091072}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT sum( T1.Population), T1.GNP FROM country AS T1 WHERE T1.Continent = 'Asia' GROUP BY T1.GNP      ", "inferred_question": "", "score": 1.4542922973632812, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 723, "beams": [{"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 140.89730834960938, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 139.94635009765625, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, sum( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 133.9480438232422, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, sum( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 133.94131469726562, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Region = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 132.64576721191406, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 131.48089599609375, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.Population = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 130.52383422851562, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, sum( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Region = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 125.65837860107422, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, T1.GNP FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 125.57246398925781, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Region, max( T1.Population) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Region      ", "inferred_question": "", "score": 125.17601013183594, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, T1.GNP FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 124.39971923828125, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT sum( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 124.23306274414062, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Region, sum( T1.Population) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.GNP = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Region      ", "inferred_question": "", "score": 124.11797332763672, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia' and T1.GNP = (SELECT sum( T22.GNP) FROM country AS T22 WHERE T22.Continent = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 123.29057312011719, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT T1.Population, max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population = (SELECT max( T22.GNP) FROM country AS T22 WHERE T22.Region = 'Asia'       ) GROUP BY T1.Population      ", "inferred_question": "", "score": 123.29048156738281, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 732, "beams": [{"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "How many distinct languages of languages are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8008452158970519, "beam_bleu_score": 0.5252370525746305}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "What are the distinct languages of languages with minimum language?", "score": -36.29949951171875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19325955970711106, "beam_bleu_score": 0.30993315143552924}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1        ", "inferred_question": "What are the distinct languages of languages?", "score": -39.48779296875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2891901340737114, "beam_bleu_score": 0.3820352473624812}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "", "score": -45.637847900390625, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "", "score": -47.121097564697266, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "What are the distinct languages of languages with maximum language?", "score": -58.284786224365234, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2559495088843188, "beam_bleu_score": 0.3130359721181711}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM country AS T1        ", "inferred_question": "How many distinct names of countries are there?", "score": -59.84746551513672, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07164537765151113, "beam_bleu_score": 0.37412597970722006}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM city AS T1        ", "inferred_question": "How many distinct names of cities are there?", "score": -65.42605590820312, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.052550740751839076, "beam_bleu_score": 0.3598383868369769}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM sqlite_sequence AS T1        ", "inferred_question": "", "score": -79.690185546875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.ID) FROM city AS T1        ", "inferred_question": "How many distinct ids of cities are there?", "score": -81.55603790283203, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05061591220738937, "beam_bleu_score": 0.35432093154375693}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT T1.Name FROM country AS T1        ", "inferred_question": "What are the distinct names of countries?", "score": -90.30215454101562, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04745259586894657, "beam_bleu_score": 0.2037554270507113}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM country AS T1        ", "inferred_question": "What are the distinct names of countries with minimum name?", "score": -94.72076416015625, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04539857613431375, "beam_bleu_score": 0.19551158646553354}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT T1.Name FROM city AS T1        ", "inferred_question": "What are the distinct names of cities?", "score": -97.17201232910156, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04372421248011116, "beam_bleu_score": 0.18908036143482432}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM country AS T1        ", "inferred_question": "", "score": -99.02090454101562, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM city AS T1        ", "inferred_question": "What are the distinct names of cities with minimum name?", "score": -100.3669204711914, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04357618293477705, "beam_bleu_score": 0.19719057779105045}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 733, "beams": [{"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "How many distinct languages of languages are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8682864140700377, "beam_bleu_score": 0.4426112924445589}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "What are the distinct languages of languages with minimum language?", "score": -37.07074737548828, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2853103424065474, "beam_bleu_score": 0.5016351871624447}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1        ", "inferred_question": "What are the distinct languages of languages?", "score": -38.52164077758789, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6660315926497391, "beam_bleu_score": 0.4615380741696066}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "", "score": -48.2601432800293, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "", "score": -49.29341506958008, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Language) FROM countrylanguage AS T1        ", "inferred_question": "What are the distinct languages of languages with maximum language?", "score": -59.446075439453125, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.35624966820006254, "beam_bleu_score": 0.5016351871624447}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM country AS T1        ", "inferred_question": "How many distinct names of countries are there?", "score": -59.54564666748047, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09560659694565166, "beam_bleu_score": 0.308296605556014}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM city AS T1        ", "inferred_question": "How many distinct names of cities are there?", "score": -77.77662658691406, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.058875678335603476, "beam_bleu_score": 0.28322838444902215}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.ID) FROM city AS T1        ", "inferred_question": "How many distinct ids of cities are there?", "score": -78.80482482910156, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05504518427409322, "beam_bleu_score": 0.278772549071306}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM sqlite_sequence AS T1        ", "inferred_question": "", "score": -92.21107482910156, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT T1.Name FROM country AS T1        ", "inferred_question": "What are the distinct names of countries?", "score": -93.07130432128906, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0682945124974138, "beam_bleu_score": 0.3329117632925207}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM country AS T1        ", "inferred_question": "What are the distinct names of countries with minimum name?", "score": -95.97004699707031, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05820540934131868, "beam_bleu_score": 0.39745760448529227}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Continent) FROM country AS T1        ", "inferred_question": "How many distinct continents of countries are there?", "score": -104.32713317871094, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0645912488007242, "beam_bleu_score": 0.312882065964516}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM country AS T1        ", "inferred_question": "", "score": -104.8229751586914, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM country AS T1        ", "inferred_question": "", "score": -105.21533203125, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 734, "beams": [{"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "How many distinct forms of government of countries whose continent is arica are there?", "score": 75.39579010009766, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3148324248567165, "beam_bleu_score": 0.3414794865978774}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "How many distinct forms of government of countries whose continent is africa are there?", "score": 73.45550537109375, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5189560177541224, "beam_bleu_score": 0.3433633273798939}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is arica with minimum form of government?", "score": 35.14203643798828, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.20567908473710544}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is arica?", "score": 34.09553527832031, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22457737553693446, "beam_bleu_score": 0.2982510838041707}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is africa with minimum form of government?", "score": 33.28801727294922, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07329592462825807, "beam_bleu_score": 0.20856672545488658}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Arica'     ", "inferred_question": "", "score": 32.448753356933594, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is africa?", "score": 32.341827392578125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4156913568273193, "beam_bleu_score": 0.30112732056927877}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Arica'     ", "inferred_question": "", "score": 30.27764892578125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Africa'     ", "inferred_question": "", "score": 29.961349487304688, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Arica'     ", "inferred_question": "", "score": 29.703514099121094, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "", "score": 29.358318328857422, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Africa'     ", "inferred_question": "", "score": 28.42546844482422, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Africa'     ", "inferred_question": "", "score": 27.86376953125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "", "score": 27.486217498779297, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "", "score": 27.035911560058594, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 735, "beams": [{"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "How many distinct forms of government of countries whose continent is africa are there?", "score": 73.32821655273438, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5880366464169614, "beam_bleu_score": 0.53255563860623}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "How many distinct forms of government of countries whose continent is arica are there?", "score": 72.68944549560547, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33296509999841717, "beam_bleu_score": 0.5305568472122989}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is africa?", "score": 38.00873565673828, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5171835227769348, "beam_bleu_score": 0.468552963271299}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT T1.GovernmentForm FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is arica?", "score": 37.08537292480469, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27140875469961034, "beam_bleu_score": 0.4657340100061593}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is africa with minimum form of government?", "score": 35.124568939208984, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2435054769658831, "beam_bleu_score": 0.3349210754994687}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "What are the distinct forms of government of countries whose continent is arica with minimum form of government?", "score": 34.37923812866211, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1845167915049094, "beam_bleu_score": 0.333217211772571}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Africa'     ", "inferred_question": "", "score": 29.728267669677734, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Africa'     ", "inferred_question": "", "score": 29.09886932373047, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Africa'     ", "inferred_question": "", "score": 29.00029754638672, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING max( T1.Continent) = 'Arica'     ", "inferred_question": "", "score": 28.988285064697266, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING count( T1.Continent) = 'Arica'     ", "inferred_question": "", "score": 28.958450317382812, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1   HAVING avg( T1.Continent) = 'Arica'     ", "inferred_question": "", "score": 28.3204345703125, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "", "score": 27.623825073242188, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Arica'       ", "inferred_question": "", "score": 26.8968505859375, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       ", "inferred_question": "", "score": 25.398151397705078, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 762, "beams": [{"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "inferred_question": "", "score": 65.1608657836914, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 62.89623260498047, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Nama' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "inferred_question": "", "score": 60.68602752685547, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "inferred_question": "", "score": 59.91252136230469, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 58.80841064453125, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "inferred_question": "", "score": 58.56114196777344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Nama' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 58.505775451660156, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode = 'Asan' and T1.LifeExpectancy = (SELECT max( T23.LifeExpectancy) FROM country AS T23 WHERE T23.Continent = 'Nama'       )       ", "inferred_question": "", "score": 58.47984313964844, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "inferred_question": "", "score": 57.73479461669922, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode = 'Asan' and T1.LifeExpectancy = (SELECT max( T23.LifeExpectancy) FROM country AS T23 WHERE T23.Continent = 'Asia'       )       ", "inferred_question": "", "score": 56.54350662231445, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asan' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 56.06439971923828, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 55.72911071777344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Nama' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "inferred_question": "", "score": 55.390899658203125, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode = 'Asan' and T1.SurfaceArea = (SELECT max( T23.SurfaceArea) FROM country AS T23 WHERE T23.Continent = 'Nama'       )       ", "inferred_question": "", "score": 55.34422302246094, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asan' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Nama'       )       ", "inferred_question": "", "score": 55.03965759277344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 763, "beams": [{"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 117.85847473144531, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 113.43388366699219, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "inferred_question": "", "score": 113.12191772460938, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 111.05891418457031, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "inferred_question": "", "score": 108.38050842285156, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "inferred_question": "", "score": 107.23594665527344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.IndepYear = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 106.42669677734375, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.IndepYear = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asia'       )       ", "inferred_question": "", "score": 101.69712829589844, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 99.81198120117188, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.IndepYear = (SELECT max( T22.IndepYear) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       ", "inferred_question": "", "score": 96.74766540527344, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asian'       )       ", "inferred_question": "", "score": 96.10768127441406, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Continent = 'Asian'       )       ", "inferred_question": "", "score": 92.48085021972656, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.SurfaceArea = (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Asian'       )       ", "inferred_question": "", "score": 92.41924285888672, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Name = 'Asia'       )       ", "inferred_question": "", "score": 92.23187255859375, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Asia' and T1.LifeExpectancy = (SELECT max( T22.LifeExpectancy) FROM country AS T22 WHERE T22.Region = 'Asian'       )       ", "inferred_question": "", "score": 90.98597717285156, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 770, "beams": [{"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "inferred_question": "", "score": 42.9249153137207, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930       ", "inferred_question": "How many distinct languages of languages spoken in countries with a year of independence of less than 1930   are there?", "score": 34.910072326660156, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6790437825988578, "beam_bleu_score": 0.47050761225553145}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": 30.44274139404297, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.Language < '1930'       ", "inferred_question": "", "score": 17.938779830932617, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.CountryCode < '1930'       ", "inferred_question": "", "score": 8.834735870361328, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "inferred_question": "", "score": 6.921321868896484, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode  GROUP BY count( T1.Language) HAVING min( T2.CountryCode) < '1930'     ", "inferred_question": "", "score": 3.2322311401367188, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "inferred_question": "", "score": 3.1441192626953125, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.ID < 1930       ", "inferred_question": "", "score": 2.5944480895996094, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "inferred_question": "", "score": 1.832275390625, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": -0.3609352111816406, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm < '1930'       ", "inferred_question": "", "score": -0.4259185791015625, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "inferred_question": "", "score": -1.1798896789550781, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": -4.136569976806641, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name < '1930'       ", "inferred_question": "", "score": -10.600147247314453, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 771, "beams": [{"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": 32.19713592529297, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930       ", "inferred_question": "How many distinct languages of languages spoken in countries with a year of independence of less than 1930   are there?", "score": 21.08426284790039, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.616799619126273, "beam_bleu_score": 0.40083086275933244}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.CountryCode < '1930'       ", "inferred_question": "", "score": 18.52081298828125, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.Language < '1930'       ", "inferred_question": "", "score": 6.973724365234375, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1   HAVING min( T1.IsOfficial) < '1930'     ", "inferred_question": "", "score": -2.0735912322998047, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": -3.2347412109375, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.CountryCode < '1930'       ", "inferred_question": "", "score": -3.5332412719726562, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Code < '1930'       ", "inferred_question": "", "score": -3.921916961669922, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1   HAVING count( T1.IsOfficial) < '1930'     ", "inferred_question": "", "score": -8.239151000976562, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT T1.Language FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": -9.138538360595703, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": -9.803836822509766, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.ID < 1930       ", "inferred_question": "", "score": -10.270851135253906, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.IsOfficial) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": -10.904792785644531, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1930'       ", "inferred_question": "", "score": -11.892574310302734, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name < '1930'       ", "inferred_question": "", "score": -11.944942474365234, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 788, "beams": [{"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "What are the names, years of independence, and surface areas of countries with minimum population?", "score": 0.0, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8264492313087, "beam_bleu_score": 0.7327375619009655}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY min( T1.Population) ASC LIMIT 1    ", "inferred_question": "", "score": -25.015377044677734, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, min( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -33.993377685546875, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, max( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -35.687896728515625, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY count( T1.Population) ASC LIMIT 1    ", "inferred_question": "", "score": -36.054046630859375, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY sum( T1.Population) ASC LIMIT 1    ", "inferred_question": "", "score": -39.593074798583984, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, count( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -39.66884231567383, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT max( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -40.488826751708984, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, max( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -40.493865966796875, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY avg( T1.Population) ASC LIMIT 1    ", "inferred_question": "", "score": -40.837406158447266, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -41.74658966064453, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT min( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -42.27067565917969, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, T1.IndepYear, avg( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -42.43343734741211, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT avg( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -43.211219787597656, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT T1.Name, avg( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -43.29081344604492, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 789, "beams": [{"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "What are the names, years of independence, and surface areas of countries with minimum population?", "score": 0.0, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7776345724721396, "beam_bleu_score": 0.6914327423571742}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, max( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -36.0733642578125, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, min( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -36.3956184387207, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.SurfaceArea, T1.IndepYear FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "What are the names, surface areas, and years of independence of countries with minimum population?", "score": -37.89366149902344, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7432926596384839, "beam_bleu_score": 0.658006449027007}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT max( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -41.6181640625, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, count( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -42.0037956237793, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, avg( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -42.15729904174805, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT min( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -43.22368621826172, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, avg( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -43.68299865722656, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY min( T1.Population) ASC LIMIT 1    ", "inferred_question": "", "score": -43.904422760009766, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT avg( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -44.11465072631836, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, max( T1.SurfaceArea) FROM country AS T1  GROUP BY T1.IndepYear  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -44.24592208862305, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT count( T1.Name), T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -44.8063850402832, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, count( T1.IndepYear), T1.SurfaceArea FROM country AS T1  GROUP BY T1.SurfaceArea  ORDER BY T1.Population ASC LIMIT 1    ", "inferred_question": "", "score": -44.97148132324219, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1  GROUP BY T1.Name, T1.IndepYear, T1.SurfaceArea  ORDER BY sum( T1.Population) ASC LIMIT 1    ", "inferred_question": "", "score": -46.15007781982422, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 790, "beams": [{"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the populations and names of countries where cities are located with maximum surface area? Also show the countries of the cities.", "score": -0.2962447702884674, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4298905465358278, "beam_bleu_score": 0.41601894221957403}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.LocalName FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the populations, names, and local names of countries with maximum surface area?", "score": -7.453011512756348, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5191379664928825, "beam_bleu_score": 0.5701136012174427}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.HeadOfState FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the populations, names, and heads of state of countries with maximum surface area?", "score": -13.83069133758545, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6859409177838167, "beam_bleu_score": 0.5634207435321209}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.GovernmentForm FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the populations, names, and forms of government of countries with maximum surface area?", "score": -25.53517723083496, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49713296491161796, "beam_bleu_score": 0.5216126278962626}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode    ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "What are the populations and names of countries where cities are located with maximum region? Also show the countries of the cities.", "score": -25.95641326904297, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40680191815385147, "beam_bleu_score": 0.4184357000990205}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.LocalName FROM country AS T1    ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "What are the populations, names, and local names of countries with maximum region?", "score": -29.873065948486328, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.392441688074043, "beam_bleu_score": 0.5616762267886287}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, max( T1.Name) FROM country AS T1  GROUP BY T1.Name  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -33.6710090637207, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.Region FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the populations, names, and regions of countries with maximum surface area?", "score": -34.7433967590332, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5055325992357502, "beam_bleu_score": 0.5853445130472208}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, min( T1.Name) FROM country AS T1  GROUP BY T1.Name  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -34.77540969848633, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, max( T1.Name), T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -36.130306243896484, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.Code FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the populations, names, and ids of countries with maximum surface area?", "score": -36.390689849853516, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5542147142255147, "beam_bleu_score": 0.6104625439760242}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T1.HeadOfState FROM country AS T1    ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "What are the populations, names, and heads of state of countries with maximum region?", "score": -37.35643768310547, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5087190198329936, "beam_bleu_score": 0.556703571814548}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, T2.ID FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the populations and names of countries where cities are located with maximum surface area? Also show the ids of the cities.", "score": -37.39825439453125, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4449103823856623, "beam_bleu_score": 0.43259532758770375}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, T1.Name, count( *) FROM country AS T1  GROUP BY T1.Name  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -37.735069274902344, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT T1.Population, avg( T1.Name), T2.CountryCode FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -38.11949920654297, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 791, "beams": [{"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "What are the names, populations, and heads of state of countries with maximum surface area?", "score": -0.0698113963007927, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8378407619030639, "beam_bleu_score": 0.5765205856649862}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "What are the names, populations, and heads of state of countries with maximum region?", "score": -2.6966633796691895, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5563105210714354, "beam_bleu_score": 0.5799503898610315}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.Population DESC LIMIT 1    ", "inferred_question": "What are the names, populations, and heads of state of countries with maximum population?", "score": -15.58903694152832, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6673847488879332, "beam_bleu_score": 0.569264307170045}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.HeadOfState DESC LIMIT 1    ", "inferred_question": "What are the names, populations, and heads of state of countries with maximum head of state?", "score": -20.198705673217773, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5574632909671664, "beam_bleu_score": 0.5897248359906119}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, max( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -32.51904296875, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, max( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "", "score": -35.091064453125, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, avg( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -36.283931732177734, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, avg( T1.Population), T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "", "score": -38.85481262207031, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, min( T1.HeadOfState) FROM country AS T1  GROUP BY T1.Population  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -39.128055572509766, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT max( T1.Name), T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -39.832584381103516, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, max( T1.HeadOfState) FROM country AS T1  GROUP BY T1.Population  ORDER BY T1.SurfaceArea DESC LIMIT 1    ", "inferred_question": "", "score": -39.9337272644043, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.Name, T1.Population, T1.HeadOfState  ORDER BY sum( T1.SurfaceArea) DESC LIMIT 1    ", "inferred_question": "", "score": -40.158451080322266, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, min( T1.HeadOfState) FROM country AS T1  GROUP BY T1.Population  ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "", "score": -40.65821838378906, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.Name, T1.Population, T1.HeadOfState  ORDER BY max( T1.SurfaceArea) DESC LIMIT 1    ", "inferred_question": "", "score": -41.28446578979492, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT max( T1.Name), T1.Population, T1.HeadOfState FROM country AS T1  GROUP BY T1.HeadOfState  ORDER BY T1.Region DESC LIMIT 1    ", "inferred_question": "", "score": -42.44487380981445, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 806, "beams": [{"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "How many countries whose continent is asia are there?", "score": 72.12594604492188, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5530146488419028, "beam_bleu_score": 0.4461550943617589}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT min( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "", "score": 37.23377227783203, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Region = 'Asia'       ", "inferred_question": "", "score": 36.42364501953125, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT sum( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "", "score": 31.508548736572266, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the names of countries whose continent is asia?", "score": 30.227455139160156, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19187467521588153, "beam_bleu_score": 0.32279210051104273}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT avg( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What is the average country of all cities that lies in countries whose continent is asia?", "score": 26.02985382080078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.19293739552004865}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Apia'       ", "inferred_question": "How many countries whose continent is apia are there?", "score": 25.666383743286133, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46177922210852573, "beam_bleu_score": 0.4364456775360077}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING count( T1.Continent) = 'Asia'     ", "inferred_question": "", "score": 24.99718475341797, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING avg( T1.Continent) = 'Asia'     ", "inferred_question": "", "score": 22.011856079101562, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT T1.CountryCode FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What are the countries of cities that lies in countries whose continent is asia?", "score": 20.7176513671875, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07019370506013178, "beam_bleu_score": 0.23709711627110944}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "Show me everything about countries whose continent is asia.", "score": 20.29834747314453, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10398399931022073, "beam_bleu_score": 0.2936319338263141}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What is the average name of all countries whose continent is asia?", "score": 19.682716369628906, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13400383022434914, "beam_bleu_score": 0.2389346365564447}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING sum( T1.Continent) = 'Asia'     ", "inferred_question": "", "score": 18.342731475830078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT max( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What are the countries of cities that lies in countries whose continent is asia with maximum country?", "score": 18.16592788696289, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.18838691078067432}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT T1.ID FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What are the ids of cities that lies in countries whose continent is asia?", "score": 15.036209106445312, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.035565596872717875, "beam_bleu_score": 0.2604182481539819}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 807, "beams": [{"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "How many countries whose continent is asia are there?", "score": 70.53369140625, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3699637740895314, "beam_bleu_score": 0.32265385933019075}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT min( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "", "score": 38.13786315917969, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Region = 'Asia'       ", "inferred_question": "", "score": 33.515228271484375, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT sum( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "", "score": 28.93221664428711, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What are the names of countries whose continent is asia?", "score": 27.597942352294922, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2571307279124613, "beam_bleu_score": 0.3849331855209774}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Apia'       ", "inferred_question": "How many countries whose continent is apia are there?", "score": 23.313491821289062, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3265291164576044, "beam_bleu_score": 0.3124273267406217}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT avg( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What is the average country of all cities that lies in countries whose continent is asia?", "score": 23.247840881347656, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.042423669914024686, "beam_bleu_score": 0.2610558792394007}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING count( T1.Continent) = 'Asia'     ", "inferred_question": "", "score": 22.493610382080078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Asia'       ", "inferred_question": "What is the average name of all countries whose continent is asia?", "score": 20.042682647705078, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16885522236549655, "beam_bleu_score": 0.30495688613905486}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING avg( T1.Continent) = 'Asia'     ", "inferred_question": "", "score": 19.400848388671875, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING max( T1.Continent) = 'Asia'     ", "inferred_question": "", "score": 17.72986602783203, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT max( T1.CountryCode) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What are the countries of cities that lies in countries whose continent is asia with maximum country?", "score": 16.15514373779297, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.23963523490481123}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT count( *) FROM country AS T1   HAVING sum( T1.Continent) = 'Asia'     ", "inferred_question": "", "score": 15.315132141113281, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT avg( T1.ID) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What is the average id of all cities that lies in countries whose continent is asia?", "score": 14.420150756835938, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.039566160989345844, "beam_bleu_score": 0.25830438113318355}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT T1.CountryCode FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia'       ", "inferred_question": "What are the countries of cities that lies in countries whose continent is asia?", "score": 13.39535140991211, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18375436354856578, "beam_bleu_score": 0.2963745420358798}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 808, "beams": [{"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What are the names of countries with a population of more than 80000   and whose continent is europe?", "score": 152.43258666992188, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8834057159146131, "beam_bleu_score": 0.722218956699359}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Europe' and T1.Population > 80000       ", "inferred_question": "", "score": 133.03619384765625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What are the names of countries with a population of more than 80000   and whose continent is europe with maximum name?", "score": 115.07455444335938, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5764760965024613, "beam_bleu_score": 0.640991218144366}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING count( T1.Population) > 80000     ", "inferred_question": "", "score": 114.54531860351562, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING sum( T1.Population) > 80000     ", "inferred_question": "", "score": 114.14659881591797, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING max( T1.Continent) = 'Europe'     ", "inferred_question": "", "score": 112.62132263183594, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What are the names of countries with a population of more than 80000   and whose continent is europe with minimum name?", "score": 112.44902038574219, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5396019936440914, "beam_bleu_score": 0.6413306681553437}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "How many names of countries with a population of more than 80000   and whose continent is europe are there?", "score": 112.02571105957031, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7080855174529095, "beam_bleu_score": 0.6567321948166206}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What is the total name of all countries with a population of more than 80000   and whose continent is europe?", "score": 110.8263168334961, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7562721185651797, "beam_bleu_score": 0.6335128685339342}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING count( T1.Continent) = 'Europe'     ", "inferred_question": "", "score": 109.9354476928711, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING avg( T1.Population) > 80000     ", "inferred_question": "", "score": 108.8048324584961, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What is the average name of all countries with a population of more than 80000   and whose continent is europe?", "score": 108.48413848876953, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.722640079015141, "beam_bleu_score": 0.6438210540810911}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING sum( T1.Continent) = 'Europe'     ", "inferred_question": "", "score": 108.47647094726562, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING min( T1.Continent) = 'Europe'     ", "inferred_question": "", "score": 107.31267547607422, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING max( T1.Population) > 80000     ", "inferred_question": "", "score": 106.23292541503906, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 809, "beams": [{"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What are the names of countries with a population of more than 80000   and whose continent is europe?", "score": 153.40188598632812, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7431201162862499, "beam_bleu_score": 0.5901418575009238}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Europe' and T1.Population > 80000       ", "inferred_question": "", "score": 135.9685821533203, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING sum( T1.Population) > 80000     ", "inferred_question": "", "score": 130.02969360351562, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING count( T1.Population) > 80000     ", "inferred_question": "", "score": 120.0650405883789, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT max( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What are the names of countries with a population of more than 80000   and whose continent is europe with maximum name?", "score": 117.45895385742188, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5421785668837549, "beam_bleu_score": 0.5100507196922233}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING max( T1.Population) > 80000     ", "inferred_question": "", "score": 116.47358703613281, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT min( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What are the names of countries with a population of more than 80000   and whose continent is europe with minimum name?", "score": 114.80339050292969, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5232327933430526, "beam_bleu_score": 0.5100507196922233}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT count( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "How many names of countries with a population of more than 80000   and whose continent is europe are there?", "score": 114.7400894165039, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.642605670708148, "beam_bleu_score": 0.5320190784377696}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT sum( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What is the total name of all countries with a population of more than 80000   and whose continent is europe?", "score": 114.73778533935547, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.638413900825376, "beam_bleu_score": 0.5047586013756187}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING max( T1.Continent) = 'Europe'     ", "inferred_question": "", "score": 114.140625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' GROUP BY T1.Name HAVING avg( T1.Population) > 80000     ", "inferred_question": "", "score": 113.89246368408203, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Region = 'Europe' GROUP BY T1.Name HAVING sum( T1.Population) > 80000     ", "inferred_question": "", "score": 112.57179260253906, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING count( T1.Continent) = 'Europe'     ", "inferred_question": "", "score": 112.46188354492188, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT T1.Name FROM country AS T1 WHERE T1.Population > 80000 GROUP BY T1.Name HAVING sum( T1.Continent) = 'Europe'     ", "inferred_question": "", "score": 110.97857666015625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT avg( T1.Name) FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000       ", "inferred_question": "What is the average name of all countries with a population of more than 80000   and whose continent is europe?", "score": 109.46308135986328, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6363428164397626, "beam_bleu_score": 0.5051077647102953}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 812, "beams": [{"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What are the names of cities with a population of less than 900000   and with a population of more than 160000  ?", "score": 89.10684204101562, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22281769789776973, "beam_bleu_score": 0.4281560152660355}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "inferred_question": "What are the local names of countries where cities with a population of less than 900000   and with a population of more than 160000   are located?", "score": 88.22071838378906, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13143971175685232, "beam_bleu_score": 0.33919409577938564}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT min( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What are the names of cities with a population of less than 900000   and with a population of more than 160000   with minimum name?", "score": 54.60116958618164, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1539251176982256, "beam_bleu_score": 0.3700708231489587}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT count( T1.LocalName) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "inferred_question": "How many local names of countries where cities with a population of less than 900000   and with a population of more than 160000   are located are there?", "score": 54.2122802734375, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.049719693651864794, "beam_bleu_score": 0.30148896120376745}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT min( T1.LocalName) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "inferred_question": "What are the local names of countries where cities with a population of less than 900000   and with a population of more than 160000   are located with minimum local name?", "score": 52.31744384765625, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09956998081407042, "beam_bleu_score": 0.2911643510857765}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT max( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What are the names of cities with a population of less than 900000   and with a population of more than 160000   with maximum name?", "score": 51.58531951904297, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14811273875982411, "beam_bleu_score": 0.3700708231489587}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode HAVING max( T2.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 51.398624420166016, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT count( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "How many names of cities with a population of less than 900000   and with a population of more than 160000   are there?", "score": 50.34571838378906, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19541656025891407, "beam_bleu_score": 0.3741713162259763}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode HAVING min( T2.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 49.14109420776367, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING avg( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 49.055503845214844, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode HAVING avg( T2.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 48.82740020751953, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING count( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 48.32294845581055, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT avg( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What is the average name of all cities with a population of less than 900000   and with a population of more than 160000  ?", "score": 48.219913482666016, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16048301692565137, "beam_bleu_score": 0.385792106317056}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT sum( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What is the total name of all cities with a population of less than 900000   and with a population of more than 160000  ?", "score": 47.45780944824219, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19536483163569374, "beam_bleu_score": 0.38919668175309746}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING sum( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 47.257835388183594, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 813, "beams": [{"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What are the names of cities with a population of less than 900000   and with a population of more than 160000  ?", "score": 103.27606964111328, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4183021855424848, "beam_bleu_score": 0.5039684296912179}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "inferred_question": "What are the local names of countries where cities with a population of less than 900000   and with a population of more than 160000   are located?", "score": 82.0134048461914, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1056954819222563, "beam_bleu_score": 0.38038486010912886}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1 WHERE T1.Population between 160000 AND N\u00eemes       ", "inferred_question": "", "score": 67.30741119384766, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT min( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What are the names of cities with a population of less than 900000   and with a population of more than 160000   with minimum name?", "score": 65.83232879638672, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14225647307663813, "beam_bleu_score": 0.43543297935696196}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT max( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What are the names of cities with a population of less than 900000   and with a population of more than 160000   with maximum name?", "score": 63.951271057128906, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13380584432861153, "beam_bleu_score": 0.43543297935696196}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT sum( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What is the total name of all cities with a population of less than 900000   and with a population of more than 160000  ?", "score": 60.4002799987793, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18178981145191953, "beam_bleu_score": 0.435049147362674}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT count( T1.LocalName) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND 900000       ", "inferred_question": "How many local names of countries where cities with a population of less than 900000   and with a population of more than 160000   are located are there?", "score": 60.339637756347656, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.022653801708909627, "beam_bleu_score": 0.3539714369206672}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING avg( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 60.32905578613281, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT count( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "How many names of cities with a population of less than 900000   and with a population of more than 160000   are there?", "score": 59.79242706298828, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26595297363168235, "beam_bleu_score": 0.4576507681270466}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING sum( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 59.064292907714844, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING count( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 58.46260070800781, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT avg( T1.Name) FROM city AS T1 WHERE T1.Population between 160000 AND 900000       ", "inferred_question": "What is the average name of all cities with a population of less than 900000   and with a population of more than 160000  ?", "score": 58.267608642578125, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17216673468267507, "beam_bleu_score": 0.44571694795129485}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING max( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 57.840065002441406, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.Name FROM city AS T1  GROUP BY T1.Name HAVING min( T1.Population) between 160000 AND 900000     ", "inferred_question": "", "score": 54.269500732421875, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT T1.LocalName FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Population between 160000 AND N\u00eemes       ", "inferred_question": "", "score": 48.47471618652344, "correct_code": "select name from city where population between 160000 and 900000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 822, "beams": [{"orig_question": "How many conductors are there?", "inferred_code": "SELECT count( *) FROM conductor AS T1        ", "inferred_question": "How many conductors are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT min( *) FROM conductor AS T1        ", "inferred_question": "", "score": -29.912839889526367, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "inferred_question": "What are the names of conductors?", "score": -31.129779815673828, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2160677214085206, "beam_bleu_score": 0.552119898434074}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor AS T1        ", "inferred_question": "Show me everything about conductors.", "score": -33.232601165771484, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11273770523502413, "beam_bleu_score": 0.41944354523254873}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1        ", "inferred_question": "What is the average name of all conductors?", "score": -33.335960388183594, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18464821601861647, "beam_bleu_score": 0.34863739467186106}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the names of conductors with minimum name?", "score": -33.727272033691406, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1601161536627177, "beam_bleu_score": 0.3768478744790068}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT avg( *) FROM conductor AS T1        ", "inferred_question": "", "score": -38.35810852050781, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT sum( *) FROM conductor AS T1        ", "inferred_question": "", "score": -40.574317932128906, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1        ", "inferred_question": "What is the total name of all conductors?", "score": -41.611637115478516, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36984463646227583, "beam_bleu_score": 0.36142295471871655}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT min( T1.Conductor_ID) FROM conductor AS T1        ", "inferred_question": "What are the ids of conductors with minimum id?", "score": -44.676910400390625, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11659307408394459, "beam_bleu_score": 0.4009715153609513}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT avg( T1.Conductor_ID) FROM conductor AS T1        ", "inferred_question": "What is the average id of all conductors?", "score": -46.78949737548828, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13564265304165235, "beam_bleu_score": 0.359046606595683}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the names of conductors with maximum name?", "score": -46.98740768432617, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16840208292611736, "beam_bleu_score": 0.3872983346207417}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT max( *) FROM conductor AS T1        ", "inferred_question": "", "score": -53.60318374633789, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT sum( T1.Conductor_ID) FROM conductor AS T1        ", "inferred_question": "What is the total id of all conductors?", "score": -53.672672271728516, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25948158054746506, "beam_bleu_score": 0.36821599595545457}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT T1.Conductor_ID FROM conductor AS T1        ", "inferred_question": "What are the ids of conductors?", "score": -54.989009857177734, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1415611706273111, "beam_bleu_score": 0.5718063759566022}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 823, "beams": [{"orig_question": "Count the number of conductors.", "inferred_code": "SELECT count( *) FROM conductor AS T1        ", "inferred_question": "How many conductors are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9144054015286409, "beam_bleu_score": 0.45661538345323555}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT min( *) FROM conductor AS T1        ", "inferred_question": "", "score": -31.361995697021484, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "inferred_question": "What are the names of conductors?", "score": -32.527442932128906, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.253669522084241, "beam_bleu_score": 0.5678929778677616}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1        ", "inferred_question": "What is the average name of all conductors?", "score": -36.01587677001953, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14090687134102398, "beam_bleu_score": 0.40438114431404754}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor AS T1        ", "inferred_question": "Show me everything about conductors.", "score": -37.12358856201172, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12390771374557974, "beam_bleu_score": 0.40723089009410207}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( *) FROM conductor AS T1        ", "inferred_question": "", "score": -39.019283294677734, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT sum( *) FROM conductor AS T1        ", "inferred_question": "", "score": -45.019474029541016, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( T1.Conductor_ID) FROM conductor AS T1        ", "inferred_question": "What is the average id of all conductors?", "score": -46.87894058227539, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1284771639217286, "beam_bleu_score": 0.4034142525867908}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the names of conductors with maximum name?", "score": -47.81820297241211, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18284429128939228, "beam_bleu_score": 0.3733090048984231}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1        ", "inferred_question": "What is the total name of all conductors?", "score": -50.97686767578125, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26790518051269563, "beam_bleu_score": 0.4122858008727606}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT count( *) FROM conductor AS T1        ", "inferred_question": "How many conductors are there?", "score": -52.047210693359375, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9144054015286409, "beam_bleu_score": 0.45661538345323555}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the names of conductors with minimum name?", "score": -52.46104431152344, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1664785224034967, "beam_bleu_score": 0.3733090048984231}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT max( *) FROM conductor AS T1        ", "inferred_question": "", "score": -52.59835433959961, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT avg( T1.Orchestra) FROM orchestra AS T1        ", "inferred_question": "What is the average name of all orchestras?", "score": -53.15398406982422, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08583039640440016, "beam_bleu_score": 0.18878361552120257}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT T1.Conductor_ID FROM conductor AS T1        ", "inferred_question": "What are the ids of conductors?", "score": -56.865203857421875, "correct_code": "SELECT count(*) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1625082440073169, "beam_bleu_score": 0.5654871035255585}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 826, "beams": [{"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What are the names of conductors whose nationality is not usa?", "score": 70.4616928100586, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9452288696959681, "beam_bleu_score": 0.7982332893769923}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What are the names of conductors whose nationality is not usa with maximum name?", "score": 31.566242218017578, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5657328955937304, "beam_bleu_score": 0.6696285918028222}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "How many names of conductors whose nationality is not usa are there?", "score": 31.54366683959961, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7622487656107374, "beam_bleu_score": 0.7156569608390244}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What is the average name of all conductors whose nationality is not usa?", "score": 29.271148681640625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7048285055448991, "beam_bleu_score": 0.6525550122178962}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What are the names of conductors whose nationality is not usa with minimum name?", "score": 28.60747528076172, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5244099489970013, "beam_bleu_score": 0.6696285918028222}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 27.000473022460938, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What is the total name of all conductors whose nationality is not usa?", "score": 25.202259063720703, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.735675924763288, "beam_bleu_score": 0.651844787317008}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 23.057846069335938, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 20.794025421142578, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 19.068954467773438, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 17.908493041992188, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": -11.321098327636719, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": -11.489326477050781, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": -13.53326416015625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Name != 'USA'       ", "inferred_question": "What are the names of conductors whose name is not usa?", "score": -20.088485717773438, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7306081580894737, "beam_bleu_score": 0.672982140189885}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 827, "beams": [{"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What are the names of conductors whose nationality is not usa?", "score": 75.18843841552734, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6902219469268207, "beam_bleu_score": 0.6366910856122501}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What are the names of conductors whose nationality is not usa with maximum name?", "score": 36.377044677734375, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5088922160319418, "beam_bleu_score": 0.5738828606650666}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "How many names of conductors whose nationality is not usa are there?", "score": 35.53165817260742, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.407793680889879, "beam_bleu_score": 0.5948835140455168}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What is the average name of all conductors whose nationality is not usa?", "score": 34.328399658203125, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.42697188937473896, "beam_bleu_score": 0.5898612824321223}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 34.20996856689453, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What are the names of conductors whose nationality is not usa with minimum name?", "score": 33.24077224731445, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4803141644899106, "beam_bleu_score": 0.5738828606650666}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 WHERE T1.Nationality != 'USA'       ", "inferred_question": "What is the total name of all conductors whose nationality is not usa?", "score": 30.151214599609375, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45224718332384894, "beam_bleu_score": 0.589401205491323}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING avg( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 27.16119384765625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING sum( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 26.54248809814453, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING max( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 23.68313217163086, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name HAVING min( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": 22.737369537353516, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": -4.247993469238281, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": -5.078636169433594, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": -6.27056884765625, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1   HAVING count( T1.Nationality) != 'USA'     ", "inferred_question": "", "score": -7.446418762207031, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 830, "beams": [{"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT avg( T1.Attendance) FROM show AS T1        ", "inferred_question": "What is the average attendance of all shows?", "score": 0.0, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.8873807879817832}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT sum( T1.Attendance) FROM show AS T1        ", "inferred_question": "What is the total attendance of all shows?", "score": -29.739334106445312, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49900820535689794, "beam_bleu_score": 0.7350037913563255}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT max( T1.Attendance) FROM show AS T1        ", "inferred_question": "What are the attendances of shows with maximum attendance?", "score": -30.69415283203125, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2672726883224117, "beam_bleu_score": 0.4723582066701992}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT min( T1.Attendance) FROM show AS T1        ", "inferred_question": "What are the attendances of shows with minimum attendance?", "score": -34.356998443603516, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.27133024054134636, "beam_bleu_score": 0.4723582066701992}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT T1.Attendance FROM show AS T1        ", "inferred_question": "What are the attendances of shows?", "score": -35.30491638183594, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7936536257344762, "beam_bleu_score": 0.6910211533710529}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.Attendance) FROM show AS T1        ", "inferred_question": "How many attendances of shows are there?", "score": -41.641143798828125, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5216033494111485, "beam_bleu_score": 0.5645169005769591}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -50.914527893066406, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3248568898511809, "beam_bleu_score": 0.2077992694870285}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -69.95606994628906, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3248568898511809, "beam_bleu_score": 0.2077992694870285}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -98.29147338867188, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3248568898511809, "beam_bleu_score": 0.2077992694870285}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.Official_ratings_(millions)) FROM performance AS T1        ", "inferred_question": "", "score": -98.97831726074219, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -106.73835754394531, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3248568898511809, "beam_bleu_score": 0.2077992694870285}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT T1.Result FROM show AS T1        ", "inferred_question": "What are the results of shows?", "score": -110.3189468383789, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19836417737868828, "beam_bleu_score": 0.42325873223523264}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "inferred_question": "What are the names of conductors?", "score": -111.02729034423828, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.03023464790400454, "beam_bleu_score": 0.2972861746482968}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.Show_ID) FROM show AS T1        ", "inferred_question": "How many ids of shows are there?", "score": -113.04640197753906, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14557622551826843, "beam_bleu_score": 0.330072507943423}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT count( T1.If_first_show) FROM show AS T1        ", "inferred_question": "How many first show statuses of shows are there?", "score": -117.711669921875, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11726486978345907, "beam_bleu_score": 0.29455495098184103}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 831, "beams": [{"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT avg( T1.Attendance) FROM show AS T1        ", "inferred_question": "What is the average attendance of all shows?", "score": 0.0, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.7043599410559339}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT sum( T1.Attendance) FROM show AS T1        ", "inferred_question": "What is the total attendance of all shows?", "score": -28.5091609954834, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5940829814447266, "beam_bleu_score": 0.5142263018056128}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT max( T1.Attendance) FROM show AS T1        ", "inferred_question": "What are the attendances of shows with maximum attendance?", "score": -31.289283752441406, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23486018231681494, "beam_bleu_score": 0.3846356300111968}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Attendance FROM show AS T1        ", "inferred_question": "What are the attendances of shows?", "score": -33.043846130371094, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5955077552388492, "beam_bleu_score": 0.4254427470808211}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT min( T1.Attendance) FROM show AS T1        ", "inferred_question": "What are the attendances of shows with minimum attendance?", "score": -33.30784225463867, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24647158285681914, "beam_bleu_score": 0.3846356300111968}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( T1.Attendance) FROM show AS T1        ", "inferred_question": "How many attendances of shows are there?", "score": -41.8975944519043, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3181939789235355, "beam_bleu_score": 0.42148337430247707}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -54.54407501220703, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20582206098615308, "beam_bleu_score": 0.1632218360905217}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -66.45821380615234, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20582206098615308, "beam_bleu_score": 0.1632218360905217}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -101.89701080322266, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20582206098615308, "beam_bleu_score": 0.1632218360905217}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( T1.Official_ratings_(millions)) FROM performance AS T1        ", "inferred_question": "", "score": -104.80258178710938, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( *) FROM show AS T1        ", "inferred_question": "How many shows are there?", "score": -106.32752990722656, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20582206098615308, "beam_bleu_score": 0.1632218360905217}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Name FROM conductor AS T1        ", "inferred_question": "What are the names of conductors?", "score": -112.78004455566406, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.042249879605692375, "beam_bleu_score": 0.1296000255834353}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Result FROM show AS T1        ", "inferred_question": "What are the results of shows?", "score": -114.01973724365234, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20149521575568252, "beam_bleu_score": 0.2077952987727668}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT count( T1.Show_ID) FROM show AS T1        ", "inferred_question": "How many ids of shows are there?", "score": -119.30010986328125, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09821497132400758, "beam_bleu_score": 0.19849285881656886}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT T1.Show_ID FROM show AS T1        ", "inferred_question": "What are the ids of shows?", "score": -122.47134399414062, "correct_code": "SELECT avg(Attendance) FROM SHOW", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0697366754612897, "beam_bleu_score": 0.1801226185555662}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 832, "beams": [{"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and minimum share of performances whose type is not live final?", "score": 49.98489761352539, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.8835842397087549}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT sum( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the total share and minimum share of performances whose type is not live final?", "score": 21.803043365478516, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9047328217741767, "beam_bleu_score": 0.8168737743747516}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT avg( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the average share and minimum share of performances whose type is not live final?", "score": 15.539337158203125, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5383374184255723, "beam_bleu_score": 0.7984103690219453}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), count( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and number of shares of performances whose type is not live final?", "score": 14.257343292236328, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8144340671956067, "beam_bleu_score": 0.7711483220901635}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and total share of performances whose type is not live final?", "score": 13.644821166992188, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6925096904307315, "beam_bleu_score": 0.8141733282529445}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT T1.Share, min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "inferred_question": "", "score": 9.53255844116211, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), avg( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and average share of performances whose type is not live final?", "score": 9.293773651123047, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6451430531980857, "beam_bleu_score": 0.7957709597860616}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live'       ", "inferred_question": "What are the maximum share and minimum share of performances whose type is not live?", "score": 9.236007690429688, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7995253720034922, "beam_bleu_score": 0.8656842113878445}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT count( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the number of shares and minimum share of performances whose type is not live final?", "score": 6.587444305419922, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9675022350799656, "beam_bleu_score": 0.7799449543406346}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING count( T1.Type) != 'Live final'     ", "inferred_question": "", "score": 4.880832672119141, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING max( T1.Type) != 'Live final'     ", "inferred_question": "", "score": 3.2633743286132812, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), T1.Share FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "inferred_question": "", "score": 0.3712120056152344, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING avg( T1.Type) != 'Live final'     ", "inferred_question": "", "score": 0.27691650390625, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING min( T1.Type) != 'Live final'     ", "inferred_question": "", "score": -2.0270118713378906, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING sum( T1.Type) != 'Live final'     ", "inferred_question": "", "score": -2.611492156982422, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 833, "beams": [{"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and minimum share of performances whose type is not live final?", "score": 51.00928497314453, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7641025420691749, "beam_bleu_score": 0.6773920178997703}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT sum( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the total share and minimum share of performances whose type is not live final?", "score": 22.89449119567871, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6988877468910859, "beam_bleu_score": 0.6045679174681071}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT avg( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the average share and minimum share of performances whose type is not live final?", "score": 16.488037109375, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5387914695666238, "beam_bleu_score": 0.6052094487469544}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), count( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and number of shares of performances whose type is not live final?", "score": 14.208198547363281, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6706323703913591, "beam_bleu_score": 0.6200638923260813}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), sum( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and total share of performances whose type is not live final?", "score": 13.113384246826172, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.617902959027891, "beam_bleu_score": 0.5991108479950897}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT T1.Share, min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "inferred_question": "", "score": 11.444427490234375, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), avg( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the maximum share and average share of performances whose type is not live final?", "score": 9.679447174072266, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6088274788733994, "beam_bleu_score": 0.6032602786716256}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live'       ", "inferred_question": "What are the maximum share and minimum share of performances whose type is not live?", "score": 8.60867977142334, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6938140932896479, "beam_bleu_score": 0.6171335515801658}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING count( T1.Type) != 'Live final'     ", "inferred_question": "", "score": 6.587718963623047, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT count( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       ", "inferred_question": "What are the number of shares and minimum share of performances whose type is not live final?", "score": 4.932773590087891, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6831585834481871, "beam_bleu_score": 0.6220168736464566}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING max( T1.Type) != 'Live final'     ", "inferred_question": "", "score": 4.7281951904296875, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), T1.Share FROM performance AS T1 WHERE T1.Type != 'Live final' GROUP BY T1.Share      ", "inferred_question": "", "score": 1.7031669616699219, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING avg( T1.Type) != 'Live final'     ", "inferred_question": "", "score": 0.5800514221191406, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING min( T1.Type) != 'Live final'     ", "inferred_question": "", "score": -0.0208282470703125, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT max( T1.Share), min( T1.Share) FROM performance AS T1   HAVING sum( T1.Type) != 'Live final'     ", "inferred_question": "", "score": -3.34857177734375, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 834, "beams": [{"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "How many distinct nationalities of conductors are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.6857410186354469}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT T1.Nationality FROM conductor AS T1        ", "inferred_question": "What are the distinct nationalities of conductors?", "score": -36.17024612426758, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.5546530199907191}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "What are the distinct nationalities of conductors with minimum nationality?", "score": -39.3677978515625, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5181385835341279, "beam_bleu_score": 0.4071162854869439}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "", "score": -47.16737365722656, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "", "score": -48.05944061279297, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "What are the distinct nationalities of conductors with maximum nationality?", "score": -55.183860778808594, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6696016490028746, "beam_bleu_score": 0.41440394522406654}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "How many distinct names of conductors are there?", "score": -112.34493255615234, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4089795318963021, "beam_bleu_score": 0.5350309997764453}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Conductor_ID) FROM conductor AS T1        ", "inferred_question": "How many distinct ids of conductors are there?", "score": -146.5070037841797, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5602872276220738, "beam_bleu_score": 0.49164657402459766}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT T1.Name FROM conductor AS T1        ", "inferred_question": "What are the distinct names of conductors?", "score": -148.31773376464844, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12184008995581364, "beam_bleu_score": 0.33803279448178764}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the distinct names of conductors with minimum name?", "score": -151.88345336914062, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08802809262851108, "beam_bleu_score": 0.34202825701219497}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "", "score": -155.9168243408203, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "", "score": -156.343505859375, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM conductor AS T1        ", "inferred_question": "How many conductors are there?", "score": -164.0447540283203, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6063670443820173, "beam_bleu_score": 0.3436000581259421}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the distinct names of conductors with maximum name?", "score": -164.31582641601562, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09303245844018926, "beam_bleu_score": 0.34926441687179455}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Age) FROM conductor AS T1        ", "inferred_question": "How many distinct ages of conductors are there?", "score": -190.4964599609375, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2933057519633111, "beam_bleu_score": 0.5031380055335197}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 835, "beams": [{"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "How many distinct nationalities of conductors are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9232902208016385, "beam_bleu_score": 0.6108939870966938}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT T1.Nationality FROM conductor AS T1        ", "inferred_question": "What are the distinct nationalities of conductors?", "score": -36.711570739746094, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7631105721009603, "beam_bleu_score": 0.5912730829049749}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "What are the distinct nationalities of conductors with minimum nationality?", "score": -38.42042922973633, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44056768420761505, "beam_bleu_score": 0.48013482807402674}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "", "score": -45.69730758666992, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "", "score": -47.597843170166016, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Nationality) FROM conductor AS T1        ", "inferred_question": "What are the distinct nationalities of conductors with maximum nationality?", "score": -54.54446792602539, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4875991606589013, "beam_bleu_score": 0.48013482807402674}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "How many distinct names of conductors are there?", "score": -117.35487365722656, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33649687385909244, "beam_bleu_score": 0.41670707612389996}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Conductor_ID) FROM conductor AS T1        ", "inferred_question": "How many distinct ids of conductors are there?", "score": -148.88243103027344, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3979601373257585, "beam_bleu_score": 0.3693175522996828}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT T1.Name FROM conductor AS T1        ", "inferred_question": "What are the distinct names of conductors?", "score": -156.69973754882812, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1085349912714626, "beam_bleu_score": 0.40217741126829026}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the distinct names of conductors with minimum name?", "score": -157.89749145507812, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.07988685734704115, "beam_bleu_score": 0.44295706250639966}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "", "score": -162.28260803222656, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "", "score": -163.59408569335938, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM conductor AS T1        ", "inferred_question": "How many conductors are there?", "score": -167.91127014160156, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47770444953450086, "beam_bleu_score": 0.20410785926192618}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM conductor AS T1        ", "inferred_question": "What are the distinct names of conductors with maximum name?", "score": -171.44029235839844, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0892164436470797, "beam_bleu_score": 0.44041852210651594}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Year_of_Work) FROM conductor AS T1        ", "inferred_question": "How many distinct career lengths of conductors are there?", "score": -190.75364685058594, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17678499397119907, "beam_bleu_score": 0.40428533200275607}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 838, "beams": [{"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length?", "score": 0.0, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6463122451612578, "beam_bleu_score": 0.4787460137648574}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -42.699623107910156, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49768976363980033, "beam_bleu_score": 0.3794906416117327}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -45.32832717895508, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -45.63833236694336, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What is the average name of all conductors with maximum career length?", "score": -45.99449157714844, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4074760855148758, "beam_bleu_score": 0.4296847839806178}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -47.23816680908203, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "How many names of conductors with maximum career length are there?", "score": -48.141510009765625, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.346748449272411, "beam_bleu_score": 0.403597132972836}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with minimum name?", "score": -48.46426773071289, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.37614675882372084, "beam_bleu_score": 0.3794906416117327}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY max( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -49.913360595703125, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What is the total name of all conductors with maximum career length?", "score": -51.618473052978516, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4835038677700991, "beam_bleu_score": 0.4387825477986737}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY min( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -57.66827392578125, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -58.848060607910156, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -87.93971252441406, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49768976363980033, "beam_bleu_score": 0.3794906416117327}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -88.34300994873047, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49768976363980033, "beam_bleu_score": 0.3794906416117327}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -89.82427978515625, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49768976363980033, "beam_bleu_score": 0.3794906416117327}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 839, "beams": [{"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length?", "score": 0.0, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6676829540456768, "beam_bleu_score": 0.36679183922150965}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -40.327335357666016, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5043108377160759, "beam_bleu_score": 0.3954751782727662}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What is the average name of all conductors with maximum career length?", "score": -46.331207275390625, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49893154818049756, "beam_bleu_score": 0.4504949904055698}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -46.37034606933594, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -46.85584259033203, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with minimum name?", "score": -47.841033935546875, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3513558749181016, "beam_bleu_score": 0.3954751782727662}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "How many names of conductors with maximum career length are there?", "score": -48.55128479003906, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40676436881847877, "beam_bleu_score": 0.31243488785972456}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    ", "inferred_question": "What is the total name of all conductors with maximum career length?", "score": -50.393524169921875, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5144122576174859, "beam_bleu_score": 0.4401030612780781}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -50.58008575439453, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY max( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -51.32722473144531, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -56.07730484008789, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT T1.Name FROM conductor AS T1  GROUP BY T1.Name  ORDER BY min( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "", "score": -57.92995071411133, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY sum( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -86.64952087402344, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5043108377160759, "beam_bleu_score": 0.3954751782727662}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY count( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -87.18280792236328, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5043108377160759, "beam_bleu_score": 0.3954751782727662}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1    ORDER BY avg( T1.Year_of_Work) DESC LIMIT 1    ", "inferred_question": "What are the names of conductors with maximum career length with maximum name?", "score": -90.84909057617188, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5043108377160759, "beam_bleu_score": 0.3954751782727662}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 840, "beams": [{"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID        ", "inferred_question": "What are the names of conductors who conduct orchestras? Also show the names of the orchestras.", "score": 0.0, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9191409024004903, "beam_bleu_score": 0.5502205788168827}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, avg( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -31.74174690246582, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, max( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -31.757417678833008, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, count( *) FROM conductor AS T1 JOIN orchestra AS T13 ON T1.Conductor_ID = T13.Conductor_ID JOIN performance AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -32.345970153808594, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, min( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -33.75945281982422, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, sum( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -34.451725006103516, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT max( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -34.463966369628906, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT avg( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -34.74422836303711, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT count( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -38.51913070678711, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT sum( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -38.69539260864258, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT min( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -38.723777770996094, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, count( *) FROM conductor AS T1 JOIN orchestra AS T13 ON T1.Conductor_ID = T13.Conductor_ID JOIN performance AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -43.62779235839844, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -45.16487503051758, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT count( *), T2.Name FROM performance AS T13 JOIN orchestra AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID JOIN conductor AS T2 ON T14.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -45.48550033569336, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 841, "beams": [{"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID        ", "inferred_question": "What are the names of conductors who conduct orchestras? Also show the names of the orchestras.", "score": 0.0, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9291002880960341, "beam_bleu_score": 0.6271645589750077}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, max( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -29.360004425048828, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, min( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -29.968191146850586, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, avg( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -30.76898193359375, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, sum( T2.Orchestra) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Name      ", "inferred_question": "", "score": -32.60724639892578, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT max( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -33.93511199951172, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, count( *) FROM conductor AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -34.398380279541016, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT avg( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -34.87429428100586, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, max( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -35.35677719116211, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, min( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -36.14569091796875, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT T1.Name, avg( T1.Name) FROM conductor AS T1  GROUP BY T1.Name      ", "inferred_question": "", "score": -39.532413482666016, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT count( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -39.66162109375, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT sum( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -40.05963134765625, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT min( T1.Name), T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Orchestra      ", "inferred_question": "", "score": -40.141178131103516, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 846, "beams": [{"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What are the names of conductors who conduct orchestras who were founded after 2008.0?", "score": 73.45096588134766, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7224009472600272, "beam_bleu_score": 0.6909688113232372}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What are the names of conductors who conduct orchestras who were founded after 2008.0 with maximum name?", "score": 37.95918273925781, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6043345962203596, "beam_bleu_score": 0.5857903326309502}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "How many names of conductors who conduct orchestras who were founded after 2008.0 are there?", "score": 33.004539489746094, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4395050320688304, "beam_bleu_score": 0.6243055681543758}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 30.914413452148438, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What is the total name of all conductors who conduct orchestras who were founded after 2008.0?", "score": 30.810775756835938, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5571591993091152, "beam_bleu_score": 0.6536759291348437}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What is the average name of all conductors who conduct orchestras who were founded after 2008.0?", "score": 30.78066635131836, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4934032087503668, "beam_bleu_score": 0.6461735329305401}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What are the names of conductors who conduct orchestras who were founded after 2008.0 with minimum name?", "score": 30.622520446777344, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5656746087684652, "beam_bleu_score": 0.5857903326309502}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 30.56957244873047, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING avg( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 26.481624603271484, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING max( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 25.92690658569336, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING min( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 18.564430236816406, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Year_of_Work > 2008       ", "inferred_question": "What are the names of conductors with a career length of more than 2008 years?", "score": 3.6734390258789062, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6178931091751612, "beam_bleu_score": 0.3967962673437676}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": -3.348419189453125, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": -3.49395751953125, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T13 ON T1.Conductor_ID = T13.Conductor_ID JOIN performance AS T14 ON T13.Orchestra_ID = T14.Orchestra_ID  GROUP BY T1.Name HAVING count( *) > 2008     ", "inferred_question": "", "score": -34.109588623046875, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 847, "beams": [{"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What are the names of conductors who conduct orchestras who were founded after 2008.0?", "score": 77.4521255493164, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7617651912134298, "beam_bleu_score": 0.7922203011074306}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What are the names of conductors who conduct orchestras who were founded after 2008.0 with maximum name?", "score": 40.37358093261719, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5142008076982334, "beam_bleu_score": 0.7070531822347429}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT count( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "How many names of conductors who conduct orchestras who were founded after 2008.0 are there?", "score": 36.78071594238281, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6545023061025914, "beam_bleu_score": 0.7334373502263609}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT min( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What are the names of conductors who conduct orchestras who were founded after 2008.0 with minimum name?", "score": 35.30037307739258, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5128323315606884, "beam_bleu_score": 0.7050126034343601}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT sum( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What is the total name of all conductors who conduct orchestras who were founded after 2008.0?", "score": 34.602088928222656, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7105379774716967, "beam_bleu_score": 0.6978521395649415}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT avg( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       ", "inferred_question": "What is the average name of all conductors who conduct orchestras who were founded after 2008.0?", "score": 34.274593353271484, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6631295277681697, "beam_bleu_score": 0.7024349184384228}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 33.64097595214844, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 31.83404541015625, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING avg( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 27.923980712890625, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING max( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 27.611968994140625, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING min( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": 22.823524475097656, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": -1.9014205932617188, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING sum( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": -3.6363143920898438, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT T1.Name FROM conductor AS T1 WHERE T1.Year_of_Work > 2008       ", "inferred_question": "What are the names of conductors with a career length of more than 2008 years?", "score": -6.5025177001953125, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6358862566334472, "beam_bleu_score": 0.5305606338073954}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT max( T1.Name) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING avg( T2.Year_of_Founded) > 2008     ", "inferred_question": "", "score": -8.118370056152344, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 946, "beams": [{"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "What are the dates of treatment of treatments performed by professionals? Also show the first names of the professionals.", "score": 0.0, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.718247042163773, "beam_bleu_score": 0.49416145951531837}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, max( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "inferred_question": "", "score": -36.01969528198242, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT max( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "inferred_question": "", "score": -36.43838119506836, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1        ", "inferred_question": "What are the first names and last names of professionals?", "score": -37.71038818359375, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16675869600487425, "beam_bleu_score": 0.28399157306128203}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_arrived, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "inferred_question": "What are the dates of arrival of dogs treated treatments performed by professionals? Also show the first names of the professionals.", "score": -38.497032165527344, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46341179673895916, "beam_bleu_score": 0.4710048939785797}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, avg( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "inferred_question": "", "score": -38.5837287902832, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, count( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "inferred_question": "", "score": -39.09574508666992, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT avg( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "inferred_question": "", "score": -40.837867736816406, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, sum( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "inferred_question": "", "score": -41.6679573059082, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT sum( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "inferred_question": "", "score": -41.72513961791992, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT min( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "inferred_question": "", "score": -42.52165603637695, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT count( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "inferred_question": "", "score": -42.559547424316406, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_treatment, min( T2.first_name) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.date_of_treatment      ", "inferred_question": "", "score": -42.852413177490234, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.name, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "inferred_question": "What are the names of dogs treated treatments performed by professionals? Also show the first names of the professionals.", "score": -45.18238830566406, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.34454341933445765, "beam_bleu_score": 0.4800947795470532}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT T1.date_of_birth, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "inferred_question": "What are the birthdates of dogs treated treatments performed by professionals? Also show the first names of the professionals.", "score": -46.20685577392578, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3426439359307655, "beam_bleu_score": 0.47916193828728276}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 947, "beams": [{"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "What are the dates of treatment of treatments performed by professionals? Also show the first names of the professionals.", "score": -6.9244303703308105, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8133186386983455, "beam_bleu_score": 0.46699665174136773}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, T2.name FROM Professionals AS T1 JOIN Treatments AS T13 ON T1.professional_id = T13.professional_id JOIN Dogs AS T2 ON T13.dog_id = T2.dog_id        ", "inferred_question": "What are the first names of professionals that performs treatments for dogs? Also show the names of the dogs.", "score": -13.245607376098633, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5529246019958098, "beam_bleu_score": 0.49054887718654533}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1        ", "inferred_question": "What are the first names and last names of professionals?", "score": -25.28788185119629, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3409083579790785, "beam_bleu_score": 0.48073491335875707}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.date_arrived, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "inferred_question": "What are the dates of arrival of dogs treated treatments performed by professionals? Also show the first names of the professionals.", "score": -28.811378479003906, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5255075486627293, "beam_bleu_score": 0.43293038734438877}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT max( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -34.28388214111328, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.name, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "inferred_question": "What are the names of dogs treated treatments performed by professionals? Also show the first names of the professionals.", "score": -35.85053253173828, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3740883779926135, "beam_bleu_score": 0.4485201526217473}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT max( T1.date_of_treatment), T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.first_name      ", "inferred_question": "", "score": -37.72804260253906, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, max( T1.first_name) FROM Professionals AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -39.00004959106445, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, T2.professional_id FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "What are the first names of professionals that performs treatments? Also show the professionals of the treatments.", "score": -39.16350173950195, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5443233026622986, "beam_bleu_score": 0.46268229579525927}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT avg( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -39.33535385131836, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.first_name, avg( T1.first_name) FROM Professionals AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -39.35462188720703, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT sum( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -41.5120849609375, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT min( T1.first_name), T1.first_name FROM Professionals AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -41.61112594604492, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT T1.date_of_birth, T2.first_name FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id        ", "inferred_question": "What are the birthdates of dogs treated treatments performed by professionals? Also show the first names of the professionals.", "score": -41.9168815612793, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4203871245181501, "beam_bleu_score": 0.437749786422093}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 950, "beams": [{"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "inferred_question": "What are the first names and last names of owners of dogs? Also show the sizes of the dogs.", "score": -0.0005407063290476799, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9189807932060583, "beam_bleu_score": 0.46480434311039803}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "inferred_question": "What are the first names and last names of owners of dogs? Also show the names of the dogs.", "score": -7.5228986740112305, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5972398256370368, "beam_bleu_score": 0.4234502515869153}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, max( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -29.551645278930664, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -29.764719009399414, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -30.692188262939453, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -32.33601760864258, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -32.922115325927734, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, max( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -33.56532669067383, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( *) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -33.97200012207031, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -36.89116668701172, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -38.53858947753906, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, avg( T2.size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -38.845298767089844, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -39.00812911987305, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_description FROM Owners AS T1 JOIN Dogs AS T13 ON T1.owner_id = T13.owner_id JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "inferred_question": "", "score": -39.05511474609375, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 951, "beams": [{"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "inferred_question": "What are the first names and last names of owners of dogs? Also show the sizes of the dogs.", "score": -0.0305373165756464, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9411227853797774, "beam_bleu_score": 0.549794106581503}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "inferred_question": "What are the first names and last names of owners of dogs? Also show the names of the dogs.", "score": -4.157097339630127, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6796608771625774, "beam_bleu_score": 0.5127093969614599}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, T2.size_description FROM Owners AS T1 JOIN Dogs AS T13 ON T1.owner_id = T13.owner_id JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "inferred_question": "", "score": -18.65336799621582, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -27.467721939086914, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -31.09832763671875, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, max( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -31.358102798461914, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -32.44873046875, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, count( *) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -33.64484786987305, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T1.last_name FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -35.64897155761719, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -35.667659759521484, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -36.53969192504883, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T1.last_name FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -37.397132873535156, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id      ", "inferred_question": "", "score": -38.26878356933594, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT T1.first_name, T1.last_name, avg( T1.last_name) FROM Owners AS T1  GROUP BY T1.last_name      ", "inferred_question": "", "score": -38.68172073364258, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 952, "beams": [{"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "inferred_question": "What are the first names of owners of dogs? Also show the names of the dogs.", "score": 0.0, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6525395772636065, "beam_bleu_score": 0.4812988974820793}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -36.67915725708008, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -39.1761360168457, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -40.098114013671875, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -40.47380828857422, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -40.6809196472168, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -40.80758285522461, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -41.582359313964844, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -43.778011322021484, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -44.01392364501953, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT min( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -48.66314697265625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT count( *), T1.first_name FROM Owners AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -49.143863677978516, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Owners AS T1        ", "inferred_question": "What are the first names and last names of owners?", "score": -50.54318618774414, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39275679658413565, "beam_bleu_score": 0.5362693407703985}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT T1.name, T2.first_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id        ", "inferred_question": "What are the names of dogs owned by owners? Also show the first names of the owners.", "score": -67.37644958496094, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.630036496607026, "beam_bleu_score": 0.43157484183637385}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 953, "beams": [{"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id        ", "inferred_question": "What are the first names of owners of dogs? Also show the names of the dogs.", "score": 0.0, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7801655724905379, "beam_bleu_score": 0.43187962406216196}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, T1.last_name FROM Owners AS T1        ", "inferred_question": "What are the first names and last names of owners?", "score": -26.809707641601562, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5469695000632969, "beam_bleu_score": 0.5971443450134282}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -39.23078536987305, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -39.7614860534668, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -41.31294250488281, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -44.53498840332031, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -44.820133209228516, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.first_name      ", "inferred_question": "", "score": -44.991363525390625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -48.15837478637695, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -49.652896881103516, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT min( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -51.628047943115234, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, count( T1.last_name) FROM Owners AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -52.083457946777344, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.name      ", "inferred_question": "", "score": -54.471534729003906, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, max( T1.last_name) FROM Owners AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -60.18134689331055, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT T1.first_name, avg( T1.last_name) FROM Owners AS T1  GROUP BY T1.first_name      ", "inferred_question": "", "score": -61.5346565246582, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 956, "beams": [{"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'       ", "inferred_question": "What are the first names of owners whose state is virginia of dogs? Also show the names of the dogs.", "score": 49.37144470214844, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5954345869951002, "beam_bleu_score": 0.4961005072946281}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING count( T1.state) = 'Virginia'     ", "inferred_question": "", "score": 15.024688720703125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 11.116130828857422, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 4.765045166015625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 3.655384063720703, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": 3.1331100463867188, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 2.1933021545410156, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING sum( T1.state) = 'Virginia'     ", "inferred_question": "", "score": 1.6225433349609375, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING max( T1.state) = 'Virginia'     ", "inferred_question": "", "score": 1.4791831970214844, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 1.3949661254882812, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": 1.2440986633300781, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING avg( T1.state) = 'Virginia'     ", "inferred_question": "", "score": 1.1929512023925781, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING min( T1.state) = 'Virginia'     ", "inferred_question": "", "score": -0.1317596435546875, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": -0.9528999328613281, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": -2.6369781494140625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 957, "beams": [{"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'       ", "inferred_question": "What are the first names of owners whose state is virginia of dogs? Also show the names of the dogs.", "score": 72.0025634765625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6592449885104623, "beam_bleu_score": 0.5557368216062907}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, count( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 43.21852111816406, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT count( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": 40.74234390258789, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT max( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": 38.21611022949219, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT avg( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": 37.9427604675293, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT min( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": 36.8870735168457, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT sum( T1.first_name), T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T2.name      ", "inferred_question": "", "score": 36.348876953125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, sum( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 35.23322296142578, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, avg( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 35.22490310668945, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, min( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 33.90713119506836, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, max( T2.name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 33.479434967041016, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING count( T1.state) = 'Virginia'     ", "inferred_question": "", "score": 32.637413024902344, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, count( *) FROM Owners AS T1 WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 31.4930419921875, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, count( *) FROM Owners AS T1 WHERE T1.state = 'Virginia' GROUP BY T1.first_name      ", "inferred_question": "", "score": 27.141521453857422, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T2.owner_id HAVING avg( T1.state) = 'Virginia'     ", "inferred_question": "", "score": 22.53820037841797, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 958, "beams": [{"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "inferred_question": "What are the dates of arrival and dates of departure of dogs?", "score": 0.0, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7268010139505343, "beam_bleu_score": 0.3780851649152944}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -22.835018157958984, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -30.187410354614258, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -31.963367462158203, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -32.978904724121094, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -34.066734313964844, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -36.33606719970703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -36.7615966796875, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -41.091732025146484, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -41.436248779296875, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -41.48652648925781, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and maximum date of departure of dogs?", "score": -53.07062911987305, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6451740226031917, "beam_bleu_score": 0.4355277183928362}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and average date of departure of dogs?", "score": -57.18463134765625, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4800743550844073, "beam_bleu_score": 0.45758115200115174}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and minimum date of departure of dogs?", "score": -59.02445602416992, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5031615020130087, "beam_bleu_score": 0.4378756617786109}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT avg( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the average date of arrival and maximum date of departure of dogs?", "score": -62.24304962158203, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5617689317964871, "beam_bleu_score": 0.4642769077244436}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 959, "beams": [{"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "inferred_question": "What are the dates of arrival and dates of departure of dogs?", "score": 0.0, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7325884262598805, "beam_bleu_score": 0.3952793659143706}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -20.982105255126953, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -27.59278678894043, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -29.99053382873535, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -30.277170181274414, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -33.490962982177734, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -33.827857971191406, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -34.81067657470703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -39.75110626220703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -39.94767379760742, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -40.2974967956543, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and maximum date of departure of dogs?", "score": -48.499732971191406, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6644917147658822, "beam_bleu_score": 0.43936973234620547}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and minimum date of departure of dogs?", "score": -54.41278839111328, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4277816989020593, "beam_bleu_score": 0.4457384377049405}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and average date of departure of dogs?", "score": -54.51130294799805, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4433009841071348, "beam_bleu_score": 0.4546991607122669}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT avg( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the average date of arrival and maximum date of departure of dogs?", "score": -57.537315368652344, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5588527342565586, "beam_bleu_score": 0.45956294516557855}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 964, "beams": [{"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "inferred_question": "What are the dates of arrival and dates of departure of dogs?", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.6323338880454831}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -26.762855529785156, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -27.57676124572754, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -31.890213012695312, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -34.24237060546875, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -35.3565559387207, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -37.14574432373047, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -38.54526138305664, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -38.93315505981445, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -40.71866989135742, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -46.792503356933594, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and maximum date of departure of dogs?", "score": -53.41648483276367, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9652317491729696, "beam_bleu_score": 0.582336319798511}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and average date of departure of dogs?", "score": -58.17181396484375, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6492002841281794, "beam_bleu_score": 0.5946708117029195}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and minimum date of departure of dogs?", "score": -59.77363967895508, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6691219159539445, "beam_bleu_score": 0.5879417427148081}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT avg( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the average date of arrival and maximum date of departure of dogs?", "score": -62.06064987182617, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7461694019763601, "beam_bleu_score": 0.6029739906908641}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 965, "beams": [{"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1        ", "inferred_question": "What are the dates of arrival and dates of departure of dogs?", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8955266660521799, "beam_bleu_score": 0.6063674900019801}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -31.549327850341797, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, max( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -34.94519805908203, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, avg( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -37.408103942871094, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT avg( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -41.64531326293945, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, min( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -41.767601013183594, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, count( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -42.177284240722656, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT T1.date_arrived, sum( T1.date_departed) FROM Dogs AS T1  GROUP BY T1.date_arrived      ", "inferred_question": "", "score": -42.584251403808594, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT min( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -42.94633865356445, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT sum( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -45.008697509765625, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT count( T1.date_arrived), T1.date_departed FROM Dogs AS T1  GROUP BY T1.date_departed      ", "inferred_question": "", "score": -49.31145095825195, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), max( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and maximum date of departure of dogs?", "score": -65.8470458984375, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7891398660910195, "beam_bleu_score": 0.5088277850105671}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), avg( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and average date of departure of dogs?", "score": -68.90812683105469, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.514539892759727, "beam_bleu_score": 0.522919930105473}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), min( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and minimum date of departure of dogs?", "score": -72.42333984375, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5106817769412811, "beam_bleu_score": 0.5088277850105671}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT max( T1.date_arrived), count( T1.date_departed) FROM Dogs AS T1        ", "inferred_question": "What are the maximum date of arrival and number of dates of departure of dogs?", "score": -73.90580749511719, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5376443325007928, "beam_bleu_score": 0.48485874957954544}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 966, "beams": [{"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -0.00908633042126894, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4183089415789637, "beam_bleu_score": 0.3266878068692466}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -4.705530166625977, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4183089415789637, "beam_bleu_score": 0.3266878068692466}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "How many dogs of treatments are there?", "score": -31.17458724975586, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6889047343651502, "beam_bleu_score": 0.6082791937416404}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT T1.dog_id FROM Treatments AS T1        ", "inferred_question": "What are the dogs of treatments?", "score": -35.20798110961914, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2733940335005144, "beam_bleu_score": 0.4314697647035132}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "inferred_question": "", "score": -36.6757698059082, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What are the dogs of treatments with minimum dog?", "score": -41.429161071777344, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17016444026328748, "beam_bleu_score": 0.40038613485469665}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT avg( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What is the average dog of all treatments?", "score": -41.8874626159668, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3351443493825772, "beam_bleu_score": 0.4108896722863908}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "inferred_question": "", "score": -42.63595962524414, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT sum( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What is the total dog of all treatments?", "score": -44.04512023925781, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31146547948923475, "beam_bleu_score": 0.4078142041290509}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -44.60968017578125, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4183089415789637, "beam_bleu_score": 0.3266878068692466}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT max( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What are the dogs of treatments with maximum dog?", "score": -49.97431945800781, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1523385262082403, "beam_bleu_score": 0.4085581565620362}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "inferred_question": "What are the ids of dogs?", "score": -50.75151062011719, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09399079756218953, "beam_bleu_score": 0.14461952888770288}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "inferred_question": "How many ids of dogs are there?", "score": -51.466064453125, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2153788075610501, "beam_bleu_score": 0.3582147289279393}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT min( T1.dog_id) FROM Dogs AS T1        ", "inferred_question": "What are the ids of dogs with minimum id?", "score": -51.99348449707031, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05976673762550089, "beam_bleu_score": 0.2434214056326829}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT sum( *) FROM Dogs AS T1        ", "inferred_question": "", "score": -55.36704635620117, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 967, "beams": [{"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -1.0013530300057027e-05, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3416856412659136, "beam_bleu_score": 0.1078435005730438}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -11.516362190246582, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3416856412659136, "beam_bleu_score": 0.1078435005730438}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "How many dogs of treatments are there?", "score": -24.166885375976562, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47581766839935336, "beam_bleu_score": 0.34494383890363317}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT T1.dog_id FROM Treatments AS T1        ", "inferred_question": "What are the dogs of treatments?", "score": -34.54875564575195, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28498309667200905, "beam_bleu_score": 0.33507962500288213}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "inferred_question": "", "score": -35.59440612792969, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "inferred_question": "How many ids of dogs are there?", "score": -39.978797912597656, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22100173166871873, "beam_bleu_score": 0.19391224029662046}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What are the dogs of treatments with minimum dog?", "score": -40.334171295166016, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.17913077812845934, "beam_bleu_score": 0.4391195154597919}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT avg( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What is the average dog of all treatments?", "score": -42.63710021972656, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24433373008571035, "beam_bleu_score": 0.37992995188123624}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT sum( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What is the total dog of all treatments?", "score": -45.36960983276367, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.28379782001746423, "beam_bleu_score": 0.3714826634012298}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( *) FROM Dogs AS T1        ", "inferred_question": "", "score": -46.43778991699219, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -49.017032623291016, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3416856412659136, "beam_bleu_score": 0.1078435005730438}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT min( T1.dog_id) FROM Dogs AS T1        ", "inferred_question": "What are the ids of dogs with minimum id?", "score": -49.308876037597656, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.05883540058196424, "beam_bleu_score": 0.2907183108225747}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT max( T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "What are the dogs of treatments with maximum dog?", "score": -50.404052734375, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16879942560199857, "beam_bleu_score": 0.4363489070323327}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "inferred_question": "What are the ids of dogs?", "score": -50.86235046386719, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0824122953000036, "beam_bleu_score": 0.16875691486288275}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT sum( *) FROM Dogs AS T1        ", "inferred_question": "", "score": -53.931396484375, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 968, "beams": [{"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "inferred_question": "How many distinct professionals of treatments are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.407598968301797, "beam_bleu_score": 0.5764230263062109}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1        ", "inferred_question": "How many professionals are there?", "score": -19.17259979248047, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39374556586231824, "beam_bleu_score": 0.3466675435322278}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Professionals AS T1        ", "inferred_question": "How many distinct ids of professionals are there?", "score": -25.336902618408203, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16090428382944977, "beam_bleu_score": 0.43799621995438476}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.dog_id) FROM Treatments AS T1        ", "inferred_question": "How many distinct dogs of treatments are there?", "score": -27.145030975341797, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2816305786907646, "beam_bleu_score": 0.39810106294428976}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1        ", "inferred_question": "How many professionals are there?", "score": -29.966590881347656, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39374556586231824, "beam_bleu_score": 0.3466675435322278}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM Dogs AS T1        ", "inferred_question": "How many distinct names of dogs are there?", "score": -38.59928894042969, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11263420801237989, "beam_bleu_score": 0.2650353544965855}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT T1.professional_id FROM Treatments AS T1        ", "inferred_question": "What are the distinct professionals of treatments?", "score": -38.633750915527344, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1452001243513864, "beam_bleu_score": 0.44692465182584495}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1        ", "inferred_question": "How many professionals are there?", "score": -40.38334655761719, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39374556586231824, "beam_bleu_score": 0.3466675435322278}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "inferred_question": "What are the distinct professionals of treatments with minimum professional?", "score": -40.63060760498047, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1118497622213187, "beam_bleu_score": 0.38198407363028475}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "inferred_question": "", "score": -44.6696891784668, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.treatment_id) FROM Treatments AS T1        ", "inferred_question": "How many distinct ids of treatments are there?", "score": -45.703819274902344, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19780984045163086, "beam_bleu_score": 0.3505824472907907}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "inferred_question": "", "score": -47.05763626098633, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.dog_id) FROM Dogs AS T1        ", "inferred_question": "How many distinct ids of dogs are there?", "score": -50.65959167480469, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1172017568668059, "beam_bleu_score": 0.2441635890327349}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "inferred_question": "What are the distinct professionals of treatments with maximum professional?", "score": -51.44585418701172, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10817833982541114, "beam_bleu_score": 0.38953202945263815}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.treatment_type_description) FROM Treatment_Types AS T1        ", "inferred_question": "How many distinct descriptions of treatment types are there?", "score": -54.2205696105957, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20454997248882412, "beam_bleu_score": 0.42766766334955436}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 969, "beams": [{"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "How many distinct professionals of treatments performed by professionals are there?", "score": 0.0, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31543628195638773, "beam_bleu_score": 0.34298979725627066}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "inferred_question": "How many distinct professionals of treatments are there?", "score": -23.04911231994629, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.310591395833546, "beam_bleu_score": 0.4439188653135234}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id        ", "inferred_question": "How many distinct professionals of treatments for dogs are there?", "score": -23.3966121673584, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5062134878276021, "beam_bleu_score": 0.46154316433166914}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "How many distinct professionals of treatments performed by professionals are there?", "score": -25.701921463012695, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31543628195638773, "beam_bleu_score": 0.34298979725627066}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1        ", "inferred_question": "How many distinct professionals of treatments are there?", "score": -26.234601974487305, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.310591395833546, "beam_bleu_score": 0.4439188653135234}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.name) FROM Dogs AS T1 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id JOIN Professionals AS T2 ON T3.professional_id = T2.professional_id        ", "inferred_question": "How many distinct names of dogs treated treatments performed by professionals are there?", "score": -29.62246322631836, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38485197540351135, "beam_bleu_score": 0.38586040798587706}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id        ", "inferred_question": "How many distinct professionals of treatments for dogs are there?", "score": -31.878917694091797, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5062134878276021, "beam_bleu_score": 0.46154316433166914}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Dogs AS T3 ON T1.dog_id = T3.dog_id        ", "inferred_question": "How many distinct professionals of treatments performed by professionals for dogs are there?", "score": -34.3218994140625, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45220253934838983, "beam_bleu_score": 0.3409593159447336}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "How many professionals that performs treatments are there?", "score": -34.52375030517578, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39695886708705586, "beam_bleu_score": 0.41532286267587015}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "How many distinct professionals of treatments performed by professionals are there?", "score": -34.59065246582031, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31543628195638773, "beam_bleu_score": 0.34298979725627066}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "How many distinct professionals of treatments performed by professionals are there?", "score": -35.75755310058594, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31543628195638773, "beam_bleu_score": 0.34298979725627066}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id in (SELECT count( T23.professional_id) FROM Treatments AS T23        )       ", "inferred_question": "", "score": -36.37392044067383, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT *) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "How many professionals that performs treatments are there?", "score": -36.74580383300781, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39695886708705586, "beam_bleu_score": 0.41532286267587015}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT T1.professional_id FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "What are the distinct professionals of treatments performed by professionals?", "score": -36.81714630126953, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14243213790097364, "beam_bleu_score": 0.3827117438403566}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.professional_id) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id        ", "inferred_question": "How many distinct professionals of treatments performed by professionals are there?", "score": -37.59682846069336, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31543628195638773, "beam_bleu_score": 0.34298979725627066}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 970, "beams": [{"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.role_code like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose role is %west%?", "score": 38.007293701171875, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6501479045966285, "beam_bleu_score": 0.41080470901010613}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose street name is %west%?", "score": 36.747047424316406, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6842147428479787, "beam_bleu_score": 0.43150317752214135}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.city like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose city is %west%?", "score": 32.41253662109375, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6920138918075818, "beam_bleu_score": 0.44115140844280437}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.state like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose state is %west%?", "score": 24.911636352539062, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6472020010208992, "beam_bleu_score": 0.4201861773122317}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.role_code like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 22.46857452392578, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 15.964311599731445, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 13.796684265136719, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 4.315402984619141, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 1.9443435668945312, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, avg( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 1.9156036376953125, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, max( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 1.8429603576660156, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, sum( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 1.6518287658691406, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, count( T1.city), T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "inferred_question": "", "score": 1.6379547119140625, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, avg( T1.street), T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "inferred_question": "", "score": -0.7067146301269531, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1  GROUP BY T1.role_code, T1.street, T1.city, T1.state HAVING count( T1.street) like '%West%'     ", "inferred_question": "", "score": -3.093524932861328, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 971, "beams": [{"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose street name is %west%?", "score": 34.938804626464844, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7179337395044698, "beam_bleu_score": 0.4663844044919114}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.city like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose city is %west%?", "score": 30.990144729614258, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7152096075008438, "beam_bleu_score": 0.4780199174329666}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.state like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose state is %west%?", "score": 30.802223205566406, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6956834260271008, "beam_bleu_score": 0.46228433672872854}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.role_code like '%West%'       ", "inferred_question": "What are the roles, street names, cities, and states of professionals whose role is %west%?", "score": 28.07141876220703, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6500933603997441, "beam_bleu_score": 0.44534232781674227}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 7.827798843383789, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 7.753204345703125, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, max( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 5.364509582519531, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, min( T1.state) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 4.485790252685547, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( T1.state) FROM Professionals AS T1 WHERE T1.city like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 3.927204132080078, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, count( *) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 2.918750762939453, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, sum( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": 2.150592803955078, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, max( T1.street), T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "inferred_question": "", "score": 0.5503692626953125, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, T1.street, T1.city, avg( T1.state) FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.city      ", "inferred_question": "", "score": -0.08654403686523438, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT T1.role_code, avg( T1.street), T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "inferred_question": "", "score": -0.7611770629882812, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT avg( T1.role_code), T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.street like '%West%' GROUP BY T1.state      ", "inferred_question": "", "score": -3.460773468017578, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 972, "beams": [{"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners whose state is %north%?", "score": 42.544898986816406, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6772251261735125, "beam_bleu_score": 0.4847083878511698}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.state like '%North%'       ", "inferred_question": "What are the first names, last names, and states of owners whose state is %north%?", "score": 26.54208755493164, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.497075958611086, "beam_bleu_score": 0.43286310243949194}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners of dogs whose name is %north%?", "score": 21.848417282104492, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21861013749455327, "beam_bleu_score": 0.49394854636456814}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.last_name like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners whose last name is %north%?", "score": 16.08223533630371, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5675005717987345, "beam_bleu_score": 0.48885905976722555}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name like '%North%'       ", "inferred_question": "What are the first names, last names, and states of owners of dogs whose name is %north%?", "score": 15.070098876953125, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16006932382396877, "beam_bleu_score": 0.4675895331314697}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.first_name like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners whose first name is %north%?", "score": 14.490371704101562, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5703940339457116, "beam_bleu_score": 0.4878982513941651}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.last_name like '%North%'       ", "inferred_question": "What are the first names, last names, and states of owners whose last name is %north%?", "score": 9.452957153320312, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5191286738159182, "beam_bleu_score": 0.4603365923559208}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "inferred_question": "", "score": 8.36993408203125, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.first_name like '%North%'       ", "inferred_question": "What are the first names, last names, and states of owners whose first name is %north%?", "score": 7.873481750488281, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.523846649501873, "beam_bleu_score": 0.46015399409515495}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 4.767627716064453, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1  GROUP BY T1.first_name, T1.last_name, T1.email_address HAVING count( T1.state) like '%North%'     ", "inferred_question": "", "score": 3.5631370544433594, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 3.4192733764648438, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "inferred_question": "", "score": 3.163890838623047, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( *) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "inferred_question": "", "score": 2.999889373779297, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.email_address like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners whose email address is %north%?", "score": 1.67657470703125, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5034431282928402, "beam_bleu_score": 0.4540941199930537}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 973, "beams": [{"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners whose state is %north%?", "score": 48.67869567871094, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6831703211172675, "beam_bleu_score": 0.4880351011430456}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners of dogs whose name is %north%?", "score": 23.590776443481445, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22796655519591957, "beam_bleu_score": 0.5026289154965795}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.state FROM Owners AS T1 WHERE T1.state like '%North%'       ", "inferred_question": "What are the first names, last names, and states of owners whose state is %north%?", "score": 18.516754150390625, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.47270098152436124, "beam_bleu_score": 0.4265003914040295}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, count( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "inferred_question": "", "score": 15.16073989868164, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, max( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 14.280651092529297, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, avg( T1.last_name), T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 13.128166198730469, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, min( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "inferred_question": "", "score": 12.1810302734375, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.last_name like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners whose last name is %north%?", "score": 11.077964782714844, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5787972431899966, "beam_bleu_score": 0.4937407435050836}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT avg( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 10.044506072998047, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT max( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 9.461555480957031, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT count( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 9.333690643310547, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT min( T1.first_name), T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.email_address      ", "inferred_question": "", "score": 8.738418579101562, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, sum( T1.email_address) FROM Owners AS T1 WHERE T1.state like '%North%' GROUP BY T1.last_name      ", "inferred_question": "", "score": 7.437442779541016, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 WHERE T1.first_name like '%North%'       ", "inferred_question": "What are the first names, last names, and email addresses of owners whose first name is %north%?", "score": 6.6609954833984375, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5823788703241981, "beam_bleu_score": 0.4929085036465149}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1  GROUP BY T1.first_name, T1.last_name, T1.email_address HAVING count( T1.state) like '%North%'     ", "inferred_question": "", "score": 5.246395111083984, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 976, "beams": [{"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "inferred_question": "What are the costs of treatments with maximum date of treatment?", "score": -0.0006310140597634017, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4374957276924083, "beam_bleu_score": 0.33082428251841095}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.date_of_treatment DESC LIMIT 1    ", "inferred_question": "", "score": -7.368587970733643, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.cost_of_treatment DESC LIMIT 1    ", "inferred_question": "What are the costs of treatments with maximum cost?", "score": -16.924638748168945, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38611525334150765, "beam_bleu_score": 0.42171608768989}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT max( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "inferred_question": "What are the costs of treatments with maximum date of treatment with maximum cost?", "score": -19.374719619750977, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36076251186114106, "beam_bleu_score": 0.29360098909792864}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.cost_of_treatment DESC LIMIT 1    ", "inferred_question": "", "score": -20.11593246459961, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT avg( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "inferred_question": "What is the average cost of all treatments with maximum date of treatment?", "score": -33.5991325378418, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3743106169734943, "beam_bleu_score": 0.3095973140035996}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT sum( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "inferred_question": "What is the total cost of all treatments with maximum date of treatment?", "score": -34.823123931884766, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4076973514132972, "beam_bleu_score": 0.3203062440483514}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT min( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "inferred_question": "What are the costs of treatments with maximum date of treatment with minimum cost?", "score": -35.84159469604492, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2551760675424961, "beam_bleu_score": 0.29360098909792864}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT max( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.cost_of_treatment DESC LIMIT 1    ", "inferred_question": "What are the costs of treatments with maximum cost with maximum cost?", "score": -36.74644470214844, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44223634650231936, "beam_bleu_score": 0.33049004990011693}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.date_of_treatment DESC LIMIT 1    ", "inferred_question": "", "score": -37.92580032348633, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.age DESC LIMIT 1    ", "inferred_question": "What are the costs of treatments for dogs with maximum age?", "score": -38.29736328125, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2329914987656082, "beam_bleu_score": 0.35057848835592237}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT count( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    ", "inferred_question": "How many costs of treatments with maximum date of treatment are there?", "score": -42.58159255981445, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.25705107656254367, "beam_bleu_score": 0.3422304752589645}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY max( T1.date_of_treatment) DESC LIMIT 1    ", "inferred_question": "", "score": -44.311378479003906, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY avg( T1.date_of_treatment) DESC LIMIT 1    ", "inferred_question": "", "score": -44.3560791015625, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY sum( T1.date_of_treatment) DESC LIMIT 1    ", "inferred_question": "", "score": -44.57689666748047, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 977, "beams": [{"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "inferred_question": "What are the costs of treatments with minimum date of treatment?", "score": -7.152555099310121e-07, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.420820067706821, "beam_bleu_score": 0.41474557462480066}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1    ORDER BY T1.cost_of_treatment ASC LIMIT 1    ", "inferred_question": "What are the costs of treatments with minimum cost?", "score": -14.163042068481445, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4157664692206948, "beam_bleu_score": 0.4297550401767701}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.age ASC LIMIT 1    ", "inferred_question": "What are the costs of treatments for dogs with minimum age?", "score": -28.17083740234375, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22212588923461118, "beam_bleu_score": 0.4343560170543746}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.date_of_treatment ASC LIMIT 1    ", "inferred_question": "", "score": -35.87084197998047, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT max( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "inferred_question": "What are the costs of treatments with minimum date of treatment with maximum cost?", "score": -37.28327560424805, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40438991465852137, "beam_bleu_score": 0.33982050522015667}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.date_arrived ASC LIMIT 1    ", "inferred_question": "What are the costs of treatments for dogs with minimum date of arrival?", "score": -40.73816680908203, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.23594069784268923, "beam_bleu_score": 0.37042255619995995}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT avg( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "inferred_question": "What is the average cost of all treatments with minimum date of treatment?", "score": -41.8109016418457, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4101705377278506, "beam_bleu_score": 0.3773264176152011}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id    ORDER BY T2.date_of_birth ASC LIMIT 1    ", "inferred_question": "What are the costs of treatments for dogs with minimum birthdate?", "score": -43.1727294921875, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16958210277394403, "beam_bleu_score": 0.3976001208321592}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT min( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "inferred_question": "What are the costs of treatments with minimum date of treatment with minimum cost?", "score": -43.55398178100586, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4796510860684653, "beam_bleu_score": 0.33982050522015667}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.cost_of_treatment ASC LIMIT 1    ", "inferred_question": "", "score": -44.106590270996094, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY avg( T1.date_of_treatment) ASC LIMIT 1    ", "inferred_question": "", "score": -44.223854064941406, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY count( *) ASC LIMIT 1    ", "inferred_question": "", "score": -44.39642333984375, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT sum( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "inferred_question": "What is the total cost of all treatments with minimum date of treatment?", "score": -46.49129867553711, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4328043269558448, "beam_bleu_score": 0.3721817756478143}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT count( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.date_of_treatment ASC LIMIT 1    ", "inferred_question": "How many costs of treatments with minimum date of treatment are there?", "score": -48.211151123046875, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2543211617350395, "beam_bleu_score": 0.38350323049288926}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT T1.cost_of_treatment FROM Treatments AS T1  GROUP BY T1.cost_of_treatment  ORDER BY min( T1.date_of_treatment) ASC LIMIT 1    ", "inferred_question": "", "score": -49.814945220947266, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 984, "beams": [{"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": 7.1523027420043945, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -3.0522842407226562, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -5.223240852355957, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -6.368050575256348, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -12.984134674072266, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -15.217020034790039, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -15.440764427185059, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -19.38888931274414, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.dog_id FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -21.39034080505371, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -23.938425064086914, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, min( T1.weight) FROM Dogs AS T1 WHERE T1.abandoned_yn = '1' GROUP BY T1.age    INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -25.728734970092773, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.abandoned_yn, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -25.973447799682617, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -26.64776039123535, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, count( *) FROM Dogs AS T1 WHERE T1.abandoned_yn = '1' GROUP BY T1.age    INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -27.094406127929688, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, max( T2.age), T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0' GROUP BY T2.weight        ", "inferred_question": "", "score": -27.319950103759766, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 985, "beams": [{"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": 2.4277000427246094, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -7.568175792694092, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -9.61594009399414, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -9.790005683898926, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -17.451499938964844, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -18.3784236907959, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -18.96141815185547, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.weight, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -22.161972045898438, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.weight, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -28.06911849975586, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.abandoned_yn, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -28.972312927246094, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, T2.age, T2.dog_id FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -29.577468872070312, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.weight, T2.abandoned_yn FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -29.804128646850586, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.age FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -30.077054977416992, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = 'Note'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0'         ", "inferred_question": "", "score": -30.576562881469727, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '1'     INTERSECT SELECT T2.name, min( T2.age), T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '0' GROUP BY T2.weight        ", "inferred_question": "", "score": -31.23638153076172, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 986, "beams": [{"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1        ", "inferred_question": "What is the average age of all dogs?", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.8744112806861306}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1        ", "inferred_question": "What are the ages of dogs with minimum age?", "score": -33.10674285888672, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4757510645828661, "beam_bleu_score": 0.45881164226267535}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1        ", "inferred_question": "What is the total age of all dogs?", "score": -33.24181365966797, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8849840093371246, "beam_bleu_score": 0.6636991026357396}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1        ", "inferred_question": "What are the ages of dogs with maximum age?", "score": -34.48680114746094, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33648139330214377, "beam_bleu_score": 0.4620543291073948}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1        ", "inferred_question": "How many ages of dogs are there?", "score": -39.182315826416016, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6004860189846878, "beam_bleu_score": 0.3004823791807765}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.age FROM Dogs AS T1        ", "inferred_question": "What are the ages of dogs?", "score": -43.63664627075195, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9131769545646105, "beam_bleu_score": 0.41798048906150237}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -75.96723937988281, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24334016043618112, "beam_bleu_score": 0.1686608149297226}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -106.52908325195312, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24334016043618112, "beam_bleu_score": 0.1686608149297226}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "inferred_question": "How many ids of dogs are there?", "score": -114.39581298828125, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.12361180522077309, "beam_bleu_score": 0.25156431904205606}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.breed_code FROM Dogs AS T1        ", "inferred_question": "What are the breeds of dogs?", "score": -116.47105407714844, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10997222270223761, "beam_bleu_score": 0.35954745258667503}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.breed_name FROM Breeds AS T1        ", "inferred_question": "What are the names of breeds?", "score": -117.44256591796875, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04925669170407532, "beam_bleu_score": 0.2756240689203825}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.name FROM Dogs AS T1        ", "inferred_question": "What are the names of dogs?", "score": -119.15242004394531, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08275478673996228, "beam_bleu_score": 0.3544168566695466}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.weight FROM Dogs AS T1        ", "inferred_question": "What are the weights of dogs?", "score": -123.21842956542969, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11926705017968198, "beam_bleu_score": 0.37440362185327375}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "inferred_question": "What are the ids of dogs?", "score": -124.77296447753906, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10047172945487348, "beam_bleu_score": 0.3425515891786947}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT avg( T1.breed_code) FROM Dogs AS T1        ", "inferred_question": "What is the average breed of all dogs?", "score": -127.52335357666016, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21605782608633872, "beam_bleu_score": 0.767689099026337}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 987, "beams": [{"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1        ", "inferred_question": "What is the average age of all dogs?", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.6835220555486654}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1        ", "inferred_question": "What is the total age of all dogs?", "score": -33.59394836425781, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9211465619162266, "beam_bleu_score": 0.48403720021756397}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1        ", "inferred_question": "What are the ages of dogs with minimum age?", "score": -34.59710693359375, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49995757645772465, "beam_bleu_score": 0.39559791074064715}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1        ", "inferred_question": "What are the ages of dogs with maximum age?", "score": -36.118404388427734, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.29517770007539923, "beam_bleu_score": 0.39559791074064715}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1        ", "inferred_question": "How many ages of dogs are there?", "score": -39.70266342163086, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5690589957452102, "beam_bleu_score": 0.3180324674860878}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.age FROM Dogs AS T1        ", "inferred_question": "What are the ages of dogs?", "score": -44.88025665283203, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8704413011457677, "beam_bleu_score": 0.3367083682387734}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -67.90090942382812, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2536793025873856, "beam_bleu_score": 0.185223471155933}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( *) FROM Dogs AS T1        ", "inferred_question": "How many dogs are there?", "score": -99.57655334472656, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2536793025873856, "beam_bleu_score": 0.185223471155933}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( T1.dog_id) FROM Dogs AS T1        ", "inferred_question": "How many ids of dogs are there?", "score": -113.10734558105469, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13000354188400376, "beam_bleu_score": 0.26242866244757196}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.breed_code FROM Dogs AS T1        ", "inferred_question": "What are the breeds of dogs?", "score": -121.63323974609375, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11293323011739864, "beam_bleu_score": 0.2742868289914095}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.breed_name FROM Breeds AS T1        ", "inferred_question": "What are the names of breeds?", "score": -122.1939468383789, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.04709610447052992, "beam_bleu_score": 0.2090931097617549}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.name FROM Dogs AS T1        ", "inferred_question": "What are the names of dogs?", "score": -124.02196502685547, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08441592618882476, "beam_bleu_score": 0.2733942623207757}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.weight FROM Dogs AS T1        ", "inferred_question": "What are the weights of dogs?", "score": -127.15096282958984, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10929712093224508, "beam_bleu_score": 0.2807440508239442}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT T1.dog_id FROM Dogs AS T1        ", "inferred_question": "What are the ids of dogs?", "score": -129.59507751464844, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08564299157513278, "beam_bleu_score": 0.25450108958315687}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT count( T1.weight) FROM Dogs AS T1        ", "inferred_question": "How many weights of dogs are there?", "score": -129.85728454589844, "correct_code": "SELECT avg(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10671940681027137, "beam_bleu_score": 0.27918969493020623}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 988, "beams": [{"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum age?", "score": -0.02559933252632618, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6459156864442666, "beam_bleu_score": 0.3971835052851224}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum birthdate?", "score": -3.677962064743042, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4931078973707096, "beam_bleu_score": 0.35262697529998255}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum age with maximum age?", "score": -34.268470764160156, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5498054079500128, "beam_bleu_score": 0.3005395105321039}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum birthdate with maximum age?", "score": -38.5115852355957, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4379526441334707, "beam_bleu_score": 0.2626909894424158}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What is the average age of all dogs with maximum age?", "score": -39.83282470703125, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4810758078918599, "beam_bleu_score": 0.4254692371669912}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum age with minimum age?", "score": -44.064186096191406, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.38254889010391757, "beam_bleu_score": 0.3005395105321039}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What is the average age of all dogs with maximum birthdate?", "score": -44.09874725341797, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45349085284528357, "beam_bleu_score": 0.3870573800419336}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY count( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -45.21379089355469, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY avg( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -46.86994934082031, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum birthdate with minimum age?", "score": -48.183677673339844, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3465958638508301, "beam_bleu_score": 0.2626909894424158}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY sum( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -48.79212951660156, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "How many ages of dogs with maximum age are there?", "score": -48.922908782958984, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3489490210098255, "beam_bleu_score": 0.26155979451842326}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What is the total age of all dogs with maximum age?", "score": -50.32341766357422, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48941468743092764, "beam_bleu_score": 0.42664437108949455}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "How many ages of dogs with maximum birthdate are there?", "score": -52.64410400390625, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3144146432413044, "beam_bleu_score": 0.22434806619335032}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY count( T1.date_of_birth) DESC LIMIT 1    ", "inferred_question": "", "score": -52.76130294799805, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 989, "beams": [{"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum age?", "score": -0.0006466205231845379, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6637848690831923, "beam_bleu_score": 0.3400426546498776}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum birthdate?", "score": -7.343984603881836, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5185211851867391, "beam_bleu_score": 0.299991451657937}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum age with maximum age?", "score": -34.75748825073242, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5960966442786184, "beam_bleu_score": 0.2598430757338022}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What is the average age of all dogs with maximum age?", "score": -41.265785217285156, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48585403501034097, "beam_bleu_score": 0.3190274087552866}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT max( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum birthdate with maximum age?", "score": -42.705989837646484, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48778445802153714, "beam_bleu_score": 0.22602451989010156}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum age with minimum age?", "score": -44.55569076538086, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4347615303499016, "beam_bleu_score": 0.2598430757338022}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY count( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -45.18840026855469, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY avg( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -47.729427337646484, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT count( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "How many ages of dogs with maximum age are there?", "score": -49.14157485961914, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3963342815467862, "beam_bleu_score": 0.2752125912782202}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY sum( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -49.14686584472656, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT avg( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What is the average age of all dogs with maximum birthdate?", "score": -49.237735748291016, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.44912135627202165, "beam_bleu_score": 0.28824190175206754}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT sum( T1.age) FROM Dogs AS T1    ORDER BY T1.age DESC LIMIT 1    ", "inferred_question": "What is the total age of all dogs with maximum age?", "score": -50.982688903808594, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.480079876052272, "beam_bleu_score": 0.3139142040010154}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT min( T1.age) FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1    ", "inferred_question": "What are the ages of dogs with maximum birthdate with minimum age?", "score": -52.40119552612305, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.39091646908280075, "beam_bleu_score": 0.22602451989010156}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY max( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -54.112796783447266, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT T1.age FROM Dogs AS T1  GROUP BY T1.age  ORDER BY min( T1.age) DESC LIMIT 1    ", "inferred_question": "", "score": -54.770877838134766, "correct_code": "SELECT max(age) FROM Dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 990, "beams": [{"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, T1.charge_amount FROM Charges AS T1        ", "inferred_question": "What are the types and amounts of charges?", "score": -0.014083758927881718, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9201134822735095, "beam_bleu_score": 0.3058273342423725}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, sum( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -4.269771575927734, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, max( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -15.602151870727539, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, avg( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -19.42856216430664, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, count( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -19.549144744873047, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, min( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -24.42020606994629, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT max( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -42.675689697265625, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT max( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the maximum type and total amount of charges?", "score": -43.930564880371094, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5209971870352048, "beam_bleu_score": 0.35665312503227514}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT sum( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -46.31672668457031, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT min( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -47.40974807739258, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT avg( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -47.600341796875, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT avg( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the average type and total amount of charges?", "score": -48.853416442871094, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5114918875973022, "beam_bleu_score": 0.3773130903771588}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT T1.charge_type, count( *) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -48.973548889160156, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT sum( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the total type and total amount of charges?", "score": -50.02312088012695, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.613787662478127, "beam_bleu_score": 0.3476277864331313}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT min( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the minimum type and total amount of charges?", "score": -50.38823699951172, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.48615898926676415, "beam_bleu_score": 0.35665312503227514}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 991, "beams": [{"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, T1.charge_amount FROM Charges AS T1        ", "inferred_question": "What are the types and amounts of charges?", "score": 0.0, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9168103121742686, "beam_bleu_score": 0.5207835991485817}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, sum( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -21.907602310180664, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, max( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -24.662464141845703, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, count( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -27.99260711669922, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, avg( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -30.965227127075195, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT T1.charge_type, min( T1.charge_amount) FROM Charges AS T1  GROUP BY T1.charge_type      ", "inferred_question": "", "score": -36.429779052734375, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT max( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -43.11045455932617, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT min( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -48.75382614135742, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT avg( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -48.811485290527344, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT sum( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -49.54770278930664, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT count( T1.charge_type), T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount      ", "inferred_question": "", "score": -53.265968322753906, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT max( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the maximum type and total amount of charges?", "score": -64.30776977539062, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4858945960173813, "beam_bleu_score": 0.4077273845185451}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT max( T1.charge_type), max( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the maximum type and maximum amount of charges?", "score": -67.40362548828125, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7049568038936216, "beam_bleu_score": 0.39579159971256167}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT avg( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the average type and total amount of charges?", "score": -69.98622131347656, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.514877755493365, "beam_bleu_score": 0.42274776909243006}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT min( T1.charge_type), sum( T1.charge_amount) FROM Charges AS T1        ", "inferred_question": "What are the minimum type and total amount of charges?", "score": -70.19058990478516, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3789207607764191, "beam_bleu_score": 0.4108760923365879}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 992, "beams": [{"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum amount?", "score": 0.0, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.33446542465758666, "beam_bleu_score": 0.279935722968822}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum amount with maximum amount?", "score": -24.12256622314453, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36395164106117084, "beam_bleu_score": 0.20452031018598238}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_type DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum type?", "score": -25.439130783081055, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3971873897812985, "beam_bleu_score": 0.3486812066888204}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT sum( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What is the total amount of all charges with maximum amount?", "score": -28.929800033569336, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22737298303369147, "beam_bleu_score": 0.2537355335688578}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -29.560863494873047, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT avg( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What is the average amount of all charges with maximum amount?", "score": -32.327083587646484, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.20428181338184137, "beam_bleu_score": 0.252162392226073}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -32.855594635009766, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY max( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -33.2730712890625, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT min( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum amount with minimum amount?", "score": -34.73958969116211, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.24221874115181052, "beam_bleu_score": 0.20452031018598238}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY avg( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -35.12912368774414, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT count( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "How many amounts of charges with maximum amount are there?", "score": -35.66893005371094, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.18558141819770968, "beam_bleu_score": 0.2900535946309907}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY min( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -45.29705047607422, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT T1.charge_type FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the types of charges with maximum amount?", "score": -47.49637985229492, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.49292759597936175, "beam_bleu_score": 0.35513247012181853}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_type DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum type with maximum amount?", "score": -48.674781799316406, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4733187777460819, "beam_bleu_score": 0.2715756489958868}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum amount with maximum amount?", "score": -53.19908905029297, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.36395164106117084, "beam_bleu_score": 0.20452031018598238}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 993, "beams": [{"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum amount?", "score": 0.0, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5054651270941756, "beam_bleu_score": 0.415195597384403}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_type FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the types of charges with maximum amount?", "score": -26.191673278808594, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7158175347184084, "beam_bleu_score": 0.4505480325893885}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1    ORDER BY T1.charge_type DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum type?", "score": -36.237606048583984, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45623571626518733, "beam_bleu_score": 0.4710982195502611}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -44.73805618286133, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT max( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum amount with maximum amount?", "score": -44.97658157348633, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5747027366944435, "beam_bleu_score": 0.36815759771524187}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY avg( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -45.92886734008789, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY count( *) DESC LIMIT 1    ", "inferred_question": "", "score": -46.693336486816406, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY max( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -48.29743194580078, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT avg( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What is the average amount of all charges with maximum amount?", "score": -48.88333511352539, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3149376158978484, "beam_bleu_score": 0.5184078919170025}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT sum( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What is the total amount of all charges with maximum amount?", "score": -52.830387115478516, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3983132082702673, "beam_bleu_score": 0.5001575741466564}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT min( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "What are the amounts of charges with maximum amount with minimum amount?", "score": -54.229461669921875, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3963811874893036, "beam_bleu_score": 0.36815759771524187}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT count( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_amount DESC LIMIT 1    ", "inferred_question": "How many amounts of charges with maximum amount are there?", "score": -54.84600067138672, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.259435134127571, "beam_bleu_score": 0.3622810433722592}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_type FROM Charges AS T1  GROUP BY T1.charge_type  ORDER BY sum( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -57.916961669921875, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1 JOIN Treatments AS T2    ORDER BY T2.cost_of_treatment DESC LIMIT 1    ", "inferred_question": "", "score": -58.73442077636719, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT T1.charge_amount FROM Charges AS T1  GROUP BY T1.charge_amount  ORDER BY min( T1.charge_amount) DESC LIMIT 1    ", "inferred_question": "", "score": -59.17674255371094, "correct_code": "SELECT max(charge_amount) FROM Charges", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 994, "beams": [{"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, T1.cell_number FROM Professionals AS T1        ", "inferred_question": "What are the email addresses, home phone numbers, and cell phone numbers of professionals?", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9377666830173549, "beam_bleu_score": 0.5591652006497373}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.cell_number, T1.home_phone FROM Professionals AS T1        ", "inferred_question": "What are the email addresses, cell phone numbers, and home phone numbers of professionals?", "score": -22.184890747070312, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9578714290329388, "beam_bleu_score": 0.5758477077149512}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, max( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -33.63826370239258, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, avg( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -36.02001190185547, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT max( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -38.8320198059082, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, count( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -39.20248794555664, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, count( *) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "inferred_question": "", "score": -39.46953582763672, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT avg( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -39.82637405395508, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT min( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -40.96780776977539, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT count( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -41.72828674316406, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, min( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "inferred_question": "", "score": -44.63064193725586, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT sum( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -44.71907424926758, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, sum( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -45.296730041503906, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT T1.email_address, T1.home_phone, max( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "inferred_question": "", "score": -45.69472122192383, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 995, "beams": [{"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, T1.cell_number FROM Professionals AS T1        ", "inferred_question": "What are the email addresses, home phone numbers, and cell phone numbers of professionals?", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.6219035353818607}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.cell_number, T1.home_phone FROM Professionals AS T1        ", "inferred_question": "What are the email addresses, cell phone numbers, and home phone numbers of professionals?", "score": -20.522537231445312, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.6377936511959258}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, max( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -32.61219787597656, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, avg( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -35.051475524902344, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT max( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -36.32289123535156, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT avg( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -37.44574737548828, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT count( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -38.59721374511719, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, count( *) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "inferred_question": "", "score": -38.844783782958984, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, count( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -38.88373565673828, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT min( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -39.30593490600586, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT sum( T1.email_address), T1.home_phone, T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -41.81117630004883, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, min( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "inferred_question": "", "score": -42.16151428222656, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, max( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "inferred_question": "", "score": -43.94264602661133, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, T1.home_phone, sum( T1.cell_number) FROM Professionals AS T1  GROUP BY T1.home_phone      ", "inferred_question": "", "score": -44.56471252441406, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT T1.email_address, sum( T1.home_phone), T1.cell_number FROM Professionals AS T1  GROUP BY T1.cell_number      ", "inferred_question": "", "score": -44.63558578491211, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 996, "beams": [{"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "inferred_question": "", "score": 0.0, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, max(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -28.86331558227539, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, avg(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -32.7685546875, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, count(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -33.93911361694336, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -34.475894927978516, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_name, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code        ", "inferred_question": "", "score": -35.65068054199219, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT count(DISTINCT *), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -37.41740417480469, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, sum(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -39.700740814208984, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT T1.breed_code, min(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -39.72895431518555, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -39.83921813964844, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -40.913639068603516, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -44.38911056518555, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_name), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -45.76083755493164, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -46.67179489135742, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_name), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T13 ON T1.breed_code = T13.breed_code JOIN Sizes AS T2 ON T13.size_code = T2.size_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -48.46456527709961, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 997, "beams": [{"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, T1.size_code FROM Dogs AS T1        ", "inferred_question": "What are the breeds and sizes of dogs?", "score": -0.0453304760158062, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 0.2844409176927636}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code        ", "inferred_question": "What are the ids of breeds to which dogs belong to? Also show the sizes of the dogs.", "score": -3.116356372833252, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6347154372569508, "beam_bleu_score": 0.27246210343017935}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_name, T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code        ", "inferred_question": "What are the names of breeds to which dogs belong to? Also show the sizes of the dogs.", "score": -33.62641143798828, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6158255178883866, "beam_bleu_score": 0.2682762906352633}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, avg(DISTINCT T1.size_code) FROM Dogs AS T1  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -35.334354400634766, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_code), T1.size_code FROM Dogs AS T1  GROUP BY T1.size_code      ", "inferred_question": "", "score": -36.25392532348633, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, max(DISTINCT T1.size_code) FROM Dogs AS T1  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -36.297935485839844, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, avg(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -37.193092346191406, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, max(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -38.59473419189453, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_code), T1.size_code FROM Dogs AS T1  GROUP BY T1.size_code      ", "inferred_question": "", "score": -38.66960144042969, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -38.716739654541016, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.breed_code), T1.size_code FROM Dogs AS T1  GROUP BY T1.size_code      ", "inferred_question": "", "score": -39.558250427246094, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -39.941070556640625, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, count(DISTINCT T1.size_code) FROM Dogs AS T1  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -40.75503158569336, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.breed_code), T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.size_code      ", "inferred_question": "", "score": -43.617919921875, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT T1.breed_code, count(DISTINCT T2.size_code) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T1.breed_code      ", "inferred_question": "", "score": -43.71732711791992, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1000, "beams": [{"orig_question": "How many singers are there?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "inferred_question": "How many singers are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 1.0, "beam_bleu_score": 1.0}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT min( *) FROM singer AS T1        ", "inferred_question": "", "score": -33.49449157714844, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer AS T1        ", "inferred_question": "Show me everything about singers.", "score": -36.05208969116211, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0950456800071714, "beam_bleu_score": 0.3541910318202236}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the average name of all singers?", "score": -36.368953704833984, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1720952111078321, "beam_bleu_score": 0.28973222227404427}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "inferred_question": "What are the names of singers?", "score": -36.43966293334961, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19873626372289344, "beam_bleu_score": 0.5008870727467083}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( *) FROM singer AS T1        ", "inferred_question": "", "score": -39.89617919921875, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT sum( *) FROM singer AS T1        ", "inferred_question": "", "score": -45.03900146484375, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1        ", "inferred_question": "What are the names of singers with maximum name?", "score": -49.491737365722656, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14615482483098674, "beam_bleu_score": 0.34548067282818784}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "inferred_question": "What are the names of singers with minimum name?", "score": -49.841880798339844, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13039256775272678, "beam_bleu_score": 0.33432718370768866}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the total name of all singers?", "score": -51.10678482055664, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3528169243527858, "beam_bleu_score": 0.3020300365911981}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT max( *) FROM singer AS T1        ", "inferred_question": "", "score": -55.06610107421875, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( T1.Singer_ID) FROM singer AS T1        ", "inferred_question": "What is the average id of all singers?", "score": -58.461666107177734, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.09973685550032474, "beam_bleu_score": 0.2987501799129883}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT T1.Singer_ID FROM singer AS T1        ", "inferred_question": "What are the ids of singers?", "score": -65.63969421386719, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1420197350964778, "beam_bleu_score": 0.5202556880807584}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT min( T1.Singer_ID) FROM singer AS T1        ", "inferred_question": "What are the ids of singers with minimum id?", "score": -66.50895690917969, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06877054168735053, "beam_bleu_score": 0.3564982433809235}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT avg( T1.Sales) FROM song AS T1        ", "inferred_question": "What is the average number of units sold of all songs?", "score": -68.982666015625, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.06820832477330652, "beam_bleu_score": 0.09036012893013722}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1001, "beams": [{"orig_question": "What is the count of singers?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "inferred_question": "How many singers are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8968068482588875, "beam_bleu_score": 0.3678169127800635}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT min( *) FROM singer AS T1        ", "inferred_question": "", "score": -33.8614616394043, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT T1.Name FROM singer AS T1        ", "inferred_question": "What are the names of singers?", "score": -35.237483978271484, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.22857197175219612, "beam_bleu_score": 0.6241886696801318}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the average name of all singers?", "score": -38.19218444824219, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2394487636427075, "beam_bleu_score": 0.5254502324723559}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1        ", "inferred_question": "What are the names of singers with minimum name?", "score": -46.42584228515625, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16072431671655407, "beam_bleu_score": 0.37499036348917986}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1        ", "inferred_question": "What is the total name of all singers?", "score": -49.04355239868164, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.43846474012869097, "beam_bleu_score": 0.5650358983865058}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1        ", "inferred_question": "What are the names of singers with maximum name?", "score": -49.16046905517578, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16007355618173635, "beam_bleu_score": 0.37499036348917986}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer AS T1        ", "inferred_question": "Show me everything about singers.", "score": -54.93462371826172, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08893526637670934, "beam_bleu_score": 0.2932225987685794}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT sum( *) FROM singer AS T1        ", "inferred_question": "", "score": -54.957462310791016, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT avg( *) FROM singer AS T1        ", "inferred_question": "", "score": -56.068359375, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT max( *) FROM singer AS T1        ", "inferred_question": "", "score": -69.41786193847656, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT avg( T1.Singer_ID) FROM singer AS T1        ", "inferred_question": "What is the average id of all singers?", "score": -70.09417724609375, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.16165280523023595, "beam_bleu_score": 0.5486405587718077}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT min( T1.Singer_ID) FROM singer AS T1        ", "inferred_question": "What are the ids of singers with minimum id?", "score": -70.73640441894531, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11779925759034138, "beam_bleu_score": 0.4156023517704044}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT count( *) FROM singer AS T1        ", "inferred_question": "How many singers are there?", "score": -75.99543762207031, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8968068482588875, "beam_bleu_score": 0.3678169127800635}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT T1.Singer_ID FROM singer AS T1        ", "inferred_question": "What are the ids of singers?", "score": -76.83153533935547, "correct_code": "SELECT count(*) FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32323087106047943, "beam_bleu_score": 0.6557739528188405}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1004, "beams": [{"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, T1.Citizenship FROM singer AS T1        ", "inferred_question": "What are the birth years and home countries of singers?", "score": 0.0, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6525202111539576, "beam_bleu_score": 0.6925029068250624}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -30.921714782714844, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, max( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -38.773231506347656, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT avg( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -40.05485534667969, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, avg( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -40.62636184692383, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT min( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -42.73420333862305, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT sum( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -44.139854431152344, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, count( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -48.228660583496094, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, min( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -49.04596710205078, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT count( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -49.41301345825195, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT T1.Birth_Year, sum( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -50.71266555786133, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), max( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the maximum birth year and maximum home country of singers?", "score": -68.85799407958984, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5617162763511345, "beam_bleu_score": 0.5692917235397736}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), avg( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the maximum birth year and average home country of singers?", "score": -70.35447692871094, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.40935837014757803, "beam_bleu_score": 0.5662391109980488}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT avg( T1.Birth_Year), max( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the average birth year and maximum home country of singers?", "score": -78.02471923828125, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4530987058094299, "beam_bleu_score": 0.5746447825926878}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT max( T1.Birth_Year), count( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the maximum birth year and number of home countries of singers?", "score": -78.97509002685547, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.45238458273054816, "beam_bleu_score": 0.5398168949538861}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1005, "beams": [{"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, T1.Citizenship FROM singer AS T1        ", "inferred_question": "What are the birth years and home countries of singers?", "score": 0.0, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8141060310617929, "beam_bleu_score": 0.7268144310166508}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -30.023340225219727, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, max( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -36.87493896484375, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, avg( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -37.923423767089844, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT avg( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -39.516056060791016, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT min( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -40.63678741455078, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT sum( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -42.98150634765625, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, count( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -45.898193359375, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, min( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -46.01093292236328, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT count( T1.Birth_Year), T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship      ", "inferred_question": "", "score": -48.209171295166016, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT T1.Birth_Year, sum( T1.Citizenship) FROM singer AS T1  GROUP BY T1.Birth_Year      ", "inferred_question": "", "score": -48.378116607666016, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), max( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the maximum birth year and maximum home country of singers?", "score": -66.36011505126953, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6307916824760619, "beam_bleu_score": 0.5363455044816089}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), avg( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the maximum birth year and average home country of singers?", "score": -66.97575378417969, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4523493277659766, "beam_bleu_score": 0.5363455044816089}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), min( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the maximum birth year and minimum home country of singers?", "score": -75.47298431396484, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4212219760835194, "beam_bleu_score": 0.539117408177651}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT max( T1.Birth_Year), count( T1.Citizenship) FROM singer AS T1        ", "inferred_question": "What are the maximum birth year and number of home countries of singers?", "score": -75.84893798828125, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5084143094246912, "beam_bleu_score": 0.5230473399378187}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1006, "beams": [{"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "inferred_question": "What are the names of singers whose home country is not france?", "score": 55.48173904418945, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.9511554577542117, "beam_bleu_score": 0.591080350597115}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "inferred_question": "What are the names of singers whose home country is not france with maximum name?", "score": 17.23955535888672, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5416016889909226, "beam_bleu_score": 0.46494232173318994}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "inferred_question": "How many names of singers whose home country is not france are there?", "score": 13.916885375976562, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6444679099423021, "beam_bleu_score": 0.5095228538764847}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "inferred_question": "What is the average name of all singers whose home country is not france?", "score": 12.94607162475586, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7016368375860189, "beam_bleu_score": 0.5143178626387603}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "inferred_question": "What are the names of singers whose home country is not france with minimum name?", "score": 12.196823120117188, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.539251980907165, "beam_bleu_score": 0.46729653532605486}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING count( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": 11.75296401977539, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'France'       ", "inferred_question": "What is the total name of all singers whose home country is not france?", "score": 9.229331970214844, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6973787911496268, "beam_bleu_score": 0.5204345678078274}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING avg( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": 7.128810882568359, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING sum( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": 5.854679107666016, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING max( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": 4.413005828857422, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING min( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": 2.6563339233398438, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING count( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": -25.68762969970703, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1   HAVING count( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": -29.051746368408203, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING avg( T1.Citizenship) != 'France'     ", "inferred_question": "", "score": -30.806411743164062, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Name != 'France'       ", "inferred_question": "What are the names of singers whose name is not france?", "score": -33.73830032348633, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7946089570900507, "beam_bleu_score": 0.6217746950488482}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1007, "beams": [{"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "inferred_question": "What are the names of singers whose home country is not french?", "score": 14.859888076782227, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8329433548450735, "beam_bleu_score": 0.663703196581618}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "inferred_question": "What are the names of singers whose home country is not french with maximum name?", "score": -23.45297622680664, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4769570253299237, "beam_bleu_score": 0.5389916181585757}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "inferred_question": "What is the average name of all singers whose home country is not french?", "score": -26.96872901916504, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6461583934662674, "beam_bleu_score": 0.48305920500735267}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "inferred_question": "How many names of singers whose home country is not french are there?", "score": -27.08209800720215, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6934913523058068, "beam_bleu_score": 0.5382115491897167}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "inferred_question": "What are the names of singers whose home country is not french with minimum name?", "score": -27.629344940185547, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4991194062595592, "beam_bleu_score": 0.5389916181585757}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1 WHERE T1.Citizenship != 'French'       ", "inferred_question": "What is the total name of all singers whose home country is not french?", "score": -31.506847381591797, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6974653713951642, "beam_bleu_score": 0.48672436456543294}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING count( T1.Citizenship) != 'French'     ", "inferred_question": "", "score": -31.5784854888916, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING avg( T1.Citizenship) != 'French'     ", "inferred_question": "", "score": -33.19254684448242, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING max( T1.Citizenship) != 'French'     ", "inferred_question": "", "score": -36.85364532470703, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING sum( T1.Citizenship) != 'French'     ", "inferred_question": "", "score": -37.059234619140625, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name HAVING min( T1.Citizenship) != 'French'     ", "inferred_question": "", "score": -37.68943786621094, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Name != 'French'       ", "inferred_question": "What are the names of singers whose name is not french?", "score": -46.474090576171875, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6644460694190473, "beam_bleu_score": 0.6601130602798466}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING count( T1.Citizenship) != 'French'     ", "inferred_question": "", "score": -69.36885833740234, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1   HAVING avg( T1.Citizenship) != 'French'     ", "inferred_question": "", "score": -71.00175476074219, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT T1.Name FROM singer AS T1 WHERE T1.Birth_Year != French       ", "inferred_question": "", "score": -77.22146606445312, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1010, "beams": [{"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth?", "score": 0.0, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8434033626356119, "beam_bleu_score": 0.6028323645831173}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -36.83829116821289, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth with maximum name?", "score": -38.505313873291016, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.585657084163439, "beam_bleu_score": 0.4938768780557705}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -42.004520416259766, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What is the average name of all singers with maximum net worth?", "score": -42.84781265258789, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5012200282644454, "beam_bleu_score": 0.6425780348897593}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY count( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -44.79676055908203, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY max( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -45.03533935546875, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "How many names of singers with maximum net worth are there?", "score": -45.9460334777832, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4066030195355631, "beam_bleu_score": 0.49870578022180345}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth with minimum name?", "score": -46.337921142578125, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4500173903999056, "beam_bleu_score": 0.4938768780557705}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What is the total name of all singers with maximum net worth?", "score": -47.44572067260742, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5381589940973746, "beam_bleu_score": 0.6438660371327656}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY min( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -57.73805618286133, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth with maximum name?", "score": -75.28978729248047, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.585657084163439, "beam_bleu_score": 0.4938768780557705}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "What is the average name of all singers with maximum net worth?", "score": -79.63967895507812, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5012200282644454, "beam_bleu_score": 0.6425780348897593}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY avg( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth with maximum name?", "score": -80.419921875, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.585657084163439, "beam_bleu_score": 0.4938768780557705}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "How many names of singers with maximum net worth are there?", "score": -82.38427734375, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4066030195355631, "beam_bleu_score": 0.49870578022180345}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1011, "beams": [{"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth?", "score": 0.0, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8658925344816067, "beam_bleu_score": 0.528066624632559}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -20.756973266601562, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY max( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -35.25921630859375, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY avg( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -36.161842346191406, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth with maximum name?", "score": -40.570762634277344, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5979633549694161, "beam_bleu_score": 0.408822077249269}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY count( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -40.932395935058594, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What is the average name of all singers with maximum net worth?", "score": -43.349334716796875, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5385496689458149, "beam_bleu_score": 0.530063887134381}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What is the total name of all singers with maximum net worth?", "score": -46.122066497802734, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5298664617959473, "beam_bleu_score": 0.539934203624417}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT min( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth with minimum name?", "score": -46.983299255371094, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4516862753965416, "beam_bleu_score": 0.408822077249269}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    ", "inferred_question": "How many names of singers with maximum net worth are there?", "score": -47.64442825317383, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4604842324248116, "beam_bleu_score": 0.39855694788306084}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT T1.Name FROM singer AS T1  GROUP BY T1.Name  ORDER BY min( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "", "score": -50.705413818359375, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT max( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "What are the names of singers with maximum net worth with maximum name?", "score": -61.168235778808594, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5979633549694161, "beam_bleu_score": 0.408822077249269}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT avg( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "What is the average name of all singers with maximum net worth?", "score": -64.01160430908203, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5385496689458149, "beam_bleu_score": 0.530063887134381}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT sum( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "What is the total name of all singers with maximum net worth?", "score": -66.75086212158203, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5298664617959473, "beam_bleu_score": 0.539934203624417}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT count( T1.Name) FROM singer AS T1    ORDER BY sum( T1.Net_Worth_Millions) DESC LIMIT 1    ", "inferred_question": "How many names of singers with maximum net worth are there?", "score": -66.8501205444336, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4604842324248116, "beam_bleu_score": 0.39855694788306084}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1018, "beams": [{"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the names of songs performed by singers? Also show the names of the singers.", "score": 0.0, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6745269382764363, "beam_bleu_score": 0.3726151189902587}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -34.38667297363281, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT avg( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -40.005680084228516, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT min( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -40.91339111328125, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -40.95833206176758, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT sum( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -41.98457717895508, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -42.15139389038086, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -43.4135627746582, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT count( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -46.39735412597656, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, min( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -46.726112365722656, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, sum( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -46.916812896728516, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the maximum name of songs performed by singers? Also show the average name of the singers.", "score": -75.19042205810547, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21990586204958917, "beam_bleu_score": 0.2739998365447777}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the maximum name of songs performed by singers? Also show the maximum name of the singers.", "score": -76.55646514892578, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2991780295530405, "beam_bleu_score": 0.2739998365447777}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT max( T1.Title), count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the maximum name of songs performed by singers? Also show the number of names of the singers.", "score": -77.929443359375, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1554065068497611, "beam_bleu_score": 0.2928824042117234}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT T1.Title, count( *) FROM song AS T1  GROUP BY T1.Title      ", "inferred_question": "", "score": -80.59489440917969, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1019, "beams": [{"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the names of songs performed by singers? Also show the names of the singers.", "score": 0.0, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4479856822704179, "beam_bleu_score": 0.342921550841815}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -35.865013122558594, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -41.6416015625, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT min( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -41.79850387573242, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT avg( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -42.58797073364258, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -44.255123138427734, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT sum( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -45.586544036865234, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -46.052371978759766, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT count( T1.Title), T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name      ", "inferred_question": "", "score": -48.81219482421875, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, min( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -50.90006637573242, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT T1.Title, sum( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Title      ", "inferred_question": "", "score": -51.94755554199219, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the maximum name of songs performed by singers? Also show the average name of the singers.", "score": -77.2747802734375, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.21100290984014725, "beam_bleu_score": 0.2817066154843478}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), max( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the maximum name of songs performed by singers? Also show the maximum name of the singers.", "score": -80.0167236328125, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.31283598264068324, "beam_bleu_score": 0.27940677727158836}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT max( T1.Title), count( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the maximum name of songs performed by singers? Also show the number of names of the singers.", "score": -81.88998413085938, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15293885711609212, "beam_bleu_score": 0.2877143134388763}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT min( T1.Title), avg( T2.Name) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        ", "inferred_question": "What are the minimum name of songs performed by singers? Also show the average name of the singers.", "score": -83.25086975097656, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.19213159300217741, "beam_bleu_score": 0.2817066154843478}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1020, "beams": [{"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "What are the distinct names of singers who performed songs with a number of units sold of more than 300000.0  ?", "score": 60.60452651977539, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.7605262259564145, "beam_bleu_score": 0.5394135268197474}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "How many distinct names of singers who performed songs with a number of units sold of more than 300000.0   are there?", "score": 21.58890151977539, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5488486432390127, "beam_bleu_score": 0.5026303254554508}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "", "score": 20.631397247314453, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "What are the distinct names of singers who performed songs with a number of units sold of more than 300000.0   with maximum name?", "score": 20.23507308959961, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3002278994436459, "beam_bleu_score": 0.46325469110057244}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "What are the distinct names of singers who performed songs with a number of units sold of more than 300000.0   with minimum name?", "score": 19.300582885742188, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.3175731018206639, "beam_bleu_score": 0.46325469110057244}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "inferred_question": "", "score": 19.203723907470703, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "inferred_question": "", "score": 18.255859375, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "", "score": 17.121601104736328, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING sum( T2.Sales) > 300000     ", "inferred_question": "", "score": 16.419937133789062, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( T2.Sales) > 300000     ", "inferred_question": "", "score": 11.017738342285156, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING min( T2.Sales) > 300000     ", "inferred_question": "", "score": 4.431365966796875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 WHERE T1.Net_Worth_Millions > 300000       ", "inferred_question": "What are the distinct names of singers with a net worth of more than 300000.0 millions?", "score": -7.3757781982421875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5632873444198121, "beam_bleu_score": 0.6255847528469357}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "inferred_question": "", "score": -17.625286102294922, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "inferred_question": "", "score": -19.08246612548828, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "inferred_question": "", "score": -19.53814697265625, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1021, "beams": [{"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "What are the distinct names of singers who performed songs with a number of units sold of more than 300000.0  ?", "score": 63.53425979614258, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5926722909772558, "beam_bleu_score": 0.4555721945126309}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "How many distinct names of singers who performed songs with a number of units sold of more than 300000.0   are there?", "score": 25.342666625976562, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5032390813254844, "beam_bleu_score": 0.3968775481872751}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "What are the distinct names of singers who performed songs with a number of units sold of more than 300000.0   with maximum name?", "score": 24.574432373046875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.2538660843820397, "beam_bleu_score": 0.3985419692638463}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT avg(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "", "score": 24.2054443359375, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT min(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "What are the distinct names of singers who performed songs with a number of units sold of more than 300000.0   with minimum name?", "score": 22.928668975830078, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.26052026558133456, "beam_bleu_score": 0.39720680152560206}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "inferred_question": "", "score": 21.30052947998047, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT sum(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       ", "inferred_question": "", "score": 20.729278564453125, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "inferred_question": "", "score": 20.680068969726562, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING sum( T2.Sales) > 300000     ", "inferred_question": "", "score": 19.962738037109375, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( T2.Sales) > 300000     ", "inferred_question": "", "score": 15.426071166992188, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING min( T2.Sales) > 300000     ", "inferred_question": "", "score": 6.942684173583984, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT T1.Name FROM singer AS T1 WHERE T1.Net_Worth_Millions > 300000       ", "inferred_question": "What are the distinct names of singers with a net worth of more than 300000.0 millions?", "score": -4.1363983154296875, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5399125160146956, "beam_bleu_score": 0.5715760410152289}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "inferred_question": "", "score": -15.377693176269531, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING max( T2.Sales) > 300000     ", "inferred_question": "", "score": -15.651809692382812, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT max(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING avg( T2.Sales) > 300000     ", "inferred_question": "", "score": -16.402626037597656, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1030, "beams": [{"orig_question": "How many available features are there in total?", "inferred_code": "SELECT count( *) FROM Other_Available_Features AS T1        ", "inferred_question": "How many other features are there?", "score": 0.0, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.8667284195701088, "beam_bleu_score": 0.5458923540709608}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Other_Available_Features AS T1        ", "inferred_question": "Show me everything about other features.", "score": -34.092037200927734, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08104924635176058, "beam_bleu_score": 0.3343170601588766}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.feature_name) FROM Other_Available_Features AS T1        ", "inferred_question": "What are the names of other features with minimum name?", "score": -34.148433685302734, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.11373043977645425, "beam_bleu_score": 0.37132181110703044}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1        ", "inferred_question": "What are the names of other features?", "score": -37.709632873535156, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1749913561080345, "beam_bleu_score": 0.3912049465455202}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT sum( T1.feature_name) FROM Other_Available_Features AS T1        ", "inferred_question": "What is the total name of all other features?", "score": -37.910621643066406, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.32902195840657145, "beam_bleu_score": 0.4182197811419398}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( *) FROM Other_Available_Features AS T1        ", "inferred_question": "", "score": -38.33431625366211, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.feature_id) FROM Other_Available_Features AS T1        ", "inferred_question": "What are the ids of other features with minimum id?", "score": -38.58234786987305, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.08753328654049064, "beam_bleu_score": 0.40132559546354524}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT sum( *) FROM Other_Available_Features AS T1        ", "inferred_question": "", "score": -40.577239990234375, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": false, "beam_nubia_score": 0.0, "beam_bleu_score": 0.0}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT T1.feature_id FROM Other_Available_Features AS T1        ", "inferred_question": "What are the ids of other features?", "score": -42.884422302246094, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14755951643938559, "beam_bleu_score": 0.38104076423254224}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT sum( T1.feature_id) FROM Other_Available_Features AS T1        ", "inferred_question": "What is the total id of all other features?", "score": -42.89339065551758, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.30185548763832504, "beam_bleu_score": 0.40389121735971967}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.feature_description) FROM Other_Available_Features AS T1        ", "inferred_question": "What are the descriptions of other features with minimum description?", "score": -44.34716033935547, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.10614390825943543, "beam_bleu_score": 0.29033200700249506}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.apt_feature_1) FROM Properties AS T1        ", "inferred_question": "What are the first apartment features of properties with minimum first apartment feature?", "score": -45.51510238647461, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.15101282524752146, "beam_bleu_score": 0.22801645987733496}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT avg( T1.feature_name) FROM Other_Available_Features AS T1        ", "inferred_question": "What is the average name of all other features?", "score": -45.864646911621094, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.14833080135829935, "beam_bleu_score": 0.3644284467631351}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT min( T1.oth_feature_1) FROM Properties AS T1        ", "inferred_question": "What are the first other features of properties with minimum first other feature?", "score": -46.27570343017578, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.1790647294586769, "beam_bleu_score": 0.2534387128092043}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT max( T1.feature_name) FROM Other_Available_Features AS T1        ", "inferred_question": "What are the names of other features with maximum name?", "score": -46.84181594848633, "correct_code": "SELECT count(*) FROM Other_Available_Features", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.13444307115591136, "beam_bleu_score": 0.3798200560622191}], "db_name": "real_estate_properties", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
{"index": 1031, "beams": [{"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "inferred_question": "What are the names of feature types of other features whose name is aircon?", "score": 85.2189712524414, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": true, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6030195392299489, "beam_bleu_score": 0.5031267855948891}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING count( T2.feature_name) = 'AirCon'     ", "inferred_question": "", "score": 49.8509635925293, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_type_name = 'AirCon'       ", "inferred_question": "What are the names of other features with feature types whose name is aircon?", "score": 47.80654525756836, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5288238629448632, "beam_bleu_score": 0.4769929696873426}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1 WHERE T1.feature_name = 'AirCon'       ", "inferred_question": "What are the names of other features whose name is aircon?", "score": 46.64125061035156, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4453600353380245, "beam_bleu_score": 0.4716315757403448}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT avg( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "inferred_question": "What is the average name of all feature types of other features whose name is aircon?", "score": 44.9486198425293, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.6234807710117871, "beam_bleu_score": 0.46166301268694854}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING avg( T2.feature_name) = 'AirCon'     ", "inferred_question": "", "score": 44.709476470947266, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT max( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "inferred_question": "What are the names of feature types of other features whose name is aircon with maximum name?", "score": 43.69265365600586, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4965109275090124, "beam_bleu_score": 0.398863027535564}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT count( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "inferred_question": "How many names of feature types of other features whose name is aircon are there?", "score": 43.29347229003906, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.4101541840918733, "beam_bleu_score": 0.41625791888521796}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING max( T2.feature_name) = 'AirCon'     ", "inferred_question": "", "score": 38.87400436401367, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT sum( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "inferred_question": "What is the total name of all feature types of other features whose name is aircon?", "score": 38.0297966003418, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5829861341631947, "beam_bleu_score": 0.4729942735037862}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT min( T1.feature_type_name) FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "inferred_question": "What are the names of feature types of other features whose name is aircon with minimum name?", "score": 37.1176643371582, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.502282203807696, "beam_bleu_score": 0.398863027535564}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING min( T2.feature_name) = 'AirCon'     ", "inferred_question": "", "score": 34.7418098449707, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code  GROUP BY T2.feature_type_code HAVING sum( T2.feature_name) = 'AirCon'     ", "inferred_question": "", "score": 33.939170837402344, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": true, "beam_sql2ot_fail": true, "beam_nubia_score": 0, "beam_bleu_score": 0}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_name FROM Other_Available_Features AS T1 WHERE T1.feature_type_code = 'AirCon'       ", "inferred_question": "What are the names of other features whose feature_type_code is aircon?", "score": 31.64295196533203, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.46952127509783903, "beam_bleu_score": 0.48848360138943336}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT T1.feature_type_code FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       ", "inferred_question": "What are the ids of feature types of other features whose name is aircon?", "score": 27.20343780517578, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "is_correct_ot": false, "beam_ot3_fail": false, "beam_sql2ot_fail": false, "beam_nubia_score": 0.5785531540165286, "beam_bleu_score": 0.5172036577494751}], "db_name": "real_estate_properties", "gold_sql2ot_fail": false, "gold_ot3_fail": false}
